<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>code record</title>
    <url>/Blog/14-12-07-coderecord/</url>
    <content><![CDATA[<p>String:<br>String.format<br>str.trim();&#x2F;&#x2F; 返回 去前导 尾部空格 的字符串<br>import java.util.StringTokenizer;&#x2F;&#x2F;P113<br>StringTokenizer(String str,String delim);&#x2F;&#x2F;str 要去除空格的字符串 delim要去除的字符 返回去除后结果<br>StringBuffer<br>str.replaceAll(String regex,String replacement);&#x2F;&#x2F;正则表达式<br>str.replace(String regex,String replacement);&#x2F;&#x2F;字符(串)的替换<br>str.replaceFirst(regex,replacement);<br>str.split(delim);&#x2F;&#x2F;会分出 无长字符<br>str.matches(String regex);&#x2F;&#x2F;判断是否正则表达式<br>汉子匹配P133</p>
<p>StringBuilder:<br>.append(String str);<br>.append(StringBuffer str);<br>.insert(int offset,String str);</p>
<p>时间:<br>System.currentTimeMillis();&#x2F;&#x2F;系统时间<br>Date date &#x3D; new Date(); &#x2F;&#x2F; 创建Date对象date</p>
<p>多个类文件前面要加package com.lzw;</p>
<p>import java.text.DecimalFormat;<br>DecimalFormat myFormat &#x3D; new DecimalFormat(pattern);&#x2F;&#x2F; 实例化DecimalFormat对象<br>String output &#x3D; myFormat.format(value);<br>System.out.println(Object X)-&gt;调用String.valueof(X)-&gt;X.toString();&#x2F;&#x2F;<br>自定义Class 调用Object默认的equals<br>getClass().getName();</p>
<p>不定长<br>    public static int add(int… a) { &#x2F;&#x2F; 定义不定长参数方法<br>        int s &#x3D; 0;<br>        for (int i &#x3D; 0; i &lt; a.length; i++)<br>            &#x2F;&#x2F; 根据参数个数做循环操作<br>            s +&#x3D; a[i]; &#x2F;&#x2F; 将每个参数累加<br>        return s; &#x2F;&#x2F; 将计算结果返回<br>    }<br>add(1,2, 3,4, 5,6, 7, 8, 9);</p>
<p>10.10 接口 向上转型</p>
<p>A instanceof B;A和B的关系要是 A extends B or B extends A&#x2F;&#x2F;返回A是否为B的子类<br>抽象类不能实例化</p>
<p>new innerClass 11.07;<br>接口向上转型 直接调用内部类 11.08<br>e.printStackTrace;&#x2F;&#x2F;catch (MyException e) </p>
<p>WindowConstants.DISPOSE_ON_CLOSE<br>||<br>JFrame.DISPOSE_ON_CLOSE</p>
<p>数据库:<br>加入数据<br>String sql&#x3D; insert into tb_users (username,password,sex,age) values(‘adf’,’111’,’nan’,’22’)<br>Statement stmt &#x3D; conn.createStatement();<br>stmt.executeUpdate(sql);</p>
<p>String Sql &#x3D;insert into tb_users (username,password,sex,age)value(?,?,?,?);<br>PreparedStatement ps &#x3D;conn.prepareStatement(sql);<br>ps.setString(1,””);<br>ps.setString(2,””);<br>ps.setString(3,””);<br>ps.executeUpdate();<br>获得数据<br>String sql&#x3D;select * from tb_users;<br>Statement stmt &#x3D; conn.createStatement();<br>ResultSet rs &#x3D;stmt.executeQuery(sql);<br>while(rs.next()){<br>    &#x3D;rs.getInt(“id”);<br>    &#x3D;rs.getStringInt(2);<br>    &#x3D;rs.getString(“password”);<br>    &#x3D;rs.getInt(4);<br>}</p>
<p>更改数据<br>String sql&#x3D;”update tb_users set age&#x3D;20 where id&#x3D;1”<br>Statement stmt &#x3D; conn.createStatement();<br>stmt.executeUpdate(sql);</p>
<p>String sql&#x3D;”update tb_users set password&#x3D;? where sex&#x3D;?”<br>PreparedStatement ps&#x3D;conn.prepareStatement(sql);<br>ps.setString(1,”admin”);<br>ps.setString(2,”nan”);<br>int count&#x3D;ps.executeUpdate();<br>删除数据<br>String sql&#x3D;”delete from tb_users where id&#x3D;1”<br>Statement stmt&#x3D;conn.createStatement();<br>stmt.executeUpdate;<br>模糊查询<br>Statement stmt&#x3D;conn.createStatement();<br>String sql&#x3D;”select * from tb_users where username like ‘%李%’”;&#x2F;&#x2F;通配符%&#x3D;0个或多个字符 下划线_&#x3D;一个字符<br>ResultSet rs &#x3D;stmt.executeQuery(sql);<br>while(rs.next()){<br>    &#x3D;rs.getInt(“id”);<br>    &#x3D;rs.getStringInt(2);<br>    &#x3D;rs.getString(“password”);<br>    &#x3D;rs.getInt(4);<br>}</p>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>aoyoulogo</title>
    <url>/Blog/15-06-11-aoyoulogo/</url>
    <content><![CDATA[<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS3 ao you logo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">* &#123;<span class="attribute">margin</span>:<span class="number">0</span>; <span class="attribute">padding</span>:<span class="number">0</span>&#125; </span></span><br><span class="line"><span class="language-css"><span class="selector-class">.main</span> &#123;<span class="attribute">width</span>:<span class="number">240px</span>;<span class="attribute">margin</span>: <span class="number">0px</span> auto;&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.main_wrapper</span> &#123;<span class="attribute">width</span>:<span class="number">240px</span>; <span class="attribute">height</span>:<span class="number">240px</span>; <span class="attribute">border-radius</span>:<span class="number">120px</span>; <span class="attribute">background</span>:<span class="number">#B1E4FF</span>; <span class="attribute">border</span>:<span class="number">2px</span> solid <span class="number">#789CB6</span>; <span class="attribute">box-shadow</span>:<span class="number">5px</span> <span class="number">5px</span> <span class="number">7px</span> <span class="number">#999</span>&#125; </span></span><br><span class="line"><span class="language-css"><span class="selector-class">.main_wrap</span> &#123;<span class="attribute">width</span>:<span class="number">230px</span>; <span class="attribute">height</span>:<span class="number">230px</span>; <span class="attribute">border-radius</span>:<span class="number">115px</span>; <span class="attribute">position</span>:relative; <span class="attribute">top</span>:<span class="number">5px</span>; <span class="attribute">left</span>:<span class="number">5px</span>; <span class="attribute">background</span>:<span class="number">#3B99E3</span>&#125; </span></span><br><span class="line"><span class="language-css"><span class="selector-class">.white_1</span> &#123;<span class="attribute">width</span>:<span class="number">150px</span>; <span class="attribute">height</span>:<span class="number">100px</span>; <span class="attribute">background</span>:<span class="number">#FFF</span>; <span class="attribute">position</span>:relative; <span class="attribute">left</span>:<span class="number">42px</span>; <span class="attribute">top</span>:<span class="number">70px</span>; <span class="attribute">border-radius</span>:<span class="number">3px</span> <span class="number">20px</span> <span class="number">3px</span> <span class="number">3px</span>&#125; </span></span><br><span class="line"><span class="language-css"><span class="selector-class">.white_2</span> &#123;<span class="attribute">width</span>:<span class="number">35px</span>; <span class="attribute">height</span>:<span class="number">45px</span>; <span class="attribute">background</span>:<span class="number">#FFF</span>; <span class="attribute">position</span>:relative; <span class="attribute">left</span>:<span class="number">33px</span>; <span class="attribute">top</span>:<span class="number">30px</span>; <span class="attribute">border</span>:<span class="number">25px</span> solid <span class="number">#3B99E3</span>&#125; </span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main_wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main_wrap&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;white_1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;white_2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>css背景切换练习</title>
    <url>/Blog/15-06-12-switchbackground/</url>
    <content><![CDATA[
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;htmllang=&quot;en-US&quot;&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    	&lt;title&gt;CSS3 Full Background Slider &lt;/title&gt;</span><br><span class="line">        &lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">            @importurl(&quot;http://www.w3cplus.com/demo/css3/base.css&quot;);</span><br><span class="line">            @importurl(&quot;http://fonts.googleapis.com/css?family=Yesteryear&quot;);</span><br><span class="line">            html,body &#123;</span><br><span class="line">            height: 100%;</span><br><span class="line">            margin:0px;</span><br><span class="line">            &#125;</span><br><span class="line">            /*设置背景图片全屏显示，并且居中*/</span><br><span class="line">            img.bg &#123;</span><br><span class="line">            min-height: 100%;</span><br><span class="line">            min-width: 1024px;</span><br><span class="line">            width: 100%;</span><br><span class="line">            height: auto !important;</span><br><span class="line">            height: 100%;</span><br><span class="line">            position: fixed;</span><br><span class="line">            top: 0;</span><br><span class="line">            left: 0;</span><br><span class="line">            z-index:1;</span><br><span class="line">            &#125;</span><br><span class="line">            /*设置背景图片从左向右移入显示的动画效果*/</span><br><span class="line">            /* Slide Left */</span><br><span class="line">            </span><br><span class="line">            @-webkit-keyframes &#x27;slideLeft&#x27; &#123;</span><br><span class="line">            	0% &#123; left: -100%; &#125;</span><br><span class="line">            	100% &#123; left: 0; &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            @-moz-keyframes &#x27;slideLeft&#x27; &#123;</span><br><span class="line">            	0% &#123; left: -100%; &#125;</span><br><span class="line">            	100% &#123; left: 0; &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            @-o-keyframes &#x27;slideLeft&#x27; &#123;</span><br><span class="line">            	0% &#123; left: -100%; &#125;</span><br><span class="line">            	100% &#123; left: 0; &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            @-ms-keyframes &#x27;slideLeft&#x27; &#123;</span><br><span class="line">            	0% &#123; left: -100%; &#125;</span><br><span class="line">            	100% &#123; left: 0; &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            @keyframes &#x27;slideLeft&#x27; &#123;</span><br><span class="line">            	0% &#123; left: -100%; &#125;</span><br><span class="line">            	100% &#123; left: 0; &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            /*设置背景图像从底部向顶部移入的动画效果*/</span><br><span class="line">             /* Slide Bottom */</span><br><span class="line">            </span><br><span class="line">            @-webkit-keyframes &#x27;slideBottom&#x27; &#123;</span><br><span class="line">            	0% &#123; top: 350px; &#125;</span><br><span class="line">            	100% &#123; top: 0; &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            @-moz-keyframes &#x27;slideBottom&#x27; &#123;</span><br><span class="line">            	0% &#123; top: 350px; &#125;</span><br><span class="line">            	100% &#123; top: 0; &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            @-ms-keyframes &#x27;slideBottom&#x27; &#123;</span><br><span class="line">            	0% &#123; top: 350px; &#125;</span><br><span class="line">            	100% &#123; top: 0; &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            @-o-keyframes &#x27;slideBottom&#x27; &#123;</span><br><span class="line">            	0% &#123; top: 350px; &#125;</span><br><span class="line">            	100% &#123; top: 0; &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            @keyframes &#x27;slideBottom&#x27; &#123;</span><br><span class="line">            	0% &#123; top: 350px; &#125;</span><br><span class="line">            	100% &#123; top: 0; &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            /*设置背景图片由小到大放大动画效果*/</span><br><span class="line">            /* Zoom In */</span><br><span class="line">            </span><br><span class="line">            @-webkit-keyframes &#x27;zoomIn&#x27; &#123;</span><br><span class="line">            	0% &#123; -webkit-transform: scale(0.1); &#125;</span><br><span class="line">            	100% &#123; -webkit-transform: none; &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            @-moz-keyframes &#x27;zoomIn&#x27; &#123;</span><br><span class="line">            	0% &#123; -moz-transform: scale(0.1); &#125;</span><br><span class="line">            	100% &#123; -moz-transform: none; &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            @-ms-keyframes &#x27;zoomIn&#x27; &#123;</span><br><span class="line">            	0% &#123; -ms-transform: scale(0.1); &#125;</span><br><span class="line">            	100% &#123; -ms-transform: none; &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            @-o-keyframes &#x27;zoomIn&#x27; &#123;</span><br><span class="line">            	0% &#123; -o-transform: scale(0.1); &#125;</span><br><span class="line">            	100% &#123; -o-transform: none; &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            @keyframes &#x27;zoomIn&#x27; &#123;</span><br><span class="line">            	0% &#123; transform: scale(0.1); &#125;</span><br><span class="line">            	100% &#123; transform: none; &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            /*设置背景图像由大到小缩小动画效果*/</span><br><span class="line">            /* Zoom Out */</span><br><span class="line">            </span><br><span class="line">            @-webkit-keyframes &#x27;zoomOut&#x27; &#123;</span><br><span class="line">            	0% &#123; -webkit-transform: scale(2); &#125;</span><br><span class="line">            	100% &#123; -webkit-transform: none; &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            @-moz-keyframes &#x27;zoomOut&#x27; &#123;</span><br><span class="line">            	0% &#123; -moz-transform: scale(2); &#125;</span><br><span class="line">            	100% &#123; -moz-transform: none; &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            @-ms-keyframes &#x27;zoomOut&#x27; &#123;</span><br><span class="line">            	0% &#123; -ms-transform: scale(2); &#125;</span><br><span class="line">            	100% &#123; -ms-transform: none; &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            @-o-keyframes &#x27;zoomOut&#x27; &#123;</span><br><span class="line">            	0% &#123; -o-transform: scale(2); &#125;</span><br><span class="line">            	100% &#123; -o-transform: none; &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            @keyframes &#x27;zoomOut&#x27; &#123;</span><br><span class="line">            	0% &#123; transform: scale(2); &#125;</span><br><span class="line">            	100% &#123; transform: none; &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            /*背景图像旋转出现动画效果*/</span><br><span class="line">            /* Rotate */</span><br><span class="line">            </span><br><span class="line">            @-webkit-keyframes &#x27;rotate&#x27; &#123;</span><br><span class="line">            	0% &#123; -webkit-transform: rotate(-360deg) scale(0.1); &#125;</span><br><span class="line">            	100% &#123; -webkit-transform: none; &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            @-moz-keyframes &#x27;rotate&#x27; &#123;</span><br><span class="line">            	0% &#123; -moz-transform: rotate(-360deg) scale(0.1); &#125;</span><br><span class="line">            	100% &#123; -moz-transform: none; &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            @-ms-keyframes &#x27;rotate&#x27; &#123;</span><br><span class="line">            	0% &#123; -ms-transform: rotate(-360deg) scale(0.1); &#125;</span><br><span class="line">            	100% &#123; -ms-transform: none; &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            @-o-keyframes &#x27;rotate&#x27; &#123;</span><br><span class="line">            	0% &#123; -o-transform: rotate(-360deg) scale(0.1); &#125;</span><br><span class="line">            	100% &#123; -o-transform: none; &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            @keyframes &#x27;rotate&#x27; &#123;</span><br><span class="line">            	0% &#123; transform: rotate(-360deg) scale(0.1); &#125;</span><br><span class="line">            	100% &#123; transform: none; &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            /*设置背景图像不显示动画效果*/</span><br><span class="line">            @-webkit-keyframes &#x27;notTarget&#x27; &#123;</span><br><span class="line">            	0% &#123; z-index: 75; &#125;</span><br><span class="line">            	100% &#123; z-index: 75; &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            @-moz-keyframes &#x27;notTarget&#x27; &#123;</span><br><span class="line">            	0% &#123; z-index: 75; &#125;</span><br><span class="line">            	100% &#123; z-index: 75; &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            @-ms-keyframes &#x27;notTarget&#x27; &#123;</span><br><span class="line">            	0% &#123; z-index: 75; &#125;</span><br><span class="line">            	100% &#123; z-index: 75; &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            @-o-keyframes &#x27;notTarget&#x27; &#123;</span><br><span class="line">            	0% &#123; z-index: 75; &#125;</span><br><span class="line">            	100% &#123; z-index: 75; &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            @keyframes &#x27;notTarget&#x27; &#123;</span><br><span class="line">            	0% &#123; z-index: 75; &#125;</span><br><span class="line">            	100% &#123; z-index: 75; &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            .slider &#123;</span><br><span class="line">            position: absolute;</span><br><span class="line">            width: 100%;</span><br><span class="line">            text-align: center;</span><br><span class="line">            z-index: 9999;</span><br><span class="line">            bottom: 100px;</span><br><span class="line">            &#125;</span><br><span class="line">            .slider li &#123;</span><br><span class="line">            display: inline-block;</span><br><span class="line">            width: 170px;</span><br><span class="line">            height: 130px;</span><br><span class="line">            margin-right: 15px;</span><br><span class="line">            &#125;</span><br><span class="line">            .slider a &#123;</span><br><span class="line">            display: inline-block;</span><br><span class="line">            width: 170px;</span><br><span class="line">            padding-top: 70px;</span><br><span class="line">            padding-bottom: 20px;</span><br><span class="line">            position: relative;</span><br><span class="line">            cursor: pointer;</span><br><span class="line">            border: 2px solid #fff;</span><br><span class="line">            border-radius: 5px;</span><br><span class="line">            vertical-align: top;</span><br><span class="line">            color: #fff;</span><br><span class="line">            text-decoration: none;</span><br><span class="line">            font-size: 22px;</span><br><span class="line">            font-family: &#x27;Yesteryear&#x27;, cursive;</span><br><span class="line">            text-shadow: -1px -1px 1px rgba(0, 0, 0, 0.8),-2px -2px 1px rgba(0, 0, 0, 0.3),-3px -3px 1px rgba(0, 0, 0, 0.3);</span><br><span class="line">            &#125;</span><br><span class="line">            /*任务一、设置不同列表的背景色*/</span><br><span class="line">            </span><br><span class="line">            .slider ul li:nth-of-type(1) a&#123;</span><br><span class="line">            background-color: #02646e;</span><br><span class="line">            &#125;</span><br><span class="line">            .slider ul li:nth-of-type(2) a&#123;</span><br><span class="line">            background-color: #eb0837;</span><br><span class="line">            &#125;</span><br><span class="line">            .slider ul li:nth-of-type(3) a&#123;</span><br><span class="line">            background-color: #67b374;</span><br><span class="line">            &#125;</span><br><span class="line">            .slider ul li:nth-of-type(4) a&#123;</span><br><span class="line">            background-color: #e6674a;</span><br><span class="line">            &#125;    </span><br><span class="line">            .slider ul li:nth-of-type(5) a&#123;</span><br><span class="line">            background-color: #e61061;</span><br><span class="line">            &#125;</span><br><span class="line">            /*任务二、设置缩略图形状*/</span><br><span class="line">            .slider li a::after&#123;</span><br><span class="line">            content:&quot;&quot;;</span><br><span class="line">            display: block;</span><br><span class="line">            height: 120px;</span><br><span class="line">            width: 120px;</span><br><span class="line">            border: 5px solid #fff;</span><br><span class="line">            border-radius: 50%;</span><br><span class="line">            position: absolute;</span><br><span class="line">            left: 50%;</span><br><span class="line">            margin-left: -60px;</span><br><span class="line">            z-index: 9999;</span><br><span class="line">            top: -80px;</span><br><span class="line">            &#125;</span><br><span class="line">            /*任务三、设置缩略图背景图像*/</span><br><span class="line">            .slider li:nth-of-type(1) a::after&#123;</span><br><span class="line">            background: url(http://p4.gexing.com/G1/M00/FB/8B/rBACFFI7u2uAcq4hAAEv1xanw5U252_200x200_3.png) no-repeat center;</span><br><span class="line">            &#125;</span><br><span class="line">            .slider li:nth-of-type(2) a::after&#123;</span><br><span class="line">            background: url(http://p3.gexing.com/G1/M00/69/21/rBACE1IHPUqBNBNYAAAU5l5wy0A616_200x200_3.jpg) no-repeat center;</span><br><span class="line">            &#125;</span><br><span class="line">            .slider li:nth-of-type(3) a::after&#123;</span><br><span class="line">            background: url(http://p2.gexing.com/G1/M00/67/3B/rBACFFIHj6fDFir7AAAhiX6dWfU282_200x200_3.jpg) no-repeat center;</span><br><span class="line">            &#125;</span><br><span class="line">            .slider li:nth-of-type(4) a::after&#123;</span><br><span class="line">            background: url(http://p3.gexing.com/G1/M00/34/D7/rBACE1H571HghyoyAAAVy0AOsB4191_200x200_3.jpg) no-repeat center;</span><br><span class="line">            &#125;</span><br><span class="line">            .slider li:nth-of-type(5) a::after&#123;</span><br><span class="line">            background: url(http://p3.gexing.com/G1/M00/A2/33/rBACFFIXQTazRAqrAAAWv2gMpjs851_200x200_3.jpg) no-repeat center;</span><br><span class="line">            &#125;</span><br><span class="line">            /*任务四、给缩略图添加蒙板效果*/</span><br><span class="line">            .slider li a::before&#123;</span><br><span class="line">            content:&quot;&quot;;</span><br><span class="line">            display: block;</span><br><span class="line">            height: 120px;</span><br><span class="line">            width: 120px;</span><br><span class="line">            border: 5px solid #fff;</span><br><span class="line">            border-radius: 50%;</span><br><span class="line">            position: absolute;</span><br><span class="line">            left: 50%;</span><br><span class="line">            margin-left: -60px;</span><br><span class="line">            z-index: 99999;</span><br><span class="line">            top: -80px;</span><br><span class="line">            background: rgba(0,0,0,0.3);</span><br><span class="line">            &#125;</span><br><span class="line">            /*任务五、鼠标悬浮时，修改缩略图蒙板透明度*/</span><br><span class="line">            .slider li:hover a::before&#123;</span><br><span class="line">            opacity:0;</span><br><span class="line">            &#125;</span><br><span class="line">            /*任务六、点击综略图，切换背景图*/</span><br><span class="line">            /*背景图从左向右出现*/</span><br><span class="line">            :target[class*=slideLeft]&#123;</span><br><span class="line">            	z-index: 100;</span><br><span class="line">            	-webkit-animation-name: slideLeft;</span><br><span class="line">            	-webkit-animation-duration: 1s;</span><br><span class="line">            	-webkit-animation-iteration-count: 1;</span><br><span class="line">            	-moz-animation-name: slideLeft;</span><br><span class="line">            	-moz-animation-duration: 1s;</span><br><span class="line">            	-moz-animation-iteration-count: 1;</span><br><span class="line">            	-ms-animation-name: slideLeft;</span><br><span class="line">            	-ms-animation-duration: 1s;</span><br><span class="line">            	-ms-animation-iteration-count: 1;</span><br><span class="line">            	-o-animation-name: slideLeft;</span><br><span class="line">            	-o-animation-duration: 1s;</span><br><span class="line">            	-o-animation-iteration-count: 1;</span><br><span class="line">            	animation-name: slideLeft;</span><br><span class="line">            	animation-duration: 1s;</span><br><span class="line">            	animation-iteration-count: 1;</span><br><span class="line">            &#125;</span><br><span class="line">            /*背景图从下向上出现*/</span><br><span class="line">            :target[class*=slideBottom]&#123;</span><br><span class="line">            	z-index: 100;</span><br><span class="line">            </span><br><span class="line">            	-webkit-animation-name: slideBottom;</span><br><span class="line">            	-webkit-animation-duration: 1s;</span><br><span class="line">            	-webkit-animation-iteration-count: 1;</span><br><span class="line">            	-moz-animation-name: slideBottom;</span><br><span class="line">            	-moz-animation-duration: 1s;</span><br><span class="line">            	-moz-animation-iteration-count: 1;</span><br><span class="line">            	-ms-animation-name: slideBottom;</span><br><span class="line">            	-ms-animation-duration: 1s;</span><br><span class="line">            	-ms-animation-iteration-count: 1;</span><br><span class="line">            	-o-animation-name: slideBottom;</span><br><span class="line">            	-o-animation-duration: 1s;</span><br><span class="line">            	-o-animation-iteration-count: 1;</span><br><span class="line">            animation-name: slideBottom;</span><br><span class="line">            	animation-duration: 1s;</span><br><span class="line">            	animation-iteration-count: 1;</span><br><span class="line">            &#125;</span><br><span class="line">            /*背景图由小到大出现*/</span><br><span class="line">            :target[class*=zoomIn]&#123;</span><br><span class="line">            	z-index: 100;</span><br><span class="line">            	-webkit-animation-name: zoomIn;</span><br><span class="line">            	-webkit-animation-duration: 1s;</span><br><span class="line">            	-webkit-animation-iteration-count: 1;</span><br><span class="line">            	-moz-animation-name: zoomIn;</span><br><span class="line">            	-moz-animation-duration: 1s;</span><br><span class="line">            	-moz-animation-iteration-count: 1;</span><br><span class="line">            	-ms-animation-name: zoomIn;</span><br><span class="line">            	-ms-animation-duration: 1s;</span><br><span class="line">            	-ms-animation-iteration-count: 1;</span><br><span class="line">            	-o-animation-name: zoomIn;</span><br><span class="line">            	-o-animation-duration: 1s;</span><br><span class="line">            	-o-animation-iteration-count: 1;</span><br><span class="line">            	animation-name: zoomIn;</span><br><span class="line">            	animation-duration: 1s;</span><br><span class="line">            	animation-iteration-count: 1;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            /*背景图由大到小出现*/</span><br><span class="line">            :target[class*=zoomOut]&#123;</span><br><span class="line">            	z-index: 100;</span><br><span class="line">            	-webkit-animation-name: zoomOut;</span><br><span class="line">            	-webkit-animation-duration: 1s;</span><br><span class="line">            	-webkit-animation-iteration-count: 1;</span><br><span class="line">            	-moz-animation-name: zoomOut;</span><br><span class="line">            	-moz-animation-duration: 1s;</span><br><span class="line">            	-moz-animation-iteration-count: 1;</span><br><span class="line">            	-ms-animation-name: zoomOut;</span><br><span class="line">            	-ms-animation-duration: 1s;</span><br><span class="line">            	-ms-animation-iteration-count: 1;</span><br><span class="line">            	-o-animation-name: zoomOut;</span><br><span class="line">            	-o-animation-duration: 1s;</span><br><span class="line">            	-o-animation-iteration-count: 1;</span><br><span class="line">            	animation-name: zoomOut;</span><br><span class="line">            	animation-duration: 1s;</span><br><span class="line">            	animation-iteration-count: 1;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            /*背景图旋转出现*/</span><br><span class="line">            :target[class*=rotate]&#123;</span><br><span class="line">            	z-index: 100;</span><br><span class="line">            	-webkit-animation-name: rotate;</span><br><span class="line">            	-webkit-animation-duration: 1s;</span><br><span class="line">            	-webkit-animation-iteration-count: 1;</span><br><span class="line">            	-moz-animation-name: rotate;</span><br><span class="line">            	-moz-animation-duration: 1s;</span><br><span class="line">            	-moz-animation-iteration-count: 1;</span><br><span class="line">            	-ms-animation-name: rotate;</span><br><span class="line">            	-ms-animation-duration: 1s;</span><br><span class="line">            	-ms-animation-iteration-count: 1;</span><br><span class="line">            	-o-animation-name: rotate;</span><br><span class="line">            	-o-animation-duration: 1s;</span><br><span class="line">            	-o-animation-iteration-count: 1;</span><br><span class="line">            	animation-name: rotate;</span><br><span class="line">            	animation-duration: 1s;</span><br><span class="line">            	animation-iteration-count: 1;</span><br><span class="line">            &#125;</span><br><span class="line">            /*任务七、设置不显示的背景图层级*/</span><br><span class="line">            /* Not Target */</span><br><span class="line">            </span><br><span class="line">            img:not(:target)&#123;</span><br><span class="line">            	-webkit-animation-name: notTarget;</span><br><span class="line">            	-webkit-animation-duration: 1s;</span><br><span class="line">            	-webkit-animation-iteration-count: 1;</span><br><span class="line">            	-moz-animation-name: notTarget;</span><br><span class="line">            	-moz-animation-duration: 1s;</span><br><span class="line">            	-moz-animation-iteration-count: 1;</span><br><span class="line">            	-ms-animation-name: notTarget;</span><br><span class="line">            	-ms-animation-duration: 1s;</span><br><span class="line">            	-ms-animation-iteration-count: 1;</span><br><span class="line">            	-o-animation-name: notTarget;</span><br><span class="line">            	-o-animation-duration: 1s;</span><br><span class="line">            	-o-animation-iteration-count: 1;</span><br><span class="line">            	animation-name: notTarget;</span><br><span class="line">            	animation-duration: 1s;</span><br><span class="line">            	animation-iteration-count: 1;</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/style&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div class=&quot;slider&quot;&gt;</span><br><span class="line">            &lt;ul class=&quot;clearfix&quot;&gt;</span><br><span class="line">            	&lt;li&gt;&lt;a href=&quot;#bg1&quot;&gt;_(:з」∠)_&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        		&lt;li&gt;&lt;a href=&quot;#bg2&quot;&gt;(●´∀‘●)&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        		&lt;li&gt;&lt;a href=&quot;#bg3&quot;&gt;(。・`ω´・)&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        		&lt;li&gt;&lt;a href=&quot;#bg4&quot;&gt;(〃∇〃)&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        		&lt;li&gt;&lt;a href=&quot;#bg5&quot;&gt;（╯&#x27; - &#x27;)╯︵ ┻━┻&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        	&lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;img src=&quot;http://img4.duitang.com/uploads/item/201404/10/20140410201316_4shKU.jpeg&quot; alt=&quot;&quot; class=&quot;bg slideLeft&quot; id=&quot;bg1&quot; /&gt;</span><br><span class="line">        &lt;img src=&quot;http://img5q.duitang.com/uploads/item/201406/01/20140601100050_afKZt.jpeg&quot; alt=&quot;&quot; class=&quot;bg slideBottom&quot; id=&quot;bg2&quot; /&gt;</span><br><span class="line">        &lt;img src=&quot;http://cdn.duitang.com/uploads/item/201404/10/20140410101759_8Wd4T.jpeg&quot; alt=&quot;&quot; class=&quot;bg zoomIn&quot; id=&quot;bg3&quot; /&gt;</span><br><span class="line">        &lt;img src=&quot;http://img5.duitang.com/uploads/item/201404/10/20140410095203_Ey8z3.jpeg&quot; alt=&quot;&quot; class=&quot;bg zoomOut&quot; id=&quot;bg4&quot; /&gt;</span><br><span class="line">        &lt;img src=&quot;http://cdn.duitang.com/uploads/item/201404/10/20140410102139_ZQdPU.jpeg&quot; alt=&quot;&quot; class=&quot;bg rotate&quot; id=&quot;bg5&quot; /&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>Exploiting-The-DRAM-Rowhammer</title>
    <url>/Blog/15-07-20-us-15-Seaborn-Exploiting-The-DRAM-Rowhammer-Bug-To-Gain-Kernel-Privileges/</url>
    <content><![CDATA[<p><a href="https://www.blackhat.com/docs/us-15/materials/us-15-Seaborn-Exploiting-The-DRAM-Rowhammer-Bug-To-Gain-Kernel-Privileges.pdf">Exploiting-The-DRAM-Rowhammer-Bug-To-Gain-Kernel-Privileges.pdf</a>阅读整理</p>
<h2 id="它是什么"><a href="#它是什么" class="headerlink" title="它是什么"></a>它是什么</h2><p>重复行激活可导致相邻的行位翻转</p>
<p>翻转导致可能的权限位变化</p>
<p>2003 paper: “Using Memory Errors to Attack a Virtual Machine”</p>
<ul>
<li>by Sudhakar Govindavajhala, Andrew Appel</li>
<li>Escape from Java VM</li>
</ul>
<p>完全随机的 vs  可控和可重复的</p>
<ul>
<li>触发方式相近</li>
<li>但可重复的能提供更多控制力</li>
</ul>
<p>2014 paper: “Flipping Bits in Memory Without Accessing Them: An Experimental Study of DRAM Disturbance Errors”</p>
<ul>
<li>在一些桌面电脑测试,但它们有ECC – 能强力减轻这种bug</li>
</ul>
<p>DRAM badness by year <a href="https://www.blackhat.com/docs/us-15/materials/us-15-Seaborn-Exploiting-The-DRAM-Rowhammer-Bug-To-Gain-Kernel-Privileges.pdf#12">graph</a></p>
<h2 id="如何触发-x2F-触发方法"><a href="#如何触发-x2F-触发方法" class="headerlink" title="如何触发&#x2F;触发方法"></a>如何触发&#x2F;触发方法</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">code1a:</span><br><span class="line"> mov (X), %eax // Read from address X</span><br><span class="line"> mov (Y), %ebx // Read from address Y</span><br><span class="line"> clflush (X) // Flush cache for address X</span><br><span class="line"> clflush (Y) // Flush cache for address Y</span><br><span class="line"> // mfence // In CMU paper, but not actually needed</span><br><span class="line"> jmp code1a</span><br></pre></td></tr></table></figure>

<p>必要条件1: 绕过cache 直接访问 →  x86 CLFLUSH 指令</p>
<ul>
<li>它是非特权指令</li>
<li>无法禁用它(不像RDTSC)</li>
</ul>
<p>必要条件2: 找到坏行</p>
<ul>
<li>有一些的DRAM的坏行比其它的DRAM多</li>
<li>申请大块内存,尝试很多地址</li>
</ul>
<p>  DRAM 被分成了 banks → 每一个有它当前的行<br>必要条件3: 选中&gt;&#x3D;2个地址</p>
<ul>
<li>映射同一个bank的不同行</li>
<li>行的地址冲突对(CMU 论文用的: Y &#x3D; X + 8MB)</li>
<li>需要能用物理地址</li>
<li>Memtest: 在管理权限下运行 完全在硬件上的</li>
<li>On Linux: 可以使用 &#x2F;proc&#x2F;$PID&#x2F;pagemap</li>
</ul>
<table>
<thead>
<tr>
<th>Row #</th>
<th>Bank 0</th>
<th>Bank 1</th>
<th>Bank 2</th>
<th>…</th>
<th>Bank 7</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td><em><strong>0</strong></em></td>
<td>0x2000</td>
<td>0x4000</td>
<td>…</td>
<td>0xe000</td>
</tr>
<tr>
<td>1</td>
<td>0x10000</td>
<td>0x12000</td>
<td>0x14000</td>
<td>…</td>
<td>0x1e000</td>
</tr>
<tr>
<td>…</td>
<td>…</td>
<td>…</td>
<td>…</td>
<td>…</td>
<td>…</td>
</tr>
<tr>
<td>128…</td>
<td><em><strong>0x800000</strong></em></td>
<td>0x802000</td>
<td>0x804000</td>
<td>…</td>
<td>0x80e000</td>
</tr>
</tbody></table>
<p>如果是随机地址</p>
<ul>
<li>那么有8 banks → 1&#x2F;8 机会导致行冲突</li>
</ul>
<blockquote>
<p>根据上面得出的精炼结论是: 尝试的地址数量 &gt;2 addresses, 比如 4 或 8 个</p>
</blockquote>
<ul>
<li>一次测试更多的行</li>
<li>增加行冲突的机会</li>
<li>硬件通常有多个访问队列</li>
</ul>
<p>Double-sided row hammering</p>
<ul>
<li>激活这两个邻国的一行,不仅仅是少了一个数据</li>
<li>现有的论文还没探索</li>
</ul>
<p>探索出DRAM 地址的映射机制</p>
<ul>
<li>通过位翻转观察</li>
<li>通过时间<br>选择地址</li>
<li>使用物理地址 – 禁用 &#x2F;proc&#x2F;PID&#x2F;pagemap</li>
<li>大页(2MB) – 不被禁用</li>
<li>其它连续的物理块</li>
</ul>
<p>查询DRAM 的SPD 数据 <code>sudo decode-dimms</code></p>
<p>以上理论的结果: <a href="https://github.com/google/rowhammer-test">rowhammer-test</a></p>
<ul>
<li>在用户态运行 申请1GB 等待位翻转</li>
<li>风险:可能破坏其它进程或者内核 在试验中 它也的确发生了</li>
</ul>
<p>它在2014年还测了更多的机器</p>
<blockquote>
<p>根据以上得出的精炼结论是:</p>
</blockquote>
<ul>
<li>难度:易 找到冲突地址对 ( 通过运行一定时间 , 找到坏行更快) 也就是知道映射关系</li>
<li>难度:易 在128ms(2倍行刷新时间)内 真实的产生这个bug ( 通过最大化行刷新时间间隔中的行激活 通过最大化造成坏行的机会(比如上面的一次多行))</li>
<li>难度:较难 能利用(2-sided) ( 需要更多的物理地址知识)</li>
</ul>
<h2 id="如何利用-x2F-可利用性"><a href="#如何利用-x2F-可利用性" class="headerlink" title="如何利用&#x2F;可利用性"></a>如何利用&#x2F;可利用性</h2><p> 系统一直依赖内存</p>
<p> 两个利用的地方</p>
<p> 本地(NaCl)的Chrome 沙箱</p>
<ul>
<li>位翻转会被判为安全代码</li>
<li>可以让chrome读代码来发现位翻转</li>
</ul>
<p> Linux 内核权限提升</p>
<ul>
<li>在页表入口(PTE)翻转</li>
<li>获得页表读写权</li>
</ul>
<p> 密集的数据结构</p>
<blockquote>
<ul>
<li></li>
</ul>
</blockquote>
<p> 本地客户端介绍(NaCl)</p>
<ul>
<li>运行C&#x2F;C++源码的沙箱</li>
<li>Chrome 的一部分</li>
<li>类似Asm.js, 但是代码生成器是不可信的</li>
<li>安全子集的x86——软件故障隔离(x86安全检测,但它允许CLFLUSH指令)</li>
<li>两个变体: PNaCl(on open web. Runs pexe (LLVM bitcode): compiled to nexe by in-browser translator. No CLFLUSH?),NNaCl(in Chrome Web Store. Could use CLFLUSH.)</li>
<li>作者用的是NaCl :-)</li>
</ul>
<h3 id="利用-NaCl"><a href="#利用-NaCl" class="headerlink" title="利用 NaCl"></a>利用 NaCl</h3><p>安全命令序列:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">andl $~31, %eax // Truncate address to 32 bits</span><br><span class="line">                // and mask to be 32-byte-aligned.</span><br><span class="line">addq %r15, %rax // Add %r15, the sandbox base address.</span><br><span class="line">jmp *%rax       // Indirect jump.</span><br></pre></td></tr></table></figure>
<p>NaCl 沙箱模型:</p>
<ul>
<li>防止跳到x86指令中间(意思是比如一条指令是 01 02 03 那么禁止跳到 02 开始的位置)</li>
<li>直接跳转目标只能用32位 对齐地址</li>
</ul>
<p>位翻转导致部安全的方式</p>
<ul>
<li>可能导致允许跳转到非32位对齐的地址</li>
<li>制作很多这个序列的备份 – 动态创代码(找寻位翻转 – 代码可读性)</li>
<li>利用改变寄存器号(13%的位翻转可利用,测试驱动开发)</li>
</ul>
<p>NaCl 沙箱地址空间(1GB~4GB)</p>
<table>
<thead>
<tr>
<th>名</th>
<th>读写执性</th>
<th>大小</th>
</tr>
</thead>
<tbody><tr>
<td>stack (initial thread)</td>
<td>read+write</td>
<td></td>
</tr>
<tr>
<td>available for mmap()</td>
<td>anything but exec</td>
<td></td>
</tr>
<tr>
<td>nexe rwdata segment</td>
<td>read+write</td>
<td>variable size</td>
</tr>
<tr>
<td>nexe rodata segment</td>
<td>read</td>
<td>variable size</td>
</tr>
<tr>
<td><strong>dynamic code area</strong></td>
<td><strong>read+exec</strong></td>
<td><strong>~256MB</strong></td>
</tr>
<tr>
<td>nexe code segment</td>
<td>read+exec</td>
<td>variable size</td>
</tr>
<tr>
<td>NaCl syscall trampolines</td>
<td>read+exec</td>
<td>64k</td>
</tr>
<tr>
<td>zero page</td>
<td>no access</td>
<td>64k</td>
</tr>
</tbody></table>
<p>隐藏不安全代码的方法 in NaCl</p>
<ul>
<li>已存在利用”跳到代码中间”的技术Existing technique for exploiting non-bundle-aligned jump:</li>
</ul>
<p> 20ea0: 48 b8 <strong>0f 05 eb 0c</strong> f4 f4 f4 f4</p>
<p> movabs $0xf4f4f4f40<strong>ceb050f</strong>, %rax</p>
<p>隐藏以后:<br> 20ea2: <strong>0f 05</strong> syscall</p>
<p> 20ea4: <strong>eb 0c</strong> jmp … &#x2F;&#x2F; Jump to next hidden instr</p>
<p> 20ea6: f4 hlt &#x2F;&#x2F; Padding</p>
<p>NaCl 减轻rowhammer的方法</p>
<ul>
<li>不允许 CLFLUSH</li>
<li>也许对Hide code并没办法</li>
</ul>
<h3 id="利用-Kernel"><a href="#利用-Kernel" class="headerlink" title="利用 Kernel"></a>利用 Kernel</h3><p>x86页表条目(PTE)是密集的可信的</p>
<ul>
<li>他们控制物理内存访问权限，位翻转可以导致一个进程有权限访问另一个物理地址</li>
<li>利用的目标: 得到页表访问权-&gt;得到所有物理地址的访问权</li>
<li>尽量增大位翻转的有用性(用页表spray物理地址,先检测有用和可重复的位)</li>
</ul>
<p>x86-64 Page Table Entries (PTEs)</p>
<p>Page table is a 4k page containing array of 512 PTEs</p>
<ul>
<li>Each PTE is 64 bits, containing:  <a href="https://www.blackhat.com/docs/us-15/materials/us-15-Seaborn-Exploiting-The-DRAM-Rowhammer-Bug-To-Gain-Kernel-Privileges.pdf#35">graph</a></li>
</ul>
<p>可以翻转 :</p>
<ul>
<li>2% 的机会 可写位1bit</li>
<li>31% 的机会 物理地址号: 20位&#x2F;4GB 系统</li>
</ul>
<p>What happens when we repeatedly map a file with read-write permissions?</p>
<ol>
<li>PTEs in physical memory help resolve virtual addresses to physical pages.</li>
<li>We can fill physical memory with PTEs. <a href="https://www.blackhat.com/docs/us-15/materials/us-15-Seaborn-Exploiting-The-DRAM-Rowhammer-Bug-To-Gain-Kernel-Privileges.pdf#48">graphs</a></li>
<li>Each of them points to pages in the same physical file mapping.</li>
<li>If a bit in the right place in the PTE flips </li>
<li>the corresponding virtual address now points to a wrong physical page - with RW access.</li>
<li>Chances are this wrong page contains a page table itself.</li>
<li>An attacker that can read &#x2F; write page tables can use that to map any memory read-write.</li>
</ol>
<p>利用策略 (特权提升 7 个简单的步骤)</p>
<ol>
<li>Allocate a large chunk of memory</li>
<li>Search for locations prone to flipping</li>
<li>Check if they fall into the “right spot” in a PTE for allowing the exploit</li>
<li>Return that particular area of memory to the operating system</li>
<li>通过申请大量的地址空间 强迫系统为PTEs重用内存</li>
<li>引起位翻转 即改变PTE的指向</li>
<li>Abuse R&#x2F;W access to all of physical memory In practice, there are many complications.</li>
</ol>
<p>可能出现的问题</p>
<ol>
<li>第6步 如果文件在内存中是连续的一块，有可能我们改变了PTE的指向 但是它任然指向的是文件内部 而非页表的部分 (解决方案:尽力分化文件在内存中所占的位置为分散的)</li>
<li>第5步 很难让系统有规律的为PTE重用内存(作者说:我花了几个下午以某种方式探索Linux物理页分配器。不是很有趣的代码,结论Mark很聪明 他把系统内存压力逼到某个角落 系统表现得很好)</li>
</ol>
<p>减轻rowhammer</p>
<ul>
<li>CMU paper: “The industry has been aware of this problem since at least 2012”</li>
<li>行业打算去减轻,但没有安全通告</li>
<li>ECC(错误纠正机制 一位错纠正 两位错检测 3位以上没有但可能性很小) 但前提是运行的机器使用了ECC 评价:该减轻方案不理想 昂贵 不能保证工作</li>
<li>TRR(目标行刷新) “理想”的方案 统计被激活行的次数 当达到阈值时刷新邻行(LPDDR4在使用，内存控制器pTRR,Intel也说Ivy桥用pTRR 虽然并没找到证据?)</li>
<li>更高的DRAM刷新率,2x刷新率 当前CPU支持 很多厂商BIOS里可以设置这个参数tREFI(怎么验证刷新率？2x就够了么？)</li>
</ul>
<h3 id="我们能利用javascript-搞事情吗-产生rowhammer"><a href="#我们能利用javascript-搞事情吗-产生rowhammer" class="headerlink" title="我们能利用javascript 搞事情吗(产生rowhammer)"></a>我们能利用javascript 搞事情吗(产生rowhammer)</h3><p>通过正常缓存地址的访问在不适用CLFLUSH的情况下</p>
<p>通过生成大量的cache misses</p>
<p>JS的引擎速度不是问题 接近原生的访问数组 比如Asm.js</p>
<p>cache missed 是缓慢的</p>
<p>lavados正在搞这个</p>
<h3 id="引发cache-misses"><a href="#引发cache-misses" class="headerlink" title="引发cache misses"></a>引发cache misses</h3><p>需要在所有cache层 都miss (L1, L2, L3)</p>
<p>Row hammering by accident in benchmarks (see paper)</p>
<p>Not with an inclusive cache</p>
<ul>
<li>被驱逐的cache line 从 L1 L2 L3 都被驱逐</li>
<li>用的是Intel 的CPUs</li>
</ul>
<p>获取cache配置算法&#x2F;找到L3 cache相同的映射关系</p>
<p>比如 12路的 L3 cache 找13个地址 依次访问一定会造成一次miss 见paper: The Spy in the Sandbox – Practical Cache Attacks in Javascript</p>
<ul>
<li>通过一定时间的内存访问</li>
<li>原始动机:L3 cache side channel 攻击</li>
</ul>
<p>Cache 剔除方案</p>
<ul>
<li>LRU 对于 12路cache 每次循环会发生13次misses</li>
<li>减少6.5倍行激活。不理想</li>
<li>理想的是每个迭代2个cache misses</li>
</ul>
<p>真实CPU</p>
<ul>
<li>Sandy Bridge: bit 伪 LRU 1bit&#x2F;1cache line</li>
<li>Ivy Bridge : Quad Age LRU 2bit&#x2F;cache line</li>
<li>增加适应性: “设置决斗(set duelling)”</li>
</ul>
<p>通过 Cache side channel 减弱rowhammer</p>
<ul>
<li>减少时间精度(performance.now()) Changes in Firefox, Chrome, Safari&#x2F;WebKit</li>
</ul>
<p>也许没用</p>
<ul>
<li>用更长的时间还是可以获知cache配置算法</li>
<li>多线程: 建立自己的时钟 ( PNaCl, SharedArrayBuffers in Javascript WebAssembly )</li>
<li>CPU 性能计数器</li>
</ul>
<h2 id="未知"><a href="#未知" class="headerlink" title="未知:"></a>未知:</h2><ul>
<li>ARM 和 移动设备 (cache 组织? CPU性能 和 内存控制器)</li>
<li>损坏 Anecdotal observations</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p> 作为软件层面沙箱越来越吊,攻击者将去玩更深奥的缺陷,如硬件错误</p>
<p> Rowhammer: 不只是可靠性的问题</p>
<p> 难判定硬件达到了标准</p>
<p><a href="https://groups.google.com/group/rowhammer-discuss/">Mailing list</a></p>
<h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p>利用clflUSH可以触发rowhammer，并找出提高触发率的一些访问方式(一轮多组 找冲突对)</p>
<p>通过作者提供的方案步骤可以利用rowhammer</p>
<p>有ECC TRR 提高刷新频率等应对&#x2F;解决&#x2F;减弱的方案</p>
]]></content>
      <categories>
        <category>software</category>
        <category>security</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>rowhammer</tag>
        <tag>security</tag>
        <tag>ram</tag>
      </tags>
  </entry>
  <entry>
    <title>Rowhammer.js</title>
    <url>/Blog/15-07-24-Rowhammer.js_A_Remote_Software-Induced_Fault_Attack_in_JavaScript/</url>
    <content><![CDATA[<p><a href="https://arxiv.org/pdf/1507.06955v5.pdf">Rowhammer.js: A Remote Software-Induced Fault Attack in JavaScript</a>阅读整理 </p>
<ul>
<li>非逐字逐句翻译</li>
<li>序号不完全代表段落</li>
</ul>
<h1 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h1><ol>
<li>概述Rowhammer.</li>
<li>别人要cache flush 指令以及高频率搞DRAM,但我们克服了这个限制,通过利用cache替换法来诱发Rowhammer,并且只用了常规内存访问,这让rowhammer在高严格甚至脚本环境里都能被触发.</li>
<li>我们将演示完全自动攻击,仅需要带JS的网页来引起远端硬件出错,由此我们可以自由的访问网络浏览者的系统,我们表明,攻击在现成的系统上工作。现有对策无法抵御这一新的Rowhammer攻击</li>
</ol>
<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><ol>
<li>利用硬件错误攻击通常需要物理访问改变设备的状态,然而软件诱导是可行的,85% 的 DDR3 块被Kim测试可以诱发位翻转,最近DDR4 也被发现可以被诱发,Seaborn证明了位翻转可以用来提升权限,但这些都用了底层代码并且使用了特殊指令——把cache刷入内存.</li>
<li>如果DRAM是有弱点的,我们可以不用任何特殊指令,仅仅利用常规访问和cache剔除法则在所有架构上实现。因此这是一个通用的,可以被部署在任何体系结构,编程语言,运行环境,只要它允许产生巨大的内存访问流,因此如移除clflush指令的抵抗手段并没有任何卵用。更吊的是,我们将向你展示用JS对远端有弱点的模块上进行攻击。</li>
<li>因为这个攻击通过网页同时并偷偷攻击数以亿计的设备,所以它是个严峻的安全威胁,rowhammer.js 不依赖任何CPU指令,他是第一个远端硬件错误攻击.为了证明我们实现了一个能在所有ff和chrome上运行的js代码.</li>
<li>我们用了4步, 1找两个不同的行的两个地址,2高频率剔除再重载这两个地址,3找寻可利用的位翻转,4利用它(控制页表 远端代码执行)</li>
<li>第3,4 步最近已经解决………但第一二步保持开放的挑战[毕竟要做到任意性还要ff和chrome的解析器适应性和ff和chrome的更新吧orz]</li>
<li>第一步挑战是用js收集物理地址的信息,它是严格沙箱,没可能收集虚拟或物理地址。为了应对这个挑战,我们决定部分物理地址使用大数组,它们被操作系统分配到大页上,我们因此不利用任何的JavaScript或浏览器的弱点,只有利用系统级别的优化.</li>
<li>第二步是找到能替代clflush指令的cache替代策略,老版本CPU简单的访问n+1个地址就足够剔除n路cache。 过去4年 Intel CPU生产的CPU使用Sandy Bridge,替换法则变化了并且没文档.因此已知的剔除策略的乘剔除率降低或者需要相当多的执行时间。为了应对这个挑战，我们提出一个通用的方法来找cache替换策略以此来达到时间和剔除概率的最好性能.我们提出的是目前最好的剔除策略，在现在Intel架构上比以往的一切都做得要好</li>
</ol>
<p>实验装置:</p>
<table>
<thead>
<tr>
<th>Platform</th>
<th>CPU</th>
<th>Architecture</th>
<th>RAM</th>
</tr>
</thead>
<tbody><tr>
<td>Lenovo T420</td>
<td>i5-2540M</td>
<td>Sandy Bridge Corsair DDR3-1333 8 GB and Samsung DDR3-1600 4 GB (2×)</td>
<td></td>
</tr>
<tr>
<td>Lenovo x230</td>
<td>i5-3320M</td>
<td>Ivy Bridge</td>
<td>Samsung DDR3-1600 4 GB (2×)</td>
</tr>
<tr>
<td>Asus H97-Pro</td>
<td>i7-4790</td>
<td>Haswell</td>
<td>Kingston DDR3-1600 8 GB</td>
</tr>
<tr>
<td>ASRock Z170 ITX</td>
<td>i7-6700K</td>
<td>Skylake</td>
<td>G.Skill DDR4-3200 8 GB (2×) and Crucial DDR4-2133 8 GB (2×)erimental setups</td>
</tr>
</tbody></table>
<p><del>羡慕 别人的玩具比我日常使用的电脑还好</del></p>
<ol>
<li>基于这些方法我们使用两阶段攻击未知配置的远端硬件</li>
<li>我们对比了上表列出的机器在固定配置rowhammer攻击下的状况，一些有和期望的样(挂了),另一些降低了刷新速率</li>
<li>至今软件对Rowhammer本机代码袭击的反抗也只是针对特定的利用,如我们所展示的，不足以保护JS的攻击，硬件防护难以部署,因为他们不影响传统的硬件,包括最近脆弱DDR4,BIOS更新可以用来解决这个问题在商品系统中,然而这仅仅是一个高端玩家的实际的解决方案</li>
<li>总之我们的贡献是:</li>
</ol>
<ul>
<li>我们提供第一个完全获取Intel CPU的cache剔除规则的方法,这也有益于更广阔的领域。缓存攻击,缓存无关算法、缓存替换策略。</li>
<li>我们用只访问内存的本地代码实现Rowhammer攻击。攻击在 Sandy Bridge, Ivy Bridge,Haswell and Skylake, 不同的 DDR3 and DDR4 都成功</li>
<li>我们用纯js实现了rowhammer</li>
</ul>
<h1 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h1><ul>
<li>DRAM 介绍</li>
<li>rowhammer 介绍</li>
<li>CPU cache 介绍 以及别人没文档的也被反向工程了,o1表示双核cpu哪个cache来存 [o1,o2]表示4核CPU哪个cache来存,有几款CPU能自适应替换规则orz</li>
<li>Cache Attacks and Cache Eviction Practical attacks on cryptographic algorithms have been explored thoroughly [8,31]. There are two main types of cache attacks called Prime+Probe and Flush+Reload<br> 小总结: 他们的不同缺点:慢,兼容性差,手工循环列,用了反向工程,用了刷cache的指令,低剔除率</li>
</ul>
<h1 id="2阶段剔除策略"><a href="#2阶段剔除策略" class="headerlink" title="2阶段剔除策略"></a>2阶段剔除策略</h1><p> 这是一个完全自动找 Sandy Bridge的cache剔除策略的方法</p>
<p> 基于Prime+Probe并显著提升了cache攻击</p>
<p> CPU 替换法不同影响了剔除集合的大小，访问模式需要建立一个高效的回收策略</p>
<p> 对于伪LRU,访问很多L3 cache相互冲突的目标地址,高可能的剔除,但对于适应性替换法,一个剔除策略可能在一个替换法下有效,在另一个替换法无效, 因此有必要搞一个理想的对两个都有效的并且不会有明显的时间开销</p>
<ol>
<li>静态集合和静态访问:用极短的时间利用cache片函数和物理地址并生成一个预序列.见3.2 3.3</li>
<li>动态集合和静态访问: 自动计算驱逐模式,不用任何系统的知识,例如的核心。良好的访问模式去匹配到目标系统的替换法对于一个成功的攻击是必要的。见3.3</li>
<li>动态集合和动态访问: 自动计算驱逐模式,不用任何系统知识,但需要大量的测试,并可自动攻击未知系统。见3.3</li>
<li>静态集合和动态访问: 使用预定义的集合 但顺序是自动化计算的 在理论上可行[这很理论:-)] 但并没有任何优势. [羡慕严谨_(:з」∠)_非要把四个列出来]</li>
</ol>
<p> 搞了离线[没有文档]和在线[未知系统]</p>
<h1 id="剔除模型"><a href="#剔除模型" class="headerlink" title="剔除模型"></a>剔除模型</h1><p> 成功率来自很多一个mem是否被剔除了的测试</p>
<ol>
<li>在同一个cache上的命中和不命中有可观的影响,我们通过一个剔除算法和添加不一致的随机内存访问来验证,剔除率&#x3D;剔除函数的平均成功率,并且只要时间正常,剔除函数成功率并不会收到添加了随机访问影响,因此,驱逐集只包含一致地址和驱逐策略的有效性取决于驱逐集合大小。</li>
<li>cache无法区别缓存,我们用a_i来表示访问序列,每一个a_i表示一个(一一对应),因此每次通过控制序列来决定访问哪个地址,a_1 a_2 a_3 序列等于任意一个 a_i a_j a_k 只要i,j,k 两两不等,如果在一个循环中运行,不同的内存地址的数量影响驱逐策略的有效性</li>
<li>重复访问同一个地址有必要把它留在cache 里,因为替换法会把旧的cache line 用新的cache line 替换掉 ,把a_1 … a_17序列变成a_1 … a_17 a_17 在Haswell上快了33%,如果重复执行它显著的提升乐剔除率,因为 cache 被我们的驱逐集填满了,但为我们发现一个随着访问同一个地址增多的边际效应递减,对所有地址我们发现到达一个阈值以后随访问增多剔除率在下降,因此 我们搞了S大小的集合剔除策略,但每轮只是该集合D大小的子集访问,再通过一个参数L来引起循环中能有重复的地址访问。</li>
<li>虽然在实际时间(第二类Stirling数 是很好的估计值)内测试所有可能序列甚至很短的序列不太可能,但探索能影响系统的参数是可能的,根据理论,更好的剔除策略不能被这种减少搜索空间方法找到。但用这种方法,我们可以找到有效的能引起rowhammer的驱逐策略.通过系统的比较驱逐策略,我们使用以下代码展示的方法, P:<strong>C-D-L-S</strong>, C决定每轮循环访问每一个内存的次数,D决定每轮访问不同的地址的个数,L是大循环的跳动步长,S是集合大小,比如LRU剔除序列是P:1-1-1-S,也就是a1 a2 a3…aS</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for (s = 0; s &lt;= S -D ; s += L)</span><br><span class="line">  for (c = 0; c &lt;= C; c += 1)</span><br><span class="line">    for (d = 0; d &lt;= D; d += 1)</span><br><span class="line">      *a[ s+d ];</span><br></pre></td></tr></table></figure>

<h2 id="离线测试"><a href="#离线测试" class="headerlink" title="离线测试"></a>离线测试</h2><p>  在离线阶段,攻击者试图学习他控制的一组机器每台最接近的驱逐策略相匹配的替代法。这不是严格意义上的替代法的逆向工程,通过找到最好的剔除策略,攻击者就弄清了系统。在这个阶段,攻击者没有时间限制<br>  我们讨论对Haswell platform 单DIMM单channel 的具体评测,我们测试了6阶 不同的C D L 参数和23种不同的 剔除集合大小,为了找到快且足够有效引起rowhammer的剔除策略,包括相同的剔除策略,我们在我们的3个平台上测试了18293种策略,我们用20 双向 rowhammer 测试测试了每个剔除策略2百万轮(每个策略8千万次) 且 用不同的评估标准对它们进行评估,包括 剔除率 运行时间 cache命中&#x2F;不命中率.总运行时间大于6天. hammering 是对一组固定的物理地址的一个特定的缓存设置的驱逐策略的公平比较.在进行到一半的时候(4千万) 我们测试了剔除率,命中&#x2F;不命中,后一半我们测试剔除的平均时间,我们通过足够多的样本容量验证了可重复的测量<br>  位翻转的数量并不适合作为剔除策略有效性的评判标准,只有判断是否以及如何让cache命中不命中才是有用的,执行时间和剔除率影响一个位翻转的可能性,位翻转在内存位置是可重现的,但是需要的时间和需要访问的次数变化很大,为了测了一个剔除策略的平均访问次数,我们需要用很多小时测试每一个剔除策略,这很难…,它也不会产生可重复的结果,并已经观察到如果一个DRAM被hammer很长时间 它就会永久损坏.<br>  长执行时间引起位翻转太慢,短时间没有好的剔除效率也没什么作用。剔除策略的执行时间和两个victim address的访问次数直接相关,因此它直接影响一个bit的翻转概率,在我们默认配置的Ivy Bridge书上我们观察到每轮hammer导致的位翻转要用1.5ms的执行时间,也就是在总的刷新时间64ms内大约对每个地址21500次访问的数据结果。这与刷新间隔tREFI有关(把64ms分成8192份？),在我们的Haswell测试系统上两路rowhammer只需要60ns通过clfLUSH,也就是64ms进行了每个地址60万次的访问(解释图1a)<br>  解释图1b.99.75%剔除率可以导致81%的位翻转(你们考虑过 Haswell system的感受吗)就是说 剔除率越高越好<br>  解释图1c 1d 的cache hit和cache miss 对位翻转的影响相关性小，真正相关的还是剔除策略<br>  4个图得出的结论是剔除率是一个剔除算法的好的指标,然后再在中间找执行时间少的,并且这种方法需要js这类不需要任何系统接口的</p>
<p>Haswell test system 上的 和clfLUSH(第一行)比较</p>
<table>
<thead>
<tr>
<th>C</th>
<th>D</th>
<th>L</th>
<th>S</th>
<th>Accesses</th>
<th>Hits</th>
<th>Misses</th>
<th>Time (ns)</th>
<th>Eviction</th>
</tr>
</thead>
<tbody><tr>
<td>-</td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>2</td>
<td>2</td>
<td>60</td>
<td>99.9999%</td>
</tr>
<tr>
<td>5</td>
<td>2</td>
<td>2</td>
<td>18</td>
<td>90</td>
<td>34</td>
<td>4</td>
<td>179</td>
<td>99.9624%</td>
</tr>
<tr>
<td>2</td>
<td>2</td>
<td>1</td>
<td>17</td>
<td>68</td>
<td>35</td>
<td>5</td>
<td>180</td>
<td>99.9820%</td>
</tr>
<tr>
<td>2</td>
<td>1</td>
<td>1</td>
<td>17</td>
<td>34</td>
<td>47</td>
<td>5</td>
<td>191</td>
<td>99.8595%</td>
</tr>
<tr>
<td>6</td>
<td>2</td>
<td>2</td>
<td>18</td>
<td>108</td>
<td>34</td>
<td>5</td>
<td>216</td>
<td>99.9365%</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
<td>17</td>
<td>17</td>
<td>96</td>
<td>13</td>
<td>307</td>
<td>74.4593%</td>
</tr>
<tr>
<td>4</td>
<td>2</td>
<td>2</td>
<td>20</td>
<td>80</td>
<td>41</td>
<td>23</td>
<td>329</td>
<td>99.7800%</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
<td>20</td>
<td>20</td>
<td>187</td>
<td>78</td>
<td>934</td>
<td>99.8200%</td>
</tr>
</tbody></table>
<p>  以上测试结果是在LRU上 5-2-2-18和2-2-1-17 只用180ns左右 比较优秀 而并不是1-1-1-20 无论是率还是时间</p>
<p>  并且在eviction 循环里增加内存访问 可以减少时间</p>
<p>  总之新找到的比原来的 时间 和 效率都要强</p>
<p>  然后 还进行了Ivy bridge上的测试 也能高达99%的剔除率 然后也列了相关测试性能好的表 </p>
<p>  Skylake DDR4 上测试不太一样 但它很容易被8核逆向工程函数突破 并且再次发现 LRU剔除方案工作得更糟(1-1-1-X ?)</p>
<h2 id="在线测试"><a href="#在线测试" class="headerlink" title="在线测试"></a>在线测试</h2><p> 目标是未知系统,特别的微体系结构和数量的CPU核都是未知的,攻击者只有离线测试所储备的知识,他在目标机器上没有特权也没有时间去运行广泛的搜索,在线攻击通过两种&#x2F;步:以假设为基础的攻击 和一个备用攻击(如果第一个没有效果的话),这两种 都需要花一些时间 并且没有系统的特殊接口</p>
<p>23: Liu, F., Yarom, Y., Ge, Q., Heiser, G., Lee, R.B.: Last-Level Cache Side-Channel Attacks are Practical. In: S&amp;P’15(2015)</p>
<p>27: Oren, Y., Kemerlis, V.P., Sethumadhavan, S., Keromytis, A.D.: The Spy in the Sandbox: Practical Cache Attacks in JavaScript and their Implications. In: CCS’15 (2015)</p>
<h3 id="Assumption-based-Attack"><a href="#Assumption-based-Attack" class="headerlink" title="Assumption-based Attack"></a>Assumption-based Attack</h3><p>  首先通过时间表现 看看是不是离线测试过的机器中的一种或类似(因为并不能调系统函数来知道是啥) 只要匹配到了 就把之前离线得到的方案拿来试一试 这只需要很短的时间,并且 eviction 集合 可以静态或者动态计算处 我们在别人的基础上搞了一个动态生成集合算法 因此我们的静态算法产生的动态序列能最小化执行时间.</p>
<p> 一个假设是大<strong>大数组占大页</strong>,基于这个假设他们用下面这种 slice pattern 来判断 4核&#x2F;2核 4KB 的slice 和 2MB的page 的映射法</p>
<p>0123 0123 0123 0123 1032 1032 1032 1032 2301 2301 2301 2301 3210 3210 3210 3210<br>1032 1032 1032 1032 0123 0123 0123 0123 3210 3210 3210 3210 2301 2301 2301 2301<br>2301 2301 2301 2301 3210 3210 3210 3210 0123 0123 0123 0123 1032 1032 1032 1032<br>3210 3210 3210 3210 2301 2301 2301 2301 1032 1032 1032 1032 0123 0123 0123 0123</p>
<p> 针对Sandy Bridge architecture</p>
<p> Oren et al. [27] or Liu et al. [23] 的算法 只能找到 在同一个cache slice 和cache set 的地址</p>
<p> 我们用它可以找到 eviction set 在2mb 一致对齐的地址cache集合 同slice的</p>
<p> 子驱逐集 的计算 静态的取决于 复杂的地址函数 和 确定的2MB offset</p>
<h3 id="Fall-back-Attack"><a href="#Fall-back-Attack" class="headerlink" title="Fall-back Attack"></a>Fall-back Attack</h3><p> 如果上一个攻击失效了 也就是说 目标机器并不属于离线测的机器中的一种类型 ，那么我们将用另一个方法来找能触发 位翻转rowhammer的剔除策略</p>
<p> 我们扩展了 Oren et al. [27] or Liu et al. [23]的 1-1-1-X算法 来计算剔除策略 通过利用 动态的集合 和 动态的序列</p>
<ol>
<li>我们不断的给策略集合增加很多地址,让它足够访问同一个地址有驱逐策略,我们已经知道 当策略集合足够大时我们就能清晰的测试出 剔除的目标物理地址的大小</li>
<li>当剔除率大于设置的阈值 通过利用集合里的地址相互替代 并不会降低剔除率的话 这样 访问次数不下降但是 集合大小下降 因此降低了个数和执行时间,最后移除不会降低剔除率也不会增加时间的元素,再一次减少了不必要的 hit 也就减少了执行时间。</li>
</ol>
<p> 这样找到的集合 既不会访问很少访问的地址 每一个重复访问都对驱逐率有贡献。因此它们接近于静态剔除策略 这样找到的访问集合的剔除率完全接近攻击者设置的剔除率阈值中低运行时间的,如果把阈值设定得足够高,那么在时间中就很可能引起位翻转,那么这种用fall-back找到的剔除策略就能用来攻击<br> 这种算法要用一个函数cached(p) :这是尝试驱逐一个目标地址p的函数 通过现在的驱逐策略,集合以及通过访问时间时间判断p是否被cache了,解决方案的优劣取决于这个函数在测试中的表现,如果驱逐率低于攻击者设定的阈值那么函数返回真,大量的测试增加了执行时间和二元决策性的正确性，解释图4 时间 和剔除率的关系,如果高剔除率是十分必要的,那么执行时间可以超过40min,因此我们的算法预计算剔除策略一次,之后的剔除集合用固定的剔除算法在几秒内完成。</p>
<h2 id="实现以剔除为基础的rowhammer"><a href="#实现以剔除为基础的rowhammer" class="headerlink" title="实现以剔除为基础的rowhammer"></a>实现以剔除为基础的rowhammer</h2><p> 下面开始我们的表演:-) </p>
<p> 首先我们证明 只要攻击者能用native code 攻击 我们就能攻击</p>
<p> 然后我们通过拥有物理地址的知识，证明用js引发远端机器位翻转的可能性</p>
<p> 最后我们证明仅用js(不用额外信息)可以完成完整的rowhammer攻击</p>
<h3 id="Rowhammer-in-Native-Code"><a href="#Rowhammer-in-Native-Code" class="headerlink" title="Rowhammer in Native Code"></a>Rowhammer in Native Code</h3><p> 我们用我们找到的最好剔除策略扩张了Dullien的 double_sided_rowhammer 程序,首先clflush 用p:2-2-1策略替代了,这个剔除集合是既有预先的静态计算物理地址映射关系，也有完全地址函数以及动态剔除策略计算算法。通过这样我们可以在前文说到的四种机器上可重复的产生位翻转</p>
<p> 但是Haswell 我们以及clflUSH都不太能搞定，因为我们调高了刷新频率的参数tREFI,是一个游戏爱好者和超频社区用来提高性能会改变的.当然这是一个很有趣的课题,我们甚至想分析刷新率对rowhammer攻击适应性的影响.Kim[见论文20]勘探出刷新率直接影像位翻转数.这个参数对js引起的rowhammer同样适用。</p>
<p> 降低刷新率并对于真实攻击并不现实,已有的工作已经研究了Rowhammer的可攻击流行度, 发现85%DDR3被测试是易受到rowhammer 位翻转进攻的.只有Haswell test system and the G.Skill DIMMs in the Skylake test system在默认设置下是不易收到进攻的。因此我们的结论并不否定之前的预测,并且我们必须假设还有百万数量级的系统依旧脆弱.</p>
<p> rowhammer剔除策略被google native client 用在native code开发重现 这回允许在google chrome的权限提升,clfLUSH 指令已经被列入黑名单,然而这并没有卵用,我们用剔除法任然在GNC上引起了位翻转，从沙箱中脱离任然可能。</p>
<h3 id="Js-Rowhammer"><a href="#Js-Rowhammer" class="headerlink" title="Js Rowhammer"></a>Js Rowhammer</h3><p> 用js引起rowhammer更难,因为js没有虚拟地址或者指针,没有对物理地址的映射,我们观察到在最近版本的ff和chrome的linux版本上js会把大数组分配到1MB对齐并使用匿名2MB大小 只要可以。这个原因在于由操作系统实现的内存分配机制，任何内存分配 在类似脚本语言和环境也会导致为大数组分配匿名的2MB页的。</p>
<p> 通过一个类似Gruss 的一个时间攻击表现,我们推断出了浏览器的2MB页框,在这种攻击中,我们遍历一个数组和测量的访问延迟,延迟的峰值,在内存初始化的时候发生,由缺页引起,它发生在每一个新的2MB页 (见图5),在最新版本的浏览器也是这样的 ,尽管被Oren提出了减少时间精度并被W3C加入了HTML5标准,因此,我们知道虚拟和物理地址的最低21位知道数组中的偏移量。</p>
<p> 证明第一个概念,我们用js在ff上重现了native code 能做的准确物理地址rowhammer,为了做这个我们造了一个工具来把物理地址转换为虚拟地址，为了计算驱逐集我们用假设基础的算法,我们观察到简单的内存访问例如我们的native code 实现的那样没有被即时编译器优化。<br> 最终以js为基础的攻击 不需要任何外界的计算 因此它运行完全不需要用户交互。它利用大数组被分配到2MB大页的西现实，因此我们知道每一个我们的数组在2MB 页里面被分成了16行偏移的每行128KB(取决于低位的index位).我们现在来展示double-sided hammering 在这些2MB区域来诱发位翻转,或者提升单向hammering 在每2 mb的页面的外两行来引导另一个2MB区域的位翻转,这是史前第一个用JS实现的网站远端硬件错误攻击。</p>
<h3 id="攻击评值"><a href="#攻击评值" class="headerlink" title="攻击评值"></a>攻击评值</h3><p> 如Kim 论文[20]所描述的,DRAM里的地址能被位翻转的可能性不同,因此为了公平的比较不同的技术，我们测试了位翻转的数量对一个已知易感染的固定地址对。(图6)显示了在固定时间间隔内不同设置，不同的刷新频率如何影响位翻转。系统在测试时有轻微的使用(浏览,在编辑器里打字等等),如果刷新间隔设置得让clfLUSH指令可以引发位翻转,他们也就能被native code 剔除引发。为了用js引发位翻转略高的刷新间隔是必要的,再一次,如果特殊的DIMM刷新率设置得当,那么一次位翻转都不会发啊生。</p>
<p> js的位翻转的概率略低于native code.并且native code 稍微快一些，然而,只要一个机器可以被native code 实现易受害的,那也有被js 实现的能力。我们通过测试在不同的几个机器上验证了这种情况。</p>
<p> 虽然DDR4被认为对rowhammering对策,对策不是最终DDR4标准的一部分。使用严格的DDR4 DIMM 我们也能诱发位翻转在默认情况下 在最新的BIOS版本中,(用了反向工程后)。在G.Skill DDR4 DIMMs我们只有增加刷新间隔才能引发位翻转。所以说在最近的系统 硬件 软件 都没有对rowhammer的有效对策。是否会受到rowhammer的攻击的关键在于DIMM的刷新时间间隔的值</p>
<h1 id="讨论和相关工作"><a href="#讨论和相关工作" class="headerlink" title="讨论和相关工作"></a>讨论和相关工作</h1><p> 现有的攻击假定页表被映射在攻击者占据的两行之间的行中，然而我们发现在实践中几乎不会发生。操作系统喜欢用大页来减少TLB的压力，为了让操作系统易于组织和易于做物理地址的映射,这操作系统还把小的页装进了相同的物理组织框。在near-out-of-memory的情况页表只被分配在两个用户页。因此利用几乎所有系统内存才能强行造出这样的情况。然而换页在主流操作系统中是默认可用的，因此系统由于换页会产生严重的迟钝。在我们的利用的概念证明中，我们演示了放大单向rowhammer.通过锤击两个相邻行，和单面锤击相比我们显著的增加了位翻转的可能性。这允许甚至具有高概率在的2MB物理地址相邻区域的跨越边界引起位翻转，当我们已经能够用js引发位翻转我们就将目光集中在怎么类似之前的利用方法来利用页表，攻击者可以重复任何攻击步骤只要有必要就能成功。</p>
<p> 第一步 4.2说了利用的可利用位翻转,在页表里有1&#x2F;3的bit用于物理地址。在临近的2MB的范围里的一个页表中一个可以利用的bit翻转改变了一个物理地址。在我们的测试机器上我们已经发现了这样的位翻转。<br> 第二步 利用脚本释放除了两个被先hammer了的以外的其它页,因此包含位翻转的页也被释放了,申请数组要求浏览器储存虚拟地址空间区域，并按照第一次访问的映射到物理地址上，攻击者决定的最大数组大小也会触发页表分配在时间攻击,在我们所有测试系统中数组大小为1MB，我们只是访问，因此为每个1MB数组申请了4K页，因此每个页表有两个用户页面，The probability to place a group of page tables in the targeted 2MB region is ≈ 1&#x2F;3</p>
<p> 第三步 再次利用脚本触发翻转，有可能发现它的内存映射改变, 有1&#x2F;3的可能性地址映射到攻击者的页表中，如果成功，攻击者现在改变那个页表就会有完全的访问系统的物理地址。我们的想法在最新版linux系统和最新版ff被证实， It does not work in Google Chrome due to the immediate allocation of all physical memory for an allocated 1MB array after a single access.</p>
<h2 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h2><p> 在js中我们用2MB页来找到冲突地址和相邻的行，如果操作系统不提供2MB页我们就不能演示double-sided或提神 single-sided hammering.然而single-sided hammering 的一位翻转的可能性显著降低. 通过2MB页利用 double-sided hammering 也就不可能，因为我们只能引发在我们自己memory的位翻转. 因此攻击只可能放大single-sided hammering 来引发位翻转在相邻2MB页的相邻行，这是一个在这样行系统中的一个限制值.</p>
<p> 尽管搜寻一个可利用的位翻转可能要耗上好几个小时，尤其是js的位翻转比native code 的更低， 此外,如果我们不能猜出对这个系统最好的剔除策略,它将会耗上一个多小时来预计算来找寻一个好的剔除策略. 所以这对于现实的攻击也就不实际.</p>
<h2 id="对策"><a href="#对策" class="headerlink" title="对策"></a>对策</h2><p>The operating system allocates memory in large physical memory frames (often 2MB) for reasons of optimization. Page tables, kernel pages and user pages are not allocated in the same memory frame, unless the system is close to out-ofmemory (i.e., allocating the last few kilobytes of physical memory). Thus, the most efficient Rowhammer attack (double-sided hammering) would not possible if the operating system memory allocator was less aggressive in near-outof-memory situations. Preventing (amplified) single-sided hammering is more difficult, as hammering across the boundaries of a 2MB region is possible.</p>
<p>read-only shared code and data, shared libraries should not be shared over processes that run at different privilege levels or under different users. </p>
<p>refresh rate. </p>
<p>TRR</p>
<p>ECC</p>
<h2 id="相关工作"><a href="#相关工作" class="headerlink" title="相关工作"></a>相关工作</h2><p>The initial work by Kim et al. [20] and Seaborn’s [36] root exploit made the scientific community aware of the security implications of a Rowhammer attack.<br>However, to date, there have been very few other publications, focusing on different aspects than our work. Barbara Aichinger [1] analyzed Rowhammer faults in server systems where the problem exists in spite of ECC memory. She remarks that it will be difficult to fix the problem in the millions or even billions of DDR3<br>DRAMs in server systems. Rahmati et al. [34] have shown that bit flips can be used to identify a system based on the unique and repeatable error pattern that occurs at a significantly increased refresh interval. Our paper is the first to examine how to perform Rowhammer attacks based on cache eviction.1 Our cache eviction techniques facilitated cache side-channel attacks on ARM CPUs [22].<br>Concurrent and independent work by Aweke et al. [4] has also demonstrated bit flips without clflush on a Sandy Bridge laptop. They focus on countermeasures, whereas we focus on attacking a wider range of architectures and environments.</p>
<h2 id="将来的工作"><a href="#将来的工作" class="headerlink" title="将来的工作"></a>将来的工作</h2><p>我们仅仅研究js在linux的ff和chrome上造成rowhammer攻击的可能性，攻击利用内置的硬件和操作系统的工作方式的基本概念运作.无论系统是否用 4KB 页, 页表是需要的，并在一个属于这个页表的页被访问时被创建的. 因此, 操作系统不能防止1&#x2F;3 内存被用来分配页表.<br>相同的攻击方法可以应用到4 kb页分配给虚拟机的虚拟机监控程序, 他们甚至适用于Linux内核相似的分配机制.虽然看起来不合理和不现实的虚拟机监控程序分配4 kb页, 在实际上使得cross-VM页面重复数据删除技术变得更加容易. 根据 Barresi et al. [7], 页面重复数据删除实际上是仍然广泛应用于公共云. 我们的问题不是工作页面打开的可能性进一步调查是否重复数据删除实际上不仅是对虚拟机的安全和隐私, 而是程序本身的安全问题</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>In this paper, we presented Rowhammer.js, an implementation of the Rowhammer attack using fast cache eviction to trigger the Rowhammer bug with only regular memory accesses. It is the first work to investigate eviction strategies to defeat complex cache replacement policies. This does not only enable to trigger Rowhammer in JavaScript, it also benefits research on cache attacks as it allows to perform attacks on recent and unknown CPUs fast and reliably. Our fully automated attack runs in JavaScript through a remote website and can gain unrestricted access to systems. The attack technique is independent of CPU microarchitecture, programming language and execution environment.<br>The majority of DDR3 modules are vulnerable and DDR4 modules can be vulnerable too. Thus, it is important to discover all Rowhammer attack vectors.<br>Automated attacks through websites pose an enormous threat as they can be performed on millions of victim machines simultaneously.</p>
<h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p>证实只用访问内存就能引发 位翻转 不需要clflush指令 [并提供较为暴力的算法 和 实验数据比对]<br>证实js 可以引发 [匹配 和 用动态动态算(先增到平衡再替换减少 到最快)]并引发任何语言&#x2F;环境&#x2F;CPU&#x2F;cache攻击的可能性疑问 [当下无法被立刻化解 硬件&#x2F;软件 占有量]<br>证实利用ff的大页分配 2MB相邻 等 可实现引发+控制<br>DDR3 DDR4 都没能应对 但是 有一些可用的应对方法</p>
]]></content>
      <categories>
        <category>software</category>
        <category>security</category>
      </categories>
      <tags>
        <tag>rowhammer</tag>
      </tags>
  </entry>
  <entry>
    <title>ml_ver2.md</title>
    <url>/Blog/15-10-15-ml_ver2/</url>
    <content><![CDATA[<blockquote>
<p><strong>吐槽</strong></p>
</blockquote>
<blockquote>
<p>竟然不能被jekyll 解析</p>
</blockquote>
<blockquote>
<p>收到邮件说 两个花括号内的不能被解析</p>
</blockquote>
<blockquote>
<p>然后我把所有三层括号换成了1个{</p>
</blockquote>
<h1 id="词法"><a href="#词法" class="headerlink" title="词法"></a>词法</h1><h2 id="字符和字符串"><a href="#字符和字符串" class="headerlink" title="字符和字符串"></a>字符和字符串</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;single character&gt; ::= &lt;input character&gt; except &#x27; and \</span><br><span class="line">&lt;character literal&gt; ::= &#x27; &lt;single character&gt; &#x27; | &#x27; &lt;escape sequence&gt; &#x27;</span><br><span class="line">&lt;string character&gt; ::= &lt;input character&gt; except &quot; and \ | &lt;escape character&gt;</span><br><span class="line">&lt;string characters&gt; ::= &lt;string character&gt; | &lt;string characters&gt; &lt;string character&gt;</span><br><span class="line">&lt;string literal&gt; ::= &quot; &lt;string characters&gt;? &quot;</span><br></pre></td></tr></table></figure>

<h2 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;sign&gt; ::= &#x27;+&#x27; | &#x27;-&#x27;</span><br><span class="line">&lt;digit&gt; ::= &#x27;0&#x27; | &#x27;1&#x27; | &#x27;2&#x27; | &#x27;3&#x27; | &#x27;4&#x27; | &#x27;5&#x27; | &#x27;6&#x27; | &#x27;7&#x27; | &#x27;8&#x27; | &#x27;9&#x27; </span><br><span class="line">&lt;digits&gt; ::= &lt;digit&gt; &#123; &lt;digit&gt; &#125;</span><br><span class="line">&lt;unsigned integer&gt; ::= &lt;digits&gt;</span><br><span class="line">&lt;unsigned floating point literal&gt; ::= &lt;digits&gt; . &lt;digits&gt;</span><br><span class="line">&lt;unsigned number&gt; = &lt;unsigned integer&gt; | &lt;unsigned floating point literal&gt;</span><br><span class="line">&lt;signed integer&gt; ::= &lt;sign&gt;? &lt;unsigned integer&gt;</span><br><span class="line">&lt;signed floating point literal&gt; = &lt;sign&gt;? &lt;unsigned floating point literal&gt;</span><br><span class="line">&lt;signed number&gt; = &lt;signed integer&gt; | &lt;signed floating point literal&gt;</span><br></pre></td></tr></table></figure>

<h2 id="符号"><a href="#符号" class="headerlink" title="符号"></a>符号</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;null literal&gt; ::= &#x27;_null&#x27;</span><br><span class="line">&lt;boolean literal&gt; ::= &#x27;_true&#x27; | &#x27;_false&#x27;</span><br><span class="line">&lt;word symbol&gt; ::= &#x27;_and&#x27; | &#x27;_or&#x27; | &#x27;_not&#x27; | &#x27;_public&#x27; | &#x27;_const&#x27; | &#x27;_class&#x27; | &#x27;_para&#x27; | &#x27;_var&#x27; | &#x27;_pro&#x27; | &#x27;_while&#x27;| &#x27;_for&#x27; | &#x27;_foreach&#x27; | &#x27;_func&#x27; | &#x27;_if&#x27; | &#x27;_in&#x27; | &#x27;_return&#x27; | &#x27;_beark&#x27; | &#x27;_papa&#x27; | &lt;null literal&gt; | &lt;boolean literal&gt; | &lt;basic type&gt;</span><br><span class="line">&lt;special symbol&gt; = &#x27;+&#x27; | &#x27;-&#x27; | &#x27;*&#x27; | &#x27;/&#x27; | &#x27;\&#x27; | &#x27;%&#x27; | &#x27;=&#x27; | &#x27;&lt;&#x27; | &#x27;&gt;&#x27; | &#x27;&lt;=&#x27; | &#x27;&gt;=&#x27; | &#x27;==&#x27; | &#x27;&lt;&gt;&#x27; | &#x27;(&#x27; | &#x27;)&#x27; | &#x27;[&#x27; | &#x27;]&#x27; | &#x27;&#123;&#x27; | &#x27;&#125;&#x27; | &#x27;.&#x27; | &#x27;,&#x27; | &#x27;;&#x27; | &#x27;&quot;&#x27; | &lt;word symbol&gt;</span><br><span class="line">&lt;letter&gt; = &#x27;a&#x27; | &#x27;b&#x27; | &#x27;c&#x27; | &#x27;d&#x27; | &#x27;e&#x27; | &#x27;f&#x27; | &#x27;g&#x27; | &#x27;h&#x27; | &#x27;i&#x27; | &#x27;j&#x27; | &#x27;k&#x27; | &#x27;l&#x27; | &#x27;m&#x27; | &#x27;n&#x27; | &#x27;o&#x27; | &#x27;p&#x27; | &#x27;q&#x27; | &#x27;r&#x27; | &#x27;s&#x27; | &#x27;t&#x27; | &#x27;u&#x27; | &#x27;v&#x27; | &#x27;w&#x27; | &#x27;x&#x27; | &#x27;y&#x27; | &#x27;z&#x27; | &#x27;A&#x27; | &#x27;B&#x27; | &#x27;C&#x27; | &#x27;D&#x27; | &#x27;E&#x27; | &#x27;F&#x27; | &#x27;G&#x27; | &#x27;H&#x27; | &#x27;I&#x27; | &#x27;J&#x27; | &#x27;K&#x27; | &#x27;L&#x27; | &#x27;M&#x27; | &#x27;N&#x27; | &#x27;O&#x27; | &#x27;P&#x27; | &#x27;Q&#x27; | &#x27;R&#x27; | &#x27;S&#x27; | &#x27;T&#x27; | &#x27;U&#x27; | &#x27;V&#x27; | &#x27;W&#x27; | &#x27;X&#x27; | &#x27;Y&#x27; | &#x27;Z&#x27;</span><br><span class="line">&lt;identifier&gt; = &lt;letter&gt; &#123; &lt;letter&gt; | &lt;digit&gt; &#125;</span><br><span class="line">&lt;directive&gt; = &lt;letter&gt; &#123; &lt;letter&gt; | &lt;digit&gt; &#125;</span><br><span class="line">&lt;user type&gt; ::= &lt;identifier&gt;</span><br><span class="line">&lt;simple type name&gt; ::= &lt;identifier&gt;</span><br><span class="line">&lt;expression name&gt; ::= &lt;identifier&gt; | &lt;ambiguous name&gt; . &lt;identifier&gt;</span><br><span class="line">&lt;method name&gt; ::= &lt;identifier&gt; | &lt;ambiguous name&gt;. &lt;identifier&gt;</span><br><span class="line">&lt;ambiguous name&gt;::= &lt;identifier&gt; | &lt;ambiguous name&gt;. &lt;identifier&gt;</span><br><span class="line">&lt;unsigned literal&gt; ::= &lt;unsigned number&gt; | &lt;boolean literal&gt; | &lt;character literal&gt; | &lt;string literal&gt; | &lt;null literal&gt;</span><br><span class="line">&lt;literal&gt; ::= &lt;signed number&gt; | &lt;boolean literal&gt; | &lt;character literal&gt; | &lt;string literal&gt; | &lt;null literal&gt;</span><br></pre></td></tr></table></figure>

<p>#句法</p>
<p>##语句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;symbol&gt; ::= &lt;identifier&gt; | &lt;symbol&gt; ( &#x27;.&#x27;&lt;identifier&gt; | &#x27;[&#x27; &lt;unsigned integer&gt; &#x27;]&#x27;)*</span><br><span class="line">&lt;!-- sign???? --&gt;</span><br><span class="line">&lt;term&gt; ::= &lt;literal&gt; | &lt;symbol&gt; | &lt;term&gt; (&#x27;*&#x27; | &#x27;/&#x27;) &lt;term&gt; | &#x27;(&#x27;&lt;term&gt;&#x27;)&#x27; </span><br><span class="line">&lt;condition&gt; ::= &lt;term&gt; | &lt;condition&gt; (&#x27;+&#x27; | &#x27;-&#x27;) &lt;condition&gt; | &#x27;(&#x27; &lt;condition&gt; &#x27;)&#x27;</span><br><span class="line">&lt;compare&gt; ::= &lt;condition&gt; | &lt;compare&gt; (&#x27;==&#x27; | &#x27;&lt;&gt;&#x27; | &#x27;&gt;&#x27; | &#x27;&lt;&#x27; | &#x27;&gt;=&#x27; | &#x27;&lt;=&#x27; ) &lt;compare&gt; | &#x27;(&#x27; &lt;compare&gt; &#x27;)&#x27;</span><br><span class="line">&lt;expression&gt; ::= &lt;compare&gt; | &#x27;_not&#x27; &lt;expression&gt;  | &lt;expression&gt; (&#x27;_and&#x27; | &#x27;_or&#x27;) &lt;expression&gt; </span><br><span class="line">&lt;left value&gt; = &lt;symbol&gt;</span><br><span class="line">&lt;basic type&gt; ::= &#x27;_void&#x27; | &#x27;_int&#x27; | &#x27;_char&#x27; | &#x27;_double&#x27; | &#x27;_boolean&#x27; </span><br><span class="line">&lt;type&gt; ::= &lt;user type&gt; | &lt;basic type&gt;</span><br></pre></td></tr></table></figure>

<h2 id="控制"><a href="#控制" class="headerlink" title="控制"></a>控制</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;if statement&gt; ::= &#x27;_if(&#x27; &lt;expression&gt; &#x27;)&#123;&#x27; &lt;statement&gt; &#x27;&#125;&#123;&#x27; &lt;statement&gt; &#x27;&#125;&#x27;</span><br><span class="line">&lt;!-- break --&gt;</span><br><span class="line">&lt;for statement&gt; ::= &#x27;_for (&#x27; &lt;assignment block&gt;? &#x27;;&#x27; &lt;expression&gt;? &#x27;;&#x27; &lt;assignment block&gt;? &#x27;)&#123;&#x27;&lt;statement&gt;&#x27;&#125;&#x27;</span><br><span class="line">&lt;foreach statement&gt; ::= &#x27;_foreach (&#x27; &lt;var name&gt; &#x27;_in&#x27; &lt;array name&gt;&#x27;) &#123;&#x27;&lt;statement&gt;&#x27;&#125;&#x27;</span><br><span class="line">&lt;while statement&gt; ::= &#x27;_while (&#x27; &lt;expression&gt; &#x27;)&#123;&#x27; &lt;statement&gt;&#x27;&#125;&#x27; </span><br></pre></td></tr></table></figure>

<p>##各个执行块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;judge block&gt; ::= &lt;if statement&gt;</span><br><span class="line">&lt;cycle block&gt; ::= &lt;for statement&gt; | &lt;foreach statement&gt; | &lt;while statement&gt;</span><br><span class="line">&lt;call block&gt; ::= &lt;function name&gt; &#x27;(&#x27; (&lt;expression&gt; &#123; &#x27;,&#x27; &lt;expression&gt; &#125;)? &#x27;)&#x27;</span><br><span class="line">&lt;assignment block&gt; ::= &lt;left value&gt; &#x27;=&#x27; &lt;expression&gt; </span><br></pre></td></tr></table></figure>

<p>##各个语句块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;var name&gt; ::= &lt;identifier&gt; </span><br><span class="line">&lt;const name&gt; ::= &lt;identifier&gt;</span><br><span class="line">&lt;function name&gt; ::= &lt;identifier&gt;</span><br><span class="line">&lt;class name&gt; ::= &lt;identifier&gt;</span><br><span class="line">&lt;const definition&gt; ::= &lt;basic type&gt; &#x27; &#x27; &lt;const name&gt;  &#x27;=&#x27; &lt;literal&gt; &#x27;;&#x27;</span><br><span class="line">&lt;para definition&gt; ::= &lt;type&gt; &#x27;[]&#x27;? &lt;var name&gt; &#x27;;&#x27;</span><br><span class="line">&lt;var definition&gt; ::= &lt;type&gt; &#x27;[]&#x27;? &lt;var name&gt; &#123; &#x27;,&#x27;  &#x27;[]&#x27;? &lt;var name&gt; &#125; &#x27;;&#x27;</span><br><span class="line">&lt;statement sentence&gt; ::=  &lt;judge block&gt; | &lt;cycle block&gt; | &lt;call block&gt; | &lt;assignment block&gt; &#x27;;&#x27;</span><br><span class="line">&lt;statement&gt; ::=  &lt;statement sentence&gt;+ </span><br></pre></td></tr></table></figure>

<p>##各个模块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;const block&gt; ::= &#x27;_const&#123;&#x27; &lt;const definition&gt;+ &#x27;&#125;;&#x27;</span><br><span class="line">&lt;para block&gt; ::= &#x27;_para&#123;&#x27; &lt;para definition&gt;+ &#x27;&#125;;&#x27;</span><br><span class="line">&lt;var block&gt; ::= &#x27;_var&#123;&#x27; &lt;var definition&gt;+ &#x27;&#125;;&#x27;</span><br><span class="line">&lt;pro block&gt; ::= &#x27;_pro&#123;&#x27; &lt;statement&gt; &#x27;&#125;;&#x27;</span><br><span class="line">&lt;class block&gt; ::= &#x27;_class &lt;class name&gt;&#123;&#x27;(&#x27;_papa&#123;&#x27;&lt;class name&gt;&#x27;&#125;;&#x27;)? &lt;const block&gt;? &lt;var block&gt;? &lt;function unit&gt;+ &#x27;&#125;;&#x27;</span><br></pre></td></tr></table></figure>

<p>##各个单元</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;public unit&gt; ::= &#x27;_public&#123;&#x27; &lt;const block&gt;? &lt;class block&gt;* &lt;var block&gt;? &#x27;&#125;;&#x27;</span><br><span class="line">&lt;function unit&gt; ::= &#x27;_func &lt;type&gt; &lt;function name&gt;&#123;&#x27; &lt;const block&gt;? &lt;para block&gt;? &lt;var block&gt;? &lt;pro block&gt;?&#x27;&#125;;&#x27;</span><br><span class="line">&lt;main unit&gt; ::= &#x27;_main&#123;&#x27;&lt;const block&gt;? &lt;var block&gt;? &lt;pro block&gt;? &#x27;&#125;;&#x27;</span><br></pre></td></tr></table></figure>

<p>##最终code</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;compilation unit&gt; ::= &lt;public unit&gt;? &lt;function unit&gt;? &lt;main unit&gt;?</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h1><h2 id="Booleans"><a href="#Booleans" class="headerlink" title="Booleans"></a>Booleans</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_bool bianliang;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_true</span><br><span class="line">_false</span><br></pre></td></tr></table></figure>

<h2 id="Numbers"><a href="#Numbers" class="headerlink" title="Numbers"></a>Numbers</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_int bianliang;</span><br><span class="line">_double bianliang;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">123</span><br><span class="line">-123</span><br><span class="line">12.3</span><br><span class="line">-12.3</span><br></pre></td></tr></table></figure>

<h2 id="Characters"><a href="#Characters" class="headerlink" title="Characters"></a>Characters</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_char bianliang;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;1&#x27;</span><br><span class="line">&#x27;\t&#x27;</span><br><span class="line">&#x27;\&#x27;&#x27;</span><br><span class="line">&#x27;\\&#x27;</span><br></pre></td></tr></table></figure>

<h2 id="Strings"><a href="#Strings" class="headerlink" title="Strings"></a>Strings</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_char [] bianliang;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;&quot;</span><br><span class="line">&quot;1&quot;</span><br><span class="line">&quot;123&quot;</span><br></pre></td></tr></table></figure>

<h2 id="Void"><a href="#Void" class="headerlink" title="Void"></a>Void</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_func _void f&#123;</span><br><span class="line">    return ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Null"><a href="#Null" class="headerlink" title="Null"></a>Null</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- ??? --&gt;</span><br><span class="line">if(a == _null)&#123;&#125;&#123;&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="lists"><a href="#lists" class="headerlink" title="lists"></a>lists</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;type&gt; &#x27;[]&#x27; &lt;listname&gt;</span><br><span class="line">_int [] a;</span><br><span class="line">Symbols[&lt;unsigned integer&gt;]</span><br><span class="line">a[2]</span><br></pre></td></tr></table></figure>


<h1 id="Symbols"><a href="#Symbols" class="headerlink" title="Symbols"></a>Symbols</h1><blockquote>
<p>start with letter ,including letter and number, Not case sensitive</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bianliang</span><br><span class="line">feifeifeifeichangmeilidejutu12138</span><br></pre></td></tr></table></figure>

<h1 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h1><table>
<thead>
<tr>
<th>优先级</th>
<th>运算符</th>
<th>举例</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>()</td>
<td>(1+1)</td>
</tr>
<tr>
<td>2</td>
<td>* &#x2F;</td>
<td>2*3</td>
</tr>
<tr>
<td>3</td>
<td>+ -</td>
<td>2&#x3D;&#x3D;2</td>
</tr>
<tr>
<td>4</td>
<td>&gt; &lt; &gt;&#x3D; &lt;&#x3D; &#x3D;&#x3D; &lt;&gt;</td>
<td>1+2&#x3D;&#x3D;2+1</td>
</tr>
<tr>
<td>5</td>
<td>_and _not _or</td>
<td>1&#x3D;&#x3D;1 _and 2&#x3D;&#x3D;2</td>
</tr>
<tr>
<td>6</td>
<td>&#x3D;</td>
<td>a&#x3D;1</td>
</tr>
</tbody></table>
<h1 id="控制块"><a href="#控制块" class="headerlink" title="控制块"></a>控制块</h1><h2 id="选择块"><a href="#选择块" class="headerlink" title="选择块"></a>选择块</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_if(&lt;condition&gt;)&#123;true &lt;statements&gt;&#125;&#123;false &lt;statements&gt;&#125;;</span><br><span class="line">_if(1==1)&#123;a=1;&#125;&#123;&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="循环块"><a href="#循环块" class="headerlink" title="循环块"></a>循环块</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_for(&lt;for init&gt;;&lt;condition&gt;;&lt;for update&gt;)&#123;&lt;statements&gt;&#125;;</span><br><span class="line">_for(i=1;i&lt;5;i=i+1)&#123;a=a+i;_break;&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_foreach(&lt;item&gt; _in &lt;array&gt;)&#123;&lt;statements&gt;&#125;;</span><br><span class="line">_foreach(a _in b)&#123;s=s+a;&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_while(&lt;condition&gt;)&#123;&lt;statements&gt;&#125;;</span><br><span class="line">_while(1==1)&#123;a=a+1;_break;&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="break-from-for-or-while"><a href="#break-from-for-or-while" class="headerlink" title="break from _for or _while"></a>break from _for or _while</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_break;</span><br></pre></td></tr></table></figure>

<h1 id="语句块"><a href="#语句块" class="headerlink" title="语句块"></a>语句块</h1><h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_const&#123;</span><br><span class="line">_int a = 2;</span><br><span class="line">_char b = &#x27;2&#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="var"><a href="#var" class="headerlink" title="var"></a>var</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_var&#123;</span><br><span class="line">_int a;</span><br><span class="line">_char b;</span><br><span class="line">_double c,d,e;</span><br><span class="line">_int [] c, [] d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="执行部分"><a href="#执行部分" class="headerlink" title="执行部分"></a>执行部分</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_pro&#123;</span><br><span class="line">&#123;&lt;control block&gt; | &lt;assignment block&gt;&#125;+</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_func _int f&#123;</span><br><span class="line">_const&#123;&#125;;</span><br><span class="line">_para&#123;</span><br><span class="line">_int [] a;</span><br><span class="line">_int b;</span><br><span class="line">_int c;</span><br><span class="line">&#125;</span><br><span class="line">_var&#123;&#125;;</span><br><span class="line">_pro&#123;&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h2><p>f(a,1,2)</p>
<h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_class yourclass&#123;</span><br><span class="line">_papa&#123;fulei&#125;;</span><br><span class="line">_const&#123;&#125;;</span><br><span class="line">_var&#123;&#125;;</span><br><span class="line">(_func &lt;type&gt; &lt;function name&gt;&#123;&#125;;)*</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yourclass a;</span><br><span class="line">yourclass [] a;</span><br></pre></td></tr></table></figure>

<h2 id="调用-1"><a href="#调用-1" class="headerlink" title="调用"></a>调用</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a.f;</span><br><span class="line">a.q();</span><br><span class="line">a.p(1,2,3);</span><br></pre></td></tr></table></figure>

<h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#12138</span><br><span class="line"></span><br><span class="line">^#&#123;</span><br><span class="line">块注释</span><br><span class="line">^#&#125;</span><br></pre></td></tr></table></figure>

<h1 id="空语句"><a href="#空语句" class="headerlink" title="空语句"></a>空语句</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#125;</span><br><span class="line">;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="样例程序"><a href="#样例程序" class="headerlink" title="样例程序"></a>样例程序</h1><h2 id="快排"><a href="#快排" class="headerlink" title="快排"></a>快排</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">_func _void quickSort&#123;</span><br><span class="line">    _para&#123;</span><br><span class="line">        _int [] s;</span><br><span class="line">        _int l</span><br><span class="line">        _int r;</span><br><span class="line">    &#125;;</span><br><span class="line">    _var&#123;</span><br><span class="line">        _int i;</span><br><span class="line">    &#125;;</span><br><span class="line">    _pro&#123;</span><br><span class="line">        _if (l&lt; r)&#123;</span><br><span class="line">            i = l;</span><br><span class="line">            j = r;</span><br><span class="line">            x = s[l];</span><br><span class="line">            _while (i &lt; j)&#123;</span><br><span class="line">                _while(i &lt; j _and s[j]&gt;= x)&#123;</span><br><span class="line">                    j=j<span class="number">-1</span>;</span><br><span class="line">                &#125;;</span><br><span class="line">                _if(i &lt; j)&#123;</span><br><span class="line">                    s[i] = s[j];</span><br><span class="line">                    i=i+<span class="number">1</span>;</span><br><span class="line">                &#125;&#123;&#125;;</span><br><span class="line">                _while(i &lt; j _and s[i]&lt; x)&#123;</span><br><span class="line">                    i=i+<span class="number">1</span>;</span><br><span class="line">                &#125;;</span><br><span class="line">                _if(i &lt; j)&#123;</span><br><span class="line">                    s[j] = s[i];</span><br><span class="line">                    j=j<span class="number">-1</span>;</span><br><span class="line">                &#125;&#123;&#125;;</span><br><span class="line">            &#125;;</span><br><span class="line">            s[i] = x;</span><br><span class="line">            quickSort(s, l, i - <span class="number">1</span>); </span><br><span class="line">            quickSort(s, i + <span class="number">1</span>, r);</span><br><span class="line">        &#125;&#123;&#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">_main&#123;</span><br><span class="line">    _const&#123;</span><br><span class="line">        _int printi <span class="number">0</span>;<span class="meta">#print int</span></span><br><span class="line">        _int prints <span class="number">1</span>;<span class="meta">#print string</span></span><br><span class="line">    &#125;;</span><br><span class="line">    _var&#123;</span><br><span class="line">        _int [] <span class="built_in">array</span>;</span><br><span class="line">        _int len,k;</span><br><span class="line">    &#125;;</span><br><span class="line">    _pro&#123;</span><br><span class="line">        <span class="built_in">array</span>[]=[<span class="number">34</span>,<span class="number">65</span>,<span class="number">12</span>,<span class="number">43</span>,<span class="number">67</span>,<span class="number">5</span>,<span class="number">78</span>,<span class="number">10</span>,<span class="number">3</span>,<span class="number">70</span>];</span><br><span class="line">        len = <span class="number">10</span>;<span class="meta">#len=sizeof(array)/sizeof(int);</span></span><br><span class="line">        print(prints,<span class="string">&quot;The orginal arrayare:\n&quot;</span>);</span><br><span class="line">        _for(k=<span class="number">0</span>;k&lt;len;k=k+<span class="number">1</span>)&#123;</span><br><span class="line">            print(printi,<span class="built_in">array</span>[k]);</span><br><span class="line">            print(prints,<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        print(prints,<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        quickSort(<span class="built_in">array</span>,<span class="number">0</span>,len<span class="number">-1</span>);</span><br><span class="line">        print(prints,<span class="string">&quot;The sorted arrayare:\n&quot;</span>);</span><br><span class="line">        _for(k=<span class="number">0</span>;k&lt;len;k=k+<span class="number">1</span>)&#123;</span><br><span class="line">            print(printi,<span class="built_in">array</span>[k]);</span><br><span class="line">            print(prints,<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        print(prints,<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>lang</tag>
      </tags>
  </entry>
  <entry>
    <title>sjx分布式 查询</title>
    <url>/Blog/16-01-01-sjx-rdf/</url>
    <content><![CDATA[<p>施佳鑫 orz</p>
<p>现状</p>
<p>分布式图计算</p>
<table>
<thead>
<tr>
<th>公司</th>
<th>系统</th>
<th>简介</th>
</tr>
</thead>
<tbody><tr>
<td>google</td>
<td>Pregel</td>
<td>以顶点为思考</td>
</tr>
<tr>
<td>cmu</td>
<td>GraphLab</td>
<td></td>
</tr>
<tr>
<td></td>
<td>PowerGraph &amp; GAS模型</td>
<td>解决处理自然图时有系统低效的问题 避免负载不均衡</td>
</tr>
<tr>
<td></td>
<td>GraphX</td>
<td></td>
</tr>
<tr>
<td></td>
<td>Mizan</td>
<td>顶点迁移进行动态负载均衡</td>
</tr>
<tr>
<td></td>
<td>Graph++</td>
<td>针对图遍历和聚合的应用的特定算法的优化</td>
</tr>
<tr>
<td></td>
<td>PowerSwitch</td>
<td>切换同步异步执行模式来取得更好的性能</td>
</tr>
<tr>
<td></td>
<td>GPS</td>
<td>通过划分高度顶点的邻接列表从而优化处理自然图性能</td>
</tr>
</tbody></table>
<p>分布式图查询</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>Neo4j 和 HyperGraphDB</td>
<td>在线事务处理非分布式不支持大规模的图</td>
</tr>
<tr>
<td>Facebook的TAO</td>
<td>提供了一个简单的API和数据模型来储存和查询地理分布</td>
</tr>
<tr>
<td>Unicorn进一步利用TAO</td>
<td>作为存储层来支持搜索社交数据</td>
</tr>
</tbody></table>
<p>RDF &#x2F; SPARQL 与图查询关系</p>
<p>TriAD是当前最好的分布式内存RDF查询系统 利用提前剪枝和异步消息传递来优化系统性能。SHAPE[17]是一个分布式RDF查询系统，基于单机系统RDF-3X[18]实现，利用预取数据来提高性能。最近的一项研究SQLGraph[19]则是使用关系模型存储RDF数据，但是使用图搜索完成查询。</p>
]]></content>
      <categories>
        <category>backend</category>
        <category>rdf</category>
      </categories>
      <tags>
        <tag>sparql</tag>
        <tag>rdf</tag>
      </tags>
  </entry>
  <entry>
    <title>RDF-3X: a RISC-style Engine for RDF</title>
    <url>/Blog/16-01-02-RDF-3X/</url>
    <content><![CDATA[<h1 id="ABSTRACT"><a href="#ABSTRACT" class="headerlink" title="ABSTRACT"></a>ABSTRACT</h1><p> 这个论文写的是RDF-3X的引擎,一个基于SPARQL的实现，并超级高效,小心的设计出的追求RISC格式和流线型结构和的简洁的数据结构和操作。</p>
<ol>
<li>储存和索引3元RDF的通用解决方案,且完全不用做物理设计的调整。</li>
<li>一个强力且简单的query处理器对最大可能性范围利用快速合并。</li>
<li>一个用基于整个连接路径的统计对照表的耗费模型来选择最优合并顺序的query优化程序</li>
</ol>
<p>RDF-3X与先前最先进的系统相比，在几个大规模数据集上进行测量，这些数据集具有超过5000万个RDF三元组和基准查询，包括模式匹配和长连接路径 基础数据图。</p>
<h1 id="INTRODUCTION"><a href="#INTRODUCTION" class="headerlink" title="INTRODUCTION"></a>INTRODUCTION</h1><h2 id="Motivation-and-Problem"><a href="#Motivation-and-Problem" class="headerlink" title="Motivation and Problem"></a>Motivation and Problem</h2><p>RDF数据结构已经存在了十年,它被设计为对于语义Web的模式松弛或甚至无模式的信息的灵活表示。到商业化的今天的电子世界，RDF也没有得到太多的关注，但RDF建立了强大的动力。语义网络风格的本身和知识是基于数百万现实来自维基百科和其它在线已经创建并可获取的来源。E-science数据容器以导入&#x2F;导出的格式支持RDF,并也可以筛数据选(基于query),更引人注目的,是在生命科学领域。最终,Web 2.0平台的在线社区将RDF视为非专有交换格式,并将其作为构建信息混搭的工具。</p>
<p>在RDF格式中，所有的数据元素都表示为(subject,predicate,object) 三元组,有的是(subject,property,value)三元组,例如</p>
<ul>
<li>(id1, hasT itle, ”Sweeney T odd”),</li>
<li>(id1, producedInYear, ”2007”),</li>
<li>(id1, directedBy, ”T im Burton”),</li>
<li>(id1, hasCasting, id2),</li>
<li>(id2, RoleN ame, ”Sweeney T odd”), (id2, Actor, id11),</li>
<li>(id1, hasCasting, id3),</li>
<li>(id3, RoleN ame, ”M rs. Lovett”), (id3, Actor, id12),</li>
<li>(id11, hasN ame, ”Johnny Depp”),</li>
<li>(id12, hasN ame, ”Helena Bonham Carter”)</li>
</ul>
<p> 这样,注意到predicate和属性没有两样,并且这没有数据库模式,这种三元组的概念非常适合现在的随收随付(pay as you go),和实体关系模型相比,都有实体的属性和关系&#x2F;谓语,所有的三元组放在一起可以看作一个巨大的层次结构图。</p>
<p> SPARQL查询语言是官方标准用来搜索RDF仓库。它支持三元组的conjunctions 和 disjunctions,在关系引擎中选择项目连接查询的对应项。比如我们可以得到Johnny Depp 的电影的title用 SPARQL查询语句:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Select ?title Where &#123;</span><br><span class="line">?m &lt;hasTitle&gt; ?title. ?m &lt;hasCasting&gt; ?c.</span><br><span class="line">?c &lt;Actor&gt; ?a. ?a &lt;hasName&gt; &quot;Johnny Depp&quot; &#125;</span><br></pre></td></tr></table></figure>

<p>这里每一个点代表一个conjunction(join),整个查询也可以看做在RDF数据图中做图模式匹配,predicates 也可以是变量或者通配符,因此也允许未知模式的查询。</p>
<p>RDF驱动用于储存索引和查询已经有一些年了,尤其是the Jena frame-work by HP Labs 显著收到欢迎,and Oracle also provides RDF support for semantic data integration in life sciences and enterprises [11, 29]. However, with the exception of the VLDB 2007 paper by Abadi et al. [1], none of the prior implementations could demonstrate convincing efficiency, failing to scale up towards large datasets and high load. [1] achieves good performance by grouping triples with the same property name into property tables, mapping these onto a column store, and creating materialized views for frequent joins</p>
<p>管理大规模RDF数据需要很多技术挑战，包括储存布局,索引和查询过程。</p>
<ol>
<li>(没有固定结构与实际的数量大变化频繁的矛盾)缺少全局模式和谓词名称的多样性对物理数据库设计提出了主要问题。原则上，可以依靠自动调谐“向导”来实现频繁的连接路径;然而在实践中，数据的不断发展的结构和不一致动态的工作量将这个问题变成一个复杂的西斯弗斯任务。</li>
<li>(join 查询多难预测 RDF为动态应用空间 需要适合的动态优化查询算法)通过RDF数据 - 三元组而不是整个记录或实体的细粒度建模 - 具有大量连接的查询将固有地形成工作负载的大部分，但连接属性比关系设置中的可预测性要差得多。这要求查询处理算法的特定选择，以及对复杂连接查询的仔细优化;但RDF是用于在数据空间上的即时应用程序，因此优化发生在查询运行时。</li>
<li>(需要统计来 找到 优化方案 不同优化方案的适应度差别大)由于连接顺序和其他执行计划优化需要数据统计来进行选择性估计，因此RDF引擎面临的问题是，在没有模式的情况下，统计信息收集的合适粒度是显而易见的。例如，在工作负载的where子句中出现的所有属性的单维直方图 - 关系系统中的最先进的方法 - 不适用于RDF，因为它错过了长连接链或大连接星的影响多对多关系。</li>
<li>(和XML样子像但是具体差别挺大)虽然RDF使用XML语法，而SPARQL涉及类似于XML路径表达式的搜索模式，但是RDF三元组形成图形而不是树的集合的事实是对更深入研究的XML设置的主要区别。</li>
</ol>
<h2 id="Contribution-and-Outline"><a href="#Contribution-and-Outline" class="headerlink" title="Contribution and Outline"></a>Contribution and Outline</h2><p>本文为上述问题提供了一个全面，可扩展的解决以上问题的方案。 它提供了一个完整的系统，创造的RDF-3X（RDF Triple eXpress），从头设计和实现，专门用于管理和查询RDF数据。 RDF-3X遵循[24,39]中倡导的为特定应用领域设计和定制的数据管理系统可以通过两个数量级来超越通用主流系统的原理。 在这个论点的因素包括</p>
<ol>
<li>数据结构和算法的裁剪，而不是支持更多各种各样的方法</li>
<li>更轻的软件脚印和开销，</li>
<li>简化的系统内部优化和更容易配置 和自适应变化的环境（例如，数据和工作量特性）。</li>
</ol>
<p>RDF-3X遵循这种RISC风格的设计理念[10]，设计用于支持RDF的“精简指令集”.RDF-3X基于三个原则：</p>
<ol>
<li>物理设计通过在单个“巨型三元组表”上创建适当的索引来独立于工作负载.RDF-3X不依赖于自动调整向导的成功（或限制），而是有效地消除了对物理设计调整的需要。它通过在构成RDF三元组的三个维度的所有6个排列上构建索引，并且附加地对所有三维二维和所有三个一维投影的计数聚合变体进行索引。每个索引都可以很好地压缩;所有索引的总存储空间小于主数据的大小。</li>
<li>查询处理器是RISC风格的，主要依赖于对排序后的索引列表的合并连接。这可以通过三元组表的“穷举”索引来实现。事实上，所有处理都是仅索引的，并且三元组表仅仅虚拟地存在。运算符树被构造以便在最大可能程度上保留后续连接的有趣顺序[17];只有当这不再可能时，RDF-3X才会切换到基于散列的连接处理。这种方法可以在代码级别进行高度优化，并且与传统查询处理器相比具有低得多的开销。同时，支持SPARQL的各种重复消除选项，查询中的分离模式以及SPARQL所需的所有其他功能也非常有用。</li>
<li>查询优化器主要关注执行计划生成时的连接顺序。它采用动态规划计划枚举，成本模型基于RDF特定的统计概要。这些统计包括数据图的路径中的频繁谓词序列的计数器;这样的路径是电位连接模式。与通用数据库系统中的查询优化器相比，RDF-3X优化器更简单，但在执行计划的选择性估计和决策方面更加准确。</li>
</ol>
<p>这项工作的科学贡献是：</p>
<ol>
<li>用于RDF索引和查询的新颖架构，消除对物理数据库设计的需要，</li>
<li>用于大规模连接查询在无结构的RDF三元组上的优化器，由新的对于RDF路径的选择性估计驱动，</li>
<li>基于具有三个大数据集的实际测量的综合性能评估，示出了先前最好的发动机[1]的大增益（对于一些查询，通常为5和高达20） 。 RDF-3X的源代码和实验数据可根据要求提供非商业用途。</li>
</ol>
<h1 id="BACKGROUND-AND-STATE-OF-THE-ART"><a href="#BACKGROUND-AND-STATE-OF-THE-ART" class="headerlink" title="BACKGROUND AND STATE OF THE ART"></a>BACKGROUND AND STATE OF THE ART</h1><h2 id="SPARQL"><a href="#SPARQL" class="headerlink" title="SPARQL"></a>SPARQL</h2><p>SPARQL查询[36]是构成RDF数据图的三元组上的模式匹配查询。 除了语法糖，一个基本的SPARQL查询具有形式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select ?variable1 ?variable2 ...</span><br><span class="line">where &#123; pattern1. pattern2. ... &#125;</span><br></pre></td></tr></table></figure>
<p>其中每个模式由subject，predicate，object组成其中的每一个都是变量或文字。 查询模型是和样例一样：查询指定已知的文字并将未知数保留为变量。 变量可以出现在多个模式中，由默认连接。 查询处理器需要查找满足给定模式的所有可能的变量绑定，并将来自projection子句的绑定返回到应用程序。 请注意，并非所有变量都必须绑定（例如，如果变量只出现在projection中，而不是在pattern中），这将返回NULL。</p>
<p>该模式匹配方法限制了关于可能的执行计划的查询引擎的自由度，如以下示例所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select ?a ?c</span><br><span class="line">where &#123; ?a label1 ?b. ?b label2 ?c &#125;</span><br></pre></td></tr></table></figure>

<p>用户对通过?b可以连接的所有?a和?c感兴趣。 ?b本身的值不是projection子句的一部分。 不幸的是，模式匹配语义要求仍然需要计算所有的?b的绑定。 可能有多种方式从?a到?c，导致输出重复。 由于这通常不是用户&#x2F;应用程序的意图，SPARQL引入了两个查询修饰符：<strong>distinct</strong>关键字指定必须删除重复项，而<strong>reduced</strong>关键字指定重复项可以但不必删除。 <strong>reduced</strong>关键字的目标显然是通过允许优化来帮助RDF查询引擎，但是使用减少的选项，查询输出具有非确定性。</p>
<p>然而，即使是创建所有重复的默认模式允许一些优化。 查询处理器不能忽略由于它们对重复项的影响而被投影掉的变量，但是它不必创建显式绑定。 只要我们能保证产生正确数目的重复，绑定本身是不相关的。 我们稍后将通过计数重复项的数量而不是产生重复项本身来使用此观察。</p>
<h2 id="Related-Work"><a href="#Related-Work" class="headerlink" title="Related Work"></a>Related Work</h2><p>大多数可公开访问的RDF系统将RDF三元组映射到关系表（例如，RDFSuite [2, 32], Sesame [8, 28], Jena [23, 46], the C-Store-based RDF engine of [1], and also Oracle’s RDF MATCH implementation [11]）。有两种极端的方式做到这一点：</p>
<ol>
<li>所有三元组存储在一个单一的，巨大的三元组表与通用属性主题，谓词，对象。 </li>
<li>三元组按其谓词名称分组，具有相同谓词名称的所有三元组存储在同一属性表中。可以使具有用于每个谓词名称的单独表的属性表的极端形式更加灵活，从而导致混合方法：</li>
<li>基于对于相同实体类的谓词或工作负载中的同现（co-occurrence），通过谓词名称对三元组进行聚类;</li>
</ol>
<p>每个簇属性表包含少量相关谓词的值，并且对于具有不频繁谓词的三元组，可以另外存在“剩余”表。集群属性表具有类别特定的模式，其具有在相应的RDF谓词之后命名的属性，并且其宽度可以从单个谓词（属性）到相同实体类型的所有谓词。</p>
<p>早期的开源系统如Jena [23,46]和Sesame [8,28]使用集群属性表，但将物理设计留给了应用程序调优专家。这些系统都没有报告任何性能基准，大型数据在千兆字节范围内有超过1000万个三元组。 Oracle [29]在[11]中报告了非常好的性能结果，但是似乎在很大程度上依赖于良好的调整，除了基本的三元组表之外，通过正确选择物化连接视图（创建的主题 - 属性矩阵）。 [1]目前最快的RDF引擎使用最小宽度属性表（即二进制关系），但将它们映射到列存储系统。 [41]给出了不同存储布局的一个很好的分类，并提出了中型合成数据和合成工作负载的系统性能比较。与[1]针对“巨 - 三元组表”方法的论据相反，我们的RDF3X系统显示了如何成功地使用具有优异性能的三元组表。</p>
<p>性能最佳的系统，Oracle和C-Storebased的引擎擎，依赖于这些视图上的物化连接路径和索引。索引本身是分别由底层RDBMS和列存储支持的标准索引。本地YARS2系统[19]提出了在6个单独的B +树或散列索引中的三元组及其所有嵌入子三元组（对和单值）的详尽索引。这类似于我们的方法，但是YARS2忽略了在subject, predicate, object（作为主要，次要和第三级排序标准）的规范顺序之外的排序顺序中索引三元组。对于HPRD系统[6]提出了一个非常相似的方法，并在Sesame系统中作为选项（创造的“三重指数”）[28]。 YARS2和HPRD似乎主要适用于简单的查找操作，并且对连接的支持有限;他们缺乏DBMS风格的查询优化（例如，不考虑任何连接顺序优化，虽然[6]认识到这个问题）。 [5]提出使用后缀数组索引整个连接路径，但不讨论优化此物理设计的查询。 [42]介绍了一种基于明智选择的“中心节点”的新型路径索引;该指数，创造的GRIN，在小到中等数据和手指定的执行计划表现出良好的性能。在[12]中也讨论了模式无关的“宽和稀疏表”的物理设计，没有具体考虑RDF。所有这些用于RDF索引和物化视图的方法都会产生一些形式的物理设计问题，并且没有一个解决了这些物理设计特性所产生的查询优化问题。</p>
<p>对于查询优化，[11,29]和[1]利用与这些解决方案分层的SQL引擎一起提供的最先进的技术。 据我们所知，没有一个采用任何RDF本地优化。 [38]概述了代数重写的框架，但似乎性能增益的主要规则是推动选择低于连接; 没有考虑连接排序。 [20]具有类似的风格，同样忽视找到好的连接排序的关键问题。</p>
<p>最近，图上的SPARQL模式的选择性估计已经由[38]和[25]解决。方法[38]收集每个主题，每个谓词和每个对象（标签或值）的单独的频率统计;通过假设主语，谓词和对象分布在概率上是独立的来估计整个三元模式的频率。 [25]的方法通过在所选择的任意形状的图形模式的集合上建立统计来更加复杂。它将模式的选择转换为优化问题，并使用贪婪启发式。查询模式的基数估计识别统计存在的最大子模式，并且将它们与关于超级模式的统一性假设组合而没有统计。虽然[38]似乎太过于简单，不能产生准确的估计，方法[25]是基于一个复杂的优化问题，并依靠简单的启发式选择一组好的模式的总和结构。我们在RDF-3X中采用的方法捕获路径标签频率，从而超越[38]，但避免了计算的复杂性[25]。</p>
<h1 id="STORAGE-AND-INDEXING"><a href="#STORAGE-AND-INDEXING" class="headerlink" title="STORAGE AND INDEXING"></a>STORAGE AND INDEXING</h1><h2 id="Triples-Store-and-Dictionary"><a href="#Triples-Store-and-Dictionary" class="headerlink" title="Triples Store and Dictionary"></a>Triples Store and Dictionary</h2><p>虽然大多数先前的，特别是最近的文献喜欢存储模式与属性表，我们决定采用概念上更简单的方法与单个，可能巨大的三元组表，我们自己的存储实现下面（相对于使用RDBMS ）。 这反映了我们的RISC风格和“无旋钮”设计理念。 我们克服了以前的批评，即通过创建“正确的”索引集合（见下文）和非常快速的合并连接处理（见第4节），三元组表会产生太多昂贵的自联接。</p>
<p>我们将所有三元组存储在（压缩的）聚类B +树中。三元组在B +树中按字典顺序排序，这允许将SPARQL模式转换为范围扫描。 在模式（literal1，literal2，?x）中，文字指定公共前缀，因此有效地进行范围扫描。 在对中等数量的叶页的单次扫描期间找到每个可能的?x的绑定。</p>
<p>因为三元组可以包含长字符串，所以我们采用使用字典+id映射替换所有字面量的方法（参见例如[11]）。这有两个好处：1）它压缩三元组存储，现在只包含id三元组，和2）它是查询处理器的一个伟大的简化，允许快速，简单，RISC式操作符（见第4.5节）。这些增益的小成本是两个附加的字典索引。在查询翻译期间，在查询中出现的文字被翻译成其字典id，这可以通过从字符串到id的标准B +树来完成。在处理查询之后，所得到的id必须被转换回文本作为应用&#x2F;用户的输出。我们也可以在这个方向上使用B +树，但是我们实现了一个直接映射索引[14]。直接映射被调谐用于id查找并且导致更好的高速缓存命中率。请注意，这只是当查询产生很多结果时的问题。通常，先前的步骤（连接等）支配成本，但是对于具有许多结果字典查找的简单查询是不可忽略的。</p>
<blockquote>
<p>id+字典的方式 提高效率</p>
</blockquote>
<h2 id="Compressed-Indexes"><a href="#Compressed-Indexes" class="headerlink" title="Compressed Indexes"></a>Compressed Indexes</h2><p>在上面给出的索引范围扫描示例中，我们依赖于变量是后缀（即，对象或谓词和对象）的事实。 为了保证我们能够通过仅执行单个索引扫描来回答模式三元组的任何位置中的变量，我们在六个单独的维度中保持主语（S），谓词（P）和对象（O）的所有六个可能的排列 索引。 我们可以提供这种级别的冗余，因为我们压缩id三元组（下面讨论）。 在所有实验数据集上，所有索引的总大小小于原始数据。</p>
<p>由于六个索引中的每一个的排序规则顺序不同（SPO，SOP，OSP，OPS，PSO，POS），我们使用通用术语值1，值2，值3而不是主语，谓词， 不同列。 索引中的三元组通过（值1，值2，值3）（对于六个不同排列中的每一个）按字典顺序排序，并且直接存储在聚类B +树的叶页面中。</p>
<p>归类顺序使得相邻三元组非常相似：最邻近的三元组在值1和值2中具有相同的值，并且值3的增加趋向于非常小。 这个观察自然导致三元组的压缩方案。 代替存储完整的三元组，我们只存储三元组之间的变化。 这种压缩方案的灵感来自文本检索系统中的倒排列表[50]，但我们将其推广到id三元组而不是简单的id。 由于下面讨论的原因，我们只在单个叶子页面中应用压缩，而不是跨页面。</p>
<p>对于压缩方案本身，在压缩项目的解压缩或解释的空间节省和CPU消耗之间存在明显的权衡[45]。我们注意到，当压缩过于积极时，CPU时间开始成为一个问题，因此确定了一个字节级（而不是位级）压缩方案。我们计算每个值的增量，然后使用最小字节数来仅对增量编码。标题字节表示由以下值使用的字节数（图1）。每个值在0字节（不变）和4字节（delta需要完整的4字节）之间消耗，这意味着每个值有5个可能的大小。对于三个值，这些是5 * 5 * 5 &#x3D; 125个不同大小的组合，其适合于报头字节的有效载荷。剩余间隙位用于指示小间隙：当仅值3改变，并且增量小于128时，其可以直接包括在报头字节的有效载荷中。这种小的delta是非常常见的，并且可以在我们的方案中由单个字节编码。</p>
<p>三元压缩伪代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">compress((v 1 , v 2 , v 3 ),(prev 1 , prev 2 , prev 3 ))</span><br><span class="line">// writes (v 1 , v 2 , v 3 ) relative to (prev 1 , prev 2 , prev 3 )</span><br><span class="line">if v 1 = prev 1 ∧ v 2 = prev 2</span><br><span class="line">  if v 3 − prev 3 &lt; 128</span><br><span class="line">    write v 3 − prev 3</span><br><span class="line">  else encode(0,0,v 3 − prev 3 − 128)</span><br><span class="line">else if v 1 = prev 1</span><br><span class="line">  encode(0,v 2 − prev 2 ,v 3 )</span><br><span class="line">else</span><br><span class="line">  encode(v 1 − prev 1 ,v 2 ,v 3 )</span><br><span class="line">encode(δ 1 , δ 2 , δ 3 )</span><br><span class="line">// writes the compressed tuple corresponding to the deltas</span><br><span class="line">write 128+bytes(δ 1 )*25+bytes(δ 2 )*5+bytes(δ 3 )</span><br><span class="line">write the non-zero tail bytes of δ 1</span><br><span class="line">write the non-zero tail bytes of δ 2</span><br><span class="line">write the non-zero tail bytes of δ 3</span><br></pre></td></tr></table></figure>

<p>压缩的细节如上所示。算法计算前一个元组的增量。 如果它是小的，它被直接编码在标题字节中，否则它计算每个树值和调用编码的δi值。 编码用大小信息写头部字节，然后写入δi的非零尾部（即，它按字节写入i，但跳过前导零字节）。 这导致具有不同大小的压缩元组，但是在解压缩期间，可以容易地从报头字节重建大小。 由于所有操作都是逐字节的，解压缩仅涉及几个便宜的操作并且非常快。</p>
<p>我们测试了压缩率和解压时间（以秒为单位）的逐字节压缩与文献中提出的许多逐位压缩方案[33]。 Barton数据集（见第6节）的结果如图3所示。我们的逐字节方案压缩几乎与最佳逐位压缩方案一样好，同时提供更好的解压缩速度。在IR系统中倒置列表中流行的Gamma和Golomb压缩方法执行得更糟，因为在我们的设置中，每当三重前缀发生变化时，间隙就可能很大。</p>
<p>我们还在我们的压缩方案之上试验了更强大的LZ77压缩。有趣的是，我们的压缩方案使用LZ77比原始数据压缩更好，因为增量编码在三元组中表现出共同的模式。附加的LZ77压缩大约减少索引大小两倍，但显着增加CPU时间，这对于复杂查询将变得至关重要。因此，RDF-3X发动机不使用LZ77。</p>
<p>压缩索引的一个重要考虑是每个叶页是单独压缩的。压缩更大的数据块导致更好的压缩（特别是与LZ77压缩相结合），但是逐页压缩有几个优点。首先，它允许我们寻找（通过B +树遍历）任何叶子页面，并直接开始读取三元组。如果我们压缩更大的块，我们经常需要解压缩前面的页面。第二，压缩索引的行为就像一个正常的B +树（有一个特殊的叶编码）。因此，可以像标准B +树中那样容易地进行更新。这极大地简化了压缩索引与其余引擎的集成，并保持其RISC性质。特别是，我们可以采用先进的并发控制和恢复方法进行索引管理，而无需任何更改。</p>
<blockquote>
<p>以上新的index 按字节压缩法索引方法 比既有所有的方案效率更优 大小更小(具体方法见上面伪代码)</p>
</blockquote>
<h2 id="Aggregated-Indices"><a href="#Aggregated-Indices" class="headerlink" title="Aggregated Indices"></a>Aggregated Indices</h2><p>对于许多SPARQL模式，索引部分三元组而不是完全三元组就足够了，如以下SPARQL查询所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select ?a ?c</span><br><span class="line">where &#123; ?a ?b ?c &#125;</span><br></pre></td></tr></table></figure>

<p>它计算通过任何谓词连接的所有?a和?c，和?b的具体是什么无关的。</p>
<p>因此，我们另外构建聚合索引，每个索引只存储三元组的三个列中的两个。更确切地说，它们存储两个条目（例如，主体和对象）以及聚合计数，即，该对在三元组的全集中的对数的数量。这对于三个可能的三个对中的每一个以及在每个排序顺序（SP，PS，SO，OS，PO，OP）中进行，从而添加另外六个索引。</p>
<p>计数是必要的，因为SPARQL语义。在输出中不会出现?b的具体值，但是需要对重复正确的计数。注意，聚合索引比全三重索引小得多;由六个附加索引导致的总数据库大小的增加是可以忽略的。</p>
<p>代替（值1，值2，值3），聚合索引存储（值1，值2，计数），否则它们被组织在B +树中，就像全三重压缩索引。叶编码略有不同，因为现在大多数变化包括值2中的间隙和低计数值。伪码如图4所示。</p>
<p>最后，除了三元组中的这些索引之外，我们还构建了所有三个包含just（value 1，count）条目的单值索引（编码类似）。虽然仅使用一个变量的三元模式可能很少，但单值索引非常小，并且它们可用简化了查询翻译。</p>
<h1 id="QUERY-PROCESSING-AND-OPTIMIZATION"><a href="#QUERY-PROCESSING-AND-OPTIMIZATION" class="headerlink" title="QUERY PROCESSING AND OPTIMIZATION"></a>QUERY PROCESSING AND OPTIMIZATION</h1><h2 id="Translating-SPARQL-Queries"><a href="#Translating-SPARQL-Queries" class="headerlink" title="Translating SPARQL Queries"></a>Translating SPARQL Queries</h2><p>编译SPARQL查询的第一步是将其转换为适合稍后优化的演算表示。我们构造一个可以被解释为关系元组演算的查询图表示。从SPARQL派生域演算会更容易，但元组演算更容易优化。</p>
<p>虽然SPARQL允许许多语法快捷方式来简化查询制定，但每个（连接）查询都可以被解析并扩展为一组三重模式。三元组的每个组件是文字或变量。解析器已经执行字典查找，即文字被映射到id。与域微积分类似，SPARQL指定必须为数据中每个出现的纯文本三元组生成变量绑定。当查询由单个三元模式组成时，我们可以使用第3节中的索引结构，并使用单个范围扫描回答查询。当查询由多个三元模式组成时，我们必须连接各个模式的结果。因此，我们在查询图表示上采用连接排序算法，如下面进一步讨论的。</p>
<p>每个三元模式对应于查询图中的一个节点。在概念上，每个节点需要对整个数据库进行适当的变量绑定和由字面量所引起的选择的扫描。虽然每个扫描都可以实现为单个索引范围扫描，但优化程序可能会选择不同的策略（见下文）。查询图中的边缘反映变量出现次数。当且仅当它们具有共同的（查询）变量时，连接两个节点。</p>
<p>当查询的projection子句包含distinct选项时，我们添加一个聚合运算符，以消除结果中的重复项。最后，我们添加一个字典查找操作符，将生成的ids返回到字符串。</p>
<h2 id="Optimizing-Join-Ordering"><a href="#Optimizing-Join-Ordering" class="headerlink" title="Optimizing Join Ordering"></a>Optimizing Join Ordering</h2><p>优化SPARQL执行计划的关键问题是连接排序。关于这个问题有大量文献，通常基于各种形式的动态规划（DP）或随机化（例如，[13,15,26,34]）的解决方案。然而，RDF和SPARQL的固有特性创建了具有特别要求的属性的联接查询，这些属性没有通过现有技术直接解决：</p>
<ol>
<li>PARQL查询往往包含星形子查询，用于组合同一实体的几个属性类属性。因此，必须使用可以创建浓密连接树（而不是专注于左深或右深树）的策略。</li>
<li>这些星形连接发生在长连接路径的各个节点，通常在路径的开始和结束。 SPARQL查询可以轻松导致三元组之间的10个或更多联接（例如，参见第6节中的我们的基准查询）。因此，精确优化需要非常快速的计划枚举和成本估计，或者需要求助于启发式近似。</li>
<li>我们希望利用我们的三重索引的特殊优势，鼓励大量使用合并连接（而不是哈希或嵌套循环连接），但这需要在生成连接计划时保持有趣的顺序非常小心。</li>
</ol>
<p>他的第一个要求排除了不能生成所有可能的星形链组合的方法。第二个要求强烈建议快速自下而上的方法，而不是基于转换的自上而下的枚举。第三个要求排除了基于抽样的计划枚举（或随机化优化方法），因为这些不太可能为具有超过10个联接的查询生成所有顺序保留计划。事实上，我们期望最具竞争力的执行计划具有特定的形式：它们将尽可能长地使用保持顺序的合并连接，并且仅针对最后几个运算符切换到散列连接。</p>
<p>我们的解决方案是基于自下而上的DP框架[26]。它使用针对基本关系的扫描来生成其DP表，在我们的情况下是三重模式。播种是两步法。首先，优化器分析查询以检查在查询的其他部分中使用哪些变量绑定。如果一个变量未被使用，它可以通过使用聚合索引（参见第3.3节）被抛出。注意，该投影在概念上通过索引中的计数信息保留基数;我们在下面4.4小节中讨论这个问题。在第二步中，优化器决定使用哪些适用的索引。有两个因素影响索引选择。当三重模式中的文字形成索引键的前缀时，它们由范围扫描自动处理。否则，读取的元组太多，需要额外的选择。另一方面，不同的索引可以以适合稍后的后续合并连接的顺序产生三元组，这可能具有比读取太多元组更低的总成本。因此，优化器为所有索引生成计划，并使用计划修剪机制来决定是否早些时候可以丢弃其中的一些。</p>
<p>修剪主要基于估计的执行成本。也就是说，优化器为每个生成的计划调用成本模型，并修剪由廉价替代品支配的等价计划。这种修剪机制依赖于订单优化[35]来决定计划是否可以被另一个计划支配。由于优化器可以对所有三重排列使用索引，它可以按任意顺序生成元组，这使得合并连接非常有吸引力。因此，如果计划更昂贵，但产生可以在以后使用的有趣的顺序，则保留计划。注意，排序不仅通过索引扫描创建，而且还通过选择引起的功能依赖性创建，因此顺序优化组件是不重要的[35]。从种子开始，通过连接较小问题的最佳解决方案创建更大的计划。在此过程中，所有属性处理逻辑实现为对可用等价类的推理，而不是单个变量绑定。每个计划将为每个等价类产生至多一个绑定。这既简化了流水线断路器前面的隐式投影，并允许自适应传递连接条件的检测（即a &#x3D; b ^ b &#x3D; c⇒a &#x3D; c）。</p>
<p>从种子开始，通过连接在查询图[26]中相邻的较小问题的最优解来创建更大的计划。 当查询包含由于FILTER谓词而产生的其他选择时，它们将尽快置于贪婪，因为它们通常价格不贵。 如果选择真的很昂贵，可以更好地将其集成到[9]中提出的DP运算符放置，但是我们没有进一步调查。 我们沿着这些线实现的DP方法非常快，并且能够为具有多达20个三元模式的连接查询计算精确的成本最优解。 我们测量了典型SPARQL场景的优化时间（以毫秒为单位），其中两个实体由星形子查询选择并通过连接模式链连接。 结果示于图5中。</p>
<h2 id="Handling-Disjunctive-Queries"><a href="#Handling-Disjunctive-Queries" class="headerlink" title="Handling Disjunctive Queries"></a>Handling Disjunctive Queries</h2><p>虽然连接查询更常用，但SPARQL还允许某些形式的析取。 UNION表达式返回由两个或多个模式组生成的绑定的并集。如果有任何结果，OPTIONAL表达式返回模式组的绑定，否则返回NULL值。在这种情况下，模式组是三重模式的集合，可能包含UNION和OPTIONAL表达式本身。</p>
<p>在优化期间，我们将UNION和OPTIONAL中的模式组视为嵌套子查询。也就是说，我们首先优化嵌套模式组（可能递归地），然后在外部查询的优化期间将它们视为具有特殊成本&#x2F;基数的基本关系。对于UNION，我们添加模式组结果的并集，就像它是一个基本关系一样，对于OPTIONAL，我们使用外连接将结果添加为基本关系。</p>
<p>原则上，可以更积极地优化这些查询，但是最有趣的优化需要使用旁路计划[37]或其他非树结构的执行计划，这超出了本工作的范围。这些优化只会为复杂的查询付出代价;当分离元素很简单时，我们的嵌套优化方案产生最优解。</p>
<h2 id="Preserving-Result-Cardinality"><a href="#Preserving-Result-Cardinality" class="headerlink" title="Preserving Result Cardinality"></a>Preserving Result Cardinality</h2><p>标准SPARQL语义要求产生正确数量的变量绑定，即使它们中有许多是重复的。 然而，从处理的角度来看，应该避免生产和保留重复的额外工作。</p>
<p>我们通过在查询处理期间跟踪每个元组的多重性来解决这个问题。 对非聚集索引的扫描总是产生1的多重性，而聚合索引将复制的数量报告为多重性。 连接运算符乘以多项式以获得每个输出元组的重复数。 注意，如果我们可以静态地推导出它在子计划中必须是1，我们可以可选地关闭多重跟踪。 当结果呈现给应用程序&#x2F;用户时，输出运算符根据指定的查询语义（distinct，reduced或standard）解释多重性。</p>
<h2 id="Implementation-Issues"><a href="#Implementation-Issues" class="headerlink" title="Implementation Issues"></a>Implementation Issues</h2><p>我们的运行时系统包括典型的代数运算符（merge-join，hash-join，filter，aggregation等）。与其他系统的一个显着区别是，我们的运行时系统是非常RISC风格的：大多数运算符只处理整数编码的id，消费和产生id元组流，比较id等。除了简化代码，这种减少的复杂性允许整洁的实现技巧。</p>
<p>例如，考虑使用B +树迭代器访问物理数据的索引扫描算子，将三元模式与数据进行比较。三元组中的每个条目都是必须生成或绑定到文字的id属性，如果它在前缀中会影响开始&#x2F;停止条件，或者如果未绑定的条目先到达，则意味着选择。而不是在运行时检查这些不同的条件，我们可以在查询编译时处理它们。每个条目都是id属性或文字。在三元组中有三个条目，这意味着有八种可能的组合。使用具有索引扫描算子的八个不同实现的单个方法接口，我们可以大大减少系统代码中的条件分支的数量。除了速度更快，每个专业操作员都更简单，因为它现在只实现其设置所需的逻辑。注意，我们只需要专门化步骤逻辑，每个专业化的代码少于10行。</p>
<p>这种RISC风格的简化型系统和简单，快速的操作系统的组合导致非常好的CPU性能。在我们的第6部分的评估中，我们包括温热缓存时间来演示这些效果。我们意识到这些类型的代码调优问题通常不被重视，但对于现代硬件的高性能至关重要。</p>
<h1 id="SELECTIVITY-ESTIMATES"><a href="#SELECTIVITY-ESTIMATES" class="headerlink" title="SELECTIVITY ESTIMATES"></a>SELECTIVITY ESTIMATES</h1><p>查询优化器在寻找最低成本执行计划时依赖其成本模型。 特别地，估计的基数（以及因此选择性）对计划生成具有巨大的影响。 虽然这是数据库系统中的标准问题，但RDF数据的无模式性质使统计数据生成复杂化。 我们提出两种统计。 第一个，专门的直方图，是通用的，可以处理任何种类的三重模式和联接。 它的缺点是它假定谓词之间的独立性，这通常在紧密耦合的三元模式中不成立。 因此，第二个统计量计算数据中的频繁连接路径，并为大型连接提供这些路径的更准确的预测。 在查询优化期间，我们使用连接路径基数（如果可用），否则假设独立性并使用直方图。</p>
<h2 id="Selectivity-Histograms"><a href="#Selectivity-Histograms" class="headerlink" title="Selectivity Histograms"></a>Selectivity Histograms</h2><p>虽然三元组在概念上形成具有三个列的单个表，但是在各个列上的直方图不是非常有用，因为大多数查询模式接触三元组的至少两个属性。相反，我们利用我们的聚合索引，这完全适合于计算三种模式选择性：对于每个文字或字面对，我们可以得到匹配三元组的确切数量与一个索引查找。不幸的是，这不足以估计连接选择性。此外，我们希望将成本模型的所有辅助结构保留在主存储器中。因此，我们进一步聚合索引，使得每个索引适合单个数据库页面并包括有关连接选择性的信息。</p>
<p>就像聚合索引一样，我们构建六个不同的统计信息，一个用于三元组中条目的每个顺序。从聚合索引开始，我们将具有长度为2的相同前缀的所有三元组放置在一个桶中，然后合并最小的两个相邻桶，直到总直方图足够小。这近似于等深度直方图，但避免将桶边界置于具有相同前缀的三元组之间（预期相似）。</p>
<p>对于每个桶，然后计算图6所示的统计量。前三个值 - 三元组的数量，不同的2-前缀的数量和不同的1-前缀的数量 - 被用于估计单个三元模式的基数。注意，这仅仅给出扫描基数，即，所扫描的三元组的数量，其确定索引扫描的成本。当字面量不是索引前缀的一部分并且稍后通过选择测试时，真正的结果基数（其影响后续运算符）实际上可能会降低。在这种情况下，我们通过重新排序文字来导出结果基数（并获得准确的预测），使所有文字都在前缀中。</p>
<p>如果桶中的三元组根据指定的连接条件连接到数据库中的所有其他三元组，则下一个值是连接伙伴的数量（即结果基数）。由于有九种方法来组合来自两个三元组的属性，我们预先计算了九个基数。例如，条目o &#x3D; s是有效的</p>
<p><code>|&#123;b|b ∈ current bucket&#125; 1 b.object=t.subject &#123;t|t ∈ all triples&#125;|</code></p>
<p>这些值在连接与桶完全匹配的模式时会提供完美的连接大小预测。通常情况不是这样，因此我们假定查询条件之间是独立的，并且乘以所涉及的谓词的选择性。 （这种独立性假设是用于可追踪性的最先进的查询优化器的标准）。</p>
<h2 id="Frequent-Paths"><a href="#Frequent-Paths" class="headerlink" title="Frequent Paths"></a>Frequent Paths</h2><p>上面讨论的直方图具有相当的准确性，并且适用于所有种类的谓词。他们的主要弱点是他们假设谓词之间的独立性。两种相关谓词通常出现在SPARQL查询中。首先，三种模式的“星”，其中具有不同谓词的多个三元模式共享相同的主题。这些用于选择特定主题（即，基于相同实体的不同属性的实体）。第二，三元模式的“链”，其中第一模式的对象是下一模式的主题，同样具有给定的谓词。这些链对应于长连接路径（跨不同实体）。由于这两种情况是常见的，我们另外构建专用统计信息以具有用于这样的查询的更准确的估计量。</p>
<p>为此，我们预先计算数据图中的频繁路径，并为它们保留精确的连接统计信息。这里的频率指的是具有相同标签序列的路径。注意，我们对于链和星使用术语路径，在两种情况下结构是相似的。我们通过谓词p 1，…，p的序列来表征路径P. 。 。 ，在其遍历中看到。使用SPARQL语法，我们定义一个（链）路径P p 1 ,…,p n as<br>P p 1 ,…,p n :&#x3D; select r 1 r n+1 where { (r 1 p 1 r 2 ).(r 2 p 2 r 3 ). . . . (r n p n r n+1 )}</p>
<p>星形路径定义类似，p 1 , . . . , p n在这种情况下是不排序的。我们计算最频繁的路径，即具有最大基数的路径，并实现它们的结果基数和路径描述p 1，…。 。 。 ，p n。使用此信息，我们可以准确地预测查询中出现的频繁路径的连接基数。同样，我们希望将这些统计信息保存在主内存中，从而计算最常见的路径，以便它们仍然适合单个数据库页面。在我们的实验中，我们可以在一个16KB页面上存储大约1000个路径。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FrequentPath(k)</span><br><span class="line">// Computes the k most frequent paths</span><br><span class="line">C 1 = &#123;P p |p is a predicate in the database&#125;</span><br><span class="line">sort C 1 , keep the k most frequent</span><br><span class="line">C = C 1 , i = 1</span><br><span class="line">do</span><br><span class="line">C i+1 = ∅</span><br><span class="line">for each p 0 ∈ C i , p predicate in the database</span><br><span class="line">if top k of C ∪ C i+1 ∪ &#123;P p 0 p &#125; includes all subpaths of p 0 p</span><br><span class="line">C i+1 = C i+1 ∪ &#123;P p 0 p &#125;</span><br><span class="line">if top k of C ∪ C i+1 ∪ &#123;P pp 0 &#125; includes all subpaths of pp 0</span><br><span class="line">C i+1 = C i+1 ∪ &#123;P pp 0 &#125;</span><br><span class="line">C = C ∪ C i+1 , sort C, keep the k most frequent</span><br><span class="line">C i+1 = C i+1 ∩ C, i = i + 1</span><br><span class="line">while C i 6 = ∅</span><br><span class="line">return C</span><br></pre></td></tr></table></figure>

<p>找到最常见的路径需要小心。虽然看起来这是一个标准的图表挖掘问题，但是该研究线中的普遍方法[16,44,49]，例如基于众所周知的Apriori频繁项目集挖掘算法，不是直接适用的。</p>
<p>与Apriori设置不同，我们的RDFpath意义上的常见路径不一定包含频繁的子路径。考虑具有两个星形链路群集的图，其中所有端节点分别通过谓词（边缘标记）p 1和p 2连接到它们各自的星形中心。现在考虑在两个星形中心之间具有谓词p 3的单个边。在这种情况下，路径P p 3将不频繁，而路径P p 1，p 3，p 2将是频繁的。因此，我们不能简单地使用Apriori算法。</p>
<p>我们的RDF设置中的另一个问题是周期，这可能导致看似无限长，无限频繁的路径。我们通过两种手段解决这个问题。首先，我们要求如果要保持频繁路径P，其所有子路径也必须保持。这对于查询优化目的是必需的，因为我们可能必须将长连接路径分解成较小的连接，并且它简化了频繁路径计算。第二，我们不是通过它们的结果基数而是通过它们的不同节点的数量对频繁路径进行排序。在树中，这两个是相同的，但是在循环的存在下，我们不对节点计数两次。</p>
<p>路径挖掘算法的伪代码如图7所示。它从长度为1的频繁路径开始，通过附加或前置谓词来放大它们。当新路径本身频繁并且其所有子路径仍然保持时，我们添加它。当没有新的路径可以添加时，我们停止。请注意，虽然伪代码显示了一个嵌套循环以方便表示，但我们实际上在实现中使用了一个join和一个group-by操作符。对于我们在实验中考虑的数据集，1000个最常见的路径可以在几分钟内确定。</p>
<h2 id="Estimates-for-Composite-Queries"><a href="#Estimates-for-Composite-Queries" class="headerlink" title="Estimates for Composite Queries"></a>Estimates for Composite Queries</h2><p>为了估计整个复合查询的整体选择性，我们将直方图与频繁路径统计相结合。具有具有对象字面量的三元模式的中间节点的长连接链被分解为最大长度的子链，使得只有它们的末端节点具有带有文字的三元模式。例如，像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?x 1 a 1 v 1 . ?x 1 p 1 ?x 2 . ?x 2 p 2 ?x 3 . ?x 3 p 3 ?x 4 .</span><br><span class="line">?x 4 a 4 v 4 . ?x 4 p 4 ?x 5 . ?x 5 p 5 ?x 6 . ?x 6 a 6 v 6</span><br></pre></td></tr></table></figure>

<p>具有属性谓词a 1，a 4，a 6，v 1，v 4，v 6和关系谓词p 1至p 5的将被分解为p 1 -p 2 -p 3和p 4 -p 5和每个主题选择a 1 -v 1，a 4 -v 4和a 6 -v 6。我们使用频繁路径统计来估计两个连接子链的选择性以及用于选择的直方图。然后，在没有任何其他统计量的情况下，我们假设不同的估计量在概率上是独立的，导致具有每个子链和每个选择估计的乘积公式作为因子。如果不是像?x 6 a 6 v 6这样的简单属性值选择，我们具有星形图案诸如?x 6 a 6 u 6 . ?x 6 b 6 v 6 . ?x 6 c 6 w 6具有属性a 6 ,b 6 , c 6和对应的对象文字u 6，v 6，w 6，我们将首先使用星的频繁路径统计调用星形模式的估计器，然后将它们与产品形式中的其他估计值组合。</p>
<h1 id="EVALUATION"><a href="#EVALUATION" class="headerlink" title="EVALUATION"></a>EVALUATION</h1><h2 id="General-Setup"><a href="#General-Setup" class="headerlink" title="General Setup"></a>General Setup</h2><p>为了评估RDF-3X的性能，我们使用了具有不同特性的三个大数据集，并将查询运行时与其他方法（下面讨论）进行比较。所有实验在具有2Ghz Core 2 Duo处理器，2GBytes内存并运行64位Linux 2.6.24内核的Dell D620 PC上进行。对于冷缓存实验，我们使用&#x2F; proc &#x2F; sys &#x2F; vm &#x2F; drop caches内核接口删除所有文件系统缓存，然后重新启动各个被测试的系统。我们重复了所有查询五次（包括删除缓存和系统重新启动），并获得最佳结果，以避免操作系统活动造成的工件。对于温暖的缓存，我们运行查询五次，而不删除缓存，再次采取最佳的运行时。<br>我们的主要比较是在[1]中提出的基于列存储的方法，已经被证明是高度优于所有其他基于DBMS的方法在该文件。我们实现了[1]中描述的方法，但使用MonetDB 5.2.0 [27]作为后端，而不是CStore，因为C-Store不再维护，不在我们的硬件&#x2F;操作系统平台上运行。 C-Store网页<a href="http://db.csail.mit.edu/projects/cstore/%E5%BB%BA%E8%AE%AE%E4%BD%BF%E7%94%A8MonetDB%EF%BC%8C%E8%80%8CMonetDB%E5%B7%A5%E4%BD%9C%E6%AD%A3%E5%B8%B8%E3%80%82%E6%B3%A8%E6%84%8F%EF%BC%8C%E6%88%91%E4%BB%AC%E7%9A%84%E8%AE%BE%E7%BD%AE%E4%BD%BF%E7%94%A8%E7%9A%84%E7%A1%AC%E4%BB%B6%E6%AF%94[1]%E7%89%B9%E5%88%AB%E6%98%AF%E7%A1%AC%E7%9B%98%E6%98%AF%E6%AF%94%E5%9C%A8[1]%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%9A%84%E9%9D%9E%E5%B8%B8%E5%BF%AB%E7%9A%84RAID%E6%85%A26%E5%80%8D%EF%BC%8C%E4%BC%A0%E8%BE%93ca.%E9%A1%BA%E5%BA%8F%E8%AF%BB%E5%8F%96%E4%B8%AD%E4%B8%BA32">http://db.csail.mit.edu/projects/cstore/建议使用MonetDB，而MonetDB工作正常。注意，我们的设置使用的硬件比[1]特别是硬盘是比在[1]中使用的非常快的RAID慢6倍，传输ca.顺序读取中为32</a> MB &#x2F; s。考虑到这个因素6，MonetDB的性能数据与[1]中的C-Store数字相当。对于一个查询（Q6），MonetDB明显快于6（14s对10s），而另一个（Q7）明显更慢（61s对1.4s），但是MonetDB的整体性能比预期的要慢，因为硬盘较慢。</p>
<p>作为RDF-3X的第二个对手，我们使用PostgreSQL 8.3作为字符串字典和（主语，谓词，对象），（谓词，主语，对象）和（谓词，对象，主语）索引的三重存储。这模拟了Sesamestyle [8]存储系统。我们还尝试了当前版本的具有内置RDF支持的领先商业数据库系统，但是在其他系统的运行时间附近无法获得可接受的性能。当使用自己的RDF查询语言，尽管尝试几个自动调整选项，它执行速度比PostgreSQL三元组存储，即使对于简单的查询，并且无法在合理的时间执行更复杂的查询。因此，我们从演示中省略了它。<br>除了这些基于DBMS的对手之外，我们尝试了来自语义网络社区的几个可用作开源代码的系统。不幸的是，没有一个缩放到我们使用的数据集大小。我们首先尝试了惠普实验室语义网计划中出现的流行的Jena2系统[46]。我们使用Jena版本2.5.5与SDB 1.0包装程序和Apache Derby 10.3.2.1，但无法在24小时内导入我们的三个数据集。从文件增长来看，系统持续变慢，似乎没有在合理的时间内终止。我们还尝试了Yars2 [19,48]，但是再次无法在24小时内导入我们的任何数据集。最后，我们尝试了Sesame 2.0 [8,28]，它应该是最快的语义Web系统之一。 Sesame 2.0能够在13小时内导入Barton数据集，但后来需要ca.对于前两个查询中的每个查询为15分钟，并且由于更复杂的查询的过多的内存使用而崩溃。</p>
<p>请注意，MonetDB和RDF-3X都可以在不到半小时内导入数据集，并且可以按秒的顺序运行查询。 其他语义Web方法通常假定RDF数据适合主存储器，这不是这里的情况。 因此，下面的所有实验都只考虑RDF-3X，基于列存储的MonetDB顶层方法和基于PostgreSQL的三元组存储。 独立于数据库系统，下面讨论的每个数据集首先被带入因子分解形式：一个文件具有表示为整数三元组的RDF三元组和一个从整数到字面量的字典文件映射。 所有三个系统使用相同的文件作为输入，将它们加载到事实表和字典中。 第二阶段的加载时间和数据库大小如图8所示.MonetDB大小是加载后的初始大小。 运行基准后，大小为2.0 &#x2F; 2.4 &#x2F; 6.9 GB。 显然MonetDB根据需要构建一些索引结构。</p>
<h2 id="Barton-Dataset"><a href="#Barton-Dataset" class="headerlink" title="Barton Dataset"></a>Barton Dataset</h2><p>对于第一个实验，我们使用Barton库数据集和在[1]中提出的查询作为基准。我们按照[1]中所述处理数据，使用Redland解析器将其转换为三元形式，然后将三元组导入我们的RDF-3X系统。在[1]中，作者修剪了数据，由于C-Store的限制（他们删除所有三元组包含超过127字节的字符串和一些三元组与大量的加入合作伙伴）。我们保留完整的数据，并将其直接导入所有三个系统。总体上，数据包括51,598,328个不同的三元组和19,344,638个不同的字符串。原始数据为RDF（XML）格式的4.1 GB，三重形式的7.7 GB，以及包含所有索引和字符串字典的RDF-3X存储库中的2.8 GB。<br>我们使用[1]的查询作为我们的实验，但是由于它们在SQL中给出，我们不得不在SPARQL for RDF-3X中重新组织它们。附录A显示所有查询。我们的测量结果如图9所示。我们还包括查询集的几何平均值，它通常用作基准（例如，TPC）中的工作负载平均值度量，并且比极端异常值比算术平均值更具弹性。<br>第一个观察是，RDF-3X对所有查询执行得比MonetDB好多了，MonetDB本身的性能比PostgreSQL好得多（如[1]中所述）。我们首先讨论RDF-3X与MonetDB的结果。在比较冷缓存时间和热缓存时间时，很明显，磁盘I &#x2F; O对总体运行时间有很大的影响。 RDF-3X由于其高度压缩的索引结构而简单地读取较少的数据，因此在冷高速缓存的情况下优于MonetDB的典型因子为2至5，有时超过10。在暖缓存的情况下，差异通常较小但仍然很大（因子2，有时高得多）。一个有趣的数据点是查询Q4，其在构造的连接对方面相对昂贵，并且其中RDF-3X甚至在CPU主导的热缓存情况下表现非常好。此外，我们观察到除了I &#x2F; O和CPU使用率之外的第三个关键方面是内存消耗。查询Q5有一个非常大的中间结果。 MonetDB显然在主存储器中实现这些中间结果的部分。因此，只有少数数据库页面可以进行缓冲，这极大地损害了热缓存行为。</p>
<p>PostgreSQL对此数据集有问题，因为此基准的查询的性质。 几乎所有查询都是聚合查询（通常通过谓词聚合），结果基数很大，这需要昂贵的字典查找。 对于其他更自然的RDF查询，PostgreSQL的性能更好，我们将在接下来的两个小节中看到。<br>为了了解Yars2风格的系统如何扩展，我们实验禁用所有聚合索引。 这使几何平均值增加到9.52秒（冷）和1.04秒（暖），这显着慢于RDF-3X。 这仍然比其他系统快得多，特别是由于我们的运行时系统和查询优化器。</p>
<h2 id="Yago-Dataset"><a href="#Yago-Dataset" class="headerlink" title="Yago Dataset"></a>Yago Dataset</h2><p>Barton数据集是相对同质的，因为它描述了库数据。作为第二个数据集，我们因此使用Yago [40]，它包括从维基百科提取的事实（利用维基百科的信息框和类别系统），并与WordNet词库集成。 Yago数据集包含40,114,899个不同的三元组和33,951,636个不同的字符串，消耗3.1 GB作为（因式分解）三元组转储。 RDF-3X需要2.7 GB的所有索引和字符串字典。作为查询，我们考虑了三种不同的应用场景 - 面向实体，面向关系，以及具有未知谓词的查询 - 并导出八个基准查询，如附录A所示。这些查询比Barton查询更“自然”，因为它们是标准的SPARQL没有任何聚合和明确给定的谓词。另一方面，查询要大得多（需要更多的多对多连接），因此更难以优化和执行。<br>结果如图10所示。再次，RDF-3X显然胜过冷和暖缓存的其他两个系统，典型的因子为5到10.这里的PostgreSQL执行得比MonetDB好多了。这很可能是由于MonetDB中的连接顺序差。 warmcache运行时间几乎与冷缓存时间一样高，这表明MonetDB创建了大量的中间结果。<br>一般来说，这个数据集对于查询优化器来说更具挑战性，因为查询更复杂，选择性估计非常重要。在测试我们的系统时，我们注意到选择性误估可以很容易导致这个数据集减速10-100倍。 RDF-3X在运行时执行和优化器选择执行计划方面表现出极好的性能。</p>
<h2 id="LibraryThing-Dataset"><a href="#LibraryThing-Dataset" class="headerlink" title="LibraryThing Dataset"></a>LibraryThing Dataset</h2><p>作为第三个数据集，我们使用了LibraryThing书籍社交网络<a href="http://www.librarything.com的部分爬网。它包含9989个用户，5,973,703个不同的图书（由这些用户个人拥有）以及用户分配给这些图书的标记。总的来说，数据集由36,203,751个三元组和9,352,954个不同的字符串组成，其原始格式为1.8">www.librarything.com的部分爬网。它包含9989个用户，5,973,703个不同的图书（由这些用户个人拥有）以及用户分配给这些图书的标记。总的来说，数据集由36,203,751个三元组和9,352,954个不同的字符串组成，其原始格式为1.8</a> GB，RDF-3X为1.6 GB。这个数据集的一个特殊性是具有异构链接结构。在我们的RDF表示中，每个标记都映射到一个谓词，将用户链接到她标记的图书。由于不同标签的数量非常大，数据集包含338,824个不同的谓词，而其他两个数据集分别仅包含285和93个不同的谓词。虽然其他映射到RDF可能是可能的，但我们使用这种非示意性方法作为所有竞争系统的压力测试。<br>此数据使得RDF-3X的压缩更加困难，并且对MonetDB造成严重的问题。 MonetDB无法处理338,824个表，在文件系统中创建数百万个文件，并一直交换。因此，我们为此数据集使用MonetDB的混合存储方案。我们分割了[1]中描述的1000个最常用的谓词，并将剩余的三元组（大约12％）放在一个大的三元组表中。我们再次构造了三种查询：面向书，面向用户，浏览书和用户链（参见附录A）。与Yago数据集相反，几百万三元组中出现的谓词很少，这降低了连接排序决策的影响。另一方面，数据本身是非常不均匀的，使得选择性更难以预测。</p>
<p>结果如图11所示。在某些情况下，RDF-3X表现很好，优于对手的典型因素为至少5和大于30。 MonetDB和PostgreSQL之间没有明确的赢家。总体MonetDB似乎表现更好，但它崩溃了两次。它拒绝执行查询B3（“太多变量”），可能是因为它包括三个模式与可变谓词（因此至少3000次扫描）。在查询C2中，由于缺少磁盘空间，它在15分钟后崩溃，因为它实现了一个20 GB的中间结果（这是整个数据库大小的10倍）。查询A3由于其高运行时间而突出。<br>它与相对非选择性的谓词（书籍作者等）执行许多连接，这是昂贵的。其他“困难”查询（B3，C1，C2）本身并不那么难，他们只是需要正确的执行计划选择。例如，B3会找到所有标记为英语，法语和德语的图书的用户。 PostgreSQL通过收集用户拥有的所有图书对来启动此查询，这是非常昂贵的。另一方面，RDF-3X的优化器选择一个计划，收集每个标签的用户与这些书，然后加入结果，这是更有效率。</p>
<h1 id="CONCLUSION"><a href="#CONCLUSION" class="headerlink" title="CONCLUSION"></a>CONCLUSION</h1><p>本文提出了RDF-3X引擎，一个RISCstyle架构，用于对大型RDF三元组存储库执行SPARQL查询。正如我们的实验表明，RDF-3X的性能优于以前最好的系统。特别地，它解决了模式数据的挑战，并且与其对手不同，非常好地处理具有大量多样性的属性名称的数据。导致这些性能提高的RDF-3X的显着特征是：1）详尽但非常节省空间的三重索引，消除了对物理设计调整的需要，2）以非常快的合并连接为中心的简化的执行引擎，3）智能查询优化器，它选择成本最优的连接排序，并且甚至对于长连接路径（涉及10到20个连接）也可以有效地执行此操作; 4）基于提供给优化器成本模型的频繁路径的统计信息的选择性估计器。<br>我们未来的工作包括进一步改进查询优化器（例如，基于魔术集）以及支持超出当前SPARQL标准的RDF搜索功能。沿着后一行，一个方向是允许更强大的通配符模式的整个路径，在XPath后代轴的精神，但图形而不是树。已经提出了扩展SPARQL的建议[3]，但还没有实现。第二个方向是基于应用特定的评分模型提供查询结果的排名。这需要top-k查询处理，并对算法和查询优化提出具有挑战性的问题。最后，完整的SPARQL支持需要一些额外的信息，特别是打字信息。我们认为这可以包括在字典中，但确定最佳编码相对于运行时性能和压缩率需要更多的工作。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>现有的储存方式</p>
<ul>
<li>RDF Triples</li>
<li>by predicates</li>
</ul>
<p>RDF3X </p>
<ul>
<li>B+ tree</li>
<li>string&#x2F;literal -&gt; id ,Dictionary</li>
<li>RISC style reduced complexity </li>
<li>6-index  &amp;&amp; compressed index (chunk to leaf level compressed ?) &amp;&amp; store changes between index because of the neighboring index are similar</li>
<li>aggregated index</li>
</ul>
]]></content>
      <categories>
        <category>backend</category>
        <category>rdf</category>
      </categories>
      <tags>
        <tag>rdf</tag>
        <tag>document</tag>
      </tags>
  </entry>
  <entry>
    <title>Trinity RDF</title>
    <url>/Blog/16-01-03-trinity.rdf/</url>
    <content><![CDATA[<p>dgraph engine for web scale rdf data</p>
<h1 id="ABSTRACT"><a href="#ABSTRACT" class="headerlink" title="ABSTRACT"></a>ABSTRACT</h1><p>  现有的对于网络范围的RDF数据现有依然不是高效的,内部存储不用bitmap,other operations,</p>
<h1 id="INTRODUCTION"><a href="#INTRODUCTION" class="headerlink" title="INTRODUCTION"></a>INTRODUCTION</h1><p>挑战:可扩展性(急切)和普遍性,需要分布式,现有依然三元组,join巨大中间结果,过大的开销 通常指数级 ,现有不支持更有意义的查询 仅仅对SPARQL优化</p>
<p>作者的成就:分布式,处理billion even trillion triples ,不用 relational tables and bitmap matrices,build on top of a memory cloud,首先说 随机访问的情况下 用硬盘储存三元组不够优良 ,就算有好的索引也会因为额外的join操作,作为主要的查询中 耗时,in-memory graph exploration instead of join operations for SPARQL processing ,作为对比 之前的系统 孤立使用自己划分的三元组 没有用已有的 造成了很大的中间额外开销,介绍如何降低join 数量 如何降低中间过程的大小,并且就算没有足够好的划分 也有优秀的性能,我们允许大范围的图分析</p>
<ol>
<li>新的基于图表的管理RDF数据 ,有对于RDf 高效基于图查询 和 图分析 的可能性</li>
<li>新的查询规范(相对于SPARQL)有效的提高性能 减少总监结果 和提高系统可扩展性</li>
<li>新的价值模型 新的基数估计基数 分布式查询生成的优化算法 ,这些成果提供 在web 范围 RDF数据上 出色的性能</li>
</ol>
<p>Section 2  join操作 和 图探索 的区别. Section 3 Trinity.RDF 系统的架构. Section 4 how we model RDF data as native graphs. Section 5 describes SPARQL query processing techniques. Section 6 shows experimental results. We conclude in Section 8.</p>
<h1 id="Join-vs-Graph-Exploration"><a href="#Join-vs-Graph-Exploration" class="headerlink" title="Join vs. Graph Exploration"></a>Join vs. Graph Exploration</h1><p>RDF and SPARQL 的介绍 和 缺点(join 耗费高 中间无用结果大)</p>
<p>图探索 介绍方法 并说需要更高效的储存方式来适应这种方法 用native graph 会把原来的每次 读入O(log N)的时间复杂度降低为O(1) 需要搜索的顺序优化来 </p>
<h1 id="System-Architecture"><a href="#System-Architecture" class="headerlink" title="System Architecture"></a>System Architecture</h1><p>就是图储存,并且完全存在内存里 (因为是分布式的所以才可以储存这么多)</p>
<p>架构client,proxy,string server,trinity machine [看来陈榕老师就是按照这样的思路改的代码</p>
<h1 id="Data-Modeling"><a href="#Data-Modeling" class="headerlink" title="Data Modeling"></a>Data Modeling</h1><p>(node-id, in-adjacency-list, out-adjacency-listi)</p>
<p>讲图分割问题 对于自然图 用大度的点 连接点来决定放置未知 以及使用 in out<strong>间接id</strong>  可以有效减少发送数据交流量</p>
<p>但是对于邻点少的来说用另一种方法更好 同一个点的in和out放在同一个机器上的方法</p>
<p>还用了</p>
<ul>
<li>本地 谓词索引 sort all (predicate, node-id )</li>
<li>全局的 谓词索引 (predicate, hsubject-list i , object-list i i)</li>
</ul>
<p>提供基本图操作</p>
<ol>
<li>LoadNodes(predicate, direction): Return nodes that have an incoming or outgoing edge labeled as predicate. 使用全局谓词索引</li>
<li>LoadNeighborsOnMachine(node, direction, machine i): For a given node, return its incoming or outgoing neighbors that reside on machine i. 返回的是上面的间接id</li>
<li>SelectByPredicate(nid, predicate): From a given partial adjacency list specified by nid, return nodes that are labeled with the given predicate.<br>Figure 4.<br>LoadNodes(l2 , out) finds n2 on machine 1, and n3 on machine 2. LoadNeighborsOnMachine(n0 , in, 1) returns the partial adjacency list’s id in1 , and SelectByP redicate(in1 , l2 ) returns n2 .</li>
</ol>
<h1 id="Query-Processing"><a href="#Query-Processing" class="headerlink" title="Query Processing"></a>Query Processing</h1><p>先把 查询Q拆分为 q1 q2 q3…qn，然后让它们并行寻找 再最后再和并</p>
<h2 id="单个q的匹配方式"><a href="#单个q的匹配方式" class="headerlink" title="单个q的匹配方式"></a>单个q的匹配方式</h2><p>For a triple pattern q, our goal is to find all its matches R(q). Let P de[notes] the predicate in q, V denote the variables in q, and B(V ) denote the binding of V . If V is a free variable (not bound), we also use B(V ) to denote all possible values V can take.</p>
<p>从 S 去找 O ,写作q→</p>
<p>从 O 去找 S ,写作q←</p>
<p>分为两个阶段</p>
<p>src</p>
<p>用LoadNodes(本机)找到基于 所有可能predicate 的所有可能的src </p>
<p>对于所有可能src  在所有机器LoadNeighborsOnMachine(有远端操作)找<code>nid_i</code> 把结果M再发给所有机器</p>
<p>tgt</p>
<p>对于收到的结果M 的每一个(src,nid)</p>
<p>找所有的可能的predicate</p>
<p>用 SelectByPredicate(本机) 交 所有可能的tgt 得到R</p>
<p>方案是 合并相邻 的操作来减少中间过程的损耗</p>
<p>然后讲优化 也就是顺序优化</p>
<p>注意到用了合并以后 前面j个操作 只要集合相同 那么结果与前面j个的内部顺序无关</p>
<p>我们使用 启发式算法</p>
<p>Heuristic 1. We expand a subgraph from its exploration point. We combine two subgraphs by connecting their exploration points.</p>
<p>Property 1. We expand a subgraph or combine two subgraphs through an edge. The two nodes on both ends of the edge are valid exploration points in the new graph.</p>
<p>Theorem 1. For a query graph G(V, E), the DP has time complexity O(n·|V |·|E|) where n is the number of connected subgraphs in G.</p>
<p>Theorem 2. Any acyclic query Q with query graph G is guaranteed to have an exploration plan.</p>
<p>Discussion. There are two cases we have not considered formally: i) G is cyclic, and ii) G contains a join on predicates.</p>
]]></content>
      <categories>
        <category>backend</category>
        <category>rdf</category>
      </categories>
      <tags>
        <tag>rdf</tag>
        <tag>graph</tag>
      </tags>
  </entry>
  <entry>
    <title>rdf survey</title>
    <url>/Blog/16-01-04-survey/</url>
    <content><![CDATA[<p>贡献</p>
<ul>
<li>提供了系统分类的RDF存储管理器实现</li>
<li>容易检测到特定RDF存储管理器实现之间的差异</li>
<li>通过多进程环境获取有关有效进程的属性。</li>
</ul>
<p>Single(T,I,Q,S,J,C,D,F)</p>
<p>Table</p>
<ul>
<li>vertical</li>
<li>property</li>
<li>horizontal</li>
</ul>
<p>Indexx structure</p>
<ul>
<li>6-independent</li>
<li>GSPO-PGPS</li>
<li>matrix</li>
</ul>
<p>Query type</p>
<ul>
<li>SPARQL</li>
<li>original</li>
</ul>
<p>String translation method</p>
<ul>
<li>URI</li>
<li>literal</li>
<li>long</li>
<li>none</li>
</ul>
<p>Join optimization method</p>
<ul>
<li>RDBMS-based</li>
<li>column-strore-based</li>
<li>conventional ordering</li>
<li>pruning</li>
<li>none</li>
</ul>
<p>Cache type </p>
<ul>
<li>materialized-path-index</li>
<li>reified-statement</li>
<li>none</li>
</ul>
<p>Dabase engine type</p>
<ul>
<li>RDB</li>
<li>custom</li>
</ul>
<p>inference Feature type</p>
<ul>
<li>TBox 本体推断</li>
<li>ABox 断言推断</li>
<li>no</li>
</ul>
<p>Multiple(D,Q,S,A)</p>
<p>Data distribution method</p>
<ul>
<li>hash</li>
<li>data-source</li>
<li>none</li>
</ul>
<p>Query process distribution method type</p>
<ul>
<li>data-parallel</li>
<li>data-replication</li>
<li>none</li>
</ul>
<p>Stream process</p>
<ul>
<li>pipeline</li>
<li>none</li>
</ul>
<p>sharing Architecture</p>
<ul>
<li>memory</li>
<li>disk</li>
<li>nothing</li>
</ul>
<table>
<thead>
<tr>
<th>name</th>
<th>T</th>
<th>I</th>
<th>Q</th>
<th>S</th>
<th>J</th>
<th>C</th>
<th>D</th>
<th>F</th>
<th>D</th>
<th>Q</th>
<th>S</th>
<th>A</th>
</tr>
</thead>
<tbody><tr>
<td>3store</td>
<td>v</td>
<td></td>
<td>S</td>
<td>U</td>
<td>R</td>
<td></td>
<td>R</td>
<td>T</td>
<td>n</td>
<td>n</td>
<td>n</td>
<td></td>
</tr>
<tr>
<td>4store</td>
<td>v</td>
<td></td>
<td>S</td>
<td>U</td>
<td>o</td>
<td></td>
<td>R</td>
<td></td>
<td>h</td>
<td>p</td>
<td></td>
<td>n</td>
</tr>
<tr>
<td>Virtuoso</td>
<td>v</td>
<td>G</td>
<td>S</td>
<td>Ulo</td>
<td>R</td>
<td></td>
<td>R</td>
<td>TA</td>
<td>n</td>
<td>n</td>
<td>n</td>
<td></td>
</tr>
<tr>
<td>RDF-3X</td>
<td>v</td>
<td>6</td>
<td>S</td>
<td>Ul</td>
<td>o</td>
<td></td>
<td>R</td>
<td></td>
<td>n</td>
<td>n</td>
<td>n</td>
<td></td>
</tr>
<tr>
<td>Hexastore</td>
<td>v</td>
<td>6</td>
<td>o</td>
<td>Ul</td>
<td></td>
<td>n</td>
<td></td>
<td></td>
<td>n</td>
<td>n</td>
<td>n</td>
<td></td>
</tr>
<tr>
<td>Apache Jena</td>
<td>p</td>
<td></td>
<td>S</td>
<td>Ulo</td>
<td>R</td>
<td>r</td>
<td>R</td>
<td></td>
<td>n</td>
<td>n</td>
<td>n</td>
<td></td>
</tr>
<tr>
<td>SW-store</td>
<td>h</td>
<td></td>
<td></td>
<td>Uo</td>
<td>c</td>
<td>m</td>
<td>c</td>
<td></td>
<td>n</td>
<td>n</td>
<td>n</td>
<td></td>
</tr>
<tr>
<td>BitMat</td>
<td>v</td>
<td>m</td>
<td>S</td>
<td>Ul</td>
<td>p</td>
<td></td>
<td>c</td>
<td></td>
<td></td>
<td></td>
<td>p</td>
<td></td>
</tr>
<tr>
<td>AllegroGraph</td>
<td></td>
<td></td>
<td>S</td>
<td></td>
<td></td>
<td></td>
<td>c</td>
<td></td>
<td>h</td>
<td>p</td>
<td></td>
<td>m</td>
</tr>
<tr>
<td>Haddop&#x2F;HBase</td>
<td>h</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>c</td>
<td></td>
<td></td>
<td>p</td>
<td></td>
<td>m</td>
</tr>
<tr>
<td>wukong</td>
<td>v</td>
<td>???</td>
<td>S</td>
<td>Ul</td>
<td>c+?</td>
<td>?</td>
<td>R?</td>
<td>?</td>
<td>dh?</td>
<td>p</td>
<td>p</td>
<td>m</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>backend</category>
        <category>rdf</category>
      </categories>
      <tags>
        <tag>rdf</tag>
        <tag>post</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello world</title>
    <url>/Blog/16-06-02-Hello-World/</url>
    <content><![CDATA[<p><a href="https://github.com/CroMarmot/Blog/blob/gh-pages/_posts/2016-06-02-Hello-World.md">点击这里查看在github上的效果</a></p>
<p><a href="http://cromarmot.github.io/Blog/%E6%97%A5%E5%BF%97/Hello-World#code">点击这里查看在jekyll上的效果</a></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">Left-Aligned</th>
<th align="center">Center Aligned</th>
<th align="right">Right Aligned</th>
</tr>
</thead>
<tbody><tr>
<td align="left">lll</td>
<td align="center">mmm</td>
<td align="right">rrr</td>
</tr>
<tr>
<td align="left">qwertyuiop</td>
<td align="center">asdfghjkl</td>
<td align="right">zxcvbnm</td>
</tr>
</tbody></table>
<ul>
<li><input disabled="" type="checkbox"> lab<ul>
<li><input checked="" disabled="" type="checkbox"> lab1</li>
<li><input checked="" disabled="" type="checkbox"> lab2</li>
<li><input checked="" disabled="" type="checkbox"> lab3</li>
<li><input checked="" disabled="" type="checkbox"> lab4</li>
<li><input disabled="" type="checkbox"> lab5</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> a separate task</li>
</ul>
<p><img data-src="http://img4.duitang.com/uploads/item/201312/13/20131213221310_Yektr.thumb.700_0.jpeg" alt="南叔"></p>
<ul>
<li>Writer: <a href="http://cromarmot.github.io/">CroMarmot</a></li>
<li>Reference: <a href="https://help.github.com/articles/writing-on-github/">writing-on-github</a></li>
</ul>
<h1 id="jekyll-高亮代码"><a href="#jekyll-高亮代码" class="headerlink" title="jekyll 高亮代码"></a>jekyll 高亮代码</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//弃用?</span></span><br><span class="line">ruby</span><br><span class="line"></span><br><span class="line">&#123;% highlight ruby %&#125;</span><br><span class="line">def show</span><br><span class="line">  @widget = <span class="built_in">Widget</span>(params[:id])</span><br><span class="line">  respond_to <span class="keyword">do</span> |format|</span><br><span class="line">    format.html <span class="meta"># show.html.erb</span></span><br><span class="line">    format.json &#123; render json: @widget &#125;</span><br><span class="line">  end</span><br><span class="line">end</span><br><span class="line">&#123;% endhighlight %&#125;</span><br><span class="line"></span><br><span class="line">c++</span><br><span class="line"></span><br><span class="line">&#123;% highlight c++ linenos %&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;Hello World!&quot;</span>&lt;&lt;endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#123;% endhighlight %&#125;</span><br><span class="line"></span><br><span class="line">python</span><br><span class="line"></span><br><span class="line">&#123;% highlight python linenos %&#125;</span><br><span class="line">#!/usr/bin/python3</span><br><span class="line"># 计算面积函数</span><br><span class="line"><span class="function">def <span class="title">area</span><span class="params">(width, height)</span>:</span></span><br><span class="line"><span class="function">    return width * height</span></span><br><span class="line"><span class="function"> </span></span><br><span class="line"><span class="function">def print_welcome(name):</span></span><br><span class="line"><span class="function">    print(<span class="string">&quot;Welcome&quot;</span>, name)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">print_welcome(<span class="string">&quot;Runoob&quot;</span>)</span></span><br><span class="line"><span class="function">w =</span> <span class="number">4</span></span><br><span class="line">h = <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;width =&quot;</span>, w, <span class="string">&quot; height =&quot;</span>, h, <span class="string">&quot; area =&quot;</span>, <span class="built_in">area</span>(w, h))</span><br><span class="line"></span><br><span class="line">&#123;% endhighlight %&#125;</span><br><span class="line"></span><br><span class="line">php</span><br><span class="line"></span><br><span class="line">&#123;% highlight php linenos %&#125;</span><br><span class="line">&lt;?</span><br><span class="line"><span class="keyword">for</span> ($i=<span class="number">1</span>; $i&lt;=<span class="number">5</span>; $i++)</span><br><span class="line">&#123;</span><br><span class="line">  echo <span class="string">&quot;The number is &quot;</span> . $i . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line">&#123;% endhighlight %&#125;</span><br></pre></td></tr></table></figure>

<h1 id="TEST"><a href="#TEST" class="headerlink" title="TEST"></a>TEST</h1><p>This README.md is used to testing all kinds of syntax of GitHub Flavored Markdown.</p>
<hr>
<h3 id="Author-Jelly"><a href="#Author-Jelly" class="headerlink" title="Author:Jelly"></a>Author:Jelly</h3><h3 id="E-mail-x77-108-x79-x72-105-99-x73-64-x31-54-51-46-99-x6f-x6d"><a href="#E-mail-x77-108-x79-x72-105-99-x73-64-x31-54-51-46-99-x6f-x6d" class="headerlink" title="E-mail:&#x77;&#108;&#x79;&#x72;&#105;&#99;&#x73;&#64;&#x31;&#54;&#51;&#46;&#99;&#x6f;&#x6d;"></a>E-mail:<a href="mailto:&#x77;&#108;&#x79;&#x72;&#105;&#99;&#x73;&#64;&#x31;&#54;&#51;&#46;&#99;&#x6f;&#x6d;">&#x77;&#108;&#x79;&#x72;&#105;&#99;&#x73;&#64;&#x31;&#54;&#51;&#46;&#99;&#x6f;&#x6d;</a></h3><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a><a name="index"/>目录</h2><ul>
<li><a href="#line">横线</a></li>
<li><a href="#title">标题</a></li>
<li><a href="#text">显示文本</a><ul>
<li>普通文本</li>
<li>单行文本</li>
<li>多行文本</li>
<li>部分文字高亮</li>
</ul>
</li>
<li><a href="#link">超链接</a> <ul>
<li>文字超链接<ul>
<li>链接外部URL</li>
<li>链接本仓库里的URL</li>
<li>锚点</li>
</ul>
</li>
<li><a href="#piclink">图片超链接</a></li>
</ul>
</li>
<li><a href="#pic">显示图片</a><ul>
<li>来源于网络的图片</li>
<li>GitHub仓库中的图片</li>
</ul>
</li>
<li><a href="#dot">列表</a></li>
<li><a href="#symbol">符号包围</a></li>
<li><a href="#code">代码高亮</a></li>
</ul>
<a name="line"/>
## ***、---、___显示虚横线
***
---
___
 
 
 
<a name="title"/>
# 一级标题
## 二级标题
### 三级标题
#### 四级标题
##### 五级标题
###### 六级标题

<h2 id="显示文本"><a href="#显示文本" class="headerlink" title="显示文本"></a><a name="text"/>显示文本</h2><h3 id="普通文本"><a href="#普通文本" class="headerlink" title="普通文本"></a>普通文本</h3><p>这是一段普通的文本，<br>直接回车不能换行，<br><br>要使用&lt;br&gt;</p>
<p>  或者在回车以后，再加上两个空格。完成这种换行效果。</p>
<h3 id="单行文本"><a href="#单行文本" class="headerlink" title="单行文本"></a>单行文本</h3><pre><code>Hello,大家好，我是果冻虾仁。
</code></pre>
<h3 id="多行文本"><a href="#多行文本" class="headerlink" title="多行文本"></a>多行文本</h3><pre><code>欢迎到访
很高兴见到您
祝您，早上好，中午好，下午好，晚安
</code></pre>
<h3 id="部分文字高亮"><a href="#部分文字高亮" class="headerlink" title="部分文字高亮"></a>部分文字高亮</h3><p>Thank <code>You</code> . Please <code>Call</code> Me <code>Coder</code></p>
<h4 id="高亮功能更适合做一篇文章的tag"><a href="#高亮功能更适合做一篇文章的tag" class="headerlink" title="高亮功能更适合做一篇文章的tag"></a>高亮功能更适合做一篇文章的tag</h4><p>例如:<br><br><code>java</code> <code>网络编程</code> <code>Socket</code> <code>全双工</code></p>
<h2 id="文字链接"><a href="#文字链接" class="headerlink" title="文字链接"></a><a name="link"/>文字链接</h2><h3 id="链接外部URL"><a href="#链接外部URL" class="headerlink" title="链接外部URL"></a>链接外部URL</h3><p><a href="http://blog.csdn.net/guodongxiaren/article/details/23690801" title="悬停显示">我的博客</a></p>
<h3 id="链接本仓库里的URL"><a href="#链接本仓库里的URL" class="headerlink" title="链接本仓库里的URL"></a>链接本仓库里的URL</h3><p><a href="./Book">Book</a></p>
<h3 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h3><p><a href="#index">点此回到目录</a></p>
<h2 id="显示图片"><a href="#显示图片" class="headerlink" title="显示图片"></a><a name="pic"/>显示图片</h2><h3 id="来源于网络的图片"><a href="#来源于网络的图片" class="headerlink" title="来源于网络的图片"></a>来源于网络的图片</h3><p><img data-src="http://www.baidu.com/img/bdlogo.gif" alt="baidu" title="百度logo"></p>
<h3 id="GitHub仓库中的图片"><a href="#GitHub仓库中的图片" class="headerlink" title="GitHub仓库中的图片"></a>GitHub仓库中的图片</h3><p><img data-src="https://github.com/guodongxiaren/ImageCache/raw/master/Logo/foryou.gif"></p>
<h3 id="给图片加上超链接"><a href="#给图片加上超链接" class="headerlink" title="给图片加上超链接"></a><a name="piclink">给图片加上超链接</h3><p><a href="http://blog.csdn.net/guodongxiaren/article/details/23690801">![head]</a></p>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a><a name="dot"/>列表</h2><h3 id="圆点列表"><a href="#圆点列表" class="headerlink" title="圆点列表"></a>圆点列表</h3><ul>
<li>昵称：果冻虾仁</li>
<li>别名：隔壁老王</li>
<li>英文名：Jelly</li>
</ul>
<h3 id="更多圆点"><a href="#更多圆点" class="headerlink" title="更多圆点"></a>更多圆点</h3><ul>
<li>编程语言<ul>
<li>脚本语言<ul>
<li>Python</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="复选框列表"><a href="#复选框列表" class="headerlink" title="复选框列表"></a>复选框列表</h3><ul>
<li><input checked="" disabled="" type="checkbox"> C</li>
<li><input checked="" disabled="" type="checkbox"> C++</li>
<li><input checked="" disabled="" type="checkbox"> Java</li>
<li><input checked="" disabled="" type="checkbox"> Qt</li>
<li><input checked="" disabled="" type="checkbox"> Android</li>
<li><input disabled="" type="checkbox"> C#</li>
<li><input disabled="" type="checkbox"> .NET</li>
</ul>
<h2 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a><a name="symbol"/>缩进</h2><h3 id="用于列表"><a href="#用于列表" class="headerlink" title="用于列表"></a>用于列表</h3><blockquote>
<p>数据结构</p>
<blockquote>
<p>树</p>
<blockquote>
<p>二叉树</p>
<blockquote>
<p>平衡二叉树</p>
<blockquote>
<p>满二叉树</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<h3 id="用于引用："><a href="#用于引用：" class="headerlink" title="用于引用："></a>用于引用：</h3><h4 id="文本摘自《深入理解计算机系统》P27"><a href="#文本摘自《深入理解计算机系统》P27" class="headerlink" title="文本摘自《深入理解计算机系统》P27"></a>文本摘自《深入理解计算机系统》P27</h4><p>　令人吃惊的是，在哪种字节顺序是合适的这个问题上，人们表现得非常情绪化。实际上术语“little endian”（小端）和“big endian”（大端）出自Jonathan Swift的《格利佛游记》一书，其中交战的两个派别无法就应该从哪一端打开一个半熟的鸡蛋达成一致。因此，争论沦为关于社会政治的争论。只要选择了一种规则并且始终如一的坚持，其实对于哪种字节排序的选择都是任意的。</p>
<blockquote>
<p><b>“端”（endian）的起源</b><br><br>以下是Jonathan Swift在1726年关于大小端之争历史的描述：<br><br>“……下面我要告诉你的是，Lilliput和Blefuscu这两大强国在过去36个月里一直在苦战。战争开始是由于以下的原因：我们大家都认为，吃鸡蛋前，原始的方法是打破鸡蛋较大的一端，可是当今的皇帝的祖父小时候吃鸡蛋，一次按古法打鸡蛋时碰巧将一个手指弄破了，因此他的父亲，当时的皇帝，就下了一道敕令，命令全体臣民吃鸡蛋时打破较小的一端，违令者重罚。”</p>
</blockquote>
<h2 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a><a name="code"/>代码高亮</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]args)</span>&#123;&#125; <span class="comment">//Java</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> <span class="comment">//C</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello GitHub&quot;</span><span class="comment">#Bash</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myH1&quot;</span>).<span class="property">innerHTML</span>=<span class="string">&quot;Welcome to my Homepage&quot;</span>; <span class="comment">//javascipt</span></span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">string &amp;<span class="keyword">operator</span>+(<span class="type">const</span> string&amp; A,<span class="type">const</span> string&amp; B) <span class="comment">//cpp</span></span><br></pre></td></tr></table></figure>

<h2 id="插入表格"><a href="#插入表格" class="headerlink" title="插入表格"></a>插入表格</h2><table>
<thead>
<tr>
<th>First Header</th>
<th>Second Header</th>
</tr>
</thead>
<tbody><tr>
<td>Content Cell</td>
<td>Content Cell</td>
</tr>
<tr>
<td>Content Cell</td>
<td>Content Cell</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>First Header</th>
<th>Second Header</th>
</tr>
</thead>
<tbody><tr>
<td>Content Cell</td>
<td>Content Cell</td>
</tr>
<tr>
<td>Content Cell</td>
<td>Content Cell</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>Name</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>Help</td>
<td>Display the help window.</td>
</tr>
<tr>
<td>Close</td>
<td>Closes a window</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>Name</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>Help</td>
<td><del>Display the</del> help window.</td>
</tr>
<tr>
<td>Close</td>
<td><em>Closes</em> a window</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">Left-Aligned</th>
<th align="center">Center Aligned</th>
<th align="right">Right Aligned</th>
</tr>
</thead>
<tbody><tr>
<td align="left">col 3 is</td>
<td align="center">some wordy text</td>
<td align="right">$1600</td>
</tr>
<tr>
<td align="left">col 2 is</td>
<td align="center">centered</td>
<td align="right">$12</td>
</tr>
<tr>
<td align="left">zebra stripes</td>
<td align="center">are neat</td>
<td align="right">$1</td>
</tr>
</tbody></table>
<p>公式测试</p>
<script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML"></script>

<p>$$<br>\Gamma(z) &#x3D; \int_0^\infty t^{z-1}e^{-t}dt,.<br>$$</p>
<p>$\Gamma(z) &#x3D; \int_0^\infty t^{z-1}e^{-t}dt,.$</p>
<h3 id="UML-diagrams"><a href="#UML-diagrams" class="headerlink" title="UML diagrams"></a>UML diagrams</h3><p>You can also render sequence diagrams like this:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Alice-&gt;Bob: Hello Bob, how are you?</span><br><span class="line">Note right of Bob: Bob thinks</span><br><span class="line">Bob--&gt;Alice: I am good thanks!</span><br></pre></td></tr></table></figure>

<p>And flow charts like this:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">st=&gt;start: Start</span><br><span class="line">e=&gt;end</span><br><span class="line">op=&gt;operation: My Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs mongodb angularjs 个人笔记</title>
    <url>/Blog/17-01-21-node-mongo-angularjs/</url>
    <content><![CDATA[<h1 id="mongodb-学习记录"><a href="#mongodb-学习记录" class="headerlink" title="mongodb 学习记录"></a>mongodb 学习记录</h1><h2 id="本文依赖"><a href="#本文依赖" class="headerlink" title="本文依赖"></a>本文依赖</h2><p><code>nodejs</code></p>
<p><code>mongodb</code></p>
<p><code>angularjs</code></p>
<h2 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h2><p><a href="P7">工作总图</a></p>
<h2 id="Detail"><a href="#Detail" class="headerlink" title="Detail"></a>Detail</h2><h3 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h3><p>事件驱动可扩展性，端到端</p>
<blockquote>
<p>npm install</p>
</blockquote>
<blockquote>
<p>npm search</p>
</blockquote>
<blockquote>
<p>npm install -g</p>
</blockquote>
<blockquote>
<p>npm install -g npm-check</p>
</blockquote>
<blockquote>
<p>npm-check -u -g</p>
</blockquote>
<p><a href="P43-45">模块封装</a></p>
<p><a href="P51-P55">事件模型 阻塞I&#x2F;O</a></p>
<h4 id="发送接受P59"><a href="#发送接受P59" class="headerlink" title="发送接受P59"></a>发送接受P59</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> events = <span class="built_in">require</span>(<span class="string">&quot;events&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> emitter=events.<span class="title class_">EventEmitter</span>();</span><br><span class="line">emitter.<span class="title function_">emit</span>(eventName,data);</span><br><span class="line">.<span class="title function_">addListener</span>(eventName,<span class="title function_">callback</span>(data))</span><br><span class="line">.<span class="title function_">on</span>(eventName,<span class="title function_">callback</span>(data))</span><br><span class="line">.<span class="title function_">once</span>(eventName,<span class="title function_">callback</span>(data))</span><br></pre></td></tr></table></figure>
<p>json&#x2F;buffer&#x2F;stream(网页流数据&#x2F;压缩解压) -P90</p>
<p>文件系统 -P107</p>
<p>require(“fs”)</p>
<p>HTTP:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">require(&quot;http&quot;)</span><br><span class="line">require(&quot;url&quot;)</span><br><span class="line">require(&quot;querystring&quot;)</span><br></pre></td></tr></table></figure>

<p>HTTPS:P127-</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">openssl genrsa -out server.pem 2048</span></span><br><span class="line"><span class="comment">openssl req -new -key server.pem -out server.csr</span></span><br><span class="line"><span class="comment">openssl x509 -req -days 365 -in server.csr -signkey server.pem -out server.crt</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> https = <span class="built_in">require</span>(<span class="string">&quot;https&quot;</span>);                                                                                                                          </span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line">  <span class="attr">key</span>: fs.<span class="title function_">readFileSync</span>(<span class="string">&quot;./server.pem&quot;</span>),</span><br><span class="line">  <span class="attr">cert</span>: fs.<span class="title function_">readFileSync</span>(<span class="string">&quot;./server.crt&quot;</span>)</span><br><span class="line">&#125;;</span><br><span class="line">https.<span class="title function_">createServer</span>(options,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line">  res.<span class="title function_">writeHead</span>(<span class="number">200</span>);</span><br><span class="line">  res.<span class="title function_">end</span>(<span class="string">&quot;Hello Secure World\n&quot;</span>);</span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">8128</span>);</span><br></pre></td></tr></table></figure>

<p>socket P132-</p>
<p>多处理器</p>
<p><code>process</code></p>
<p><code>child_process</code></p>
<p><code>cluster,worker</code>实现多个”线程”监听一个port并可自动处理<code>cluster_server.js /cluster_worker.js/cluster_client.js</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">process.stdin.on(&quot;data&quot;,function(data)&#123;;&#125;);</span><br><span class="line">process.on(&quot;SIGINT&quot;,function()&#123;;&#125;);</span><br><span class="line">process.on(&quot;SIGBREAK&quot;,function()&#123;;&#125;);</span><br></pre></td></tr></table></figure>
<p><code>https://raw.githubusercontent.com/bwdbooks/nodejs-mongodb-angularjs-web-development/master/ch09/process_info.js</code></p>
<p><code>exec() / execFile()/spawn()</code></p>
<p>其它模块介绍,runnoob上也有<a href="https://nodejs.org/api/">https://nodejs.org/api/</a></p>
<p><code>os</code>见<code>os_info.js</code></p>
<p><code>util</code>有<code>format,log,debug,checktype,转对象为字串</code>原型继承见<code>util_inherit.js</code></p>
<p><code>dns</code>有lookup不同level的resolve</p>
<h4 id="Express-server"><a href="#Express-server" class="headerlink" title="Express(server)"></a>Express(server)</h4><p>npm install express</p>
<p>route,Error handle,易于集成,cookie,会话缓存</p>
<p><code>_http_https.js</code> <code>require(&#39;url&#39;)</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app.get(&#x27;/user/:userid&#x27;,function(req.res)&#123;</span><br><span class="line">	res.send(&quot;Get User: &quot;+ req.param(&quot;userid&quot;));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><code>express_routes.js</code> 路由demo&#x2F;req.params&#x2F;正则&#x2F;Request对象&#x2F;Response对象</p>
<p><code>express_json.js/express_send_file.js/res.download([path])/res.redirect()</code></p>
<p>模板引擎<code>ejs+jade</code>,<code>express_templates.js and other files</code></p>
<p>中间件大法</p>
<p><code>app.use(path,bodyParser()).use(path,bodyParser()).use(path,bodyParser());</code></p>
<p><code>app.get(path,bodyParser(),function(req,res)&#123;&#125;);</code></p>
<ul>
<li><code>static 内置 流式处理静态文件访问</code></li>
<li><code>express-logger </code></li>
<li><code>basic-auth-connect基本身份验证</code></li>
<li><code>cookie-parser读取设置cookie</code></li>
<li><code>cookie-session/会话支持</code></li>
<li><code>express-session,相当强大会话实现</code></li>
<li><code>body-parser req正文中的JSON解析为req.body</code></li>
<li><code>compression 对客户端大响应提供Gzip支持</code></li>
<li><code>csurf 跨站点请求 伪造保护</code></li>
</ul>
<p>res.query. 用于查询把url转化为json</p>
<p>静态文件服务</p>
<p><code>app.use(pathurl,express.static(path_file_or_dir_local)[,config]);//maxAge hidden redirect index</code></p>
<p><code>auth_session.js</code> 会话+验证</p>
<h3 id="mongodb-NoSQL"><a href="#mongodb-NoSQL" class="headerlink" title="mongodb(NoSQL)"></a>mongodb(NoSQL)</h3><p>针对文档，高性能，高可用性，高可扩展性</p>
<p><a href="https://docs.mongodb.com/manual/installation/">安装</a></p>
<p><a href="https://docs.mongodb.com/manual/reference/bson-types/">mongodb类型</a></p>
<p><a href="http://www.runoob.com/mongodb/mongodb-tutorial.html">基础教程</a></p>
<p>封顶集合(capped collection) 超过大小以旧的替代新的</p>
<p>索引？分片？复制？</p>
<p>生命周期？应用程序代码控制或者TTL</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">help &lt;option&gt;</span><br><span class="line">use &lt;database&gt;</span><br><span class="line">show &lt;option&gt; (such as dbs,collections,profile,log)</span><br><span class="line">exit</span><br></pre></td></tr></table></figure>

<p>用户管理身份验证-P196</p>
<p>数据库管理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.copyDatabase(origin,destination)</span><br><span class="line">db.dropDatabase()</span><br><span class="line">db.createCollection(&quot;collectionname&quot;)</span><br><span class="line">coll =db.getCollection(&quot;collectionname&quot;)</span><br><span class="line">coll.drop()</span><br><span class="line">coll.find(&#123;&#x27;key&#x27;:&#x27;value&#x27;&#125;)</span><br><span class="line">coll.insert(&#123;&#x27;key&#x27;:&#x27;value&#x27;&#125;)</span><br><span class="line">coll.remove(&#123;&#x27;key&#x27;:&#x27;value&#x27;&#125;)</span><br><span class="line">coll.update(where,set,other option) //inc set push sort等update运算符</span><br></pre></td></tr></table></figure>

<p>mongo+nodejs</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install mongo</span><br><span class="line">npm install mongoose</span><br></pre></td></tr></table></figure>

<p>见 <code>db_connect_object.js</code></p>
<p><a href="http://www.cnblogs.com/zhongweiv/p/node_mongodb.html#node_mongodb">demo</a></p>
<p><code>db,Admin,Collection,Cursor</code>对象</p>
<p><code>atomically:findAndModify()/findAndRemove()</code></p>
<p><code>upsert()/save()/remove()</code></p>
<p>mongo可以直接执行js :<code>generate_data.js</code></p>
<p>count &#x2F; limit</p>
<p><code>aggregate([&#123;$match:&#123;tasdf:X&quot;&#125;&#125;,&#123;$group:&#123;asdf:&quot;agqwe&quot;,sdfo:&#123;$sum:&quot;agqwe&quot;&#125;&#125;&#125;])</code> &#x2F;&#x2F;mapreduce? 聚合</p>
<p>mongoose结构化模式与验证 </p>
<p><code>mongoose/schema/query/Document</code></p>
<p><code>mongoose_find.js/_create.js/_save/_update_one</code></p>
<p><code>***.validate(function(value)&#123;;&#125;)</code></p>
<p>中间件</p>
<p><code>pre/post</code></p>
<p>mongoDB高级</p>
<p>ensureIndex &#x2F;MongoClient</p>
<p>分片集群等等 GridFS&#x2F;GridStore</p>
<p>修复 备份</p>
<h3 id="angularjs"><a href="#angularjs" class="headerlink" title="angularjs"></a>angularjs</h3><p> 数据绑定，可扩展性，整洁，可重用，整洁，支持，兼容性</p>
<p>MVC</p>
<p><code>node_server.js</code>simple demo</p>
<p>专有对象提供器<code>animation,controller,filter,directive</code></p>
<p>服务提供器<code>value,constant,factory,service,provider</code></p>
<p>注入<code>21 injector.js</code></p>
<p>作用域+<code>广播emit/broadcast/on</code>-&gt;<code>event</code>的属性<code>targetScope/currentScope/name/stopPropagation/preventDefault/defaultPrevented</code></p>
<p><code>ng-model,data-ng-model,x-ng:model,ng_model</code> 都被规范化为<code>ngModel</code></p>
<p>内置过滤器<code>currency,filter:exp:compare,json,limitTo:limit,lowercase,uppercase,number[:fraction],orderBy:exp:reverse,date[:format]</code></p>
<p>DIY过滤器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">angular.module(***).filter(&#x27;fff&#x27;,function()&#123;return function(leftinput,argument)&#123;return result;&#125;&#125;)</span><br><span class="line">controller(&#x27;aController&#x27;,[&#x27;$scope&#x27;,&#x27;fffFilter&#x27;,function($scope,fffFilter)&#123;</span><br><span class="line">	;//直接在html上用 或者 用作函数也行</span><br><span class="line">&#125;])</span><br></pre></td></tr></table></figure>

<p>支持AngularJS模板功能的指令&#x2F;表单 P411-419</p>
<p>24<code>directive_custom.js/html</code></p>
<ul>
<li><code>template</code>允许你定义插入指令的元素的AngularJS模板</li>
<li><code>templateUrl</code>同上但是是url</li>
<li><code>restrict</code>允许你指定该指令 <code>A</code>属性名<code>E</code>元素名<code>C</code>类名</li>
<li><code>replace</code>取代元素</li>
<li><code>transclude</code>内部是否可以访问内部作用域以外的作用域</li>
<li><code>scope</code>指定内部作用域，<code>&#123;&#125;</code>隔离 <code>@funcname</code>&#x2F;<code>@</code> 绑定到DOM <code>=</code> 双向绑定 <code>&amp;</code> 局部绑定到指定scope</li>
<li><code>link</code>指定 作用域 DOM元素 和其它能操作DOM属性的链接函数</li>
<li><code>controller</code></li>
<li><code>require</code>所需要的其它指令</li>
</ul>
<p>内置常用服务</p>
<p><code>animate(css),cacheFactory,compile,cookies,document,http,interval,locale,location,resource,rootElement,rootScope,route,sce,templateCache,timeout/interval,window.alert,</code></p>
<p><code>$http</code> 请求<code>delete/get/head/jsonp/post/put</code></p>
<p>26章完整登陆注册验证实例</p>
<p>社交媒体账户作为身份验证来源 <code>npm install passport/passport-google/passport-facebook/passport-twitter</code> 已验证后的序列化和反序列化 <code>google_auth.js</code></p>
<p>27定义评论回复照片和页面模型 &#x2F;mongoose model schema的应用 更复杂的控制实现 和 angularJS的service应用&#x2F;</p>
<p>28购物车 mongoose model schema的应用</p>
<p>建议的代码文件结构方式,代码编码顺序[bg(node)&#x2F;view(html[css])&#x2F;fg(angularJS)]</p>
<p>29 选项卡 天气服务 可拖动组件 交互表格数据</p>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
        <tag>AngularJS</tag>
        <tag>mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title>linux 为什么比 windows 更安全</title>
    <url>/Blog/17-02-15-Why-Linux-Is-More-Secure-Than-Windows/</url>
    <content><![CDATA[<p>很久以前就有听说这个命题</p>
<p>但我始终也不能说出个所以然,最多的个人体验也就是root权限</p>
<p>知乎这种逐渐变为垃圾问答区的地方，显然是大量的0说服力的答案,慢慢变成百度知道了:-)</p>
<p>搜了一篇 <del>当做英文休闲阅读了</del></p>
<p><a href="http://www.pcworld.com/article/202452/why_linux_is_more_secure_than_windows.html">original link</a></p>
<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><ul>
<li>windows的想法是好的,闭源比开源更难攻击</li>
<li>事实上并没有得到预期的更好,由永无休止的补丁可证(?啊,Linux 没补丁的咯?)</li>
</ul>
<p>这里的意思并没有反驳闭源的安全性比开源更好 同样的linux(闭) &gt; <code>linux(开)</code> &gt; <code>windows(闭)</code> &gt; 同样的windows(开)</p>
<p>安全性:同样<code>A</code>,<code>A(闭源) &gt; A(开源)</code>，但开源带来的可以让<code>A</code>变成<code>A+</code> 那么安全性上,<code>A+(开)</code> 是可能 &gt; <code>A(闭)</code>的</p>
<h2 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h2><p>windows</p>
<ul>
<li>日常运行 对于文件:高权限</li>
<li>能够操作任何电脑上任何文件</li>
</ul>
<p>Linux</p>
<ul>
<li>日常运行 对于文件:低权限</li>
<li>只能操作当前用户有权限的文件</li>
</ul>
<p>也就是说用户的文件等在Linux 还是有同样的风险? </p>
<p>这里原文没有说细,[对于不同用户,windows是可以操作他人的文件,而linux可一通过权限控制在一个用户内+共享?]</p>
<p>小总结:Linux 也不是绝对可靠</p>
<ul>
<li>更难发生系统级别的破坏</li>
<li>更难发生用户层面广泛的破坏</li>
</ul>
<h2 id="社社社…社会工程学"><a href="#社社社…社会工程学" class="headerlink" title="社社社…社会工程学"></a>社社社…社会工程学</h2><p>好吧 说得有那么一点道理 (这里也有<code>执行时需要权限</code>属于上一部分的东西)</p>
<p>病毒呢 传播时 通常诱导用户添加&#x2F;点击&#x2F;安装</p>
<p>说是windos呢 例子:给个带exe附件的邮件并诱导你下载点击，然后 就完事了 (简言之 点3下就可以入侵)</p>
<p>但是linux呢 你下下来给它执行权限<code>chmod</code>么才行(简言之 要执行过程复杂繁琐+运行有系统级别破坏时需要系统权限)</p>
<p>个人看法</p>
<ul>
<li>不认可</li>
<li>如果把两边用户交换一下,linux 也能提供<code>点3下</code>就执行程序的,并且目前的易用操作系统的流程已经很简洁了</li>
<li>感觉这一点 大自和<code>用户习惯</code>,<code>使用方式</code>,<code>社区安全</code>,<code>用的人少</code>相联系</li>
</ul>
<h2 id="单种效应"><a href="#单种效应" class="headerlink" title="单种效应"></a>单种效应</h2><p>…….这个名词 瞎翻译的,说的是 windows就一个,但linux 有各种分支,不同的邮件客户端,不同的架构,然后病毒的兼容性很难实现…..</p>
<p>仔细想一想 还是有那么些道理的 但我只想到作为server端，比如架构</p>
<p>外网—我们的linux1—我们的linux2—我们的linux3—我们的linux4(服务)—我们的linux5(数据)</p>
<p><code>那么要从外网进攻, 至少需要4个不同兼容性 而window就just do it again.... </code><br><code>讲道理的话....真有做这么多层这样防护的吗,目前只了解到 有 外网-server1-服务-数据这样的</code></p>
<p>以及,本身作为非系统的server的话,在不同的linux之间的移植能力，也会比 攻击程序 的移植能力强。</p>
<p>感觉有那么一些道理,对我还不是太有说服力，感觉比第二点说服力强很多</p>
<h2 id="用户多"><a href="#用户多" class="headerlink" title="用户多"></a>用户多</h2><p>个人看法</p>
<ul>
<li>不认可 </li>
<li>这只能说可能是 <code>当下linux</code>比<code>当下window</code>安全的一个原因</li>
<li>并不想讨论当下 我更喜欢数学上的 如果有相同的用户量呢 如果linux 比windows用户更多呢,如果真的是因为用户少而更安全,那我认为是无数学上的优势的</li>
<li>其它看法linux desktop 少，但linux server多啊 虽然数据并不多到那里去<a href="https://en.wikipedia.org/wiki/Usage_share_of_operating_systems">数据</a></li>
</ul>
<h2 id="开源"><a href="#开源" class="headerlink" title="开源"></a>开源</h2><p>就是上面我自己碎碎念的</p>
<p>大量的人能看到代码的bug,并及时去维护。</p>
<p>有利有弊吧</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>啊,唯一让我满意一点的就是<code>权限</code>的说明了…</p>
<p>这篇文章也没有深入到系统里,感觉还是很表面的东西,不过windows也不开源,不知道能不能找到逆向工程出来的系统级别的,和linux的系统级别的深入比较的文章。。。恩 我不打算自己研究 还是看文章好了，期望能找到</p>
<p>之后在一个长篇的知乎回答上得到了一点对于<code>权限</code>的补充说明”其繁殖速度必须超过其死亡(被消灭)的速度”</p>
<p>所以,我现在能想到一个没有杀软的linux的进攻(相对于windows点3下)即是 下载并运行(社会工程学<code>:-)</code>)-&gt;写入用户的需要管理员权限的可执行文件&#x2F;脚本文件?-&gt;用户执行了它-&gt;达到和windows点3下同样能达到的效果</p>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>article</tag>
      </tags>
  </entry>
  <entry>
    <title>four smart ptr</title>
    <url>/Blog/17-02-21-four-smart-ptr/</url>
    <content><![CDATA[<h1 id="四种指针"><a href="#四种指针" class="headerlink" title="四种指针"></a>四种指针</h1><p><a href="http://www.cnblogs.com/TenosDoIt/p/3456704.html">参考文</a></p>
<hr>
<h2 id="个人整理"><a href="#个人整理" class="headerlink" title="个人整理"></a>个人整理</h2><p>四个智能指针: <code>auto_ptr</code>, <code>shared_ptr</code>, <code>weak_ptr</code>, <code>unique_ptr</code> 其中后三个是c++11支持，并且第一个已经被c++11弃用。</p>
<h3 id="用于测试的结构体"><a href="#用于测试的结构体" class="headerlink" title="用于测试的结构体"></a>用于测试的结构体</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line">    Test(<span class="built_in">string</span> s)</span><br><span class="line">    &#123;</span><br><span class="line">        str = s;</span><br><span class="line">       <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Test creat\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~Test()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Test delete:&quot;</span>&lt;&lt;str&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">string</span>&amp; <span class="title function_">getStr</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">void</span> <span class="title function_">setStr</span><span class="params">(<span class="built_in">string</span> s)</span></span><br><span class="line">    &#123;</span><br><span class="line">        str = s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">void</span> <span class="title function_">print</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;str&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">private:</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="auto-ptr"><a href="#auto-ptr" class="headerlink" title="auto_ptr"></a><a href="http://www.cplusplus.com/reference/memory/auto_ptr/">auto_ptr</a></h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">auto_ptr</span>&lt;Test&gt; <span class="title function_">ptest</span><span class="params">(new Test(<span class="string">&quot;123&quot;</span>))</span>;</span><br><span class="line">    ptest-&gt;setStr(<span class="string">&quot;hello 0&quot;</span>);</span><br><span class="line">    ptest-&gt;print();</span><br><span class="line">    ptest.get()-&gt;print();</span><br><span class="line">    ptest-&gt;getStr() += <span class="string">&quot;world !&quot;</span>;</span><br><span class="line">    (*ptest).print();</span><br><span class="line">    ptest.reset(new Test(<span class="string">&quot;567&quot;</span>));</span><br><span class="line">    ptest-&gt;print();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">auto_ptr</span>&lt;Test&gt; <span class="title function_">ptest</span><span class="params">(new Test(<span class="string">&quot;789&quot;</span>))</span>;</span><br><span class="line">    <span class="built_in">auto_ptr</span>&lt;Test&gt; <span class="title function_">ptest2</span><span class="params">(new Test(<span class="string">&quot;JQK&quot;</span>))</span>;</span><br><span class="line">    ptest2 = ptest;</span><br><span class="line">    ptest2-&gt;print();</span><br><span class="line">    <span class="keyword">if</span>(ptest.get() == <span class="literal">NULL</span>)<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;ptest = NULL\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Test creat</span><br><span class="line">hello 0</span><br><span class="line">hello 0</span><br><span class="line">hello 0world !</span><br><span class="line">Test creat</span><br><span class="line">Test delete:hello 0world !</span><br><span class="line">567</span><br><span class="line">Test creat</span><br><span class="line">Test creat</span><br><span class="line">Test delete:JQK</span><br><span class="line">789</span><br><span class="line">Test delete:789</span><br><span class="line">Test delete:567</span><br></pre></td></tr></table></figure>

<h2 id="unique-ptr"><a href="#unique-ptr" class="headerlink" title="unique_ptr"></a><a href="http://www.cplusplus.com/reference/memory/unique_ptr/">unique_ptr</a></h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">unique_ptr</span>&lt;Test&gt; <span class="title function_">fun</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">unique_ptr</span>&lt;Test&gt;(new Test(<span class="string">&quot;789&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">unique_ptr</span>&lt;Test&gt; <span class="title function_">ptest</span><span class="params">(new Test(<span class="string">&quot;123&quot;</span>))</span>;</span><br><span class="line">    <span class="built_in">unique_ptr</span>&lt;Test&gt; <span class="title function_">ptest2</span><span class="params">(new Test(<span class="string">&quot;456&quot;</span>))</span>;</span><br><span class="line">    ptest-&gt;print();</span><br><span class="line">    ptest2 = <span class="built_in">std</span>::move(ptest);<span class="comment">//不能直接ptest2 = ptest</span></span><br><span class="line">    <span class="keyword">if</span>(ptest == <span class="literal">NULL</span>)<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;ptest = NULL\n&quot;</span>;</span><br><span class="line">    Test* p = ptest2.release();</span><br><span class="line">    p-&gt;print();</span><br><span class="line">    ptest.reset(p);</span><br><span class="line">    ptest-&gt;print();</span><br><span class="line">    ptest2 = fun(); <span class="comment">//这里可以用=，因为使用了移动构造函数</span></span><br><span class="line">    ptest2-&gt;print();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Test creat</span><br><span class="line">Test creat</span><br><span class="line">123</span><br><span class="line">Test delete:456</span><br><span class="line">ptest = NULL</span><br><span class="line">123</span><br><span class="line">123</span><br><span class="line">Test creat</span><br><span class="line">789</span><br><span class="line">Test delete:789</span><br><span class="line">Test delete:123</span><br></pre></td></tr></table></figure>

<h2 id="share-ptr"><a href="#share-ptr" class="headerlink" title="share_ptr"></a><a href="http://www.cplusplus.com/reference/memory/shared_ptr/">share_ptr</a></h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">shared_ptr</span>&lt;Test&gt; <span class="title function_">ptest</span><span class="params">(new Test(<span class="string">&quot;123&quot;</span>))</span>;</span><br><span class="line">    <span class="built_in">shared_ptr</span>&lt;Test&gt; <span class="title function_">ptest2</span><span class="params">(new Test(<span class="string">&quot;456&quot;</span>))</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ptest2-&gt;getStr()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ptest2.use_count()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    ptest = ptest2;<span class="comment">//&quot;456&quot;引用次数加1，“123”销毁</span></span><br><span class="line">    ptest-&gt;print();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ptest2.use_count()&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//2</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ptest.use_count()&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//2</span></span><br><span class="line">    ptest.reset();</span><br><span class="line">    ptest2.reset();<span class="comment">//此时“456”销毁</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;done !\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Test creat</span><br><span class="line">Test creat</span><br><span class="line">456</span><br><span class="line">1</span><br><span class="line">Test delete:123</span><br><span class="line">456</span><br><span class="line">2</span><br><span class="line">2</span><br><span class="line">Test delete:456</span><br></pre></td></tr></table></figure>

<hr>
<p>总结</p>
<p><code>auto_ptr</code> </p>
<ul>
<li>手动释放<strong>资源</strong> <code>.reset()</code></li>
<li>将指针置空,返回<strong>资源</strong>控制权 <code>.release()</code></li>
<li>用 <code>.get()==NULL</code> 判断是否为空</li>
</ul>
<p><code>unique_ptr</code></p>
<ul>
<li>和<code>auto_ptr</code>相似</li>
<li>不能使用两个智能指针赋值操作，应该使用<code>std::move</code></li>
<li>可以直接用if(ptest &#x3D;&#x3D; NULL)来判断是否空指针</li>
</ul>
<p><code>share_ptr</code></p>
<ul>
<li>使用计数机制来表明资源被几个指针共享,<code>.use_count()</code>来查看资源的所有者个数</li>
<li>没有release</li>
</ul>
<p><code>weak_ptr</code></p>
<ul>
<li>weak_ptr是用来解决shared_ptr相互引用时的死锁问题,如果说两个shared_ptr相互引用,那么这两个指针的引用计数永远不可能下降为0,资源永远不会释放。它是对对象的一种弱引用，不会增加对象的引用计数，和shared_ptr之间可以相互转化，shared_ptr可以直接赋值给它，它可以通过调用lock函数来获得shared_ptr。</li>
</ul>
]]></content>
      <categories>
        <category>backend</category>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>smart ptr</tag>
      </tags>
  </entry>
  <entry>
    <title>weibo搜索爬虫</title>
    <url>/Blog/17-03-14-collectWeiboDataByKeyword/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># coding: utf-8</span><br><span class="line"></span><br><span class="line">__version__ = &#x27;1.1.0&#x27;</span><br><span class="line">__author__ = &#x27;Zhu Jianqi (heloowird@gmail.com)&#x27;</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">以关键词收集新浪微博</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">import requests</span><br><span class="line">import wx</span><br><span class="line">import csv</span><br><span class="line">import codecs</span><br><span class="line">import sys</span><br><span class="line">import urllib</span><br><span class="line">import urllib2</span><br><span class="line">import re</span><br><span class="line">import json</span><br><span class="line">import hashlib</span><br><span class="line">import os</span><br><span class="line">import time</span><br><span class="line">import datetime</span><br><span class="line">import random</span><br><span class="line">from lxml import etree</span><br><span class="line">import logging</span><br><span class="line">import gzip</span><br><span class="line">from StringIO import StringIO</span><br><span class="line"></span><br><span class="line">class CollectData():</span><br><span class="line">    &quot;&quot;&quot;数据收集类</span><br><span class="line">        利用微博高级搜索功能，按关键字搜集一定时间范围内的微博。</span><br><span class="line"></span><br><span class="line">        大体思路：构造URL，爬取网页，然后解析网页中的微博ID。后续利用微博API进行数据入库。本程序只负责收集微博的ID。</span><br><span class="line"></span><br><span class="line">        登陆新浪微博，进入高级搜索，输入关键字”空气污染“，选择”实时“，时间为”2013-07-02-2:2013-07-09-2“，地区为”北京“，之后发送请求会发现地址栏变为如下：</span><br><span class="line">        http://s.weibo.com/wb/%25E7%25A9%25BA%25E6%25B0%2594%25E6%25B1%25A1%25E6%259F%2593&amp;xsort=time&amp;region=custom:11:1000&amp;timescope=custom:2013-07-02-2:2013-07-09-2&amp;Refer=g</span><br><span class="line"></span><br><span class="line">        是不是很长，其实很简单。</span><br><span class="line">            固定地址部分：http://s.weibo.com/wb/</span><br><span class="line">            关键字二次UTF-8编码：%25E7%25A9%25BA%25E6%25B0%2594%25E6%25B1%25A1%25E6%259F%2593</span><br><span class="line">            排序为“实时”：xsort=time</span><br><span class="line">            搜索地区：region=custom:11:1000</span><br><span class="line">            搜索时间范围：timescope=custom:2013-07-02-2:2013-07-09-2</span><br><span class="line">            可忽略项：Refer=g</span><br><span class="line">            显示类似微博：nodup=1    注：这个选项可多收集微博，建议加上。默认不加此参数，省略了部分相似微博。</span><br><span class="line">            某次请求的页数：page=1</span><br><span class="line"></span><br><span class="line">        另外，高级搜索最多返回50页微博，那么时间间隔设置最小为宜。所以该类设置为搜集一定时间段内最多50页微博。</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def __init__(self, keyword, startTime, savedir, interval=&#x27;50&#x27;, flag=True, begin_url_per = &quot;http://s.weibo.com/weibo/&quot;):</span><br><span class="line">        self.begin_url_per = begin_url_per  #设置固定地址部分，默认为&quot;http://s.weibo.com/weibo/&quot;，或者&quot;http://s.weibo.com/wb/&quot;</span><br><span class="line">        self.setKeyword(keyword)    #设置关键字</span><br><span class="line">        self.setStartTimescope(startTime)   #设置搜索的开始时间</span><br><span class="line">        # self.setRegion(region)  #设置搜索区域</span><br><span class="line">        self.setSave_dir(savedir)   #设置结果的存储目录</span><br><span class="line">        self.setInterval(interval)  #设置邻近网页请求之间的基础时间间隔（注意：过于频繁会被认为是机器人）</span><br><span class="line">        self.setFlag(flag)  #设置</span><br><span class="line">        self.logger = logging.getLogger(&#x27;main.CollectData&#x27;) #初始化日志</span><br><span class="line"></span><br><span class="line">    ##设置关键字</span><br><span class="line">    ##关键字需解码</span><br><span class="line">    def setKeyword(self, keyword):</span><br><span class="line">        #self.keyword = keyword.decode(&#x27;GBK&#x27;).encode(&quot;utf-8&quot;)</span><br><span class="line">        self.keyword = keyword</span><br><span class="line">        print &#x27;twice encode:&#x27;,self.getKeyWord()</span><br><span class="line"></span><br><span class="line">    ##设置起始范围，间隔为1小时</span><br><span class="line">    ##格式为：yyyy-mm-dd-HH</span><br><span class="line">    def setStartTimescope(self, startTime):</span><br><span class="line">        if not (startTime == &#x27;-&#x27;):</span><br><span class="line">            self.timescope = startTime + &quot;:&quot; + startTime</span><br><span class="line">        else:</span><br><span class="line">            self.timescope = &#x27;-&#x27;</span><br><span class="line"></span><br><span class="line">    # ##设置搜索地区</span><br><span class="line">    # def setRegion(self, region):</span><br><span class="line">    #     self.region = region</span><br><span class="line"></span><br><span class="line">    ##设置结果的存储目录</span><br><span class="line">    def setSave_dir(self, save_dir):</span><br><span class="line">        self.save_dir = save_dir</span><br><span class="line">        if not os.path.exists(self.save_dir):</span><br><span class="line">            os.mkdir(self.save_dir)</span><br><span class="line"></span><br><span class="line">    ##设置邻近网页请求之间的基础时间间隔</span><br><span class="line">    def setInterval(self, interval):</span><br><span class="line">        self.interval = int(interval)</span><br><span class="line"></span><br><span class="line">    ##设置是否被认为机器人的标志。若为False，需要进入页面，手动输入验证码</span><br><span class="line">    def setFlag(self, flag):</span><br><span class="line">        self.flag = flag</span><br><span class="line"></span><br><span class="line">    ##构建URL</span><br><span class="line">    def getURL(self):</span><br><span class="line">        return self.begin_url_per+self.getKeyWord()+&quot;&amp;typeall=1&amp;suball=1&quot;+&quot;&amp;timescope=custom:&quot;+self.timescope+&quot;&amp;page=&quot;</span><br><span class="line"></span><br><span class="line">    ##关键字需要进行两次urlencode</span><br><span class="line">    def getKeyWord(self):</span><br><span class="line">        once = urllib.urlencode(&#123;&quot;kw&quot;:self.keyword&#125;)[3:]</span><br><span class="line">        return urllib.urlencode(&#123;&quot;kw&quot;:once&#125;)[3:]</span><br><span class="line"></span><br><span class="line">    ##爬取一次请求中的所有网页，最多返回50页</span><br><span class="line">    def download(self, url, maxTryNum=4):</span><br><span class="line">        csvFile = open(self.save_dir + os.sep + &quot;weibo_kanbing.csv&quot;, &quot;ab&quot;)  #向结果文件中写微博ID</span><br><span class="line">        csvFile.write(codecs.BOM_UTF8)</span><br><span class="line">        content = csv.writer(csvFile, dialect=&#x27;excel&#x27;)</span><br><span class="line">        headers = &#123;&#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36&#x27;&#125;</span><br><span class="line">        cookie = &#123;&#x27;SINAGLOBAL&#x27;:&#x27;3726160468139.8677.1489128973894&#x27;, &#x27;un&#x27;:&#x27;18621677460&#x27;, &#x27;wvr&#x27;:&#x27;6&#x27;, &#x27;SWB&#x27;:&#x27;usrmdinst_12&#x27;, &#x27;SCF&#x27;:&#x27;At4nsWXnBTiLQgwnhEdGW1ipfDRoyBYdEIpm4KN7_ZN3C0BxRlQeyX0sHoQOK6bDqLR6HeBBiwo6wRFXfObIvnc.&#x27;, &#x27;SUB&#x27;:&#x27;_2A251wx_bDeRxGeNP7FIR9yjFwzyIHXVWuXYTrDV8PUNbmtBeLRjVkW8ia3o1WnWjknWq3t_Uh0UkKzBqsg..&#x27;, &#x27;SUBP&#x27;:&#x27;0033WrSXqPxfM725Ws9jqgMF55529P9D9Wh_ODAX.pd3QJ6U3yvqGKET5JpX5KMhUgL.Fo-pS057S0q41h52dJLoIEUBBEXLxKqL1hnL1KnLxK-LBKeLB-zLxK-L1K5L1K2LxK-L12qLBoet&#x27;, &#x27;SUHB&#x27;:&#x27;0vJ4Ss25HO1Ohu&#x27;, &#x27;ALF&#x27;:&#x27;1521001227&#x27;, &#x27;SSOLoginState&#x27;:&#x27;1489465228&#x27;, &#x27;_s_tentry&#x27;:&#x27;login.sina.com.cn&#x27;, &#x27;Apache&#x27;:&#x27;7301168373695.357.1489465207066&#x27;, &#x27;ULV&#x27;:&#x27;1489465207130:8:8:5:7301168373695.357.1489465207066:1489412710557&#x27;, &#x27;UOR&#x27;:&#x27;,,login.sina.com.cn&#x27;, &#x27;WBStorage&#x27;:&#x27;02e13baf68409715|undefined&#x27;&#125;</span><br><span class="line"></span><br><span class="line">        hasMore = True  #某次请求可能少于50页，设置标记，判断是否还有下一页</span><br><span class="line">        isCaught = False    #某次请求被认为是机器人，设置标记，判断是否被抓住。抓住后，需要复制log中的文件，进入页面，输入验证码</span><br><span class="line">        filter = set([])    #过滤重复的微博ID</span><br><span class="line"></span><br><span class="line">        i = 1   #记录本次请求所返回的页数</span><br><span class="line">        while hasMore and i &lt; 51 and (not isCaught):    #最多返回50页，对每页进行解析，并写入结果文件</span><br><span class="line">            source_url = url + str(i)   #构建某页的URL</span><br><span class="line">            data = &#x27;&#x27;   #存储该页的网页数据</span><br><span class="line">            goon = True #网络中断标记</span><br><span class="line"></span><br><span class="line">            ##网络不好的情况，试着尝试请求三次</span><br><span class="line">            for tryNum in range(maxTryNum):</span><br><span class="line">                try:</span><br><span class="line">                    # set header http://stackoverflow.com/questions/385262/how-do-i-send-a-custom-header-with-urllib2-in-a-http-request</span><br><span class="line">                    # see this http://stackoverflow.com/questions/1653591/python-urllib2-response-header , so you can see &#x27;gzip&#x27; in response header with urllib2.urlopen(URL).info()</span><br><span class="line">                    # and this http://stackoverflow.com/questions/3947120/does-python-urllib2-automatically-uncompress-gzip-data-fetched-from-webpage teach you how to decode gzip</span><br><span class="line">                    #</span><br><span class="line">                    #r = requests.get(source_url, cookies=cookie, headers=headers, timeout=12)</span><br><span class="line">                    send_headers = &#123;</span><br><span class="line">                            &quot;Accept&quot;:&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&quot;,</span><br><span class="line">                            &quot;Accept-Encoding&quot;:&quot;gzip, deflate, sdch&quot;,</span><br><span class="line">                            &quot;Accept-Language&quot;:&quot;zh-CN,zh;q=0.8,en;q=0.6&quot;,</span><br><span class="line">                            &quot;Cache-Control&quot;:&quot;no-cache&quot;,</span><br><span class="line">                            &quot;Connection&quot;:&quot;keep-alive&quot;,</span><br><span class="line">                            #&quot;Cookie&quot;:&quot;cookies here&quot;</span><br><span class="line">                            &quot;Host&quot;:&quot;s.weibo.com&quot;,</span><br><span class="line">                            &quot;Pragma&quot;:&quot;no-cache&quot;,</span><br><span class="line">                            &quot;Referer&quot;:&quot;http://s.weibo.com/&quot;,</span><br><span class="line">                            &quot;Upgrade-Insecure-Requests&quot;:&quot;1&quot;,</span><br><span class="line">                            &quot;User-Agent&quot;:&quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36&quot;</span><br><span class="line">                            &#125;</span><br><span class="line">                    req = urllib2.Request(source_url , headers=send_headers)</span><br><span class="line">                    r = urllib2.urlopen(req)</span><br><span class="line">                    if r.info().get(&#x27;Content-Encoding&#x27;) == &#x27;gzip&#x27;:</span><br><span class="line">                        buf = StringIO(r.read())</span><br><span class="line">                        f = gzip.GzipFile(fileobj=buf)</span><br><span class="line">                        html = f.read()</span><br><span class="line">                    else:</span><br><span class="line">                        html = r.read()</span><br><span class="line">                    data = html</span><br><span class="line">                    #print data</span><br><span class="line">                    break</span><br><span class="line">                except:</span><br><span class="line">                    if tryNum &lt; (maxTryNum-1):</span><br><span class="line">                        time.sleep(10)</span><br><span class="line">                    else:</span><br><span class="line">                        print &#x27;Internet Connect Error!&#x27;</span><br><span class="line">                        self.logger.error(&#x27;Internet Connect Error!&#x27;)</span><br><span class="line">                        self.logger.info(&#x27;filePath: &#x27; + self.save_dir)</span><br><span class="line">                        self.logger.info(&#x27;url: &#x27; + source_url)</span><br><span class="line">                        self.logger.info(&#x27;fileNum: &#x27; + str(fileNum))</span><br><span class="line">                        self.logger.info(&#x27;page: &#x27; + str(i))</span><br><span class="line">                        self.flag = False</span><br><span class="line">                        goon = False</span><br><span class="line">                        break</span><br><span class="line">            if goon:</span><br><span class="line">                lines = data.splitlines()</span><br><span class="line">                isCaught = True</span><br><span class="line">                for line in lines:</span><br><span class="line">                    ## 判断是否有微博内容，出现这一行，则说明没有被认为是机器人</span><br><span class="line">                    if line.startswith(&#x27;&lt;script&gt;STK &amp;&amp; STK.pageletM &amp;&amp; STK.pageletM.view(&#123;&quot;pid&quot;:&quot;pl_weibo_direct&quot;&#x27;):</span><br><span class="line">                        isCaught = False</span><br><span class="line">                        n = line.find(&#x27;html&quot;:&quot;&#x27;)</span><br><span class="line">                        if n &gt; 0:</span><br><span class="line">                            j = line[n + 7: -12].encode(&quot;utf-8&quot;).decode(&#x27;unicode_escape&#x27;).encode(&quot;utf-8&quot;).replace(&quot;\\&quot;, &quot;&quot;).decode(&#x27;utf-8&#x27;)</span><br><span class="line">                            ## 没有更多结果页面</span><br><span class="line">                            if (j.find(&#x27;&lt;div class=&quot;search_noresult&quot;&gt;&#x27;) &gt; 0):</span><br><span class="line">                                hasMore = False</span><br><span class="line">                            ## 有结果的页面</span><br><span class="line">                            else:</span><br><span class="line">                                page = etree.HTML(j)</span><br><span class="line">                                comment_box = page.xpath(&quot;//div[@action-type=\&quot;feed_list_item\&quot;]&quot;)</span><br><span class="line">                                for each_comment in comment_box:</span><br><span class="line">                                    comment_time = each_comment.xpath(&quot;.//div[@class=\&quot;feed_from W_textb\&quot;]/a/@title&quot;)</span><br><span class="line">                                    comment_text_list = each_comment.xpath(&quot;.//p[@class=&#x27;comment_txt&#x27;]&quot;)</span><br><span class="line">                                    comment_text = []</span><br><span class="line">                                    for eachtext in comment_text_list:</span><br><span class="line">                                        comment_text = &#x27;r&#x27;.join(eachtext.xpath(&quot;.//text()&quot;))</span><br><span class="line">                                        comment_text = comment_text.replace(&#x27; &#x27;,&#x27;&#x27;).replace(&#x27;\n&#x27;, &#x27;&#x27;).replace(&#x27;\r&#x27;, &#x27; &#x27;)</span><br><span class="line">                                        comment_text = comment_text.encode(&#x27;utf8&#x27;)</span><br><span class="line">                                        if (comment_text != &#x27;None&#x27; and comment_text not in filter):</span><br><span class="line">                                            filter.add(comment_text)</span><br><span class="line">                                            content.writerow([comment_time[0], comment_text])</span><br><span class="line">                                # weibo = page.xpath(&quot;//div[@class=\&quot;feed_from W_textb\&quot;])</span><br><span class="line">                                # for weibo_time, weibo_content in weibo:</span><br><span class="line">                                #     weibo_time = weibo_time.xpath(&quot;./[@class=\&quot;feed_from W_textb\&quot;]/a/@title&quot;)</span><br><span class="line">                                #     concept = &#x27;r&#x27;.join(weibo_content.xpath(&quot;./text()&quot;))</span><br><span class="line">                                #     concept = concept.replace(&#x27; &#x27;,&#x27;&#x27;).replace(&#x27;\n&#x27;,&#x27;&#x27;).replace(&#x27;\r&#x27;,&#x27; &#x27;)</span><br><span class="line">                                #     concept = concept.encode(&#x27;utf8&#x27;)</span><br><span class="line">                                #     if (concept != &#x27;None&#x27; and concept not in filter):</span><br><span class="line">                                #         filter.add(concept)</span><br><span class="line">                                #         content.writerow([weibo_time, concept])</span><br><span class="line"></span><br><span class="line">                                # dls_id = page.xpath(&quot;//div[@class=\&quot;feed_from W_textb\&quot;]/a/@title&quot;)</span><br><span class="line">                                # for dl_id in dls_id:</span><br><span class="line">                                #     # mid = str(dl_id.attrib.get(&#x27;nick-name&#x27;))</span><br><span class="line">                                #     dl_id = dl_id.encode(&#x27;utf8&#x27;)</span><br><span class="line">                                #     if (dl_id != &#x27;None&#x27; and dl_id not in mid_filter):</span><br><span class="line">                                #         mid_filter.add(dl_id)</span><br><span class="line">                                #         content.writerow([dl_id])</span><br><span class="line">                                #</span><br><span class="line">                                # dls_text = page.xpath(&quot;//p[@class=&#x27;comment_txt&#x27;]&quot;)</span><br><span class="line">                                # for dl_text in dls_text:</span><br><span class="line">                                #     concept = &#x27;r&#x27;.join(dl_text.xpath(&quot;./text()&quot;))</span><br><span class="line">                                #     concept = concept.replace(&#x27; &#x27;,&#x27;&#x27;).replace(&#x27;\n&#x27;,&#x27;&#x27;).replace(&#x27;\r&#x27;,&#x27; &#x27;)</span><br><span class="line">                                #     concept = concept.encode(&#x27;utf8&#x27;)</span><br><span class="line">                                #     if (concept != &#x27;None&#x27; and concept not in mid_filter):</span><br><span class="line">                                #         mid_filter.add(concept)</span><br><span class="line">                                #         content.writerow([concept])</span><br><span class="line">                                        # content.writerow(&#x27;\n&#x27;)</span><br><span class="line">                                    # if (concept != &#x27;None&#x27; and concept not in mid_filter):</span><br><span class="line">                                    #     mid_filter.add(concept)</span><br><span class="line">                                    #     content.write(concept)</span><br><span class="line">                                    #     content.write(&#x27;\n&#x27;)</span><br><span class="line">                                    # print concept</span><br><span class="line">                                    # print &quot;----------------------&quot;</span><br><span class="line">                        break</span><br><span class="line">                lines = None</span><br><span class="line">                ## 处理被认为是机器人的情况</span><br><span class="line">                if isCaught:</span><br><span class="line">                    print &#x27;Be Caught!&#x27;</span><br><span class="line">                    self.logger.error(&#x27;Be Caught Error!&#x27;)</span><br><span class="line">                    self.logger.info(&#x27;filePath: &#x27; + self.save_dir)</span><br><span class="line">                    self.logger.info(&#x27;url: &#x27; + source_url)</span><br><span class="line">                    self.logger.info(&#x27;fileNum: &#x27; + str(fileNum))</span><br><span class="line">                    self.logger.info(&#x27;page:&#x27; + str(i))</span><br><span class="line">                    data = None</span><br><span class="line">                    self.flag = False</span><br><span class="line">                    break</span><br><span class="line">                ## 没有更多结果，结束该次请求，跳到下一个请求</span><br><span class="line">                if not hasMore:</span><br><span class="line">                    print &#x27;No More Results!&#x27;</span><br><span class="line">                    if i == 1:</span><br><span class="line">                        time.sleep(random.randint(55,75))</span><br><span class="line">                    else:</span><br><span class="line">                        time.sleep(15)</span><br><span class="line">                    data = None</span><br><span class="line">                    break</span><br><span class="line">                i += 1</span><br><span class="line">                ## 设置两个邻近URL请求之间的随机休眠时间，防止Be Caught。目前没有模拟登陆</span><br><span class="line">                # sleeptime_one = random.randint(self.interval-30,self.interval-10)</span><br><span class="line">                # sleeptime_two = random.randint(self.interval+10,self.interval+30)</span><br><span class="line">                # if i%2 == 0:</span><br><span class="line">                #     sleeptime = sleeptime_two</span><br><span class="line">                # else:</span><br><span class="line">                #     sleeptime = sleeptime_one</span><br><span class="line">                # print &#x27;sleeping &#x27; + str(sleeptime) + &#x27; seconds...&#x27;</span><br><span class="line">                # time.sleep(sleeptime)</span><br><span class="line">            else:</span><br><span class="line">                break</span><br><span class="line">        csvFile.close()</span><br><span class="line">        csvFile = None</span><br><span class="line"></span><br><span class="line">    ##改变搜索的时间范围，有利于获取最多的数据</span><br><span class="line">    def getTimescope(self, perTimescope, hours):</span><br><span class="line">        if not (perTimescope==&#x27;-&#x27;):</span><br><span class="line">            times_list = perTimescope.split(&#x27;:&#x27;)</span><br><span class="line">            start_datetime = datetime.datetime.fromtimestamp(time.mktime(time.strptime(times_list[-1],&quot;%Y-%m-%d-%H&quot;)))</span><br><span class="line">            start_new_datetime = start_datetime + datetime.timedelta(seconds = 3600)</span><br><span class="line">            end_new_datetime = start_new_datetime + datetime.timedelta(seconds = 3600*(hours-1))</span><br><span class="line">            start_str = start_new_datetime.strftime(&quot;%Y-%m-%d-%H&quot;)</span><br><span class="line">            end_str = end_new_datetime.strftime(&quot;%Y-%m-%d-%H&quot;)</span><br><span class="line">            return start_str + &quot;:&quot; + end_str</span><br><span class="line">        else:</span><br><span class="line">            return &#x27;-&#x27;</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    logger = logging.getLogger(&#x27;main&#x27;)</span><br><span class="line">    logFile = &#x27;./collect.log&#x27;</span><br><span class="line">    logger.setLevel(logging.DEBUG)</span><br><span class="line">    filehandler = logging.FileHandler(logFile)</span><br><span class="line">    formatter = logging.Formatter(&#x27;%(asctime)s - %(name)s - %(levelname)s: %(message)s&#x27;)</span><br><span class="line">    filehandler.setFormatter(formatter)</span><br><span class="line">    logger.addHandler(filehandler)</span><br><span class="line"></span><br><span class="line">    while True:</span><br><span class="line">        ## 接受键盘输入</span><br><span class="line">        keyword = raw_input(&#x27;Enter the keyword(type \&#x27;quit\&#x27; to exit ):&#x27;)</span><br><span class="line">        if keyword == &#x27;quit&#x27;:</span><br><span class="line">            sys.exit()</span><br><span class="line">        startTime = raw_input(&#x27;Enter the start time(Format:YYYY-mm-dd-HH):&#x27;)</span><br><span class="line">        # region = raw_input(&#x27;Enter the region([BJ]11:1000,[SH]31:1000,[GZ]44:1,[CD]51:1):&#x27;)</span><br><span class="line">        savedir = raw_input(&#x27;Enter the save directory(Like C://data//):&#x27;)</span><br><span class="line">        interval = raw_input(&#x27;Enter the time interval( &gt;30 and deafult:50):&#x27;)</span><br><span class="line"></span><br><span class="line">        ##实例化收集类，收集指定关键字和起始时间的微博</span><br><span class="line">        cd = CollectData(keyword, startTime, savedir, interval)</span><br><span class="line">        while cd.flag:</span><br><span class="line">            print cd.timescope</span><br><span class="line">            logger.info(cd.timescope)</span><br><span class="line">            url = cd.getURL()</span><br><span class="line">            cd.download(url)</span><br><span class="line">            cd.timescope = cd.getTimescope(cd.timescope,1)  #改变搜索的时间，到下一个小时</span><br><span class="line">        else:</span><br><span class="line">            cd = None</span><br><span class="line">            print &#x27;-----------------------------------------------------&#x27;</span><br><span class="line">            print &#x27;-----------------------------------------------------&#x27;</span><br><span class="line">    else:</span><br><span class="line">        logger.removeHandler(filehandler)</span><br><span class="line">        logger = None</span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>backend</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>crawler</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>最小值管理</title>
    <url>/Blog/17-04-17-Minimum-maintenance-cpp/</url>
    <content><![CDATA[<h1 id="Minimum-maintenance-cpp"><a href="#Minimum-maintenance-cpp" class="headerlink" title="Minimum_maintenance.cpp"></a>Minimum_maintenance.cpp</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//template</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">max_select</span>&#123;</span><br><span class="line">  <span class="type">int</span> p;</span><br><span class="line">  <span class="type">int</span> d;</span><br><span class="line">  <span class="type">double</span> v;</span><br><span class="line">  <span class="type">bool</span> <span class="keyword">operator</span> &gt; (<span class="type">const</span> max_select &amp; other) <span class="type">const</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> v &gt; other.v;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> max_select &amp; other) <span class="type">const</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> v &lt; other.v;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">bool</span> <span class="keyword">operator</span> == (<span class="type">const</span> max_select &amp; other) <span class="type">const</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> v == other.v;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Minimum_maintenance</span> &#123;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    T * _stack[<span class="number">2</span>]; <span class="comment">// 0 store Descending sequence, 1 store other&#x27;s</span></span><br><span class="line">    <span class="type">int</span> _iter[<span class="number">2</span>];    <span class="comment">// store iter</span></span><br><span class="line">    <span class="type">int</span> * _order;    <span class="comment">// for push and pop</span></span><br><span class="line">    <span class="type">int</span> * _fakedeepcopy ;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Minimum_maintenance</span>()&#123;</span><br><span class="line">      cout&lt;&lt;<span class="string">&quot;NOT SUPPORT&quot;</span>&lt;&lt;endl;</span><br><span class="line">      <span class="built_in">assert</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Minimum_maintenance</span>(<span class="type">int</span> s)&#123;</span><br><span class="line">      <span class="keyword">if</span>(s &lt; <span class="number">1</span>)<span class="comment">//protect</span></span><br><span class="line">        s = <span class="number">1</span>;</span><br><span class="line">      _iter[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">      _iter[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">      _stack[<span class="number">0</span>] = <span class="keyword">new</span> T[s];</span><br><span class="line">      _stack[<span class="number">1</span>] = <span class="keyword">new</span> T[s];</span><br><span class="line">      _order = <span class="keyword">new</span> <span class="type">int</span>[s];</span><br><span class="line">      _fakedeepcopy = <span class="keyword">new</span> <span class="type">int</span> [<span class="number">1</span>] ;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;new (%08x)\n&quot;</span>,<span class="keyword">this</span>);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;    _stack[0] = (%08x)\n&quot;</span>,_stack[<span class="number">0</span>]);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;    _stack[1] = (%08x)\n&quot;</span>,_stack[<span class="number">1</span>]);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;    _order    = (%08x)\n&quot;</span>,_order);</span><br><span class="line">      _fakedeepcopy[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Minimum_maintenance</span>(<span class="type">const</span> Minimum_maintenance&amp; copy)&#123;</span><br><span class="line">      _stack[<span class="number">0</span>]   = copy._stack[<span class="number">0</span>];</span><br><span class="line">      _stack[<span class="number">1</span>]   = copy._stack[<span class="number">1</span>];</span><br><span class="line">      _iter [<span class="number">0</span>]   = copy._iter [<span class="number">0</span>];</span><br><span class="line">      _iter [<span class="number">1</span>]   = copy._iter [<span class="number">1</span>];</span><br><span class="line">      _order      = copy._order;</span><br><span class="line">      _fakedeepcopy = copy._fakedeepcopy;</span><br><span class="line">      _fakedeepcopy[<span class="number">0</span>]++;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Fake deepcopy %08x =&gt; %08x\n&quot;</span>,&amp;copy,<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Minimum_maintenance</span>()&#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;free(%08x)\n&quot;</span>,<span class="keyword">this</span>);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;    _fakedeepcopy = %d\n&quot;</span>,_fakedeepcopy[<span class="number">0</span>]);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;    _stack[0]   = (%08x)\n&quot;</span>,_stack[<span class="number">0</span>]);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;    _stack[1]   = (%08x)\n&quot;</span>,_stack[<span class="number">1</span>]);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;    _order      = (%08x)\n&quot;</span>,_order);</span><br><span class="line">      <span class="keyword">if</span>(!_fakedeepcopy[<span class="number">0</span>])&#123;</span><br><span class="line">        <span class="keyword">delete</span> [] _stack[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">delete</span> [] _stack[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">delete</span> [] _order;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        _fakedeepcopy[<span class="number">0</span>]--;</span><br><span class="line">      &#125;</span><br><span class="line">      cout&lt;&lt;<span class="string">&quot;free() finished&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">const</span> T &amp; ms)</span></span>&#123;</span><br><span class="line">      <span class="type">int</span> i;</span><br><span class="line">      <span class="keyword">if</span>(_iter[<span class="number">0</span>] == <span class="number">0</span> || _stack[<span class="number">0</span>][_iter[<span class="number">0</span>] - <span class="number">1</span>] &gt; ms)&#123;</span><br><span class="line">        i = <span class="number">0</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        i = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      _stack[i][_iter[i]] = ms;</span><br><span class="line"></span><br><span class="line">      _order[_iter[<span class="number">0</span>]+_iter[<span class="number">1</span>]] = i;</span><br><span class="line">      _iter[i] ++ ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(_iter[<span class="number">0</span>]+_iter[<span class="number">1</span>])&#123;</span><br><span class="line">        _iter[_order[ _iter[<span class="number">0</span>] + _iter[<span class="number">1</span>] - <span class="number">1</span> ]]--;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">top</span><span class="params">(T &amp; ms)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(!(_iter[<span class="number">0</span>]+_iter[<span class="number">1</span>]))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      <span class="type">int</span> o = _order[ _iter[<span class="number">0</span>] + _iter[<span class="number">1</span>] - <span class="number">1</span>];</span><br><span class="line">      ms = _stack[<span class="number">0</span>][ _iter[<span class="number">0</span>] - <span class="number">1</span>];</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="type">const</span> <span class="title">empty</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> _iter[<span class="number">0</span>] == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line">  <span class="function">Minimum_maintenance&lt;max_select&gt; <span class="title">mm</span><span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line">  <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; <span class="number">20</span> ; i ++)&#123;</span><br><span class="line">    <span class="type">double</span> in = <span class="built_in">rand</span>()*<span class="number">1.0</span>;</span><br><span class="line">    cout&lt;&lt;in&lt;&lt;endl&lt;&lt;<span class="string">&quot;\t&quot;</span>;</span><br><span class="line">    max_select inms = &#123;<span class="number">1</span>,<span class="number">1</span>,in&#125;;</span><br><span class="line">    mm.<span class="built_in">push</span>(inms);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">rand</span>()%<span class="number">2</span>)&#123;</span><br><span class="line">      cout&lt;&lt; <span class="string">&quot; POP &quot;</span>;</span><br><span class="line">      mm.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    max_select ms;</span><br><span class="line">    <span class="keyword">if</span>(mm.<span class="built_in">top</span>(ms))<span class="comment">//mm.empty()</span></span><br><span class="line">      cout&lt;&lt;ms.v&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      cout&lt;&lt;<span class="string">&quot;EMPTY()&quot;</span>&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Minimum-maintenance-old1-cpp"><a href="#Minimum-maintenance-old1-cpp" class="headerlink" title="Minimum_maintenance.old1.cpp"></a>Minimum_maintenance.old1.cpp</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// just run</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MinimumMaintenance</span> &#123;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> * _stack[<span class="number">2</span>]; <span class="comment">// 0 store Descending sequence, 1 store other&#x27;s</span></span><br><span class="line">    <span class="type">int</span> _iter[<span class="number">2</span>];    <span class="comment">// store iter</span></span><br><span class="line">    <span class="type">int</span> * _order;    <span class="comment">// for push and pop</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MinimumMaintenance</span>(<span class="type">int</span> s)&#123;</span><br><span class="line">      _iter[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">      _iter[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">      _stack[<span class="number">0</span>] = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">3</span>*s];</span><br><span class="line">      _stack[<span class="number">1</span>] = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">3</span>*s];</span><br><span class="line">      _order = <span class="keyword">new</span> <span class="type">int</span>[s];</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">MinimumMaintenance</span>()&#123;</span><br><span class="line">      <span class="keyword">delete</span> [] _stack[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">delete</span> [] _stack[<span class="number">1</span>];</span><br><span class="line">      <span class="keyword">delete</span> [] _order;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> d,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">      <span class="type">int</span> i;</span><br><span class="line">      <span class="keyword">if</span>(_iter[<span class="number">0</span>] == <span class="number">0</span> || _stack[<span class="number">0</span>][<span class="number">3</span>*(_iter[<span class="number">0</span>] - <span class="number">1</span>)+<span class="number">2</span>] &gt; v)&#123;</span><br><span class="line">        i = <span class="number">0</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        i = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      _stack[i][<span class="number">3</span>*_iter[i]    ] = p;</span><br><span class="line">      _stack[i][<span class="number">3</span>*_iter[i] + <span class="number">1</span>] = d;</span><br><span class="line">      _stack[i][<span class="number">3</span>*_iter[i] + <span class="number">2</span>] = v;</span><br><span class="line"></span><br><span class="line">      _order[_iter[<span class="number">0</span>]+_iter[<span class="number">1</span>]] = i;</span><br><span class="line">      _iter[i] ++ ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(_iter[<span class="number">0</span>]+_iter[<span class="number">1</span>])&#123;</span><br><span class="line">        _iter[_order[ _iter[<span class="number">0</span>] + _iter[<span class="number">1</span>] - <span class="number">1</span> ]]--;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">top</span><span class="params">(<span class="type">int</span> &amp; p,<span class="type">int</span> &amp; d,<span class="type">int</span> &amp;v)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(!(_iter[<span class="number">0</span>]+_iter[<span class="number">1</span>]))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      <span class="type">int</span> o = _order[ _iter[<span class="number">0</span>] + _iter[<span class="number">1</span>] - <span class="number">1</span>];</span><br><span class="line">      p = _stack[<span class="number">0</span>][ <span class="number">3</span> * _iter[<span class="number">0</span>] - <span class="number">3</span>];</span><br><span class="line">      d = _stack[<span class="number">0</span>][ <span class="number">3</span> * _iter[<span class="number">0</span>] - <span class="number">2</span>];</span><br><span class="line">      v = _stack[<span class="number">0</span>][ <span class="number">3</span> * _iter[<span class="number">0</span>] - <span class="number">1</span>];</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line">  <span class="function">MinimumMaintenance <span class="title">mm</span><span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line">  <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; <span class="number">20</span> ; i ++)&#123;</span><br><span class="line">    <span class="type">int</span> in = <span class="built_in">rand</span>();</span><br><span class="line">    cout&lt;&lt;in&lt;&lt;endl&lt;&lt;<span class="string">&quot;\t&quot;</span>;</span><br><span class="line">    mm.<span class="built_in">push</span>(<span class="number">1</span>,<span class="number">1</span>,in);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">rand</span>()%<span class="number">2</span>)&#123;</span><br><span class="line">      cout&lt;&lt; <span class="string">&quot; POP &quot;</span>;</span><br><span class="line">      mm.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> a,b,c;</span><br><span class="line">    <span class="keyword">if</span>(mm.<span class="built_in">top</span>(a,b,c))</span><br><span class="line">      cout&lt;&lt;c&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      cout&lt;&lt;<span class="string">&quot;EMPTY()&quot;</span>&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="Minimum-maintenance-old2-cpp"><a href="#Minimum-maintenance-old2-cpp" class="headerlink" title="Minimum_maintenance.old2.cpp"></a>Minimum_maintenance.old2.cpp</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//struct</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">max_select</span>&#123;</span><br><span class="line">  <span class="type">int</span> p;</span><br><span class="line">  <span class="type">int</span> d;</span><br><span class="line">  <span class="type">double</span> v;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Minimum_maintenance</span> &#123;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    max_select * _stack[<span class="number">2</span>]; <span class="comment">// 0 store Descending sequence, 1 store other&#x27;s</span></span><br><span class="line">    <span class="type">int</span> _iter[<span class="number">2</span>];    <span class="comment">// store iter</span></span><br><span class="line">    <span class="type">int</span> * _order;    <span class="comment">// for push and pop</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Minimum_maintenance</span>(<span class="type">int</span> s)&#123;</span><br><span class="line">      _iter[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">      _iter[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">      _stack[<span class="number">0</span>] = <span class="keyword">new</span> max_select[s];</span><br><span class="line">      _stack[<span class="number">1</span>] = <span class="keyword">new</span> max_select[s];</span><br><span class="line">      _order = <span class="keyword">new</span> <span class="type">int</span>[s];</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Minimum_maintenance</span>()&#123;</span><br><span class="line">      <span class="keyword">delete</span> [] _stack[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">delete</span> [] _stack[<span class="number">1</span>];</span><br><span class="line">      <span class="keyword">delete</span> [] _order;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">const</span> max_select &amp; ms)</span></span>&#123;</span><br><span class="line">      <span class="type">int</span> i;</span><br><span class="line">      <span class="keyword">if</span>(_iter[<span class="number">0</span>] == <span class="number">0</span> || _stack[<span class="number">0</span>][_iter[<span class="number">0</span>] - <span class="number">1</span>].v &gt; ms.v)&#123;</span><br><span class="line">        i = <span class="number">0</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        i = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      _stack[i][_iter[i]] = ms;</span><br><span class="line"></span><br><span class="line">      _order[_iter[<span class="number">0</span>]+_iter[<span class="number">1</span>]] = i;</span><br><span class="line">      _iter[i] ++ ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(_iter[<span class="number">0</span>]+_iter[<span class="number">1</span>])&#123;</span><br><span class="line">        _iter[_order[ _iter[<span class="number">0</span>] + _iter[<span class="number">1</span>] - <span class="number">1</span> ]]--;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">top</span><span class="params">(max_select &amp; ms)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(!(_iter[<span class="number">0</span>]+_iter[<span class="number">1</span>]))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      <span class="type">int</span> o = _order[ _iter[<span class="number">0</span>] + _iter[<span class="number">1</span>] - <span class="number">1</span>];</span><br><span class="line">      ms = _stack[<span class="number">0</span>][ _iter[<span class="number">0</span>] - <span class="number">1</span>];</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line">  <span class="function">Minimum_maintenance <span class="title">mm</span><span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line">  <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; <span class="number">20</span> ; i ++)&#123;</span><br><span class="line">    <span class="type">double</span> in = <span class="built_in">rand</span>()*<span class="number">1.0</span>;</span><br><span class="line">    cout&lt;&lt;in&lt;&lt;endl&lt;&lt;<span class="string">&quot;\t&quot;</span>;</span><br><span class="line">    max_select inms = &#123;<span class="number">1</span>,<span class="number">1</span>,in&#125;;</span><br><span class="line">    mm.<span class="built_in">push</span>(inms);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">rand</span>()%<span class="number">2</span>)&#123;</span><br><span class="line">      cout&lt;&lt; <span class="string">&quot; POP &quot;</span>;</span><br><span class="line">      mm.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    max_select ms;</span><br><span class="line">    <span class="keyword">if</span>(mm.<span class="built_in">top</span>(ms))</span><br><span class="line">      cout&lt;&lt;ms.v&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      cout&lt;&lt;<span class="string">&quot;EMPTY()&quot;</span>&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Minimum-maintenance-old3-cpp"><a href="#Minimum-maintenance-old3-cpp" class="headerlink" title="Minimum_maintenance.old3.cpp"></a>Minimum_maintenance.old3.cpp</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//operator</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">max_select</span>&#123;</span><br><span class="line">  <span class="type">int</span> p;</span><br><span class="line">  <span class="type">int</span> d;</span><br><span class="line">  <span class="type">double</span> v;</span><br><span class="line">  <span class="type">bool</span> <span class="keyword">operator</span> &gt; (<span class="type">const</span> max_select &amp; other) <span class="type">const</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> v &gt; other.v;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> max_select &amp; other) <span class="type">const</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> v &lt; other.v;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">bool</span> <span class="keyword">operator</span> == (<span class="type">const</span> max_select &amp; other) <span class="type">const</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> v == other.v;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Minimum_maintenance</span> &#123;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    max_select * _stack[<span class="number">2</span>]; <span class="comment">// 0 store Descending sequence, 1 store other&#x27;s</span></span><br><span class="line">    <span class="type">int</span> _iter[<span class="number">2</span>];    <span class="comment">// store iter</span></span><br><span class="line">    <span class="type">int</span> * _order;    <span class="comment">// for push and pop</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Minimum_maintenance</span>(<span class="type">int</span> s)&#123;</span><br><span class="line">      _iter[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">      _iter[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">      _stack[<span class="number">0</span>] = <span class="keyword">new</span> max_select[s];</span><br><span class="line">      _stack[<span class="number">1</span>] = <span class="keyword">new</span> max_select[s];</span><br><span class="line">      _order = <span class="keyword">new</span> <span class="type">int</span>[s];</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Minimum_maintenance</span>()&#123;</span><br><span class="line">      <span class="keyword">delete</span> [] _stack[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">delete</span> [] _stack[<span class="number">1</span>];</span><br><span class="line">      <span class="keyword">delete</span> [] _order;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">const</span> max_select &amp; ms)</span></span>&#123;</span><br><span class="line">      <span class="type">int</span> i;</span><br><span class="line">      <span class="keyword">if</span>(_iter[<span class="number">0</span>] == <span class="number">0</span> || _stack[<span class="number">0</span>][_iter[<span class="number">0</span>] - <span class="number">1</span>] &gt; ms)&#123;</span><br><span class="line">        i = <span class="number">0</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        i = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      _stack[i][_iter[i]] = ms;</span><br><span class="line"></span><br><span class="line">      _order[_iter[<span class="number">0</span>]+_iter[<span class="number">1</span>]] = i;</span><br><span class="line">      _iter[i] ++ ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(_iter[<span class="number">0</span>]+_iter[<span class="number">1</span>])&#123;</span><br><span class="line">        _iter[_order[ _iter[<span class="number">0</span>] + _iter[<span class="number">1</span>] - <span class="number">1</span> ]]--;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">top</span><span class="params">(max_select &amp; ms)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(!(_iter[<span class="number">0</span>]+_iter[<span class="number">1</span>]))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      <span class="type">int</span> o = _order[ _iter[<span class="number">0</span>] + _iter[<span class="number">1</span>] - <span class="number">1</span>];</span><br><span class="line">      ms = _stack[<span class="number">0</span>][ _iter[<span class="number">0</span>] - <span class="number">1</span>];</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line">  <span class="function">Minimum_maintenance <span class="title">mm</span><span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line">  <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; <span class="number">20</span> ; i ++)&#123;</span><br><span class="line">    <span class="type">double</span> in = <span class="built_in">rand</span>()*<span class="number">1.0</span>;</span><br><span class="line">    cout&lt;&lt;in&lt;&lt;endl&lt;&lt;<span class="string">&quot;\t&quot;</span>;</span><br><span class="line">    max_select inms = &#123;<span class="number">1</span>,<span class="number">1</span>,in&#125;;</span><br><span class="line">    mm.<span class="built_in">push</span>(inms);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">rand</span>()%<span class="number">2</span>)&#123;</span><br><span class="line">      cout&lt;&lt; <span class="string">&quot; POP &quot;</span>;</span><br><span class="line">      mm.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    max_select ms;</span><br><span class="line">    <span class="keyword">if</span>(mm.<span class="built_in">top</span>(ms))</span><br><span class="line">      cout&lt;&lt;ms.v&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      cout&lt;&lt;<span class="string">&quot;EMPTY()&quot;</span>&lt;&lt;endl;</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Minimum-maintenance-old4-cpp"><a href="#Minimum-maintenance-old4-cpp" class="headerlink" title="Minimum_maintenance.old4.cpp"></a>Minimum_maintenance.old4.cpp</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//template</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">max_select</span>&#123;</span><br><span class="line">  <span class="type">int</span> p;</span><br><span class="line">  <span class="type">int</span> d;</span><br><span class="line">  <span class="type">double</span> v;</span><br><span class="line">  <span class="type">bool</span> <span class="keyword">operator</span> &gt; (<span class="type">const</span> max_select &amp; other) <span class="type">const</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> v &gt; other.v;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> max_select &amp; other) <span class="type">const</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> v &lt; other.v;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">bool</span> <span class="keyword">operator</span> == (<span class="type">const</span> max_select &amp; other) <span class="type">const</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> v == other.v;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Minimum_maintenance</span> &#123;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    T * _stack[<span class="number">2</span>]; <span class="comment">// 0 store Descending sequence, 1 store other&#x27;s</span></span><br><span class="line">    <span class="type">int</span> _iter[<span class="number">2</span>];    <span class="comment">// store iter</span></span><br><span class="line">    <span class="type">int</span> * _order;    <span class="comment">// for push and pop</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Minimum_maintenance</span>()&#123;</span><br><span class="line">      <span class="comment">// CHANGE?</span></span><br><span class="line">      _iter[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">      _iter[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">      _stack[<span class="number">0</span>] = <span class="keyword">new</span> T[<span class="number">1</span>];</span><br><span class="line">      _stack[<span class="number">1</span>] = <span class="keyword">new</span> T[<span class="number">1</span>];</span><br><span class="line">      _order = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Minimum_maintenance</span>(<span class="type">int</span> s)&#123;</span><br><span class="line">      _iter[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">      _iter[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">      _stack[<span class="number">0</span>] = <span class="keyword">new</span> T[s];</span><br><span class="line">      _stack[<span class="number">1</span>] = <span class="keyword">new</span> T[s];</span><br><span class="line">      _order = <span class="keyword">new</span> <span class="type">int</span>[s];</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Minimum_maintenance</span>()&#123;</span><br><span class="line">      <span class="keyword">delete</span> [] _stack[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">delete</span> [] _stack[<span class="number">1</span>];</span><br><span class="line">      <span class="keyword">delete</span> [] _order;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">resize</span><span class="params">(<span class="type">int</span> s)</span></span>&#123;</span><br><span class="line">      <span class="keyword">delete</span> [] _stack[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">delete</span> [] _stack[<span class="number">1</span>];</span><br><span class="line">      <span class="keyword">delete</span> [] _order;</span><br><span class="line">      _iter[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">      _iter[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">      _stack[<span class="number">0</span>] = <span class="keyword">new</span> T[s];</span><br><span class="line">      _stack[<span class="number">1</span>] = <span class="keyword">new</span> T[s];</span><br><span class="line">      _order = <span class="keyword">new</span> <span class="type">int</span>[s];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">const</span> T &amp; ms)</span></span>&#123;</span><br><span class="line">      <span class="type">int</span> i;</span><br><span class="line">      <span class="keyword">if</span>(_iter[<span class="number">0</span>] == <span class="number">0</span> || _stack[<span class="number">0</span>][_iter[<span class="number">0</span>] - <span class="number">1</span>] &gt; ms)&#123;</span><br><span class="line">        i = <span class="number">0</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        i = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      _stack[i][_iter[i]] = ms;</span><br><span class="line"></span><br><span class="line">      _order[_iter[<span class="number">0</span>]+_iter[<span class="number">1</span>]] = i;</span><br><span class="line">      _iter[i] ++ ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(_iter[<span class="number">0</span>]+_iter[<span class="number">1</span>])&#123;</span><br><span class="line">        _iter[_order[ _iter[<span class="number">0</span>] + _iter[<span class="number">1</span>] - <span class="number">1</span> ]]--;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">top</span><span class="params">(T &amp; ms)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(!(_iter[<span class="number">0</span>]+_iter[<span class="number">1</span>]))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      <span class="type">int</span> o = _order[ _iter[<span class="number">0</span>] + _iter[<span class="number">1</span>] - <span class="number">1</span>];</span><br><span class="line">      ms = _stack[<span class="number">0</span>][ _iter[<span class="number">0</span>] - <span class="number">1</span>];</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> _iter[<span class="number">0</span>] == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line">  Minimum_maintenance&lt;max_select&gt; mm;</span><br><span class="line">  mm.<span class="built_in">resize</span>(<span class="number">20</span>);</span><br><span class="line">  <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; <span class="number">20</span> ; i ++)&#123;</span><br><span class="line">    <span class="type">double</span> in = <span class="built_in">rand</span>()*<span class="number">1.0</span>;</span><br><span class="line">    cout&lt;&lt;in&lt;&lt;endl&lt;&lt;<span class="string">&quot;\t&quot;</span>;</span><br><span class="line">    max_select inms = &#123;<span class="number">1</span>,<span class="number">1</span>,in&#125;;</span><br><span class="line">    mm.<span class="built_in">push</span>(inms);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">rand</span>()%<span class="number">2</span>)&#123;</span><br><span class="line">      cout&lt;&lt; <span class="string">&quot; POP &quot;</span>;</span><br><span class="line">      mm.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    max_select ms;</span><br><span class="line">    <span class="keyword">if</span>(mm.<span class="built_in">top</span>(ms))<span class="comment">//mm.empty()</span></span><br><span class="line">      cout&lt;&lt;ms.v&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      cout&lt;&lt;<span class="string">&quot;EMPTY()&quot;</span>&lt;&lt;endl;</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>backend</category>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>lib</tag>
      </tags>
  </entry>
  <entry>
    <title>遍历管理</title>
    <url>/Blog/17-04-17-permutation-traversal-cpp/</url>
    <content><![CDATA[<h1 id="permutation-traversal-cpp"><a href="#permutation-traversal-cpp" class="headerlink" title="permutation_traversal.cpp"></a>permutation_traversal.cpp</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//10 - 0.2s</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> pt_s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ptdemo</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> pt_bits)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(pt_bits == (<span class="number">1</span>&lt;&lt;pt_s) - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i;</span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; pt_s ; ++i)&#123;</span><br><span class="line">    <span class="keyword">if</span>( pt_bits &amp; (<span class="number">1</span>&lt;&lt;i) )</span><br><span class="line">      <span class="keyword">continue</span> ; </span><br><span class="line">    <span class="comment">//cout&lt;&lt;i&lt;&lt;endl;</span></span><br><span class="line">    <span class="type">int</span> debug = i;</span><br><span class="line">    <span class="built_in">ptdemo</span>(pt_bits | (<span class="number">1</span>&lt;&lt;i));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  pt_s = <span class="number">10</span>;</span><br><span class="line">  <span class="type">int</span> v = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">ptdemo</span>(v);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="permutation-traversal-old1-cpp"><a href="#permutation-traversal-old1-cpp" class="headerlink" title="permutation_traversal.old1.cpp"></a>permutation_traversal.old1.cpp</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//10 - 11.588 </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Permutation_traversal</span>&#123;</span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;left_index; <span class="comment">// to boost vector?</span></span><br><span class="line">    stack&lt;pair&lt;vector&lt;<span class="type">int</span>&gt;::iterator,<span class="type">int</span>&gt;&gt;visitstack; <span class="comment">// to boost list?</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;::iterator iter;</span><br><span class="line">    <span class="built_in">Permutation_traversal</span>(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp;li,<span class="type">const</span> stack&lt;pair&lt;vector&lt;<span class="type">int</span>&gt;::iterator,<span class="type">int</span>&gt;&gt;&amp;vs)</span><br><span class="line">    :<span class="built_in">left_index</span>(li),<span class="built_in">visitstack</span>(vs)&#123;</span><br><span class="line">      iter = left_index.<span class="built_in">begin</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Permutation_traversal</span>(<span class="type">int</span> s)&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s;i++)&#123;</span><br><span class="line">        left_index.<span class="built_in">push_back</span>(i);</span><br><span class="line">      &#125;</span><br><span class="line">      iter = left_index.<span class="built_in">begin</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="type">const</span> <span class="title">empty</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> left_index.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">next</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(iter == left_index.<span class="built_in">end</span>())</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">      ++iter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="type">const</span> <span class="title">valid</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> iter != left_index.<span class="built_in">end</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getnum</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> visitstack.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="type">const</span> <span class="title">getvalue</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> iter != left_index.<span class="built_in">end</span>() ? *iter : <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(iter == left_index.<span class="built_in">end</span>())</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">      visitstack.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(iter,*iter));</span><br><span class="line">      left_index.<span class="built_in">erase</span>(iter);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(visitstack.<span class="built_in">empty</span>())</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">      pair&lt;vector&lt;<span class="type">int</span>&gt;::iterator,<span class="type">int</span>&gt; p = visitstack.<span class="built_in">top</span>();</span><br><span class="line">      left_index.<span class="built_in">insert</span>(p.first,p.second);</span><br><span class="line">      visitstack.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Permutation_traversal * <span class="title">isolate</span><span class="params">()</span></span>&#123;<span class="comment">// careful about memory overflow</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Permutation_traversal</span>(left_index,visitstack);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ptdemo</span><span class="params">(Permutation_traversal &amp; pt)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(pt.<span class="built_in">empty</span>())</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">  <span class="keyword">for</span>(;pt.<span class="built_in">valid</span>();pt.<span class="built_in">next</span>())&#123;</span><br><span class="line">    <span class="comment">//for(int i=0,limiti=pt.getnum();i&lt;limiti;i++)cout&lt;&lt;&quot; &quot;;</span></span><br><span class="line">    <span class="comment">//cout&lt;&lt;pt.getvalue()&lt;&lt;endl;</span></span><br><span class="line">    <span class="type">int</span> debug = pt.<span class="built_in">getvalue</span>();</span><br><span class="line">    pt.<span class="built_in">push</span>();</span><br><span class="line">    Permutation_traversal * child_pt = pt.<span class="built_in">isolate</span>();</span><br><span class="line">    <span class="built_in">ptdemo</span>(*child_pt);</span><br><span class="line">    <span class="keyword">delete</span> child_pt;</span><br><span class="line">    pt.<span class="built_in">pop</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="function">Permutation_traversal <span class="title">pt</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">  <span class="built_in">ptdemo</span>(pt);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="permutation-traversal-old1-min-cpp"><a href="#permutation-traversal-old1-min-cpp" class="headerlink" title="permutation_traversal.old1.min.cpp"></a>permutation_traversal.old1.min.cpp</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ,min.cpp use less check</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Permutation_traversal</span>&#123;</span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;left_index; <span class="comment">// to boost vector?</span></span><br><span class="line">    stack&lt;pair&lt;vector&lt;<span class="type">int</span>&gt;::iterator,<span class="type">int</span>&gt;&gt;visitstack; <span class="comment">// to boost list?</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;::iterator iter;</span><br><span class="line">    <span class="built_in">Permutation_traversal</span>(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp;li,<span class="type">const</span> stack&lt;pair&lt;vector&lt;<span class="type">int</span>&gt;::iterator,<span class="type">int</span>&gt;&gt;&amp;vs)</span><br><span class="line">    :<span class="built_in">left_index</span>(li),<span class="built_in">visitstack</span>(vs)&#123;</span><br><span class="line">      iter = left_index.<span class="built_in">begin</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Permutation_traversal</span>(<span class="type">int</span> s)&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s;i++)&#123;</span><br><span class="line">        left_index.<span class="built_in">push_back</span>(i);</span><br><span class="line">      &#125;</span><br><span class="line">      iter = left_index.<span class="built_in">begin</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="type">const</span> <span class="title">empty</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> left_index.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">next</span><span class="params">()</span></span>&#123;</span><br><span class="line">      ++iter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="type">const</span> <span class="title">valid</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> iter != left_index.<span class="built_in">end</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="type">const</span> <span class="title">getvalue</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> *iter;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">()</span></span>&#123;</span><br><span class="line">      visitstack.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(iter,*iter));</span><br><span class="line">      left_index.<span class="built_in">erase</span>(iter);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">      pair&lt;vector&lt;<span class="type">int</span>&gt;::iterator,<span class="type">int</span>&gt; p = visitstack.<span class="built_in">top</span>();</span><br><span class="line">      left_index.<span class="built_in">insert</span>(p.first,p.second);</span><br><span class="line">      visitstack.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Permutation_traversal * <span class="title">isolate</span><span class="params">()</span></span>&#123;<span class="comment">// careful about memory overflow</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Permutation_traversal</span>(left_index,visitstack);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ptdemo</span><span class="params">(Permutation_traversal &amp; pt)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(pt.<span class="built_in">empty</span>())</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">  <span class="keyword">for</span>(;pt.<span class="built_in">valid</span>();pt.<span class="built_in">next</span>())&#123;</span><br><span class="line">    cout&lt;&lt;pt.<span class="built_in">getvalue</span>()&lt;&lt;endl;</span><br><span class="line">    pt.<span class="built_in">push</span>();</span><br><span class="line">    Permutation_traversal * child_pt = pt.<span class="built_in">isolate</span>();</span><br><span class="line">    <span class="built_in">ptdemo</span>(*child_pt);</span><br><span class="line">    <span class="keyword">delete</span> child_pt;</span><br><span class="line">    pt.<span class="built_in">pop</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="function">Permutation_traversal <span class="title">pt</span><span class="params">(<span class="number">5</span>)</span></span>;</span><br><span class="line">  <span class="built_in">ptdemo</span>(pt);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="permutation-traversal-old2-cpp"><a href="#permutation-traversal-old2-cpp" class="headerlink" title="permutation_traversal.old2.cpp"></a>permutation_traversal.old2.cpp</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//10 4.469s</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Permutation_traversal</span>&#123;</span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;left_index; <span class="comment">// to boost vector?</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;::iterator iter;</span><br><span class="line">    <span class="built_in">Permutation_traversal</span>(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp;li)</span><br><span class="line">    :<span class="built_in">left_index</span>(li)&#123;</span><br><span class="line">      iter = left_index.<span class="built_in">begin</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Permutation_traversal</span>(<span class="type">int</span> s)&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s;i++)&#123;</span><br><span class="line">        left_index.<span class="built_in">push_back</span>(i);</span><br><span class="line">      &#125;</span><br><span class="line">      iter = left_index.<span class="built_in">begin</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="type">const</span> <span class="title">empty</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> left_index.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">next</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(iter == left_index.<span class="built_in">end</span>())</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">      ++iter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="type">const</span> <span class="title">valid</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> iter != left_index.<span class="built_in">end</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="type">const</span> <span class="title">getvalue</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> iter != left_index.<span class="built_in">end</span>() ? *iter : <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Permutation_traversal * <span class="title">isolate</span><span class="params">()</span></span>&#123;<span class="comment">// careful about memory overflow</span></span><br><span class="line">      <span class="keyword">if</span>(iter == left_index.<span class="built_in">end</span>())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">      vector&lt;<span class="type">int</span>&gt;::iterator tmp_iter = iter;</span><br><span class="line">      <span class="type">int</span> tmp_val = *iter;</span><br><span class="line">      left_index.<span class="built_in">erase</span>(iter);</span><br><span class="line">      Permutation_traversal * newpt = <span class="keyword">new</span> <span class="built_in">Permutation_traversal</span>(left_index);</span><br><span class="line">      left_index.<span class="built_in">insert</span>(tmp_iter,tmp_val);</span><br><span class="line">      <span class="keyword">return</span> newpt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// debug [TODO]remove code below</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getnum</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">5</span>-left_index.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ptdemo</span><span class="params">(Permutation_traversal &amp; pt)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(pt.<span class="built_in">empty</span>())</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">  <span class="keyword">for</span>(;pt.<span class="built_in">valid</span>();pt.<span class="built_in">next</span>())&#123;</span><br><span class="line">    <span class="comment">//for(int i=0,limiti=pt.getnum();i&lt;limiti;i++)cout&lt;&lt;&quot; &quot;;</span></span><br><span class="line">    <span class="comment">//cout&lt;&lt;pt.getvalue()&lt;&lt;endl;</span></span><br><span class="line">    <span class="type">int</span> debug = pt.<span class="built_in">getvalue</span>();</span><br><span class="line">    Permutation_traversal * child_pt = pt.<span class="built_in">isolate</span>();</span><br><span class="line">    <span class="built_in">ptdemo</span>(*child_pt);</span><br><span class="line">    <span class="keyword">delete</span> child_pt;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="function">Permutation_traversal <span class="title">pt</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">  <span class="built_in">ptdemo</span>(pt);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="permutation-traversal-old2-min-cpp"><a href="#permutation-traversal-old2-min-cpp" class="headerlink" title="permutation_traversal.old2.min.cpp"></a>permutation_traversal.old2.min.cpp</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Permutation_traversal</span>&#123;</span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;left_index; <span class="comment">// to boost vector?</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;::iterator iter;</span><br><span class="line">    <span class="built_in">Permutation_traversal</span>(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp;li)</span><br><span class="line">    :<span class="built_in">left_index</span>(li)&#123;</span><br><span class="line">      iter = left_index.<span class="built_in">begin</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Permutation_traversal</span>(<span class="type">int</span> s)&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s;i++)&#123;</span><br><span class="line">        left_index.<span class="built_in">push_back</span>(i);</span><br><span class="line">      &#125;</span><br><span class="line">      iter = left_index.<span class="built_in">begin</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="type">const</span> <span class="title">empty</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> left_index.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">next</span><span class="params">()</span></span>&#123;</span><br><span class="line">      ++iter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="type">const</span> <span class="title">valid</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> iter != left_index.<span class="built_in">end</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="type">const</span> <span class="title">getvalue</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> *iter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Permutation_traversal * <span class="title">isolate</span><span class="params">()</span></span>&#123;<span class="comment">// careful about memory overflow</span></span><br><span class="line">      vector&lt;<span class="type">int</span>&gt;::iterator tmp_iter = iter;</span><br><span class="line">      <span class="type">int</span> tmp_val = *iter;</span><br><span class="line">      left_index.<span class="built_in">erase</span>(iter);</span><br><span class="line">      Permutation_traversal * newpt = <span class="keyword">new</span> <span class="built_in">Permutation_traversal</span>(left_index);</span><br><span class="line">      left_index.<span class="built_in">insert</span>(tmp_iter,tmp_val);</span><br><span class="line">      <span class="keyword">return</span> newpt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// debug [TODO]remove code below</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getnum</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">5</span>-left_index.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ptdemo</span><span class="params">(Permutation_traversal &amp; pt)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(pt.<span class="built_in">empty</span>())</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">  <span class="keyword">for</span>(;pt.<span class="built_in">valid</span>();pt.<span class="built_in">next</span>())&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,limiti=pt.<span class="built_in">getnum</span>();i&lt;limiti;i++)cout&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout&lt;&lt;pt.<span class="built_in">getvalue</span>()&lt;&lt;endl;</span><br><span class="line">    Permutation_traversal * child_pt = pt.<span class="built_in">isolate</span>();</span><br><span class="line">    <span class="built_in">ptdemo</span>(*child_pt);</span><br><span class="line">    <span class="keyword">delete</span> child_pt;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="function">Permutation_traversal <span class="title">pt</span><span class="params">(<span class="number">5</span>)</span></span>;</span><br><span class="line">  <span class="built_in">ptdemo</span>(pt);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="permutation-traversal-old3-cpp"><a href="#permutation-traversal-old3-cpp" class="headerlink" title="permutation_traversal.old3.cpp"></a>permutation_traversal.old3.cpp</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//10 - 0.927s</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Permutation_traversal</span>&#123;</span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">    <span class="type">int</span> * left_index; <span class="comment">// to boost vector?</span></span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    <span class="type">int</span> iter;</span><br><span class="line">    <span class="built_in">Permutation_traversal</span>()&#123;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Permutation_traversal</span>(<span class="type">int</span> s)</span><br><span class="line">    :<span class="built_in">size</span>(s),<span class="built_in">iter</span>(<span class="number">0</span>)&#123;</span><br><span class="line">      left_index = <span class="keyword">new</span> <span class="type">int</span>[s];</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s;i++)&#123;</span><br><span class="line">        left_index[i]=i;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Permutation_traversal</span>()&#123;</span><br><span class="line">      <span class="keyword">delete</span> [] left_index;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="type">const</span> <span class="title">empty</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">next</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(iter == size)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">      ++iter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="type">const</span> <span class="title">valid</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> iter != size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="type">const</span> <span class="title">getvalue</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> iter != size ? left_index[iter] : <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Permutation_traversal * <span class="title">isolate</span><span class="params">()</span></span>&#123;<span class="comment">// careful about memory overflow</span></span><br><span class="line">      <span class="keyword">if</span>(iter == size)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">      Permutation_traversal * newpt = <span class="keyword">new</span> <span class="built_in">Permutation_traversal</span>();</span><br><span class="line">      newpt-&gt;left_index = <span class="keyword">new</span> <span class="type">int</span>[size<span class="number">-1</span>];</span><br><span class="line">      newpt-&gt;size = <span class="number">0</span>;</span><br><span class="line">      newpt-&gt;iter = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> it = <span class="number">0</span> ; it &lt; size ; ++it)&#123;</span><br><span class="line">        <span class="keyword">if</span>(it == iter)</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        newpt-&gt;left_index[newpt-&gt;size++] = left_index[it];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> newpt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// debug [TODO]remove code below</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getnum</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">5</span>-size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ptdemo</span><span class="params">(Permutation_traversal &amp; pt)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(pt.<span class="built_in">empty</span>())</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">  <span class="keyword">for</span>(;pt.<span class="built_in">valid</span>();pt.<span class="built_in">next</span>())&#123;</span><br><span class="line">    <span class="comment">//for(int i=0,limiti=pt.getnum();i&lt;limiti;i++)cout&lt;&lt;&quot; &quot;;</span></span><br><span class="line">    <span class="comment">//cout&lt;&lt;pt.getvalue()&lt;&lt;endl;</span></span><br><span class="line">    <span class="type">int</span> debug = pt.<span class="built_in">getvalue</span>();</span><br><span class="line">    Permutation_traversal * child_pt = pt.<span class="built_in">isolate</span>();</span><br><span class="line">    <span class="built_in">ptdemo</span>(*child_pt);</span><br><span class="line">    <span class="keyword">delete</span> child_pt;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="function">Permutation_traversal <span class="title">pt</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">  <span class="built_in">ptdemo</span>(pt);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="permutation-traversal-old3-min-cpp"><a href="#permutation-traversal-old3-min-cpp" class="headerlink" title="permutation_traversal.old3.min.cpp"></a>permutation_traversal.old3.min.cpp</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Permutation_traversal</span>&#123;</span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">    <span class="type">int</span> * left_index; <span class="comment">// to boost vector?</span></span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    <span class="type">int</span> iter;</span><br><span class="line">    <span class="built_in">Permutation_traversal</span>()&#123;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Permutation_traversal</span>(<span class="type">int</span> s)</span><br><span class="line">    :<span class="built_in">size</span>(s),<span class="built_in">iter</span>(<span class="number">0</span>)&#123;</span><br><span class="line">      left_index = <span class="keyword">new</span> <span class="type">int</span>[s];</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s;i++)&#123;</span><br><span class="line">        left_index[i]=i;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Permutation_traversal</span>()&#123;</span><br><span class="line">      <span class="keyword">delete</span> [] left_index;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="type">const</span> <span class="title">empty</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">next</span><span class="params">()</span></span>&#123;</span><br><span class="line">      ++iter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="type">const</span> <span class="title">valid</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> iter != size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="type">const</span> <span class="title">getvalue</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> left_index[iter];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Permutation_traversal * <span class="title">isolate</span><span class="params">()</span></span>&#123;<span class="comment">// careful about memory overflow</span></span><br><span class="line">      Permutation_traversal * newpt = <span class="keyword">new</span> <span class="built_in">Permutation_traversal</span>();</span><br><span class="line">      newpt-&gt;left_index = <span class="keyword">new</span> <span class="type">int</span>[size<span class="number">-1</span>];</span><br><span class="line">      newpt-&gt;size = <span class="number">0</span>;</span><br><span class="line">      newpt-&gt;iter = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> it = <span class="number">0</span> ; it &lt; size ; ++it)&#123;</span><br><span class="line">        <span class="keyword">if</span>(it == iter)</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        newpt-&gt;left_index[newpt-&gt;size++] = left_index[it];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> newpt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// debug [TODO]remove code below</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getnum</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">5</span>-size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ptdemo</span><span class="params">(Permutation_traversal &amp; pt)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(pt.<span class="built_in">empty</span>())</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">  <span class="keyword">for</span>(;pt.<span class="built_in">valid</span>();pt.<span class="built_in">next</span>())&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,limiti=pt.<span class="built_in">getnum</span>();i&lt;limiti;i++)cout&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout&lt;&lt;pt.<span class="built_in">getvalue</span>()&lt;&lt;endl;</span><br><span class="line">    Permutation_traversal * child_pt = pt.<span class="built_in">isolate</span>();</span><br><span class="line">    <span class="built_in">ptdemo</span>(*child_pt);</span><br><span class="line">    <span class="keyword">delete</span> child_pt;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="function">Permutation_traversal <span class="title">pt</span><span class="params">(<span class="number">5</span>)</span></span>;</span><br><span class="line">  <span class="built_in">ptdemo</span>(pt);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="permutation-traversal-old4-cpp"><a href="#permutation-traversal-old4-cpp" class="headerlink" title="permutation_traversal.old4.cpp"></a>permutation_traversal.old4.cpp</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//10 - 0.581s</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Permutation_traversal</span>&#123;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">Child_Permutation_traversal</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">      <span class="type">int</span> * left_index; <span class="comment">// to boost vector?</span></span><br><span class="line">      <span class="type">int</span> size;</span><br><span class="line">      <span class="type">int</span> iter;</span><br><span class="line">      <span class="built_in">Child_Permutation_traversal</span>(<span class="type">int</span> s)</span><br><span class="line">        :<span class="built_in">size</span>(s),<span class="built_in">iter</span>(<span class="number">0</span>)&#123;</span><br><span class="line">          left_index = <span class="keyword">new</span> <span class="type">int</span>[s];</span><br><span class="line">        &#125;</span><br><span class="line">      ~<span class="built_in">Child_Permutation_traversal</span>()&#123;</span><br><span class="line">        <span class="keyword">delete</span> [] left_index;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  Child_Permutation_traversal ** cpt;</span><br><span class="line">  <span class="type">int</span> size;</span><br><span class="line">  <span class="type">int</span> depth;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">Permutation_traversal</span>(<span class="type">int</span> s)</span><br><span class="line">  :<span class="built_in">size</span>(s)&#123;</span><br><span class="line">    cpt = <span class="keyword">new</span> Child_Permutation_traversal * [s + <span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= s; i++)&#123;</span><br><span class="line">      cpt[i] = <span class="keyword">new</span> <span class="built_in">Child_Permutation_traversal</span>(s-i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; s; i++)&#123;</span><br><span class="line">      cpt[<span class="number">0</span>]-&gt;left_index[i]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    depth = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  ~<span class="built_in">Permutation_traversal</span>()&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=size;i++)&#123;</span><br><span class="line">      <span class="keyword">delete</span> cpt[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> [] cpt;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="type">const</span> <span class="title">empty</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> cpt[depth]-&gt;size == <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">next</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cpt[depth]-&gt;iter == cpt[depth]-&gt;size)</span><br><span class="line">      <span class="keyword">return</span> ;</span><br><span class="line">    ++(cpt[depth]-&gt;iter);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="type">const</span> <span class="title">valid</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> cpt[depth]-&gt;iter != cpt[depth]-&gt;size;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="type">const</span> <span class="title">getvalue</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> cpt[depth]-&gt;iter != cpt[depth]-&gt;size ? cpt[depth]-&gt;left_index[cpt[depth]-&gt;iter] : <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">select</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cpt[depth]-&gt;iter == cpt[depth]-&gt;size)</span><br><span class="line">      <span class="keyword">return</span> ;</span><br><span class="line">    <span class="type">int</span> newdepth = depth + <span class="number">1</span>;</span><br><span class="line">    cpt[newdepth]-&gt;size = <span class="number">0</span>;</span><br><span class="line">    cpt[newdepth]-&gt;iter = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> it = <span class="number">0</span>,itlimit=cpt[depth]-&gt;size ; it &lt; itlimit ; ++it)&#123;</span><br><span class="line">      <span class="keyword">if</span>(it == cpt[depth]-&gt;iter)</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      cpt[newdepth]-&gt;left_index[cpt[newdepth]-&gt;size++] = cpt[depth]-&gt;left_index[it];</span><br><span class="line">    &#125;</span><br><span class="line">    depth = newdepth;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">unselect</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(depth &gt; <span class="number">0</span>)</span><br><span class="line">      --depth;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">getnum</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">5</span>-cpt[depth]-&gt;size;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ptdemo</span><span class="params">(Permutation_traversal &amp; pt)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(pt.<span class="built_in">empty</span>())</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">  <span class="keyword">for</span>(;pt.<span class="built_in">valid</span>();pt.<span class="built_in">next</span>())&#123;</span><br><span class="line">    <span class="comment">//for(int i=0,limiti=pt.getnum();i&lt;limiti;i++)cout&lt;&lt;&quot; &quot;;</span></span><br><span class="line">    <span class="comment">//cout&lt;&lt;pt.getvalue()&lt;&lt;endl;</span></span><br><span class="line">    <span class="type">int</span> debug = pt.<span class="built_in">getvalue</span>();</span><br><span class="line">    pt.<span class="built_in">select</span>();</span><br><span class="line">    <span class="built_in">ptdemo</span>(pt);</span><br><span class="line">    pt.<span class="built_in">unselect</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="function">Permutation_traversal <span class="title">pt</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">  <span class="built_in">ptdemo</span>(pt);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="permutation-traversal-old4-min-cpp"><a href="#permutation-traversal-old4-min-cpp" class="headerlink" title="permutation_traversal.old4.min.cpp"></a>permutation_traversal.old4.min.cpp</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//10 - 0.472s</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Permutation_traversal</span>&#123;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">Child_Permutation_traversal</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">      <span class="type">int</span> * left_index; <span class="comment">// to boost vector?</span></span><br><span class="line">      <span class="type">int</span> size;</span><br><span class="line">      <span class="type">int</span> iter;</span><br><span class="line">      <span class="built_in">Child_Permutation_traversal</span>(<span class="type">int</span> s)</span><br><span class="line">        :<span class="built_in">size</span>(s),<span class="built_in">iter</span>(<span class="number">0</span>)&#123;</span><br><span class="line">          left_index = <span class="keyword">new</span> <span class="type">int</span>[s];</span><br><span class="line">        &#125;</span><br><span class="line">      ~<span class="built_in">Child_Permutation_traversal</span>()&#123;</span><br><span class="line">        <span class="keyword">delete</span> [] left_index;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  Child_Permutation_traversal ** cpt;</span><br><span class="line">  <span class="type">int</span> size;</span><br><span class="line">  <span class="type">int</span> depth;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">Permutation_traversal</span>(<span class="type">int</span> s)</span><br><span class="line">  :<span class="built_in">size</span>(s)&#123;</span><br><span class="line">    cpt = <span class="keyword">new</span> Child_Permutation_traversal * [s + <span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= s; i++)&#123;</span><br><span class="line">      cpt[i] = <span class="keyword">new</span> <span class="built_in">Child_Permutation_traversal</span>(s-i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; s; i++)&#123;</span><br><span class="line">      cpt[<span class="number">0</span>]-&gt;left_index[i]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    depth = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  ~<span class="built_in">Permutation_traversal</span>()&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=size;i++)&#123;</span><br><span class="line">      <span class="keyword">delete</span> cpt[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> [] cpt;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="type">const</span> <span class="title">empty</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> cpt[depth]-&gt;size == <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">next</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ++(cpt[depth]-&gt;iter);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="type">const</span> <span class="title">valid</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> cpt[depth]-&gt;iter != cpt[depth]-&gt;size;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="type">const</span> <span class="title">getvalue</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> cpt[depth]-&gt;left_index[cpt[depth]-&gt;iter];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">select</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> newdepth = depth + <span class="number">1</span>;</span><br><span class="line">    cpt[newdepth]-&gt;size = <span class="number">0</span>;</span><br><span class="line">    cpt[newdepth]-&gt;iter = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> it = <span class="number">0</span>,itlimit=cpt[depth]-&gt;size ; it &lt; itlimit ; ++it)&#123;</span><br><span class="line">      <span class="keyword">if</span>(it == cpt[depth]-&gt;iter)</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      cpt[newdepth]-&gt;left_index[cpt[newdepth]-&gt;size++] = cpt[depth]-&gt;left_index[it];</span><br><span class="line">    &#125;</span><br><span class="line">    depth = newdepth;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">unselect</span><span class="params">()</span></span>&#123;</span><br><span class="line">      --depth;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">getnum</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">5</span>-cpt[depth]-&gt;size;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ptdemo</span><span class="params">(Permutation_traversal &amp; pt)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(pt.<span class="built_in">empty</span>())</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">  <span class="keyword">for</span>(;pt.<span class="built_in">valid</span>();pt.<span class="built_in">next</span>())&#123;</span><br><span class="line">    <span class="comment">//for(int i=0,limiti=pt.getnum();i&lt;limiti;i++)cout&lt;&lt;&quot; &quot;;</span></span><br><span class="line">    <span class="comment">//cout&lt;&lt;pt.getvalue()&lt;&lt;endl;</span></span><br><span class="line">    <span class="type">int</span> debug = pt.<span class="built_in">getvalue</span>();</span><br><span class="line">    pt.<span class="built_in">select</span>();</span><br><span class="line">    <span class="built_in">ptdemo</span>(pt);</span><br><span class="line">    pt.<span class="built_in">unselect</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="function">Permutation_traversal <span class="title">pt</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">  <span class="built_in">ptdemo</span>(pt);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>java 整理</title>
    <url>/Blog/17-04-22-Java_2008/</url>
    <content><![CDATA[<h1 id="Java-整理"><a href="#Java-整理" class="headerlink" title="Java 整理"></a>Java 整理</h1><p><a href="http://www.studytonight.com/java/overview-of-java.php">core java</a></p>
<p>##《Java项目开发全程实录 第3版》个人整理</p>
<h3 id="涉及知识一览"><a href="#涉及知识一览" class="headerlink" title="涉及知识一览"></a>涉及知识一览</h3><p><strong>按层次</strong></p>
<ul>
<li>Swing</li>
<li><a href="http://www.runoob.com/w3cnote/basic-knowledge-summary-of-spring.html">Spring</a>(<a href="http://www.cnblogs.com/jailu/archive/2006/08/18/479978.html">控制反转&#x2F;依赖注入DI</a>ioc(Inversion of Control),AOP(Aspect Oriented Programming)<a href="http://www.cnblogs.com/yanbincn/archive/2012/06/01/2530377.html">面向切面编程</a>,<a href="http://jinnianshilongnian.iteye.com/blog/1474325">2</a>)</li>
<li><a href="http://blog.csdn.net/cping1982/article/details/2101247">DAO(Data Access Object DAO)</a></li>
<li><a href="http://wiki.jikexueyuan.com/project/hibernate/examples.html">Hibernate(orm(Object Relational Mapping)框架)</a> 轻量级封装JDBC，服务于Dao+数据库</li>
<li>JDBC(SQL Server 2000,JavaDB.Oracle,SQL Server 2005)</li>
<li>PowerDesigner&#x2F;Visio(E-R图)</li>
</ul>
<p>其它</p>
<ul>
<li>JUnit(Java单元测试框架)</li>
<li><a href="http://blog.csdn.net/ritterliu/article/details/7764849">Java 反射</a></li>
<li>Java Mail</li>
</ul>
<p><strong>按目录</strong></p>
<ol>
<li>SQL Server 2000, PowerDesigner</li>
<li>JavaDB</li>
<li>Hibernate Oracle</li>
<li>SQL Server 2005, Visio</li>
<li>SQL Server 2000</li>
<li>JavaDB, 短信猫 Java Mail</li>
<li>Hibernate, Spring</li>
<li>SQL Server 2005</li>
<li>no Swing, jsp, javaBean, SQL Server 2000, Tomcat, Proxool</li>
<li>Socket, thread</li>
</ol>
<hr>
<p>TODO</p>
<p>IoC</p>
<p>AOP</p>
<p>Spring</p>
<p>Swing</p>
<p>个人账目管理</p>
]]></content>
      <categories>
        <category>backend</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>javase</title>
    <url>/Blog/17-04-23-javase/</url>
    <content><![CDATA[<p><a href="https://docs.oracle.com/javase/8/docs/api/">官方文档</a></p>
<p>总的图 来自实验楼<code>https://www.shiyanlou.com/courses/109</code></p>
<p><img data-src="https://dn-anything-about-doc.qbox.me/document-uid79144labid1085timestamp1435475423685.png?watermark/1/image/aHR0cDovL3N5bC1zdGF0aWMucWluaXVkbi5jb20vaW1nL3dhdGVybWFyay5wbmc=/dissolve/60/gravity/SouthEast/dx/0/dy/10" alt="实验楼"></p>
<p><code>java.lang</code>不需要import</p>
<p>String 内部不可变，StringBuffer 内部可变</p>
<p>看到下面这图我 哇的一声就哭了</p>
<p><img data-src="https://dn-anything-about-doc.qbox.me/userid46108labid863time1429495366116?watermark/1/image/aHR0cDovL3N5bC1zdGF0aWMucWluaXVkbi5jb20vaW1nL3dhdGVybWFyay5wbmc=/dissolve/60/gravity/SouthEast/dx/0/dy/10" alt="设计模式之间关系"></p>
]]></content>
      <categories>
        <category>backend</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>article</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>spring</title>
    <url>/Blog/17-04-23-spring/</url>
    <content><![CDATA[<p>哇 心态崩了–google一堆资料能<strong>运行</strong>的没几个,以及上来就是一大堆代码,一点循序渐进的学习过程都没有,而且也没有不用和用的对比显示的区别</p>
<p>最后还是看了实验楼爸爸的<a href="https://www.shiyanlou.com/courses/578">spring教程</a>，感谢！！感谢！！</p>
<hr>
<p>我使用的环境</p>
<ul>
<li>OS:<code>4.9.0-deepin4-amd64</code> 是Debian分 支下类似Ubuntu的</li>
<li>javac&#x2F;java: <code>javac 1.8.0_111</code> [apt-get install default-jdk]</li>
<li>maven : <code>Apache Maven 3.3.9</code></li>
<li>idea : <code>2017.1</code></li>
</ul>
<hr>
<p>然后 学spring之<strong>前</strong>需要有些的基础知识，个人认为是必备</p>
<p>代码层面的基础</p>
<ul>
<li>JAVA SE&#x2F; core-java &#x2F;就是基本的语法 类啊 继承啊 IO啊之类的东西</li>
<li>xml 这个看得很快的 就是个xml是个怎样的数据结构</li>
</ul>
<p>要用的工具层面</p>
<ul>
<li>maven [apt-get install maven] 看看<a href="https://maven.apache.org/guides/getting-started/maven-in-five-minutes.html">5Min Guide</a> 和 <a href="https://maven.apache.org/guides/getting-started/index.html">Getting start</a> 不需要太细 但要理解单独的maven是个啥</li>
<li>javac 大自感受了一下java的代码中的<code>.</code>和文件路径的<code>/</code>的关系</li>
<li>idea [apt-get install idea] 我用的IDE</li>
</ul>
<p>知识层面</p>
<ul>
<li>IoC&#x2F;DI <a href="http://www.cnblogs.com/jailu/archive/2006/08/18/479978.html">控制反转&#x2F;依赖注入</a></li>
<li>AOP <a href="http://www.cnblogs.com/yanbincn/archive/2012/06/01/2530377.html">面向切面编程</a>,<a href="http://jinnianshilongnian.iteye.com/blog/1474325">2</a></li>
<li>Java Bean 这是个什么概念</li>
<li><a href="http://blog.csdn.net/dyllove98/article/details/8586312">spring</a></li>
</ul>
<hr>
<p>然后学习路径跟着实验楼爸爸的教程就好了 :-) 这里只做一些个人的笔记</p>
<h1 id="idea相关"><a href="#idea相关" class="headerlink" title="idea相关"></a>idea相关</h1><p>总的流程讲道理比eclipse简洁太多</p>
<p><code>Ctrl+Alt+Shift+S</code>的<code>Modules-&gt;Sources</code> 代码根目录需要Mark as为Sources才能 右键添加Java类:-)，resources文件夹也需要Mark as 成<code>Resources</code></p>
<p>新建类 直接输入从起始到类名 如 <code>com.abc.HelloWorld</code></p>
<p>运行左边的<code>Edit Configurations</code>-&gt;左上角加号-&gt;<code>Application</code>-&gt;设置<code>Main class</code>即可</p>
<p>新建xml中有spring选项简直完美</p>
<h1 id="maven-相关"><a href="#maven-相关" class="headerlink" title="maven 相关"></a>maven 相关</h1><p><code>pom.xml</code>中需要加上对spring的具体的某些库的依赖的配置 然后idea&#x2F;maven会自动帮你下载:-)</p>
<h1 id="spring-相关"><a href="#spring-相关" class="headerlink" title="spring 相关"></a>spring 相关</h1><p>一个bean 的 id 是一个<code>随意</code>的名字 它可以被java代码通过改名字得到</p>
<p>class是对应的Java代码的具体的类</p>
<p>name&#x2F;value以键值对的形式 设置class类中的name对应的field</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;FileNameGenerator&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.shiyanlou.spring.bean.FileNameGenerator&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;shiyanlou&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;type&quot;</span> <span class="attr">value</span>=<span class="string">&quot;txt&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>把bean设为另一个bean的<code>值</code>使用<code>ref</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;CustomerBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.shiyanlou.spring.innerBean.Customer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;person&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;PersonBean&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;PersonBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.shiyanlou.spring.innerBean.Person&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;shiyanlou&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;chengdu&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;25&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<p>用java代码得到bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">context = <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;SpringBeans.xml&quot;</span>);   <span class="comment">//xml的文件名</span></span><br><span class="line"><span class="type">Customer</span> <span class="variable">obj</span> <span class="operator">=</span> (Customer) context.getBean(<span class="string">&quot;CustomerBean&quot;</span>);         <span class="comment">//上面的一个具体的id</span></span><br></pre></td></tr></table></figure>

<hr>
<p>bean的参数<code>scope</code></p>
<ol>
<li>singleton — 单例模式，由 IOC 容器返回一个唯一的 bean 实例。</li>
<li>prototype — 原型模式，被请求时，每次返回一个新的 bean 实例。</li>
<li>request — 每个 HTTP Request 请求返回一个唯一的 Bean 实例。</li>
<li>session — 每个 HTTP Session 返回一个唯一的 Bean 实例。</li>
<li>globalSession — Http Session 全局 Bean 实例。</li>
</ol>
<p>example:</p>
<p><code>&lt;bean id=&quot;CustomerService&quot; class=&quot;com.shiyanlou.spring.customer.services.CustomerService&quot; scope=&quot;prototype&quot;/&gt;</code></p>
<hr>
<p>bean 除了基本的int string也支持java的list map等 见实验楼爸爸的文档</p>
<hr>
<p>代码中的spring <code>@Component</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">packeage com.shiyanlou.spring;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component(&quot;shiyanlou&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">shiyanlou</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>与在XML中配置以下效果相同</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;shiyanlou&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.shiyanlou.spring.shiyanlou&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>还有<code>@Autowired</code>,<code>@Configuration</code>，<code>@Bean</code></p>
<hr>
<p>自动扫描组件 减少 xml的繁琐配置</p>
<p><code>@Component</code> +<code>@Autowired</code>+</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.shiyanlou.spring&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>默认情况下，Spring 将把组件 Class 的第一个字母变成小写，来作为自动扫描组件的名称，例如将 <code>CustomerService</code> 转变为 <code>customerService</code></p>
<hr>
<p>增加代码阅读性</p>
<ol>
<li>@Component ——表示一个自动扫描 component</li>
<li>@Repository ——表示持久化层的 DAO component</li>
<li>@Service ——表示业务逻辑层的 Service component</li>
<li>@Controller ——表示表示层的 Controller component</li>
</ol>
<hr>
<p>用filter+regex来include 省去<code>@Component</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.shiyanlou.spring&quot;</span> &gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;regex&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;com.shiyanlou.spring.dao.*DAO.*&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;regex&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;com.shiyanlou.spring.services.*Service.*&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<p>自动装配Bean 属性<code>autowire</code> &#x2F;&#x2F;自动装配如果找不到即为null</p>
<ol>
<li>no —— 默认情况下，不自动装配，通过 ref attribute手动设定。</li>
<li>byName —— 根据 Property 的 Name 自动装配，如果一个 bean 的 name ，和另一个 bean 中的 Property 的 name 相同，则自动装配这个 bean 到 Property 中。</li>
<li>byType —— 根据 Property 的数据类型（ Type ）自动装配，如果一个 bean 的数据类型，兼容另一个 bean 中 Property 的数据类型，则自动装配。</li>
<li>constructor —— 根据构造函数参数的数据类型，进行 byType 模式的自动装配。</li>
<li>autodetect —— 如果发现默认的构造函数，用 constructor 模式，否则，用 byType 模式。</li>
</ol>
<hr>
<h2 id="spring-之-AOP"><a href="#spring-之-AOP" class="headerlink" title="spring 之 AOP"></a>spring 之 AOP</h2><h3 id="Advice"><a href="#Advice" class="headerlink" title="Advice"></a>Advice</h3><p>需要<code>CGLIB2</code>库 据搜索说是因为spring的aop的实现是基于该库</p>
<p>四种Advice 调用前 调用后 抛出异常 围绕，通过java实现spring的对应interface的类A，再通过xml配置target要切入的类B 和用来切入A 即可对指定类进行切入.deamo:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;customerServiceProxy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;target&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;customerService&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;interceptorNames&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>hijackAroundMethodBean<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Pointcut-amp-Advisor"><a href="#Pointcut-amp-Advisor" class="headerlink" title="Pointcut &amp; Advisor"></a>Pointcut &amp; Advisor</h3><p>在上面的基础上再用 这两个 可以对指定的function才做切入</p>
<ul>
<li>Advice：向程序内部注入的代码。</li>
<li>Pointcut：注入 Advice 的位置，切入点，一般为某方法。</li>
<li>Advisor： Advice 和 Pointcut 的结合单元，以便将 Advice 和 Pointcut 分开实现灵活配置。</li>
</ul>
<h3 id="auto-proxy"><a href="#auto-proxy" class="headerlink" title="auto proxy"></a>auto proxy</h3><p>代替ProxyFactoryBean用<code>BeanNameAutoProxyCreator</code>来自动批量切面,demo:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;beanNames&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>*Service<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;interceptorNames&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>customerAdvisor<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="AspectJ"><a href="#AspectJ" class="headerlink" title="AspectJ"></a>AspectJ</h3><p>又是对上面的 美化&#x2F;简化</p>
<ul>
<li>@Before</li>
<li>@After</li>
<li>@AfterReturning</li>
<li>@AfterThrowing</li>
<li>@Around</li>
</ul>
]]></content>
      <categories>
        <category>backend</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>javaforwebapplications 笔记</title>
    <url>/Blog/17-04-26-ProfessionalJavaForWebApplications%E4%B8%AA%E4%BA%BA%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<p>该书版本2015.06</p>
<p><strong>基于个人已有知识整理 低分享价值</strong></p>
<h1 id="章节"><a href="#章节" class="headerlink" title="章节"></a>章节</h1><ol>
<li>java 是什么 java web是什么</li>
<li>各种java web容器 以及IDE的使用</li>
<li>Servlet without jsp</li>
<li>basic jsp syntax ,jsp 和servlet 在server端的互相forward</li>
<li>cookie&#x2F;session 以及相关安全知识</li>
<li>jsp 表达式语句 $,#</li>
<li>jsp 标签库 c fmt fn x sql</li>
<li>jsp 自定义标签与函数库 .tag .tld</li>
<li>过滤器 (日志 验证 压缩加密 错误处理)</li>
<li>WebSocket 进行交互 (ajax,adobe flash等 各类访问 的设计) 在线对战井字棋 集群</li>
<li>日志监控</li>
<li>Spring</li>
<li></li>
<li></li>
<li></li>
<li></li>
<li></li>
<li></li>
<li></li>
<li></li>
<li></li>
<li></li>
<li></li>
<li></li>
<li></li>
<li></li>
<li></li>
<li></li>
</ol>
<h1 id="Source-code"><a href="#Source-code" class="headerlink" title="Source code"></a>Source code</h1><p><a href="https://github.com/YeXiaoRain/Professional-Java-for-Web-Applications">Here</a></p>
<h1 id="相关"><a href="#相关" class="headerlink" title="相关"></a>相关</h1><p><a href="http://www.runoob.com/jsp">runnoob jsp</a></p>
<h1 id="tomcat-个人理解"><a href="#tomcat-个人理解" class="headerlink" title="tomcat 个人理解"></a>tomcat 个人理解</h1><p>和php+apache类似</p>
<p>遇到请求是jsp则找jsp</p>
<p>如果是其它url则根据<code>/WEB-INF/web.xml</code>的servlet配置去找对应的class (这些都没有main函数 继承自HttpServlet)</p>
<p>配置web.xml也可以用java 的@WebServlet注解代替</p>
<h1 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h1><p><code>sudo apt-get install default-jdk idea tomcat8</code></p>
<p>把个人用户添加到tomcat8的组里[???必要么]</p>
<h1 id="servlet"><a href="#servlet" class="headerlink" title="servlet"></a>servlet</h1><p>文件上传 @MultipartConfig()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MultipartConfig(</span></span><br><span class="line"><span class="meta">        fileSizeThreshold = 5_242_880,//小于5MB保存在内存中</span></span><br><span class="line"><span class="meta">        maxFileSize = 20_231L ,       //5~20MB保存在location(可设置 不设置则java默认)</span></span><br><span class="line"><span class="meta">        maxRequestSize = 41_943_040L  //拒绝&gt;20MB文件 或 &gt;40MB请求</span></span><br><span class="line"><span class="meta">)</span></span><br></pre></td></tr></table></figure>

<p>通过request.getParameter(“action”)来判断 是要 请求 上传 下载 还是什么操作(下载需要注意设置返回头)</p>
<p>request.getPart(“file1”)来接受上传的文件</p>
<h1 id="jsp"><a href="#jsp" class="headerlink" title="jsp"></a>jsp</h1><p>&lt;%@ 指令 %&gt;  例如说明文档 类型 引入依赖等<br>&lt;% page  %&gt;<br>&lt;% include  %&gt;<br>&lt;% taglib  %&gt;<br>&lt;%! 声明 %&gt;  如声明定义变量 函数<br>&lt;% 脚本 %&gt;   赋值运算 貌似也可以在这里声明<br>&lt;%&#x3D; 表达式 %&gt;运算<br>&lt;%– 注释 –%&gt;运算</p>
<p>表达式语句保留字 true false null instanceof empty div mod and or not eq ne lt gt le ge</p>
<p>表达式 的流处理 以及lambda</p>
<p>java 标准标签库规范的5个标签库 c 核心,fmt 格式化, fn 函数, sql, x XML</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;https://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;fmt&quot;</span> uri=<span class="string">&quot;https://java.sun.com/jsp/jstl/fmt&quot;</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;fn&quot;</span> uri=<span class="string">&quot;https://java.sun.com/jsp/jstl/fn&quot;</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;sql&quot;</span> uri=<span class="string">&quot;https://java.sun.com/jsp/jstl/sql&quot;</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;x&quot;</span> uri=<span class="string">&quot;https://java.sun.com/jsp/jstl/x&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;c:out value=<span class="string">&quot;$&#123;exp&#125;&quot;</span> <span class="keyword">default</span>=<span class="string">&quot;value is null&quot;</span>&gt;</span><br><span class="line">&lt;c:out value=<span class="string">&quot;$&#123;exp&#125;&quot;</span>&gt;value is <span class="literal">null</span>&lt;/c:out&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:url value=<span class="string">&quot;http://....../today.jsp&quot;</span>&gt;</span><br><span class="line">  &lt;c:param name=<span class="string">&quot;story&quot;</span> value=<span class="string">&quot;$&#123;storyId&#125;&quot;</span>&gt;</span><br><span class="line">  &lt;c:param name=<span class="string">&quot;seo&quot;</span> value=<span class="string">&quot;$&#123;seoString&#125;&quot;</span>&gt;</span><br><span class="line">&lt;/c:url&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:<span class="keyword">if</span> test=&gt;</span><br><span class="line">balabala</span><br><span class="line">&lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line">c:choose c:when c:otherwise c:forEach c:forTokens c:redirect c:<span class="keyword">import</span> c:set c:remove</span><br><span class="line"></span><br><span class="line">fmt:message fmt:setLocale fmt:bundle fmt:setBundle fmt:requestEncoding fmt:timeZone fmt:setTimeZone fmt:formatDate fmt:parseDate fmt:formatNumber fmt:parseNumber</span><br><span class="line">对应还有i18n的配置</span><br><span class="line"></span><br><span class="line">(不推荐)sql:transaction sql:update sql:param sql:dateParam sql:query</span><br><span class="line"></span><br><span class="line">(x 命名空间)</span><br></pre></td></tr></table></figure>

<h1 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h1><p>继承Filter 重写函数doFilter init destroy，通过chain.doFilter向下传递</p>
<p>也可以在java内用代码配置 FilterGegistration</p>
<p>因为排序问题请勿使用注解来配置过滤器 (URL映射优先级 &gt; Servlet映射)</p>
<p><code>filter-mapping</code>可以用 不同方式配置 需要过滤的链接</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>myf<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.wrox.fff<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>myf<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/foo<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ticketServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>压缩过滤器extends HttpServletResponnseWrapper</p>
<h1 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h1><p>会使用443(wss)端口 以及Http&#x2F;1.1中的 Connection:Upgrade</p>
<p>HTTP开始 然后用TCP连接的WebSocket交流</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> connection = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&#x27;ws://www.example.net/safsd&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> connection = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&#x27;wss://secure.example.net/safsd&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> connection = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&#x27;ws://www.example.net/safsd&#x27;</span>,<span class="string">&#x27;asdf&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> connection = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&#x27;ws://www.example.net/safsd&#x27;</span>,&#123;<span class="string">&#x27;wer&#x27;</span>,<span class="string">&#x27;qwef&#x27;</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(connection.<span class="property">readyState</span> == <span class="title class_">WebServlet</span>.<span class="property">OPEN</span>)&#123;qwer;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">connection.<span class="property">onopen</span> = <span class="keyword">function</span>(<span class="params">event</span>)&#123;&#125;</span><br><span class="line">connection.<span class="property">onclose</span> = <span class="keyword">function</span>(<span class="params">event</span>)&#123;&#125;</span><br><span class="line">connection.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params">event</span>)&#123;&#125;</span><br><span class="line">connection.<span class="property">onmessag</span> = <span class="keyword">function</span>(<span class="params">event</span>)&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>利用WebSocket可以实现 在线对战游戏 比如 井字棋</p>
<p>Server:</p>
<p>session来记录用户</p>
<p><code>@ServerEndpoint(&quot;/ticTacToe/&#123;gameId&#125;/&#123;username&#125;&quot;)</code></p>
<p><code>onOpen()</code></p>
<p><code>onMessage()</code></p>
<p><code>onClose()</code></p>
<p>发送消息</p>
<p><code>session.getBasicRemote().sendText(ttttteeeeexxxxxttttt)</code>以及 close的另外的函数</p>
<p>前端js</p>
<p>上面的<code>new WebSocket(*)</code>和<code>on*</code> + <code>server.send</code></p>
<hr>
<p>用WebSocket 做集群</p>
<p>@ClientEndpoint</p>
<p><code>ClusterMessage</code></p>
<p>做用户端的 extends HttpServlet</p>
<h1 id="日志监控"><a href="#日志监控" class="headerlink" title="日志监控"></a>日志监控</h1><p>maven -&gt; <code>org.apache.logging.log4j</code> -&gt; <code>log4j-api/log4j-core/...</code> </p>
<p><code>System.err.println/Sytem.out.println</code>并不完美 因为它们永远启用 并在代码中</p>
<p>要记录的内容:错误&#x2F;警告&#x2F;错误类型&#x2F;栈&#x2F;JVM状态&#x2F;一些需要审核的事的记录 比如医院</p>
<p>记录方法:普通的println&#x2F;平面日志&#x2F;XML&#x2F;JSON&#x2F; linux的syslog&#x2F;套接字&#x2F;SMTP SMS&#x2F;DB</p>
<p>分级:重要性 n MB&#x2F;s的日志 &#x3D; 无日志 ,例如<code>java.util.logging.Level</code>分类 (也有其它分类 如apache的不同级别)</p>
<ul>
<li>致命&#x2F;崩溃 无常量</li>
<li>错误 SEVERE</li>
<li>警告 WARNING</li>
<li>信息 INFO</li>
<li>配置细节 CONFIG</li>
<li>调试 FINE</li>
<li>追踪1&#x2F;2 FINER FINEST</li>
</ul>
<p>通过 <code>java.util.logging.LogManager</code>解耦合，注意日志必要性和性能影响的权衡</p>
<p>框架 log4j,slf4j,logback,log4j2</p>
<p>log4j2的 记录器(),日志储存器,布局,过滤器</p>
<p>log4j2将寻找 <code>log4j2</code>或<code>log4j2-test</code>支持的扩展类型有<code>.xml</code>,<code>.json</code>和<code>.jsn</code></p>
<h1 id="Spring-framework"><a href="#Spring-framework" class="headerlink" title="Spring framework"></a>Spring framework</h1><h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><p>java编译后 单个实现不能超过65535个字节&#x3D;.&#x3D;……….</p>
]]></content>
      <categories>
        <category>backend</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>emacs 笔记</title>
    <url>/Blog/17-05-16-learnemacs/</url>
    <content><![CDATA[<p>突然无聊 学学emacs [该记录用vim编写]</p>
<p>交换</p>
<p><code>setxkbmap -option &quot;ctrl:swapcaps&quot;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">显示行号</span><br><span class="line">M-x linum-mode</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">                 M-v</span><br><span class="line">                 C-p</span><br><span class="line">                  |</span><br><span class="line">M-a C-a M-b C-b Cursor C-f M-f C-e M-e</span><br><span class="line">                  |</span><br><span class="line">                 C-n</span><br><span class="line">                 C-v</span><br><span class="line">取消 操作 C-g</span><br><span class="line">退出     C-x C-c</span><br><span class="line">剪切 删除 C-d</span><br><span class="line">         C-k</span><br><span class="line">粘贴      C-y</span><br><span class="line">撤销      C-x u</span><br><span class="line">         C-/</span><br><span class="line">         C-_</span><br></pre></td></tr></table></figure>

<h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">打开 C-x C-f</span><br><span class="line">保存 C-x C-s</span><br><span class="line">    C-x C-w : save file as</span><br><span class="line"></span><br><span class="line">保存多个缓存区 C-x s</span><br><span class="line"></span><br><span class="line">显示缓冲区 C-x C-b</span><br><span class="line"></span><br><span class="line">切换缓存区 C-x b</span><br><span class="line"></span><br><span class="line">关闭其它所有窗格 只保留一个</span><br><span class="line">C-x 1</span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">文字替换      M-x repl s&lt;Return&gt;src&lt;Return&gt;dst&lt;Resturn&gt;</span><br><span class="line">恢复自动保存的 M-x recover</span><br><span class="line"></span><br><span class="line">切换模式</span><br><span class="line">    M-x fundamental-mode (主模式)</span><br><span class="line">    M-x text-mode (文本模式)</span><br><span class="line">    M-x auto-fill-mode (自动 折 行 模式) C-u 20 C-x f 设置折叠字符数为20</span><br><span class="line">    M-q 手动折叠行</span><br><span class="line"></span><br><span class="line">查看主模式的文档 C-h m</span><br><span class="line"></span><br><span class="line">搜索 C-s</span><br><span class="line">在搜索中再按C-s可以往后搜索 C-r 与之搜索方向相反</span><br><span class="line"></span><br><span class="line">C-x 2 上下分割窗口</span><br><span class="line">C-x 3 左右</span><br><span class="line"></span><br><span class="line">C-M-v下别的移动 C-M-S-v上移动</span><br><span class="line">切换到其它窗口 C-x o</span><br><span class="line"></span><br><span class="line">打开文件 并跳过去</span><br><span class="line">C-x 4 C-f 上下</span><br><span class="line">`</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>显示行号<br>M-x linum-mode</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<pre><code>             M-v
             C-p
              |
</code></pre>
<p>M-a C-a M-b C-b Cursor C-f M-f C-e M-e<br>                  |<br>                 C-n<br>                 C-v<br>取消 操作 C-g<br>退出     C-x C-c<br>剪切 删除 C-d<br>         C-k<br>粘贴      C-y<br>撤销      C-x u<br>         C-&#x2F;<br>         C-_</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"># 文件</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>打开 C-x C-f<br>保存 C-x C-s<br>    C-x C-w : save file as</p>
<p>保存多个缓存区 C-x s</p>
<p>显示缓冲区 C-x C-b</p>
<p>切换缓存区 C-x b</p>
<p>关闭其它所有窗格 只保留一个<br>C-x 1</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>文字替换      M-x repl s<Return>src<Return>dst<Resturn><br>恢复自动保存的 M-x recover</p>
<p>切换模式<br>    M-x fundamental-mode (主模式)<br>    M-x text-mode (文本模式)<br>    M-x auto-fill-mode (自动 折 行 模式) C-u 20 C-x f 设置折叠字符数为20<br>    M-q 手动折叠行</p>
<p>查看主模式的文档 C-h m</p>
<p>搜索 C-s<br>在搜索中再按C-s可以往后搜索 C-r 与之搜索方向相反</p>
<p>C-x 2 上下分割窗口<br>C-x 3 左右</p>
<p>C-M-v下别的移动 C-M-S-v上移动<br>切换到其它窗口 C-x o</p>
<p>打开文件 并跳过去<br>C-x 4 C-f 上下</p>
<pre><code>
=.= 已经基本放弃了 继续vim
</code></pre>
]]></content>
      <categories>
        <category>software</category>
        <category>ide</category>
      </categories>
      <tags>
        <tag>ide</tag>
        <tag>emacs</tag>
      </tags>
  </entry>
  <entry>
    <title>3Blue1Brown</title>
    <url>/Blog/17-06-20-bilibilimath88461692/</url>
    <content><![CDATA[<p><a href="http://space.bilibili.com/88461692#!/video">page</a></p>
<p>从头刷到了从欧拉公式到初等群论了，&#x3D;。&#x3D;做点基于个人知识的笔记。</p>
<p><strong>如果有大佬会，求大佬解答。</strong></p>
<p><code>音乐与测度论有什么关系？</code>和<code>希尔伯特曲线：无限数学怎样应用于有限世界</code>中不是很理解的是：既然有理数的测度为0，那么为什么通过曲线覆盖空间。不过一维到二维的映射让我首次认识到这类曲线的一种用途。Orz</p>
<p><a href="http://octave-online.net/">octave-online</a></p>
<p>线代视屏收货蛮多的，主要在基变换的部分，但和ssj大佬用式子分析下来，虽然看上去是图像理解，可以说更多的还是让过程更复杂了。其中视频中没有讲在一起的有矩阵乘法的意义。以及我认为它把<code>[0 -1 ; 1 0]</code>称作旋转90°并不完全科学</p>
<p>例如<code>[A]*[B]</code>矩阵AB相乘</p>
<p>从右向左看，首先对原坐标系的基做B的变换，再做A的变换 其变换的视角是基于标准坐标系的，例如<code>[0 -1 ; 1 0]*[1 1 ; 0 1]</code></p>
<p>先看<code>[1 1 ; 0 1]</code>是把 原来的基变为newx &#x3D; oldx,newy&#x3D;oldx+oldy,而左边的矩阵为视频中的逆时针转90°，这里都是基于 标准坐标系。</p>
<p>从左向右看 首先newx&#x3D;oldy，newy&#x3D;-oldx，然后<code>[1 1 ; 0 1]</code>需要将视角转过来以新的基的视角进行<code>[1 1;0 1]</code>的变换，如果按照原坐标系进行变换得到的是<code>[1 -1; 1 0]</code></p>
<p>第一次从图像上看到特征值和特征向量，抽象向量空间也是感觉棒棒哒。</p>
<p>然后是群论没有看懂的是如何从加法群到乘法群就有了2^x的群，中间的乘法到幂的过度没理解。</p>
]]></content>
      <categories>
        <category>math</category>
      </categories>
  </entry>
  <entry>
    <title>编程之美个人整理</title>
    <url>/Blog/17-06-21-beauty-of-programing/</url>
    <content><![CDATA[<h1 id="总评"><a href="#总评" class="headerlink" title="总评"></a>总评</h1><p>整理开始日期:2017-01-23</p>
<p>整理结束日期:2017-06-21</p>
<p>如果你是准备学习算法，那么我非常不建议看这本书,去系统性的多刷刷题吧。</p>
<p>本书适用人群:觉得无聊想了解一下算法有什么用的人，准备参加大公司面试，且技术方面已经准备好的人，学习累了想消遣一下的人。</p>
<h2 id="第一章-游戏中碰到的题目"><a href="#第一章-游戏中碰到的题目" class="headerlink" title="第一章 游戏中碰到的题目"></a>第一章 游戏中碰到的题目</h2><table>
<thead>
<tr>
<th>章节</th>
<th>标题</th>
<th>整理</th>
</tr>
</thead>
<tbody><tr>
<td>1.1</td>
<td>关于cpu的&#x2F;window的相关</td>
<td>主要用于装逼，和后面的题目毫无相似性</td>
</tr>
<tr>
<td>1.2</td>
<td>中国象棋将帅的问题</td>
<td>最基础的编解码+C的struct知识</td>
</tr>
<tr>
<td>1.3</td>
<td>一摞烙饼的排序，对一个数组每次取首部任意个进行翻转求最少次数</td>
<td>深搜枚举剪枝 扩展问题很棒</td>
</tr>
<tr>
<td>1.4</td>
<td>买书，n(&lt;6)种物品每件物品价格相同，当同时买k种不同的物品各一件时将会有f(k)&#x3D;((2,3,4,5)&#x3D;&gt;(5%,10%,20%,25%)的折扣)求最大折扣</td>
<td>动规</td>
</tr>
<tr>
<td>1.5</td>
<td>快速找出故障机器，找唯一的仅出现一次的数</td>
<td>位表示</td>
</tr>
<tr>
<td>1.6</td>
<td>饮料供货，每个饮料容量为2的幂，</td>
<td>记忆dp&#x2F;基于数字特征的贪心</td>
</tr>
<tr>
<td>1.7</td>
<td>光影切割问题</td>
<td>。。。</td>
</tr>
<tr>
<td>1.8</td>
<td>小飞的电梯调度算法，一堆整数的整数差值最小</td>
<td>。。。</td>
</tr>
<tr>
<td>1.9</td>
<td>高效率地安排见面会</td>
<td>图着色问题</td>
</tr>
<tr>
<td>1.10</td>
<td>双线程高效下载</td>
<td></td>
</tr>
<tr>
<td>1.11</td>
<td>NIM（1）一排石头的游戏</td>
<td>维持和问题</td>
</tr>
<tr>
<td>1.12</td>
<td>NIM（2）“拈”游戏分析</td>
<td>反向递推博弈转化 XOR的转换和维持</td>
</tr>
<tr>
<td>1.13</td>
<td>NIM（3）两堆石头的游戏</td>
<td>反向递推博弈转化 质数筛法！</td>
</tr>
<tr>
<td>1.14</td>
<td>连连看游戏设计</td>
<td>。。</td>
</tr>
<tr>
<td>1.15</td>
<td>构造数独</td>
<td>生成再去除</td>
</tr>
<tr>
<td>1.16</td>
<td>24点游戏</td>
<td>注意分数。。</td>
</tr>
<tr>
<td>1.17</td>
<td>俄罗斯方块游戏</td>
<td>如何移动旋转 估分(洞 过高)</td>
</tr>
<tr>
<td>1.18</td>
<td>挖雷游戏</td>
<td>？？？</td>
</tr>
</tbody></table>
<h2 id="第2章-数字之魅——数字中的技巧"><a href="#第2章-数字之魅——数字中的技巧" class="headerlink" title="第2章 数字之魅——数字中的技巧"></a>第2章 数字之魅——数字中的技巧</h2><table>
<thead>
<tr>
<th>章节</th>
<th>标题</th>
<th>整理</th>
</tr>
</thead>
<tbody><tr>
<td>2.3</td>
<td>寻找发帖“水王”</td>
<td>求出现次数超过1&#x2F;2的数</td>
</tr>
<tr>
<td>2.7</td>
<td>最大公约数问题</td>
<td>剔除了同偶数共除2和有偶数去2的优化</td>
</tr>
<tr>
<td>2.8</td>
<td>找符合条件的整数</td>
<td>寻找1、0组成的能整除的被除数 利用数值特性余数进行效率优化</td>
</tr>
<tr>
<td>2.20</td>
<td>程序理解和时间分析</td>
<td></td>
</tr>
</tbody></table>
<h2 id="第3章-结构之法——字符串及链表的探索"><a href="#第3章-结构之法——字符串及链表的探索" class="headerlink" title="第3章 结构之法——字符串及链表的探索"></a>第3章 结构之法——字符串及链表的探索</h2><table>
<thead>
<tr>
<th>章节</th>
<th>标题</th>
<th>整理</th>
</tr>
</thead>
<tbody><tr>
<td>3.6</td>
<td>编程判断两个链表是否相交</td>
<td>链表成环问题</td>
</tr>
<tr>
<td>3.11</td>
<td>程序改错</td>
<td></td>
</tr>
</tbody></table>
<h2 id="第4章-数学之趣——数学游戏的乐趣"><a href="#第4章-数学之趣——数学游戏的乐趣" class="headerlink" title="第4章 数学之趣——数学游戏的乐趣"></a>第4章 数学之趣——数学游戏的乐趣</h2><table>
<thead>
<tr>
<th>章节</th>
<th>标题</th>
<th>整理</th>
</tr>
</thead>
<tbody><tr>
<td>4.1</td>
<td>金刚坐飞机问题</td>
<td></td>
</tr>
<tr>
<td>4.3</td>
<td>买票找零</td>
<td>卡特兰数</td>
</tr>
<tr>
<td>4.4</td>
<td>点是否在三角形内</td>
<td>计算几何 向量叉乘</td>
</tr>
<tr>
<td>4.5</td>
<td>磁带文件存放优化</td>
<td>数学。。</td>
</tr>
<tr>
<td>4.6</td>
<td>桶中取黑白球</td>
<td>奇偶分析6666666 感觉可以加入洗脑密卷豪华套餐</td>
</tr>
<tr>
<td>4.7</td>
<td>蚂蚁爬杆</td>
<td>等效转化！</td>
</tr>
<tr>
<td>4.8</td>
<td>三角形测试用例</td>
<td>编码 测试用例应当足量</td>
</tr>
<tr>
<td>4.9</td>
<td>数独知多少</td>
<td>思路与估值</td>
</tr>
<tr>
<td>4.11</td>
<td>挖雷游戏的概率</td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>notes</category>
        <category>book</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>离散数学教程四川大学出版个人整理</title>
    <url>/Blog/17-06-22-Discrete-Mathematics-Tutorial-scu/</url>
    <content><![CDATA[<h1 id="总评"><a href="#总评" class="headerlink" title="总评"></a>总评</h1><p>整理开始日期:2017-06-21</p>
<p>整理结束日期:2017-06-22</p>
<h2 id="第1章-命题逻辑"><a href="#第1章-命题逻辑" class="headerlink" title="第1章 命题逻辑"></a>第1章 命题逻辑</h2><p>~ 否定命题</p>
<p>∧  合取命题 and</p>
<p>∨  析取命题 or</p>
<p>→  条件命题</p>
<p>P→ Q &#x3D; ~P∨ Q</p>
<p>P↑ Q &#x3D; ~(P∧ Q)</p>
<p>P↓ Q &#x3D; ~(P∨ Q)</p>
<p>T 永真式 重言式 可满足公式</p>
<p>F 不可满足公式</p>
<p>不同取值让不同命题有相同结果 则 命题等价</p>
<p>子公式等价替换后保持等价A(A1)&#x3D;A(A2) 如果A1&#x3D;A2</p>
<p>可互推则双条件命题为永真</p>
<p><code>A*</code>与 A处处真值表为反为A的对偶式</p>
<p>$A\cup B&#x3D;{x\in A\bigvee x\in B}$</p>
<p>析取 子句</p>
<p>合取 合取范式</p>
<p>凡不是永真的，命题公式都存在与之等价的主合取范式</p>
<p>CP规则</p>
<p>右箭头上加c表示推的否定</p>
<h2 id="第2章-一阶谓词逻辑"><a href="#第2章-一阶谓词逻辑" class="headerlink" title="第2章 一阶谓词逻辑"></a>第2章 一阶谓词逻辑</h2><p>A是人 PEOPLE(A)</p>
<p>x大于y GREATER-THAN(x,y)</p>
<p>∀ 任意</p>
<p>∃ 存在</p>
<p><del>(∀ x)P(x) &#x3D; (∃ x)[</del>P(x)]</p>
<p><del>(∃ x)P(x) &#x3D; (∀ x)[</del>P(x)]</p>
<p>Skolem 将合取范式的所有存在用函数与任意进行替换(∀ x)(∀ y)(∃ z)P(z) &#x3D; (∀ x)(∀ y)P(f(x,y))</p>
<p>∃ x ∀ y →  ∀ y ∃ x</p>
<h2 id="第3章-集合及其运算"><a href="#第3章-集合及其运算" class="headerlink" title="第3章 集合及其运算"></a>第3章 集合及其运算</h2><p>$A\cup B&#x3D;{x\in A\bigvee x\in B}$</p>
<p>$A\cap B&#x3D;{x\in A\bigwedge x\in B}$</p>
<p>$A\bigoplus B&#x3D;{x\in A - B\bigvee x\in B - A}$</p>
<p>2^A&#x3D;{ X | X \subseteq A}$</p>
<p>运算$\times$为集合的直径 不满足交换律 结合律</p>
<p>形式语言</p>
<h2 id="第4章-初等数论和证明方法"><a href="#第4章-初等数论和证明方法" class="headerlink" title="第4章 初等数论和证明方法"></a>第4章 初等数论和证明方法</h2><p>n&#x3D;d×k -&gt; d | n</p>
<p>最大公因子gcd，最小公倍数lcm</p>
<p>数学归纳法</p>
<h2 id="第5章-二元关系"><a href="#第5章-二元关系" class="headerlink" title="第5章 二元关系"></a>第5章 二元关系</h2><p>R 关系 {(A的元素,B的元素)} 也可以画成矩阵表示</p>
<p>性质(自反 对称 可传递)对应的现象({(x,x)} {(x,y)(y,x)} {(x,y) (y,z) (x,z)})</p>
<p>关系的运算 $\cup \cap \bigoplus$</p>
<p>同时有 自反 对称 可传递 为等价关系</p>
<p>同时有 自反 反对称 传递 为偏序关系 如整除，有最小值的偏序集为良序</p>
<h2 id="第6章-函数"><a href="#第6章-函数" class="headerlink" title="第6章 函数"></a>第6章 函数</h2><p>f: X→ Y</p>
<p>单射、满射、双射</p>
<p>$\pi_1\circ \pi_2 &#x3D; \pi_1(\pi_2())$</p>
<p>循环的积</p>
<p>与自然数集N等势的为可数集</p>
<p>集合的基数card()</p>
<p>阿列夫 &#x3D;。&#x3D;</p>
<p>f(x)&#x3D;O(g(x))不能写成O(g(x))&#x3D;f(x) 表示f(x)的上界,f(x) &lt;&#x3D;M |g(x)|</p>
<h2 id="第7章-基本计数方法"><a href="#第7章-基本计数方法" class="headerlink" title="第7章 基本计数方法"></a>第7章 基本计数方法</h2><p>排列计数，组合计数</p>
<p>圆排列！！</p>
<p>组合恒等式!!!</p>
<p>容斥原理</p>
<p>抽屉原理&#x2F;鸽巢原理</p>
<h2 id="第8章-生成函数和递推关系"><a href="#第8章-生成函数和递推关系" class="headerlink" title="第8章 生成函数和递推关系"></a>第8章 生成函数和递推关系</h2><p>定义 生成函数!!!!!!!!!!!!! (排列的生成函数 组合的生成函数)</p>
<p>递推关系及其解 差分方程</p>
<p>递推关系和生成函数 6666666</p>
<h2 id="第9章-无向图和有向图"><a href="#第9章-无向图和有向图" class="headerlink" title="第9章 无向图和有向图"></a>第9章 无向图和有向图</h2><p>V为节点 E为边 度 sum(每个点度)&#x3D;2倍边数</p>
<p>G(V,E)</p>
<p>定义…</p>
<p>图的矩阵表示</p>
<p>独立集 点团 极图，布尔表达式 析取范式，诱导子图？？</p>
<p>图的着色？？</p>
<h2 id="第10章-基本图类和算法"><a href="#第10章-基本图类和算法" class="headerlink" title="第10章 基本图类和算法"></a>第10章 基本图类和算法</h2><p>树与生成树</p>
<p>每个连通图都含有生成树，图的任何割集至少与树有一个公共边，图的圈至少与树有一个公共边</p>
<p>如果有向图G的图是树，则称G为有向树</p>
<p>平面图(画为平面图可以让连线没有额外焦点)和对偶图</p>
<p>面数为f的连通平面图G(n,m) 有n-m+f&#x3D;2</p>
<p>阶数大于2的(n,m)连通平面图 m&lt;&#x3D;3n-6,至少存在一个度不超过5的结点</p>
<p>Kuratowski 定理</p>
<p>欧拉图及其应用</p>
<p>哈密顿图及其应用</p>
<p>图的匹配与匈牙利算法</p>
<p>网络无环又有向权图</p>
<h2 id="第11章-群和环"><a href="#第11章-群和环" class="headerlink" title="第11章 群和环"></a>第11章 群和环</h2><p>群 环 域 格 和 布尔代数是典型的系统</p>
<p>运算与代数系统</p>
<p>集合的二元运算 封闭的 可交换的 可结合的 可分配的 吸收率</p>
<p>常见的代数系统 $&lt;Z,+&gt;$,$&lt;Q,+,*&gt;$</p>
<p>封闭 广群</p>
<p>广群+可结合 半群</p>
<p>群 和 子群</p>
<p>群&#x3D;有逆元的含幺半群 </p>
<p>群的运算满足交换律则为交换群&#x2F;Abel群 充要条件 $a,b \in G, (a\cdot b)^2&#x3D;a^2\cdot b^2$</p>
<p>陪集与拉格朗日定理</p>
<p>同态与同构</p>
<p>环和域</p>
<p>群码</p>
<h2 id="第12章-格与布尔代数"><a href="#第12章-格与布尔代数" class="headerlink" title="第12章 格与布尔代数"></a>第12章 格与布尔代数</h2><p>格 交换 结合 吸收</p>
<p>格的性质和同态，逆关系 互为 对偶 </p>
<p>分配格和有补格</p>
<p>格+分配+有界+有补 &#x3D; 布尔格</p>
]]></content>
      <categories>
        <category>notes</category>
        <category>book</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>自然哲学的数学原理个人整理(Give up)</title>
    <url>/Blog/17-06-22-Mathematical_Principles_of_natural_Philosophy/</url>
    <content><![CDATA[<h1 id="总评"><a href="#总评" class="headerlink" title="总评"></a>总评</h1><p>整理开始日期:2017-06-22</p>
<p>整理结束日期:[整理中 感觉技不如人甘拜下风 是不是用google翻译的啊]</p>
<p>ISBN 978-7-214-06747-0</p>
<p>千万不要买这本书，定义，证明的翻译看得我好难受,整理的时候心一万个草泥马飞过,感觉需要再搞一本英文版对着看</p>
<h2 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h2><table>
<thead>
<tr>
<th>序号</th>
<th>定义</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>质量 物质的量就是物质的度量，可以通过物体的密度和体积而算出</td>
</tr>
<tr>
<td>2</td>
<td>动量 运动的量即是运动的度量，是由其速度和物质的量共同算出的</td>
</tr>
<tr>
<td>3</td>
<td>惯性 vis insita，或称为物体本身固有的力，是一种起抵抗作用的力。它存在于每一个物体之中，并始终使物体保持现有的静止或匀速直线运动的状态</td>
</tr>
<tr>
<td>4</td>
<td>施加在物体上的外力，其作用是使物体改变静止或匀速直线运动的状态。</td>
</tr>
<tr>
<td>5</td>
<td>向心力迫使物体趋向一个中心点，并对任何倾向于该点的物体起作用。</td>
</tr>
<tr>
<td>6</td>
<td>用向心力的绝对度量来量度向心力，它与由中心导致产生，并且通过周围空间传递出来的效能成正比</td>
</tr>
<tr>
<td>7</td>
<td>用向心力的加速度度量来量度向心力，它与向心力在一个给定时间里产生的速度成正比</td>
</tr>
<tr>
<td>8</td>
<td>用向心力的运动度量来量度向心力，它与向心力在一个给定时间里产生的运动量成正比</td>
</tr>
</tbody></table>
<p>运动公理或定律</p>
<table>
<thead>
<tr>
<th>序号</th>
<th>定律</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>对于任何一个物体，除非有外力作用于它并改变其状态，否则它将保持静止或匀速直线的运动状态。</td>
</tr>
<tr>
<td>2</td>
<td>运动的变化与外力成正比，且沿着外力作用的直线方向进行变化</td>
</tr>
<tr>
<td>3</td>
<td>每一种作用都有一个与之方向相反的反作用，并且，两个物体间的相互作用总是相等的。</td>
</tr>
<tr>
<td>推论1</td>
<td>当两个力同时作用于一个物体时，这个物体将沿着平时四边形的对角线运动，所需时间等于两个力分别沿两边运动所用的时间之和。</td>
</tr>
<tr>
<td>推论2</td>
<td>由此，可以得到以下结论：一个直线力AD可以由任何两个倾斜力AC和CD合成。反之，任何一个直线力AD又可以分解成AC和CD两个倾斜力。</td>
</tr>
<tr>
<td>推论3</td>
<td>运动的量，是由同一方向的运动的和以及相反方向运动的差所得出，并且在物体间的相互作用保持不变</td>
</tr>
<tr>
<td>推论4</td>
<td>两个或多个物体共同的重力中心不会因为物体间的相互作用而改变其运动或静止的状态。如果将外力和阻碍作用排除在外，那么，所有相互作用的物体的公共重心不是静止就是处于匀速直线运动状态</td>
</tr>
<tr>
<td>推论5</td>
<td>在一个给定的空间中，物体的运动和它们自身之间的运动是一样的，无论此空间是静止的还是在做不含任何旋转运动的匀速直线运动。</td>
</tr>
<tr>
<td>推论6</td>
<td>无论物体相互之间以何种形式运动，在平行方向上，被相同的加速力加速时，都会继续之前相互间的运动，就如同没有加速力时一样</td>
</tr>
</tbody></table>
<p>其它 插图</p>
<p>四种基本力：万有引力 电磁力维持原子 弱作用力释放射线 强作用力维持原子核</p>
<hr>
<ul>
<li>物体的运动<ul>
<li>通过量的初值与终值的比率(引理1-11)</li>
<li>向心力的确定</li>
<li>物体在偏心圆锥曲线上的运动</li>
<li>通过已知焦点求椭圆、抛物线和双曲线的轨道</li>
<li>由未知焦点求曲线轨道</li>
<li>如何求已知轨道上物体的运动</li>
<li>物体的直线上升或下落</li>
<li>如何确定物体受任意类型向心力作用运动的轨道</li>
<li>物体沿运动轨道进行运动以及在回归点的运动</li>
<li>物体在给定表面上的运动以及物体的摆动运动</li>
<li>球体的吸引力</li>
<li>非球状物体的吸引力</li>
<li>受指向极大物体上各部分的向心力推动的极小物体的运动</li>
</ul>
</li>
<li>物体在阻滞介质中的运动<ul>
<li>受与速度成正比的阻力作用的物体的运动</li>
<li>受与速度平方成正比的阻力作用的物体的运动</li>
<li>受部分与速度成正比而部分与速度平方成正比的阻力作用的物体的运动</li>
<li>物体在阻碍介质中的圆运动</li>
<li>流体密度和压力 流体静力学</li>
<li>摆体的运动及其受到的阻力</li>
<li>流体的运动；流体施加于抛体的阻力</li>
<li>通过流体传播的运动</li>
<li>流体的圆运动</li>
</ul>
</li>
<li>宇宙体系 使用数学的论述<ul>
<li>哲学中的推理规则</li>
<li>现象</li>
<li>命题</li>
<li>月球交汇点的运动</li>
</ul>
</li>
</ul>
<p>1.1.1 </p>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>math</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机系统设计原理个人整理(unfinished)</title>
    <url>/Blog/17-07-07-Principles_of_Computer_System_Design/</url>
    <content><![CDATA[<h1 id="总评"><a href="#总评" class="headerlink" title="总评"></a>总评</h1><p>整理开始日期:2017-07-07</p>
<p>整理结束日期:[整理中]</p>
<p>ISBN 9789812725202</p>
<p>….买书看封面有中文 打开后全英文 感觉又被智商压制了</p>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li>系统<ul>
<li>系统和复杂性</li>
<li>复杂性的来源</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>notes</category>
        <category>book</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机图形学个人整理</title>
    <url>/Blog/17-07-08-Computer-Graphics-with-OpenGL/</url>
    <content><![CDATA[<p>opengl自己的全以gl开头</p>
<p>识别图元，识别凹多边形，通过计算相邻边的叉积 来找到大于180°的角，再以此将凹多边形分割为多个凸多边形。</p>
<p>将凸多边形分割为多个三角形</p>
<p>内&#x2F;外的判定，奇偶规则 或 非零环绕规则</p>
<p>多边形表 顶点表(x,y,z描述) 边表(用顶点描述) 面片表(用边描述)</p>
<p>× 平面方程与平面方程的求解 Ax+By+Cz+D&#x3D;0, &lt;0 在面的后面 &gt;0在面的前面</p>
<p>绘制六边形<code>GL_POLYGON/GL_TRIANGLES/GL_TRIANGLES_STRIP/GL_TRIANGLES_FAN</code>的不同效果</p>
<p>四边形 <code>GL_QUAD/GL_QUAD_STRIP</code></p>
<p>顶点数组 GLint points [NUM][3] &#x3D;{ {0,0,0},{0,1,0}…}</p>
<p>glBitmap 位图函数</p>
]]></content>
      <categories>
        <category>notes</category>
        <category>book</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>Unikernels</title>
    <url>/Blog/17-07-22-Unikernels_Library_Operating_Systems_for_the_Cloud/</url>
    <content><![CDATA[<h1 id="Unikernels"><a href="#Unikernels" class="headerlink" title="Unikernels"></a>Unikernels</h1><p>相关连接</p>
<p><a href="http://blog.csdn.net/sunshine_dawn/article/details/54728751">1</a></p>
<p><a href="http://blog.csdn.net/sunshine_dawn/article/details/74940296">2</a></p>
<p><a href="http://tonybai.com/2016/05/16/understanding-unikernels/">3</a></p>
<p><a href="https://www.zhihu.com/question/38158590">4</a></p>
<p>虚拟化是不需要对用户程序更改提供的下层虚拟服务</p>
<p>这个实现在云端把它作为单目标程序的VM image</p>
<p>贡献：</p>
<p>1.提供单应用密封的程序 很适合云服务</p>
<p>2.评估了OCaml一种函数式语言 展示了类型安全 的好处 不会造成灾难性</p>
<p>3.lib和language扩展支持在OCaml上编码</p>
<p>基于hypervisor开发 而非硬件</p>
<p>§3 用Mirage的实现来描述一个unikernel的原型</p>
<p>牺牲向后兼容 显著 提高安全和性能</p>
<p>specialised, sealed, singlepurpose libOS VMs that run directly on the hypervisor</p>
<p>配置部署内置到编译过程中…???…</p>
<p>做了一些云端程序大小的优化</p>
<p>安全firstly by compile-time specialisation, then by pervasive type-safety in the running code + 基于hypervisor和ssl ssh等</p>
<p>在编译时尽可能的估计不需要的feature，从而减少image大小</p>
<p>多语言的支持 向后兼容 vs 效率 ,类型</p>
<p>单语言(类型 安全) 再用非OCaml的通过消息传递 来交流</p>
<p>single-address space 内存需要一次申请完 从而在隔离上基于hypervisor实现密封</p>
<p>运行时随机地址 保护</p>
<p>提供Xen VM 镜像 和linux 二进制可执行mirage</p>
<p>总之 我们用OCaml 我们觉得它吊</p>
<p>PVBoot  提供两个页申请slab &amp; extent slab 用于支持c(用的不多 因为大多数代码是OCaml写的),extent是主要的 申请分配 虚拟地址 垃圾回收等，PVBoot还提供最基本的异步 事件驱动等</p>
<p>3.3 运行时语言 内存分为两个大堆(长期)和小堆(临时) ,通过对heap的分化 让垃圾回收管理所需要检测的部分变小，以及实现0拷贝I&#x2F;O，基于PVBoot的domainpoll函数实现的并行，只有最外的线程main的loop需要C的外部事件其它都是OCaml的，用evaluator去唤醒轻量的线程，没有内部抢占和异步中断，试用本地key可以对一个thread进行定位从而操作。</p>
<p>3.4 设备驱动 基于hypervisor(Xen)的驱动 信号槽 事件通道 来支持USB PCI等，通过内联少量汇编和C结构 实现基本由纯OCaml实现。 I&#x2F;O 零拷贝（grant table）自动垃圾回收(但仍然不能完全防止数据泄漏)  </p>
<p>3.5 Type-safe I&#x2F;O  network(内部vchan+外部不同的lib对应不同的protocol 按照cstrcut分割) 网络DNS啊什么的更快(原理是给上层更多的底层控制?减少中间内耗？)</p>
<p>4 Evaluation</p>
<p>boot time(vs linux-pv 网络响应)Unikernels are compact enough to boot and respond to network traffic in real-time.</p>
<p>threading 因为少用户&#x2F;内核切换唤醒时间 垃圾回收 感觉主要靠超页？ Garbage collected heap management is more efficient in a single address-space environment. Thread latency can be reduced by eliminating multiple levels of scheduling.</p>
<p>Networking and Storage (direct I&#x2F;O 更高的throughput <a href="http://blog.csdn.net/guo_guo_guo/article/details/1647615">relative</a>) 低内存拷贝 高cpu使用 和linux direct I&#x2F;O比基本差不多 感觉那个表的意思是Mirage to Linux 的throughput更小??</p>
<p>实现了一些功能程序 &#x3D;。&#x3D; 然后比性能大小，还说For example, in the last 10 years the Internet Systems Consortium has reported 40 vulnerabilities in the Bind software.7 Of these, 25% were due to memory management errors, 15% to poor handling of exceptional data states, and 10% to faulty packet parsing code, all of which would be mitigated by Mirage’s type-safety.</p>
<p>活跃代码数&#x3D;。&#x3D; 感觉整个贡献也就很棒</p>
<p>总结也就和最开始的贡献总结一样</p>
<p>type-safe????</p>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>csp</tag>
        <tag>system</tag>
      </tags>
  </entry>
  <entry>
    <title>Singularity:Rethinking the Software Stack</title>
    <url>/Blog/17-08-06-Singularity_Rethinking_the_softeware_stack/</url>
    <content><![CDATA[<h1 id="Singularity-Rethinking-the-Software-Stack"><a href="#Singularity-Rethinking-the-Software-Stack" class="headerlink" title="Singularity: Rethinking the Software Stack"></a>Singularity: Rethinking the Software Stack</h1><ol>
<li>software-isolated processes for protection of programs and system services</li>
<li>contract-based channels for communication</li>
<li>manifest-based programs for verification of system properties</li>
</ol>
<p>现有的系统在一些结构上还是采取老的方法,这个Singularity项目就是要复审现有的软件的常见问题 widespread security vulnerabilities; unexpected interactions among applications; failures caused by errant extensions, plug-ins, and drivers, and a perceived lack of robustness.</p>
<h2 id="1-new-os-new-program-language-Sing-extension-of-C-and-new-software-verification-tools，安全的编程语言能避免许多安全问题，verification-tool也能提前检测出一些，增强的系统架构，作者也说这个Singularity在它们看来是个过程和意见-不是最终的一个完善的系统。"><a href="#1-new-os-new-program-language-Sing-extension-of-C-and-new-software-verification-tools，安全的编程语言能避免许多安全问题，verification-tool也能提前检测出一些，增强的系统架构，作者也说这个Singularity在它们看来是个过程和意见-不是最终的一个完善的系统。" class="headerlink" title="1 new os ,new program language(Sing#(extension of C#)) and new software verification tools，安全的编程语言能避免许多安全问题，verification tool也能提前检测出一些，增强的系统架构，作者也说这个Singularity在它们看来是个过程和意见 不是最终的一个完善的系统。"></a>1 new os ,new program language(Sing#(extension of C#)) and new software verification tools，安全的编程语言能避免许多安全问题，verification tool也能提前检测出一些，增强的系统架构，作者也说这个Singularity在它们看来是个过程和意见 不是最终的一个完善的系统。</h2><h2 id="2-提供简易但能根据简易的实现更丰富的实现"><a href="#2-提供简易但能根据简易的实现更丰富的实现" class="headerlink" title="2 提供简易但能根据简易的实现更丰富的实现"></a>2 提供简易但能根据简易的实现更丰富的实现</h2><h3 id="2-1-Software-Isolated-Processes"><a href="#2-1-Software-Isolated-Processes" class="headerlink" title="2.1 Software-Isolated Processes"></a>2.1 Software-Isolated Processes</h3><p>利用现代编程语言的类型和内存安全来说动态减少用于隔离的代码,两个程序间不能直接的内存操作，要么信号传递要么用特殊的交换heap，这样设计的sip是自动运行的，每一个sip有它自己的数据框架，运行时系统，垃圾回收，不能运行时加代码，新建sip和host的sip是隔离开的，易于去分析，最近也有paper对这种sealed processes的好处和trade-off进行分析.基于语言类型和内存安全用软件静态+运行时分析？？？这么吊？不需要硬件？通过这样多个程序甚至可以使用同一个大的虚拟地址，因为每个都不会超过它自己的SIP的范围，Aiken比较了硬件和软件用来孤立的trade-off，SIP减少page table切换 TLB，这个实验的关键就是建立一个用SIP的系统并论证它更加可靠..</p>
<h3 id="2-2-Contract-Based-Channels"><a href="#2-2-Contract-Based-Channels" class="headerlink" title="2.2 Contract-Based Channels"></a>2.2 Contract-Based Channels</h3><p>通过合约channel (In the Sing# language, the endpoints are distinguished by types C.Imp and C.Exp , respectively,), 这里给的是状态来表示 以及状态转移所要进行的操作的伪代码 总之细节也记不很清，如果以后要做相关的可以来参考，这里这样是表达了所有的操作按照一个Contrat，这样是高效并且在SIP之间的交流是可以分析的，之后结合上线性类型Singularity也支持了SIP之间进行大数据的零拷贝的channel,作者说验证器开发了很久，因为它无法预测输入的数据不足的情况，并且这个bug也存在了很久，(最后的解决办法是在可能触发的几秒钟内再进行判断？？？) 总之通过channel 提供了分离 易于静态分析 减少一定的动态检测  并且动态也能去检测故障</p>
<h3 id="2-3-Manifest-Based-Programs"><a href="#2-3-Manifest-Based-Programs" class="headerlink" title="2.3 Manifest-Based Programs"></a>2.3 Manifest-Based Programs</h3><p>用户需要执行的时候不是给一个exe一样的而是给系统一个manifest，它包含source程序的位置以及要依赖的程序的信息(感觉就和Android中的权限需要 先在manifest的样子很像)，通过manifest的提供 可以静态动态的分析 依赖，以及检测是否可以支持,总之MBP很强 是MSIL的一个扩展&#x3D;。&#x3D; 有助于 各种检查</p>
<h2 id="3-SINGULARITY-KERNEL"><a href="#3-SINGULARITY-KERNEL" class="headerlink" title="3. SINGULARITY KERNEL"></a>3. SINGULARITY KERNEL</h2><p>提供最基本的 software-isolated processes, contract-based channels, and manifest-based programs的抽象,To each SIP, the kernel provides a pure execution environment with threads, memory, and access to other MBPs via channels. 主要90% 使用Sing# 类型安全的语言写的 有垃圾回收机制，最主要的unsafe的代码是是实现垃圾回收的&#x3D;。&#x3D; 并不懂它这种48%的计量方式是什么 以及这么具体干嘛&#x3D;。&#x3D;<code>_(:з」∠)_</code> 这也就不继续说语言组成的细节 具体看paper，总的说它是microkernel 所有的protocol 文件系统都是在核外,</p>
<h2 id="3-1-ABI"><a href="#3-1-ABI" class="headerlink" title="3.1 ABI"></a>3.1 ABI</h2><p>Application Binary Interface (ABI) 确保最小 安全的 孤立的 每一个SIP的计算环境,ABI通过 终端的channel进行信息交流,ABI 将 accessing primitive和process-local operations 区分开，这种区分在进过通道时作为一个参数，静态分析可以利用这个信息进行分析，……比如静态分析可以知道没有使用网络channel的就没有能力发送DDOS攻击……</p>
<p>不是很懂这一段 怎么设计的功能有192个 又很多 又不包括一些类似win和linux的复杂的,ABI保证任何SIP不能通过ABI函数‘直接’改变另一个SIP的状态，保证了每一个SIP自己的控制权，这样让每个SIP依赖与软件层面的孤立而不是硬件的保护,然后它们的消耗比普通的函数调用消耗更大</p>
<p>3.1.1 Privileged Code 由于类型安全和内存安全，SIP提供了权限指令更加宽松的 执行范围，SIP并利用这种safe in-line技术 来优化channel 交流</p>
<p>3.1.2 Handle Table 通过强类型控制表保证SIP的跨ABI的操作例如 mutexes和threads不会被篡改，</p>
<h3 id="3-2-Memory-Management"><a href="#3-2-Memory-Management" class="headerlink" title="3.2 Memory Management"></a>3.2 Memory Management</h3><p>又是说以往的内存的虚拟内存每个SIP一个管理,就算是分享 也是 指向自己的虚拟地址，不会指向其它SIP的虚拟地址，因此易于垃圾回收。</p>
<p>3.2.1 Exchange Heap 每一个SIP之间交换的数据需要放在交换heap中(Figure 3),交换heap中的指针只会指向交换heap中，在运行时同一个heap在一个时间最多被一个SIP拥有，静态分析能确保SIP不会访问一个dangling pointer.为了能静态分析….在执行时一个SIP最多有一个指向block的指针，Singularity保证一个SIP在发送一个block数据后不再拥有修改它的能力</p>
<h3 id="3-3-Threads"><a href="#3-3-Threads" class="headerlink" title="3.3 Threads"></a>3.3 Threads</h3><p>所有tread是内核tread ，也就是内核可调度的,性能差不多 因为不需要内核权限和protected mode</p>
<p>3.3.1 Linked Stacks</p>
<p>3.3.2 Scheduler 用一个 unblocked list 和一个preempted list来,和普通发信息一样它也是发送信息，block等待返回，Singularity允许 一个SIP中的线程切换到另一个SIP上的线程，需要394个周期</p>
<p>3.4 Garbage Collection</p>
<p>大多safe language 中都有垃圾回收，Singularity的每个SIP有它自己的垃圾回收功能，又pointer不会跨SIP等前面的限定让系统能够很好的垃圾回收。现在运行时的垃圾回收有五种 generational semi-space, generational sliding compacting, an adaptive combination of the previous two collectors, mark-sweep, and concurrent mark-sweep.现在系统用的是concurrent mark-sweep collector</p>
<p>3.5 Channel Implementation</p>
<p>0allocated ,用Sing#实现，状态转换的每个周期至少一次发送和一次读取，这样保证了不会有终端无限发送而不等待，看上去这个规则过于严格，但实践没发现有放宽的需要,预申请终端的queues并把指针指向exchange heap 很自然的能够实现0拷贝的多SIP子系统</p>
<h3 id="3-6-Principals-and-Access-Control"><a href="#3-6-Principals-and-Access-Control" class="headerlink" title="3.6 Principals and Access Control"></a>3.6 Principals and Access Control</h3><h1 id="4-DESIGN-SPACE-EXPLORATION"><a href="#4-DESIGN-SPACE-EXPLORATION" class="headerlink" title="4. DESIGN SPACE EXPLORATION"></a>4. DESIGN SPACE EXPLORATION</h1><p> Singularity’s principled architecture, amenability to sound static analysis, and relatively small code base make it an excellent vehicle for exploring new options. In the following subsections, we describe four explorations in Singularity:</p>
<ul>
<li>compile-time reflection for generative programming, </li>
<li>support for hardware protection domains to augment SIPs, </li>
<li>hardware-agnostic heterogeneous multiprocessing, </li>
<li>typed assembly language.</li>
</ul>
<h2 id="4-1-Compile-Time-Reflection"><a href="#4-1-Compile-Time-Reflection" class="headerlink" title="4.1 Compile-Time Reflection"></a>4.1 Compile-Time Reflection</h2><p>The Java 有运行时的反射,We have developed a new compile-time reflection (CTR) facility . Compile-time reflection (CTR) is a partial substitute for the CLR’s (common language runtime) full reflection capability. The core feature of CTR is a high-level construct in Sing#, called a transform, which allows programmers to write inspection and generation code in a pattern matching and template style. The generated code and metadata can be statically verified to ensure it is well-formed, type-safe, and not violate system safety properties. At the same time, a programmer can avoid the complexities of reflection APIs.</p>
<h2 id="4-2-Hardware-Protection-Domains"><a href="#4-2-Hardware-Protection-Domains" class="headerlink" title="4.2 Hardware Protection Domains"></a>4.2 Hardware Protection Domains</h2><p>大多的os用cpu的mmu 硬件来孤立进程通过两种机制 ——1.进程只能访问具体的一些物理地址，2.使用privilege levels保护 执行权限指令的不可信代码.</p>
<p>主要讲的还是 权限的分配</p>
<h2 id="4-3-Heterogeneous-Multiprocessing"><a href="#4-3-Heterogeneous-Multiprocessing" class="headerlink" title="4.3 Heterogeneous Multiprocessing"></a>4.3 Heterogeneous Multiprocessing</h2><h1 id="5-CONCLUSIONS"><a href="#5-CONCLUSIONS" class="headerlink" title="5. CONCLUSIONS"></a>5. CONCLUSIONS</h1><ul>
<li>how to make more dependable software systems</li>
<li>software isolated processes (SIPs), </li>
<li>contract-based channels, and </li>
<li>manifest-based programs (MBPs).</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>读后感 首先其的设计方法 还是让我有新的获取，</p>
<p>依然是对type-safe 的语言 一脸懵逼 问了问ssj，他说开学给我说<code>_(:з」∠)_</code>向大佬低头</p>
<p>然后就是一点感悟，不知道其它学科 往研究方向是怎么走的，至少目前看到 系统相关的 很多东西都不是”站在巨人的肩上“ 更多的像是”听了巨人说的话“，毕竟它和实际的联系会有更紧密一些，向文中的很多驱动啊什么之类的都是巨大的工作量，当对底层有修改想法的时候，还需要去考虑对上层的支持，因此这样一个就算十分优秀的想法，想要实现，想要验证，甚至想要应用都需要大量的时间和物力去支持。</p>
<p>我不知道未来会怎样，不知道如果我去研究会做出多少贡献，又能有多少支持。如果梦想养不活你，就挣钱养活梦想吧。</p>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>csp</tag>
      </tags>
  </entry>
  <entry>
    <title>docker</title>
    <url>/Blog/17-09-20-Docker/</url>
    <content><![CDATA[<p>关于docker的介绍以及初级使用 在各个网上都能搜到了</p>
<p>记录一下个人的使用了两天后的感受</p>
<ol start="0">
<li><p>首先可以去看看知乎的评价 以及知乎上说的关于docker的使用场景</p>
</li>
<li><p>目前还是没有感觉出和server 虚拟机的差别， 很明显的就是 它能直接通过内部命令去搜和下载以及安装运行，而虚拟机需要去找找找</p>
</li>
<li><p>因为本身我的host也是linux而且还是基于ubuntu的mint，所以我看到很多应用 感觉都直接可以安装，从这一点上说对个人用户没有看出特别的优点</p>
</li>
<li><p>目前所想到的优点，以及搜索到的一些repo：如果本身使用的不是debian系列的linux 甚至是windows，那么有一个docker能快速部署和支持想想也是很棒的，当然现在windows 也推出了ubuntu on windows</p>
</li>
<li><p>个人每次换新电脑的时候 还是要配本地环境，感觉优势不明显，但比如一些常用的需要配置的仓库，别人已经搭好了就能直接pull</p>
</li>
<li><p>还没学会如何精简的使用docker+github 来作为个人性质的使用<code> _(:з」∠)_</code>或者这种姿势本身就是不正确的？</p>
</li>
<li><p>以及 它和虚拟机相比 可以说把 整个系统当做一个仓库来管理，因此 可以更快”建立”虚拟机 用来运行一些需要隔离的程序</p>
</li>
</ol>
<h1 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h1><p><img data-src="https://docs.docker.com/engine/images/architecture.svg" alt="architecture"></p>
<p><img data-src="https://docs.docker.com/engine/images/engine-components-flow.png" alt="components"></p>
<p><img data-src="/Blog/../images/dockercommand.jpg" alt="docker command"></p>
<p><img data-src="/Blog/../images/dockerstate.png" alt="docker state"></p>
<p><a href="https://docs.docker.com/engine/faq/">https://docs.docker.com/engine/faq/</a></p>
<h1 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h1><p>docker pull</p>
<p>docker build</p>
<p>docker push</p>
<p>docker run</p>
<h2 id="run"><a href="#run" class="headerlink" title="run"></a>run</h2><p><code>--rm</code> 运行后删除自己，可以把数据类映射到宿主机上，运行的container只是当作个程序</p>
<p><code>--env</code> 运行环境参数</p>
<p>但凡会输入<code>--help</code>命令就能看到<code>-d</code>是 <code>-d, --detach                         Run container in background and print container ID</code> 还有一堆人非要说是daemon</p>
<p><code>--link &lt;container name or id&gt;:&lt;alias name&gt;</code> # <a href="https://www.jianshu.com/p/21d66ca6115e">https://www.jianshu.com/p/21d66ca6115e</a></p>
<h1 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h1><p>方案1 sudo启动</p>
<p>方案2 创建docker用户组</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo groupadd docker     #添加docker用户组</span><br><span class="line">sudo gpasswd -a $USER docker     #将登陆用户加入到docker用户组中</span><br><span class="line">newgrp docker     #更新用户组</span><br><span class="line">docker ps    #测试docker命令是否可以使用sudo正常使用</span><br></pre></td></tr></table></figure>

<h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name 容器名 -i -t -p 主机端口:容器端口 -d -v 主机目录:容器目录:ro 镜像TD或镜像名:TAG</span><br><span class="line"></span><br><span class="line"># --name 指定容器名，可自定义，不指定自动命名</span><br><span class="line"># -i 以交互模式运行容器</span><br><span class="line"># -t 分配一个伪终端，即命令行，通常组合来使用</span><br><span class="line"># -p 指定映射端口，将主机端口映射到容器内的端口</span><br><span class="line"># -d 后台运行容器</span><br><span class="line"># -v 指定挂载主机目录到容器目录，默认为rw读写模式，ro表示只读</span><br></pre></td></tr></table></figure>

<p>映射：冒号左侧<code>宿主</code>或<code>docker提供</code>，右侧docker内部</p>
<h1 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h1><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><p>docker hub 仓库，拉取到本地images</p>
<p>images 生成可运行的container</p>
<p>container 执行具体任务</p>
<p><code>docker image inspect &lt;image name&gt;</code> 看配置</p>
<h1 id="多个docker-之间配置-一次使用"><a href="#多个docker-之间配置-一次使用" class="headerlink" title="多个docker 之间配置 一次使用"></a>多个docker 之间配置 一次使用</h1><p><code>docker-compose.yml</code>文件 + 相关配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动所有服务</span></span><br><span class="line">docker-compose up</span><br><span class="line"><span class="comment"># 关闭所有服务</span></span><br><span class="line">docker-compose stop</span><br><span class="line"><span class="comment"># 删除所有</span></span><br><span class="line">docker-compose <span class="built_in">rm</span></span><br></pre></td></tr></table></figure>

<h1 id="Dockerfile-创建image-Demo"><a href="#Dockerfile-创建image-Demo" class="headerlink" title="Dockerfile 创建image Demo"></a>Dockerfile 创建image Demo</h1><p><code>index.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> os = <span class="built_in">require</span>(<span class="string">&quot;os&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> hostname = os.<span class="title function_">hostname</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello from &quot;</span> + hostname);</span><br></pre></td></tr></table></figure>

<p><code>Dockerfile</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM alpine</span><br><span class="line">RUN apk update &amp;&amp; apk add nodejs</span><br><span class="line">COPY . /app</span><br><span class="line">WORKDIR /app</span><br><span class="line">EXPOSE 3000</span><br><span class="line">CMD [&quot;node&quot;,&quot;index.js&quot;]</span><br></pre></td></tr></table></figure>

<p><code>docker image build -t hello:v0.1 .</code></p>
<p>相关命令</p>
<ul>
<li>基础镜像（父镜像）信息指令 FROM。</li>
<li>维护者信息指令 MAINTAINER。</li>
<li>镜像操作指令 RUN 、EVN 、ADD、 WORKDIR、EXPOSE 等。<br>COPY 从宿主到内部</li>
<li>容器启动指令 CMD 、ENTRYPOINT 和 USER 等。<br>CMD 内部执行的命令 推荐上面数组格式<br>ENTRYPOINT 可以让你的容器表现得像一个可执行程序一样。</li>
</ul>
<h1 id="使用多个container-swarm-mode"><a href="#使用多个container-swarm-mode" class="headerlink" title="使用多个container (swarm mode)"></a>使用多个container (swarm mode)</h1><p><code>Docker Compose and Docker Swarm Mode</code></p>
<p>Compose用于控制单个系统上的多个容器。 就像我们用来构建映像的Dockerfile一样，有一个文本文件描述了应用程序：要使用的映像，多少实例，网络连接等。但是Compose仅在单个系统上运行，因此虽然有用 ，我们将跳过Compose1并直接进入Docker Swarm Mode。</p>
<p>Swarm Mode 告诉Docker您将运行许多Docker引擎，并且您希望协调所有引擎。 Swarm模式结合了以下功能：不仅可以定义应用程序体系结构（例如Compose），而且可以定义和维护高可用性级别，扩展，负载平衡等。 通过所有这些功能，Swarm模式在生产环境中的使用频率要比其简单的表亲Compose更高。</p>
<p><a href="https://training.play-with-docker.com/ops-s1-swarm-intro/">https://training.play-with-docker.com/ops-s1-swarm-intro/</a></p>
<h1 id="常用-1"><a href="#常用-1" class="headerlink" title="常用"></a>常用</h1><p>这些并不会随着container消失而清理，可能需要手动rm,</p>
<p><code>docker network ls</code> 管理网络配置</p>
<p><code>docker volume ls</code> 储存</p>
<h1 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h1><p>对于宿主机器的权限<code>https://training.play-with-docker.com/security-seccomp</code></p>
<h1 id="常用-cheat-sheet"><a href="#常用-cheat-sheet" class="headerlink" title="常用 cheat sheet"></a>常用 cheat sheet</h1><table>
<thead>
<tr>
<th>功能</th>
<th>命令</th>
</tr>
</thead>
<tbody><tr>
<td>比较container和images本身的区别</td>
<td><code>docker container diff &lt;container_id&gt; </code></td>
</tr>
<tr>
<td>基于container创建image</td>
<td><code>docker container commit &lt;container_id&gt; </code></td>
</tr>
<tr>
<td>命名image的repo</td>
<td><code>docker image tag &lt;image_id&gt; &lt;image_repository&gt; </code></td>
</tr>
<tr>
<td>基于dockerfile创建image</td>
<td><code>docker image build -t &lt;image_repository&gt; .</code></td>
</tr>
<tr>
<td>导出容器</td>
<td><code>docker export &lt;container_id&gt; &gt; xxx.tar</code></td>
</tr>
<tr>
<td>导入容器</td>
<td><code>cat xxx.tar &lt;管道符号&gt; docker import - &lt;repository&gt;:&lt;tag&gt;</code></td>
</tr>
<tr>
<td>标准输出日志查看</td>
<td><code>docker logs -f &lt;container_id&gt;</code> &#x2F; <code>docker container logs &lt;container_id&gt;</code></td>
</tr>
<tr>
<td>进入正在运行的容器(不建议经常操作，如果经常改，应该映射出来)</td>
<td><code>docker container exec -it &lt;container_id&gt; /bin/bash</code></td>
</tr>
</tbody></table>
<h1 id="发布到远端"><a href="#发布到远端" class="headerlink" title="发布到远端"></a>发布到远端</h1><p>登录</p>
<p><code>docker login</code></p>
<p>产生image</p>
<p><code>docker image build -t [username]/[repository]:[tag] .</code> </p>
<p>推送</p>
<p><code>docker image push [username]/[repository]:[tag]</code></p>
<h1 id="磁盘体积过大"><a href="#磁盘体积过大" class="headerlink" title="磁盘体积过大"></a>磁盘体积过大</h1><p>比如我的一个128ssd+1t普通的电脑，分区大概是<code>/</code>,<code>/home</code>,<code>/data</code>, 然后这个玩意占了8g多<code>/</code>，忍不了</p>
<p>很多办法 <a href="https://github.com/moby/moby/issues/3127">https://github.com/moby/moby/issues/3127</a> , 官网是建议</p>
<p><code>/etc/docker/daemon.json</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;data-root&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/data/docker&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;storage-driver&quot;</span><span class="punctuation">:</span> <span class="string">&quot;overlay2&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>记得先停再操作</p>
<h1 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h1><p><a href="https://training.play-with-docker.com/">training play with docker</a></p>
]]></content>
      <categories>
        <category>backend</category>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>why use crawler</title>
    <url>/Blog/17-09-26-why-use-crawler/</url>
    <content><![CDATA[<p>I found that I was no longer willing to write the crawler program, more often use jquery output page link, and then wget to download, this will be faster.</p>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>quine</title>
    <url>/Blog/17-11-12-quine/</url>
    <content><![CDATA[<h1 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h1><h2 id="Prepare"><a href="#Prepare" class="headerlink" title="Prepare"></a>Prepare</h2><ol start="0">
<li><p>install brainfuck by downloading the package from <a href="https://packages.ubuntu.com/search?keywords=bf">ubuntu packages</a></p>
</li>
<li><p>install npm &amp; LiveScript</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install npm</span><br><span class="line">sudo npm install -g LiveScript</span><br></pre></td></tr></table></figure>

<p>I don’t know what happened, livescript which is installed by apt is broken and the error message shows as below or this <a href="https://github.com/mame/quine-relay/issues/86">issue</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">##################################</span><br><span class="line">##  93: LiveScript -&gt; LLVM asm  ##</span><br><span class="line">##################################</span><br><span class="line"></span><br><span class="line">lsc QR.ls &gt; QR.ll</span><br><span class="line">module.js:442</span><br><span class="line">    throw err;</span><br><span class="line">    ^</span><br><span class="line"></span><br><span class="line">Error: Cannot find module &#x27;prelude-ls&#x27;</span><br><span class="line">    at Function.Module._resolveFilename (module.js:440:15)</span><br><span class="line">    at Function.Module._load (module.js:388:25)</span><br><span class="line">    at Module.require (module.js:468:17)</span><br><span class="line">    at require (internal/module.js:20:19)</span><br><span class="line">    at Object.&lt;anonymous&gt; (/usr/lib/nodejs/livescript/lib/ast.js:3:8)</span><br><span class="line">    at Module._compile (module.js:541:32)</span><br><span class="line">    at Object.Module._extensions..js (module.js:550:10)</span><br><span class="line">    at Module.load (module.js:458:32)</span><br><span class="line">    at tryModuleLoad (module.js:417:12)</span><br><span class="line">    at Function.Module._load (module.js:409:3)</span><br></pre></td></tr></table></figure>

<p>Install <code>prelude-ls</code> haven’t fix it, however it is workable by using <code>npm</code> to install <code>LiveScript</code> to cover it.</p>
<h2 id="Preview-output"><a href="#Preview-output" class="headerlink" title="Preview output"></a>Preview output</h2><p>You can check the <code>output</code> branch which is generated on my computer or the <code>spoiler</code> branch which is povided by the original author of the code. <del>I haven’t diff them</del></p>
<h1 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h1><p><a href="https://github.com/mame/quine-relay">quine</a></p>
]]></content>
      <categories>
        <category>backend</category>
      </categories>
      <tags>
        <tag>language</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解java虚拟机 第二版 笔记</title>
    <url>/Blog/18-05-15-jvm/</url>
    <content><![CDATA[<p>2018-05-15  -&gt;  2018-07-12</p>
<h1 id="1-hello-world"><a href="#1-hello-world" class="headerlink" title="1 hello world"></a>1 hello world</h1><p>书:《深入理解java虚拟机》第二版</p>
<h1 id="2-java内存区域与内存溢出异常"><a href="#2-java内存区域与内存溢出异常" class="headerlink" title="2 java内存区域与内存溢出异常"></a>2 java内存区域与内存溢出异常</h1><p>java自动管理内存释放</p>
<p>运行时 数据区</p>
<ul>
<li><p>方法区 method area&#x2F;&#x2F; 存储已被虚拟机加载的类信息 常量 静态变可以看做堆的逻辑部分 别名non-heap</p>
</li>
<li><p>虚拟机栈VM stack &#x2F;&#x2F; 线程私有 java 方法服务</p>
</li>
<li><p>本地方法栈 native method stack&#x2F;&#x2F; 虚拟机用到的native 方法服务</p>
</li>
<li><p>堆heap&#x2F;&#x2F; 几乎所有对象实例</p>
</li>
<li><p>程序计数器 Program counter register&#x2F;&#x2F; 这个java 模拟出类似汇编pc的一个自己字节码的pcr&#x2F;&#x2F;当前在执行字节码时 有指向，执行机器码时指向空</p>
</li>
<li><p>运行时常量池 &#x2F;&#x2F;方法区一部分  编译时期的字面量和符号引用</p>
</li>
</ul>
<p>数据区以外</p>
<ul>
<li>直接内存，JDK中NIO库，以及相关操作方法，相当于更好的控制内存了？？？</li>
</ul>
<p>2.3.1 对象</p>
<p>new</p>
<ul>
<li>去常量池中找类的符号引用，检查是否被加载解析 初始化过(7章)</li>
<li>从堆上新生对象分配内存&#x2F;&#x2F;赋值0  虚拟机中额外的标识操作 markword 比如哈希、GC分代年龄、元数据、偏向线程ID， init()</li>
</ul>
<p>访问</p>
<ul>
<li>通过栈上记录对对象的引用-&gt;句柄池(到对象实例数据的指针 到对象类型数据的指针)&#x2F;到对象实例的指针 对象示例数据-&gt;实例</li>
</ul>
<p>outofmemory实战的VM参数<code>-Xms20m -Xmx20m -XX:+HeapDumpOnOutOfMemoryError</code>,前面参数是设置初始化和上限大小，后面是帮助dump</p>
<p>可以用相应IDE的工具来查看GC Roots的引用链</p>
<p>String.intern() 是native方法，如果字符串常量池中已经包含一个等于此String 对象的字符串，则返回代表池中这个字符串的String对象，否则将此String 对象所包含的字符串添加到常量池中，并且放回此string对象的引用&#x2F;&#x2F; 1.6-&gt;1.7版本更换时的改动</p>
<p>方法区溢出，类的回收判定咳咳，大量jsp或动态产生JSP文件的应用</p>
<h1 id="3-垃圾收集器GC与内存分配策略"><a href="#3-垃圾收集器GC与内存分配策略" class="headerlink" title="3 垃圾收集器GC与内存分配策略"></a>3 垃圾收集器GC与内存分配策略</h1><ul>
<li>哪些内容需要回收</li>
<li>什么时候回收</li>
<li>如何回收</li>
</ul>
<p>对象死亡判断–引用计数算法，引用+1，引用失效-1，简单 判定效率高，大部分情况下不错，但无法解决循环引用的问题</p>
<p>example:  <code>struct s&#123;s * next&#125;;s* a,s* b;a-&gt;next=&amp;b,b-&gt;next=&amp;a;a=NULL,b=NULL;</code></p>
<p>VM 参数<code>-verbose:gc -Xmx20M -Xmx20M -Xmn10M -XX:+PrintGCDetails -XX:SurvivorRatio=8</code></p>
<p>可达性算法，通过GC Roots 向下搜索(引用链)，java中可以作为GC Root的对象包括</p>
<ul>
<li>虚拟机栈(栈帧中的本地变量表)中引用的对象</li>
<li>方法区中类静态属性引用的对象</li>
<li>方法区中常量引用的对象</li>
<li>本地方法栈中JNI(native方法)引用的对象</li>
</ul>
<p><code>引用</code>的定义</p>
<ul>
<li>强引用(Object obj &#x3D; new Object())</li>
<li>软引用(将要溢出时回收)</li>
<li>弱引用(回收时 销毁)</li>
<li>虚引用(用来作为被回收时的通知用的)</li>
</ul>
<p>没有覆盖finalize或finalize已经被调用过(也就是每个实例的finalize只会执行一次 所以也只有一个自救的机会)，则没有必要执行。所以finalize()时是最后一次逃脱销毁的时刻。然而笔者并不鼓励用这个方法，建议大奖忘掉，try-finally或其它方法可以做得更好</p>
<p><strong>回收方法区</strong></p>
<p>方法区(hotspot中的永久代)也有垃圾回收(主要是废弃常量 无用的类)，但性价比低。新生代中垃圾回收可以回收75-90%的空间，</p>
<p>废弃常量比较容易判断</p>
<p>无用的类 回收的前提条件(也只是 可以 回收，和对象不同 对象不使用必然回首):该类的所有实例被回收，加载该类的ClassLoader已经被回收,该类的java.lang.Class对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。</p>
<p><code>-verbose:class -XX:+TraceClassLoading -XX:+TraceClassUnLoading</code></p>
<p>垃圾收集算法</p>
<p>标记清除算法(mark-sweep):最基本的 也就是 标记一轮，收集一轮，后面的基于该算法改进</p>
<p>复制算法copying,内存化为两半A、B，只用A，标记，收集把剩余的移动到B，只用B，标记B，收集把剩余的移动到A，代价是一半的内存，解决的是空闲碎片问题</p>
<ul>
<li>商业VM中采用这个方法来回收新生代，而IBM研究表明，98%的新生代 朝生夕死，所以并不需要1:1的分配，而是用一个大的Eden和两个小的survivor大约8:1:1的分类，也就是每次能用90%完整内存</li>
</ul>
<p>标记整理算法，标记，收集并整理，和复制不同的是不用浪费空间，而且相对来说 如果存活率高的化，这样的代价相对少，用于老年代</p>
<p>分代收集&#x3D;按需具体新生代、老年代不同的手机算法。</p>
<h2 id="HotSpot-算法实现"><a href="#HotSpot-算法实现" class="headerlink" title="HotSpot 算法实现"></a>HotSpot 算法实现</h2><p>GC发生时需要停顿所有JAVA线程执行,所以从GC roots的扫描要快，HotSpot通过OopMap的数据结构，在类加载完成的时候就把对象内的偏移量对应的数据类型计算出，在JIT编译过程中也会记录栈和寄存器中哪些是引用，这样扫描就直接有信息了</p>
<p>安全点：如果每条指令都生成对应OopMap将会要大量额外空间，所以只会在safepoint才会暂停开始GC，例如方法调用，循环跳转，异常跳转，并且让所有线程都运行到最近的安全点停下来，</p>
<ul>
<li>抢先式中断，让没跑到safepoint继续跑，已经到了的等待，，，，几乎没有VM这样用</li>
<li>主动式中断，每个线程都去找GC的中断标志，在每次到safepoint时检查标志</li>
</ul>
<p>然而可能有线程sleep或blocked【也就是不执行】，需要安全区域（safe region）来解决，所谓安全区域是只一个 引用关系没有变化的区域，在线程离开safe region时，检查是否GC完成，没有则等待，</p>
<h2 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h2><p>Yound generation&#x2F; tenured generation</p>
<p>7种</p>
<ul>
<li>serial(年轻代) 单线程收集器-&gt;所有线程到safepoint-&gt;”stop the world”-&gt;GC ,在client模式下的VM中的新生代依然是一个好的选择</li>
<li>ParNew(年轻代) serial的多线程版本，和上面不同的是 GC的过程是多线程收集，server模式下新生代首选， 只有它目前能和CMS配合工作</li>
<li>Parallel Scavenge 是新生代收集器，复制算法 并行多线程手机，主要特点在于可控 CPU使用的吞吐量，能够动态根据吞吐量需求调整 大小</li>
<li>serial old 老年代版本 标记整理 主要是client模式下vm用</li>
<li>parallel old 老年代 标记整理,说这个配合paralle scavenge使用</li>
<li>CMS 收集器 以获取最短回收停顿为目标的收集器，(Mark Sweep) 标记-清除算法</li>
<li>G1 当今最前沿的成果之一 直到jdk7u4认为它达到足够成熟的商用程度</li>
</ul>
<p>CMS：</p>
<ul>
<li>初始标记 记录GC Roots能够直接关联道德对象 很快 &#x2F;&#x2F; 需要stop the world</li>
<li>并发标记 gc root tracing</li>
<li>重标记 remark 【解决运行时产生的变动的部分？】 &#x2F;&#x2F; 需要stop the world</li>
<li>并发清除</li>
</ul>
<p>对CPU数量有要求，并发的定义适合用户线程，然后并行的并不是等到 空间使用完了才收集，而是在过程中 书上说68%老年代的会出现收集，，jdk1.6启动阈值92%，另外一个是碎片合并的问题，可以参数控制</p>
<p>G1:</p>
<ul>
<li>并发并行，利用多CPU，缩短stop-the-world</li>
<li>分带收集，能够独立管理所有代的 GC堆</li>
<li>空间整合，从整体看是 标记–整理，局部看是复制算法，不会有碎片</li>
<li>相对于CMS除了降低停顿时间，还能建立可预测的 停顿时间模型</li>
</ul>
<p>G1之前 其它收集器进行搜收集范围是整个新生代或者老年代。G1将堆划分为多个大小相等的独立Region，然后手机过程不是整个新生代或老年代，而是根据每个Region的垃圾堆积的价值大小，说着只是划分而已然而实现并不简单2004年就发了论文，然后10年时间才开发出商用版，</p>
<p>回收步骤：</p>
<ul>
<li>初始标记</li>
<li>并发标记</li>
<li>最终标记 意思相当于上面的remark 并行，stop-the-world</li>
<li>筛选回收 并行</li>
</ul>
<h2 id="理解GC日志"><a href="#理解GC日志" class="headerlink" title="理解GC日志"></a>理解GC日志</h2><p>学会如何阅读GC日志，<code>-XX:+PrintGCDetails</code>,这个demo很快理解了，然后具体要用再查就OK</p>
<p>总结？ 垃圾回收这一块 jvm也是带了很多参数可以在运行时使用, 分配会一定程度和GC收集器相关、受到影响</p>
<p>Eden?? TODO</p>
<p>大多情况，对象优先在Eden区域分配，当 Eden区域没有足够空间时，虚拟机将发起一次Minor GC</p>
<p>书上给了例子，4次分配，限制总空间和新生代空间，前三次能满足新生代空间，但第四次不能满足，同时vm没有找到可以回收的对象，为了满足分配保证机制，把前三次的送入老年代，然后第四次的在新生代分配，</p>
<p>可以设置大对象阈值，超过该阈值的直接进入老年代</p>
<p>Eden出生一次Minor到Survivor中，之后一次Minor GC年龄增长一岁，设置年龄界限参数，，然后还有一个同年龄的对象空间占用和达到一半会分入老年代的规则</p>
<p>担保分配过程 -&gt; 一点统计参数+找可用剩余空间</p>
<h1 id="4-章-虚拟机性能监控与故障处理工具"><a href="#4-章-虚拟机性能监控与故障处理工具" class="headerlink" title="4 章 虚拟机性能监控与故障处理工具"></a>4 章 虚拟机性能监控与故障处理工具</h1><p>介绍jdk除了java和javac的其它工具，jdk1.5以下要专门加参数开启</p>
<p>可以搜<code>SUN JDK 监控和故障处理工具</code>命令行工具：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>主要作用</th>
</tr>
</thead>
<tbody><tr>
<td>jps</td>
<td>jvm process status tool,显示指定系统内所有的hotspot虚拟机进程</td>
</tr>
<tr>
<td>jstat</td>
<td>jvm statistics monitoring tool,用于收集hotspot虚拟机各方面的运行数据</td>
</tr>
<tr>
<td>jinfo</td>
<td>configuration info for java，显示虚拟机配置信息</td>
</tr>
<tr>
<td>jmap</td>
<td>memory map for java,生成虚拟机的内存转储快照（heapdump文件）</td>
</tr>
<tr>
<td>jhat</td>
<td>jvm heap dump browser，用于分析heapmap文件，它会建立一个http&#x2F;html服务器 让用户可以在浏览器上查看分析结果</td>
</tr>
<tr>
<td>jstack</td>
<td>stack trace for java ,显示虚拟机的线程快照</td>
</tr>
</tbody></table>
<p>HSDIS JIT生成反汇编 &#x3D;。&#x3D; 哇哦 毕竟生成java可执行码直接看不懂，而汇编相对玩过C++和汇编的来说就容易看懂了</p>
<p>可视化工具:jconsole &#x2F;&#x2F;可以通过线程观察等待的函数 甚至一些可以判定的死锁</p>
<p>&#x2F;&#x2F;运行我写的一个项目然后是Eden在产生和被回收，但是survivor一直是100% 没有进入老年代的为何？ 放久了有部分进入</p>
<p>visualVM 官方提供 的可视化可插件的</p>
<ul>
<li>heap dump</li>
<li>Btrace动态日志跟踪 插入代码</li>
</ul>
<h1 id="5-章-调优案例分析与实战"><a href="#5-章-调优案例分析与实战" class="headerlink" title="5 章 调优案例分析与实战"></a>5 章 调优案例分析与实战</h1><p>用案例说明</p>
<p>案例1</p>
<p>从32位低硬件转移到高硬件，就是一个高访问，然后要从磁盘读数据的，分配了12GB&#x2F;16GB的，而一次Full GC(同时回收年轻代 年老代，永久代满会导致class method元信息的卸载）需要14s的停顿，且频率十几分钟一次</p>
<p>文中举例64位的缺点：1.内存回收导致长时间停顿，无法dump【因为如果要dump 产生的文件大小能达到十多G 也无法分析，因为指针大小 对齐补白一般比32位内存使用更多</p>
<p>然后说更多的还是用32位虚拟机集群，缺点：1.注意并行资源竞争 2.均摊性能，3。32位虚拟内存上限，4.大量本地缓存</p>
<p>案例2</p>
<p>分布式 有一定共享的竞争型数据库,改用全局缓存后出现内存溢出问题。 memorydump出的数据显示很多NAKACK，这个是JBossCache保证各个包有效顺序及重发，也就是为了保证顺序性会在内存中保留并且网络不佳时会有大量重发，就会堆积以至溢出。【这个只是说了能分析到原因，没说解决方案，我猜大概 使用更大内存空间？</p>
<p>案例3</p>
<p>小的基于B&#x2F;S电子考试系统，服务器不定时异常，但是把堆开到最大32位下1.6GB，也没有效果甚至异常更频繁了，然后加heapdump 没用，异常时没有dump文件，然后用jstat监视，gc不频繁，多个代都没压力。最后从系统日志中找到异常堆栈</p>
<p>Direct Memory不算如java的内存堆中，从输出的超过内存上界的报错看是direct 的allocate错误，虚拟机会对direct回收，但不会空间不足就触发像新生代老年代那样的回收，</p>
<p>socket 连接的receive 和send两个缓存区</p>
<p>案例4</p>
<p>外部命令导致系统缓慢，数字校园应用系统，并发压力测试时请求响应慢，CPU使用率高，，通过跟踪发现时linux的fork，而java中最多有线程产生没有进程产生，再溯源到Runtime.getRuntime().exec() ，，，解决方案是去掉该shell脚本 改为java api去获取信息。</p>
<p>案例5</p>
<p>服务器jvm进程崩溃，日志看是socke上http上的，问题溯源是 异步服务速度不对等 积累的等待线程socket</p>
<p>案例6</p>
<p>不恰当数据结构导致内存占用过大，感觉要对hashmap的实现了解</p>
<p>案例7</p>
<p>偶尔出现GC长达1min左右，但是gc的执行时间不长，但是准备时间长，然后监测到最小化时，资源管理中内存大幅度减少，最后断定是 windows把内存临时交换到磁盘里去了 加参数解决</p>
<p>实战调优</p>
<p>笔者用eclipse开发装了很多插件，启动要4-5min，全默认配置,作为对比，先统计了最初的启动 时间，垃圾回收耗时，full gc次数耗时，minor gc次数耗时,加载类，编译时间。</p>
<ul>
<li>升级jdk，升级jdk从宏观意义上统计意义上能带来一定的性能提升，这里1.5到1.6 update21上用力说是提升了15%，但是实际启动时间并没有效果</li>
</ul>
<p>而且升级以后类加载时间更久了是原来的2倍，然后作者定位到？？？怎么定位，字节码验证部分耗时差距最大，然后加了一个禁用验证的参数，两个版本的时间才相近</p>
<p>取消验证后 原来15s的 1.5版本变为13s，1.6版本变为12s</p>
<p>然而升级以后 发生了内存溢出，visualvm检测到permgen的大小和最大值曲线重叠，解决方案是改配置文件的启动参数设置更大的永久代</p>
<p>这里的编译时间是指JIT HotSpot把java字节码编译为本地代码【但是如果把编译关了 换来的是执行时间更久</p>
<p>然后有不同优化程度的编译器，如果是长时间运行eclipse的话，那么用一个更多优化消耗更多编译时间的C2编译器，在运行速度中可以赚回来</p>
<p>最后优化GC，因为minor GC太频繁 耗时多，而minor GC会让多个线程跑到安全点等待回收，过多minor GC会导致不必要的挂起和恢复</p>
<p>minor通过参数增加eden大小，老年代回收日志显示 老年代在一次次扩容，然后 作者的做法一开始就设置好 减少自动扩展，然后这样设置以后 检测到的minor GC和full GC只有个位数次</p>
<p>然后观察到 老年代没有满过但还是有gc，，，原因是代码显式 System.gc(),通过参数禁用显式 GC,至此只需要7+秒</p>
<p>当前配置下eclipse进行代码编译中 老年代回收耗时长，CPU使用率最高才30%，通过参数指定 新生代和老年代的垃圾收集器，让老年代收集时间显著下降[实际上是CMS 和程序之间有并发时间 看上去停顿的时间降低显著]</p>
<p>该章总结 是通过不同部分运行日志 来分析运行的瓶颈，从而加参数修改。 知识依赖就是对 jvm运行时熟悉</p>
<h1 id="6-类文件结构"><a href="#6-类文件结构" class="headerlink" title="6 类文件结构"></a>6 类文件结构</h1><p>代码编译结果 从 本地机器码 变为字节码？？ 这说的不是物与物转换吧，是历史上的时间变为吧</p>
<p>【看了第一章 果然是时间上的 不是 物 转为 物</p>
<p>向java设计之初低头，说是最开始就拆分为 java语言规范 和 JVM规范，如现在有Groovy Scala等，大概就是 任何语言-&gt;编译器-&gt;.class字节码-&gt;在jvm上运行【突然感觉董哥之前的js on jvm好吊呀</p>
<p>以及 jvm 所支持的 大于 java所支持的</p>
<p>这里作者说有标准参考书《java 虚拟机规范(Java SE 7)》</p>
<p>二进制流，必要数据，无分隔符，类似C语言的伪结构体——无符号数和表</p>
<p>无符号数u1 u2 u4 u8，表<code>_info</code>格式结尾</p>
<p>类型的集合：同一类型但数量不定的多个数据时，前置容量计数器加若干个连续的数据项的形式</p>
<blockquote>
<p>魔数与class文件版本</p>
</blockquote>
<p>magic number,class文件头的4个字节，唯一作用确定该文件是否是一个能被虚拟机接受的Class文件。很多文件存储标准中都使用魔数来身份识别.</p>
<p>【例如gif jpeg文件头都有魔数</p>
<p>class的魔数为0xCAFEBABE</p>
<p>紧接着魔数的4个字节是版本号，我这边在linux下用vim+xxd可以看，想gui看的话可以ghex</p>
<p>[0123][45][67]<br>[魔数][次版本号][主版本号]</p>
<p>&#x2F;&#x2F;即使代码没有变，低版本虚拟机也会拒绝高版本的class执行</p>
<p>再后面是常量池入口 显示u2类型 常量池容量计数值，从1开始计数，主要存放两大常量：字面量(文本字符串 声明 final 常量)和符号引用(类和接口的全限定名,字段的名称和描述符，方法名称和描述符)，</p>
<p>然后常量池中每一个常量是个表，，类型挺多的。。到1.7有14种了？</p>
<p>[类型标识][按照类型的数据][类型标识][按照类型的数据]…</p>
<p>所以 方法 字段名会受到这里的限制，所以方法变量名 最大长度不能超过65535</p>
<p>然后有提到相应的工具 javap 带上-verbose参数，话说这个可以用来<code>反</code>编译咯</p>
<p>其中可以看到 有部分常量没有在java代码中出现过，它们是自动生成的常量，如字段表 方法表 属性表</p>
<p>此处有表&lt;常量池中的14种常量项的结构总表&gt;</p>
<p>在常量池结束后是 两个字节访问标志(access_flags) 标识 类还是 接口 ，是否public ，是否被final，用的bit表示法,</p>
<p>类索引(this_class)父类索引(super_class)u2类型数据，接口索引集合(interfaces)一组u2类型的数据集合 描述具体实现了哪些类</p>
<p>除了java.lang.Object所有java类都有父类，</p>
<p>这两个索引用u2索引值表示，它们各自指向一个类型为CONSTANT_Class_info的类型描述符常量,</p>
<p>查找到具体类的流程就是</p>
<p><code>this_class-&gt;CONSTANT_Class_info-&gt;CONSTANT_Utf8_info</code></p>
<p>【这一段将得好无聊啊23333，感觉都是按照 位置对应内容+(操作符+内容)的格式，</p>
<p>字段表集合，用于描述接口或者类中声明的变量。<code>access_flags，name_index,descriptor_index,attributes_count,attributes</code></p>
<p>代码被编译存放在方法属性表集合中一个名为code的属性里面，，，然后java不能重载仅返回值不同的函数，但jvm标准的class文件中可以</p>
<p>属性方法表，code属性表</p>
<p>然后是javap 所得到的<code>args_size</code> 的值 在空时也为1，因为会隐式传入this</p>
<p>在字节码指令之后是 异常处理表集合， 格式 是 代码起始行 代码结束行 处理函数地址 要catch的类型</p>
<p>linenumbertable用于描述java源码行号与字节码行号之间的对应关系，可以用参数省去该表，但省去以后如果出现异常将无法直接定位源代码中所在行号</p>
<p>localvariableTable是描述栈帧中布局与原代码中变量之间关系，也是可以参数省去</p>
<p>以及sourceFile属性ConstantValue属性，InnerClasses，Deprecated 和Synthetic</p>
<p>这几页 感觉看了也记不住，而且也不可能说背，毕竟表结构和参数对应辣么多，但对大自轮廓有了印象</p>
<p>然后字节码简介 概括下来就是 基本仿照 真机器码的编码思想</p>
<p>作者对这些分类讲解。。。。。</p>
<p>局部变量加载到操作栈iload iload__n lload lload_n fload..</p>
<p>将一个数值从操作数栈存储到局部变量表，储存istore…lstore..</p>
<p>讲一个常量加载到操作数栈 bipush sipush ldc ldc_w ldc2_w aconst_null iconst_m1 iconst_i lconst_i</p>
<p>扩充局部变量访问索引指令wide</p>
<p>运算 基本按照 [变量类型][操作类型]来命名 ，比如 iadd isub ladd lsub</p>
<p>这里有个疑问它字节码有iinc 局部变量自增，那这个操作算原子的吗？</p>
<p>然后搜到说java中i++转换的字节码不是这个,然后我测了一下，局部变量还是会变成iinc的，但是全局的就不是，所以也就是说，iinc都只会在局部中出现咯，也就是并没有什么原子保证。</p>
<p>浮点数方面是IEEE 754，遵守浮点数值和逐级下溢运算规则，</p>
<p>转换指令 可以可以 向2&#x3D;to,4&#x3D;for低头 i2b,i2c等等</p>
<p>创建new[…] ,读取[…]load存储[…]store,</p>
<p>栈操作 pop… dup…复制+压入 swap</p>
<p>方法调用invoke[调用的配型] 返回[类型]return</p>
<p>看到这我还在想，为什么一个和寄存器有关的都没有，再想到java要一次编写，所以这是说靠jvm读字节码时再 和寄存器什么的相关咯</p>
<p>monitorenter和monitorexit支持，java中的synchronized同步</p>
<p>如果之前学过汇编，看这个就基本属于快速过掉，具体要查再查吧，这个的命名规则很是直接了，然后有部分 很明先汇编里没有的也大自看一看</p>
<h1 id="7-虚拟机类加载机制"><a href="#7-虚拟机类加载机制" class="headerlink" title="7 虚拟机类加载机制"></a>7 虚拟机类加载机制</h1><p>加载到内存 ，校验，转换解析和初始化，最终形成过程都是在程序呢运行期间完成的，</p>
<p>所以java是语言运行期类加载的特性</p>
<p>类生命周期</p>
<p>加载(Loading)-&gt;连接(Linking)(验证-&gt;准备-&gt;解析)-&gt;初始化-&gt;使用-&gt;卸载</p>
<p>规定：5种需要立即 初始化</p>
<ul>
<li>new getstatic putstatic invokestatic字节码 且没有初始化时</li>
<li>java.lang.reflect 对类进行反射调用时 且没有初始化???????? 那这个对应的字节码呢 这划分得一脸懵逼，</li>
<li>初始化类时，如果其父类没有初始化，需要先触发其父类的初始化</li>
<li>vm启动时，用户需要指定一个包含main方法的类，vm需要先初始话这个类，</li>
<li>1.7版本的动态语言 中 <code>REF_第一条</code> 中的这些指令且没有初始化时</li>
</ul>
<p>然后说有且只有这5种会，称作主动引用，其它是被动引用</p>
<p>静态字段只有直接定义这个字段的类才会被初始化</p>
<p>样例见书: 父亲类（初始化静态输出1，静态变量value），子类(初始化静态输出2)， 调用样例<code>输出 子类.value</code>,因为value是父亲</p>
<p>惊了 我去测了一圈 然后才知道java里父类和子类的成员变量竟然都记录了的，比如A.x ,然后B是A的子类，有B.x,当你把一个B转化成A以后访问x只能访问到A.x，但是如果是方法的话，就算把B转成A访问还是会调用B.x，相当于C++中的自带virtual了</p>
<p>数组定义引用类不会触发， A[] arrA &#x3D; new A[233];</p>
<p>final static被常量传播优化于编译阶段时，不会触发类的初始化</p>
<h2 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h2><p>加载 验证 准备 解析 初始化 这5个阶段</p>
<h3 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h3><ul>
<li>通过类全限定名获取定义此类的二进制流</li>
<li>将所代表静态存储结构转化为方法区的运行时数据结构</li>
<li>在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据入口</li>
</ul>
<p>因为规范相对宽松，也就成就了一些技术 从ZIP中读取如JAR EAR WAR，从网络中读取也就有了Applet，运行时计算生动态代理技术 java.lang.reflect.Proxy中,用了ProxyGenerator.generateProxyClass来为特定接口生成形式为,其它文件如jsp，数据库如sap</p>
<p>数组类</p>
<ul>
<li>类是引用类型 则按该引用类去加载</li>
<li>不是引用类型如int[]，Java虚拟机将会把数组标记为与引导类加载器关联。</li>
<li>数组的可见性与它的组件类型的可见性一致，private&#x2F;public</li>
</ul>
<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>确保字节流信息符合当前虚拟机需求，且不会危害虚拟机安全【本身相对于C&#x2F;C++来说是安全的】，直接java代码到字节码已经是安全的，但是class文件也可以不由java编译产生，所以有必要检查class 如访问边界以外的数据啊这种操作。咦这样的意思是 可变边界的情况，就是由jvm来检查了吗？那比如A[]大小n，访问m，那比较这个是jvm做吗？A[3]访问x，由java直接写，但是转换出来的代码中会有检查吗？还是也丢给jvm做？再说A[x]访问x，在java中显示写x大小判断，还会被jvm检查吗？还是说有开关</p>
<p>说验证在整个加载系统中占了很大一部分</p>
<ul>
<li>文件格式验证 如 魔数开头，主次版本是否满足当前虚拟机，常量池是否有不被支持的常量，指向常量索引是否指向不存在的，utf8编码格式部分是否符合utf8编码 等等等等等</li>
<li>元数据验证，是否符合java语言规范？？？？不是jvm语言规范？？，说是例如 类是否有父类，或者不符合规则的重载</li>
<li>字节码验证(最复杂)，通过数据流和控制流，分析语义是否合法，比如放入一个int，取出却按照long去除，跳转不会到方法体以外的字节码上，有增加一个StackMapTable来增加方法体基本快的描述 辅助验证</li>
<li>符号引用验证，(在解析 阶段发生) 比如private protected 是否可以被当前类访问，引用通过字符串描述的全限定名是否能找到对应类</li>
</ul>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>分配内存和设置初始值，非final的都是设置为0，final的是变成constantVluae赋值，例如<code>static int a=123;</code>是赋值为0的，在<clint>()中的putstatic才赋值为123</p>
<h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>根据常量池符号引用替换为直接引用，相当于把名称描述换为具体的指针、偏移量什么的，只规定在具体的16个(见书)操作符号引用的字节码指令之前进行解析，</p>
<p>以及上面说的解析完后会有符号引用验证比如访问权限，</p>
<p>字段解析，如果本身有返回，否则去找父类，递归向上找</p>
<p>类方法解析&#x2F;接口方法解析，类似原理，但会先检查class_index的位置是否对应正确，如类的应该对应类，接口的对应接口</p>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>加载的最后一步，执行构造器<clinit>()方法的过程</p>
<p>这个是由编译器自动收集类中的所有类变量的赋值动作和静态语句块static{}合并产生的，顺序根据收集顺序决定</p>
<p>可以可以代码7-5有点意思哈</p>
<p>然后保证父类的clinit在子类的clinit前执行，也就是vm执行的第一个clinit是java.lang.Object的</p>
<p>保证多线程下一个类的clinit被正确加锁同步，多个线程同时初始化一个类，只有一个会执行clinit，也就是可能造成阻塞</p>
<h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><p>类的全限定名-&gt;描述此类的二进制字节流 放在jvm外部实现</p>
<p>层次划分、OSGi、热部署、代码加密等领域</p>
<p>同一个Class文件同一个虚拟机加载，但只要类加载器不同，类就必定不同</p>
<p>样例代码是，实现了一个动态获得Class的方法(区别于默认返回类，也就是这里是让jvm用一个不同的类加载器)，然后用该方法获得A的Class 为B，但是 判断 A instanceof B返回却是false</p>
<p>对jvm来讲只有两种不同的，一个bootstrap类加载器(属于vm),其它所有类加载器(都由java语言实现 独立于虚拟机外部)</p>
<p>或者分为bootstrap,extension,application三种加载器</p>
<p>这里作者说，可以实验自己写一个rt.jar类库已有的重名java类，它可以正常编译，但永远无法执行</p>
<p>以上是”双亲委派模型”给了源码，也就是找 前面描述的加载过程，也就意味着，不同的类加载器就算用同样的代码但 对应的数据不同，所以无法分别加载</p>
<p>该模型可被破坏 对原来兼容(1.2以前)，需要回调(JNDI服务),程序动态性(代码热替换 模块热不熟 OSGi(非双亲 更复杂网状 以Bundle+类加载器整体替换) )</p>
<h1 id="8-虚拟机字节码执行引擎"><a href="#8-虚拟机字节码执行引擎" class="headerlink" title="8 虚拟机字节码执行引擎"></a>8 虚拟机字节码执行引擎</h1><p>运行时栈帧(Stack Frame)结构, 包括 局部变量表 操作数栈 动态链接 方法返回地址 额外附加信息</p>
<p>局部slot，再调用其它时才有可能gc，因为 这时才有可能复用，然后局部变量不能未赋初值就用</p>
<p>操作数栈从描述上就是字面意思，在概念上是独立的，，在一些具体的实现优化过程中，会用重叠来减少复制传递</p>
<p>返回方式 ret 正常的完成出口，异常出口 自动异常或者手动athrow</p>
<p>然后在实现虚拟机时，可以附加一些规范外的辅助信息</p>
<h2 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h2><p>也就是说invoke[…]对应的具体位置是哪，要经过解析把描述转化为具体的序号</p>
<p>静态分派：样例代码 A a&#x3D;new B()，对一个 实例对象 进行父类转化，再调用重载函数，重载函数选择的是父类对应的接口</p>
<p>这里称A为静态类型在编译时期可知，B为实际类型，在运行时才可知，依赖静态类型来执行的叫做 方法重载</p>
<p>然后重载 的话，对参数类型有它的一个优先顺序</p>
<p>动态分配(Override): A a&#x3D;new B(),调用方法f，也就是a.f(),jvm是如何定位的，通过javap得出的字节码，发现 样例代码中所有的都指向(静态类型)父类的函数 都是invokevirtual，然后这个过程是 先找实际类型，再逐个往上早父类的，其中只要成功找到就执行 再返回</p>
<p>搜<code>静态单分派与动态多分派</code>，这个和我上面自己做的实验一致了，就是 父类没被覆盖的也存在没有dead，父类自己调用就是自己的,从字节码上看父类子类调用基类的函数时，都是invokevirtual指向基类</p>
<p><a href="http://rednaxelafx.iteye.com/blog/260206">补充 方法分派的几个例子</a></p>
<p>所以java目前是 静态多分派，比如父类子类invokevirtual指向的同一个，动态单分派，具体指向动态的</p>
<p>虚拟机动态分派实现:虚拟方法表vtable，以及虚拟接口方法表itable，emmmm就是每个类有个方法表中间存了方法入口地址233333</p>
<blockquote>
<p>动态类型语言支持</p>
</blockquote>
<p>静态类型 statically: 如果在编译时拒绝ill behaved程序，则是statically typed;</p>
<p>动态类型dynamiclly: 如果在运行时拒绝ill behaviors, 则是dynamiclly typed。</p>
<ul>
<li>Reflection 是在模拟 Java 代码层次的方法调用，而 MethodHandle 是在模拟字节码层次的方法调用</li>
<li>Reflection 包含信息更多更全重量级，MethodHandle轻量级，包含相关方法信息</li>
<li>Reflection for JAVA，MethodHandle for jvm</li>
</ul>
<p>invokedynamic相对于MethodHandle来说一个是 字节码，一个是JavaAPI。。。然后invokedynamic面向的不是java是面向的其它语言生成的class</p>
<p>invokedynamic分派逻辑不是由虚拟机决定，而是程序员决定</p>
<h2 id="解释执行引擎"><a href="#解释执行引擎" class="headerlink" title="解释执行引擎"></a>解释执行引擎</h2><p>大多数语言，词法分析-&gt;语法分析-&gt;抽象与法树(AST)</p>
<p>例如1+1基于栈是(可移植性)</p>
<pre><code>iconst_1
iconst_1
iadd
istore_0
</code></pre>
<p>基于寄存器(性能)</p>
<pre><code>mov 1 eax
add 1 eax
</code></pre>
<p>虚拟机可以把它转换</p>
<h1 id="9-类加载及执行子系统的案例与实战"><a href="#9-类加载及执行子系统的案例与实战" class="headerlink" title="9 类加载及执行子系统的案例与实战"></a>9 类加载及执行子系统的案例与实战</h1><p>案例1 Tomcat等服务应用程序 正统的类加载器架构</p>
<p>因为 重用类库，安全性，支持JSP等的HotSwap，，所以都有隔离单独的类加载器。</p>
<p>下面是Tomcat为例，</p>
<ul>
<li>&#x2F;common目录中：类库可被Tomcat和所有的Web应用程序共同使用。</li>
<li>&#x2F;server目录中：类库可被Tomcat使用，所有的Web应用程序都不可见。</li>
<li>&#x2F;shared目录中：类库可被所有的Web应用程序共同使用，但对Tomcat自己不可见。</li>
<li>&#x2F;WebApp&#x2F;WEB-INF目录中：类库仅仅可以被此Web应用程序使用，对Tomcat和其他Web应用程序都不可见。</li>
</ul>
<p>Tomcat 自定义了多个类加载器，按照双亲委派模型实现</p>
<p>Spring相当于在上层，用户的在下层，模型特点是 职能向上加载不能向下。所以spring是通过 线程上下文类加载器来实现 访问并不在其加载范围内的用户程序</p>
<p>学习JEE规范，去看JBoss源码；学习类加载器，就去看OSGi（Open Service Gateway Initiative）源码</p>
<p>OSGI从层次依赖变成平级依赖，可以import 或者 export，哇 这不是 typescript那些吗，难道typescript灵感来源于此</p>
<p>OSGI可以热插拔，当一部分更新时，可以只停用，重新安装然后启用程序中一部分</p>
<p>运行时网状结构</p>
<p>但循环依赖可能出现死锁，</p>
<p>逆向移植(把代码 放到更老的版本上去执行)Retrotranslator,jvm层面的做不到，但是可以 把java-&gt;jvm层面的做不少</p>
<h2 id="远程执行功能"><a href="#远程执行功能" class="headerlink" title="远程执行功能"></a>远程执行功能</h2><ul>
<li>不依赖JDK版本1.4-1.7都能执行</li>
<li>不改变原有服务端程序部署，不依任何第三方库</li>
<li>不侵入原有程序</li>
<li>临时代码需要直接支持JAVA</li>
<li>临时代码具备一定自由度，不需要依赖特定的库或接口</li>
<li>执行结果 包括输出 异常 能返回到客户端</li>
</ul>
<p>惊了 说只要5个类+250行代码，1个半小时，，，对不起 我不会JAVA</p>
<p>问题</p>
<ol>
<li>如何编译提交到服务器的java代码</li>
<li>如何执行编译之后的java代码</li>
<li>如何收集java代码的执行结果</li>
</ol>
<p>问题1 方案A 传代码，使用tools.jar 来编译，或者javac，缺点是服务端需要tools。 方案B 在客户端编译，传字节码到服务端</p>
<p>问题2 让类加载器加载这个类生成Class对象，然后又反射调用某个方法就可以了，执行完后应当被卸载回收掉</p>
<p>问题3 直接在执行的类中把对System.out的引用替换为准备的PrintSteam，，</p>
<p>实现见 Remote-classload 仓库</p>
<ol>
<li>本地运行劫持err和out输出的HackSystem</li>
<li>用户class-&gt;调用JavaClassExecuter.execute(byte[])</li>
<li>ClassModifier+ByteUtils 两个类 把传入的class中 所有调用<code>java/lang/System</code>的换成你所运行的<code>HackSystem</code></li>
<li>运行HotSwapClassLoader()，加载修改过后的class</li>
<li>运行加载了的class</li>
<li>其中有错误或者输出，则由HackSystem输出</li>
</ol>
<h1 id="10-早期-编译器-优化"><a href="#10-早期-编译器-优化" class="headerlink" title="10 早期(编译器)优化"></a>10 早期(编译器)优化</h1><ul>
<li>前端编译器(java-&gt;class): ECJ，Java</li>
<li>JIT(Just In Time Compiler)字节码-&gt;机器码: HotSpot VM的C1 C2编译器</li>
<li>AOT(Ahead Of Time Compiler): GNU Compiler for the Java(GCJ)、Excelsior JET</li>
</ul>
<p>javac 几乎没有优化，对Java语言编码过程的优化措施来改善程序员编码风格和提高编码效率</p>
<p>Javac 使用Java编写和少量C语言</p>
<p>源码位置javac:</p>
<pre><code>sudo apt install openjdk-8-source
ls /usr/lib/jvm/java-8-openjdk-amd64/src.zip
解压它 找 sun/tools/javac中
</code></pre>
<p>eclipse 默认禁止一些代码访问规则，所以要调试javac的话需要 把这个开关关闭</p>
<p>javac 的3个过程</p>
<ul>
<li>1解析与填充符号表过程</li>
<li>2插入式注解处理器的注解处理过程</li>
<li>3分析与字节码生成过程</li>
</ul>
<p>其中1、2 这两步可以<code>循环</code> -&gt;1-&gt;2-1-&gt;2-&gt;1-&gt;2-&gt;3-&gt;</p>
<p>javac动作入口<code>com.sun.tools.javac.main.JavaCompiler</code>，上面3个步骤集中在类的compile()和compile2()方法中</p>
<ol>
<li>词法语法分析 parseFiles()完成</li>
</ol>
<p>词法分析com.sun.tools.javac.parser.Scanner类实现 源代码字节流转变为Token集合</p>
<p>语法分析 com.sun.tools.javac.parser.Parser产生出com.sun.tools.javac.tree.JCTree类 是根据Token序列构造抽象语法树的过程AST,每个节点表示程序代码中的一个语法结构，例如Eclipse 有 AST View插件可以看</p>
<ol start="2">
<li>填充符号表 enterTrees()方法</li>
</ol>
<p>符号表(Symbol Table)是由一组符号地址和符号信息构成的表格，也就是Key-Value模式(有的是有序 有的是树状 有的是哈希 栈结构等)</p>
<p>在语义分析中，符号表所登记的内容将用于语义检查和产生中间代码</p>
<p>填充过程com.sun.tools.javac.comp.Enter类实现，过程出口是一个待处理表(To Do List)包含了每一个编译单元的抽象语法树的定级节点, 以及 package-info.java（如果存在的话）的顶级节点。</p>
<ol start="3">
<li>注解处理器(Annotation) 规范JSR-269</li>
</ol>
<p>可以看做插件，可以读取修改 抽象语法树 元素，这个过程执行后 编译器回到解析及符号填充表重新处理，直到所有插入式注解都结束</p>
<p>插入式注解处理器 初始化过程<code>initProcessAnnotations()</code>，执行过程<code>processAnnotations()</code>判断是否还有注解如果有<code>com.sun.tools.javac.processing.JavacProcessingEnvironment</code> 类的<code>doProcessing()</code>方法生成一个新的JavaCompiler对象对编译的后续步骤进行处理。</p>
<ol start="4">
<li>语义分析与字节码生成</li>
</ol>
<p>语法树能表示一个结构正确的源程序的抽象，但无法保证源程序是符合逻辑的。[这里举例是不同类型做加法]</p>
<ul>
<li>标注检查 <code>attribute()</code> 比如类型 变量赋值类型的匹配，1+2折叠成3，具体的类是<code>com.sun.tools.javac.comp.Attr</code>和<code>com.sun.tools.javac.comp.Check</code></li>
<li>数据及控制流分析 <code>flow()</code> 上下文，比如是否初始化局部变量，方法每条路径是否都有返回值，异常有没有被正确处理，具体由<code>com.sun.tools.javac.comp.Flow</code>处理</li>
</ul>
<p><code>变量的不变性仅仅由编译器在编译期间保障</code>,这里的例子是是否有final最终的class文件是没有区别的</p>
<ol start="5">
<li>解释语法糖</li>
</ol>
<p>java低糖语法 如 泛型、变长参数、自动装箱&#x2F;拆箱 等。这些语法被编译器转换为 jvm支持的更基础的指令。解释过程由 desugar() 方法触发，在 com.sun.tools.javac.comp.TransTypes 类和com.sun.tools.javac.comp.Lower 类中完成。</p>
<ol start="6">
<li>字节码生成</li>
</ol>
<p>由<code>com.sun.tools.javac.jvm.Gen</code>类来完成,</p>
<p>这个阶段把 init和clinit添加到语法树中，也就是生成构造器工作,以及一些代码替换工作如把字符串的加操作替换为 StringBuffer 或 StringBuilder的 append() 操作等</p>
<h2 id="关于语法糖的背后"><a href="#关于语法糖的背后" class="headerlink" title="关于语法糖的背后"></a>关于语法糖的背后</h2><blockquote>
<p>泛型与类型擦除</p>
</blockquote>
<p>也就是由C++的模板Template思想起,【之前没看过java的时候一个面试我C++的问我C++中的泛型我一脸懵逼</p>
<p>老版本是强行转化，所以能不能转的风险交给程序员，</p>
<p>如<code>List&lt;int&gt;</code>和<code>List&lt;String&gt;</code>是两个不同类型，在运行期间有不同的虚方法表和类型数据，称为<code>类型膨胀</code>。</p>
<p>然后java中只有java中存在泛型，class文件中 已经都替换为原生类型</p>
<p>【举例了两个 只接受List参数的函数 来进行编译和反编译，第二个例子下采用了不同类型返回值】这里说因为 采用类型擦除，只靠List内的类型不同已经不能区分，第二个例子 只有Sun JDK 1.6能编译，并且<code>违反</code>了返回值不参与的原则？</p>
<p>测了一下报错<code>error: name clash: f(List&lt;String&gt;) and f(List&lt;Integer&gt;) have the same erasure</code></p>
<p>真实原因是不同返回值以后, class文件下，擦除了类型的函数具体描述才能不同，才能共存于同一个class中。当然也只有Sun JDK 1.6支持</p>
<p>下面一段没看懂Signature部分是啥 签名?感觉大自意思是 有的程序需要识别你<code>擦除</code>的部分，所以还需要额外的影响和改动。以及，从 Signature 属性的出现我们还可以得出结论，擦除法所谓的擦除，仅仅是对方法的 Code 属性中的字节码进行擦除，实际上元数据中还是保留了泛型信息，这也是我们能通过反射手段取得参数化类型的根本依据。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">由于 Java 泛型的引入，各种场景（虚拟机解析、反射等）下的方法调用都有可能对原有的基础产生影响和新的需求，如在泛型类中如何获取传入的参数化类型等。因此，JCP 组织对虚拟机规范作出了相应的修改，引入了诸如 Signature、LocalVariableTable 等新的属性用于解决伴随而来的参数类型的识别问题，Signature是其中最重要的一项属性，它的作用就是存储一个方法在字节码层面的特征签名，这个属性中保存的参数类型并不是原生类型，而是包括了参数化类型的信息。修改后的虚拟机规范要求所有能识别 49.0 以上版本的 Class 文件的虚拟机都要能正确地识别 Signature 参数。</span><br></pre></td></tr></table></figure>

<blockquote>
<p>自动装箱、拆箱与遍历循环(Foreach)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>); <span class="comment">// 自动装箱</span></span><br><span class="line">    <span class="comment">// 如果在 JDK 1.8 中，还有另外一颗语法糖</span></span><br><span class="line">    <span class="comment">// 能让上面这句代码进一步简写成 List&lt;Integer&gt; list = [1, 2, 3, 4];</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : list) &#123; <span class="comment">// 循环遍历+自动拆箱 变成迭代器每一个元素取出 并 转换为int类型</span></span><br><span class="line">        sum += i;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面包含了<code>泛型、自动装箱、自动拆箱、遍历循环与变长参数 </code>5 种语法糖</p>
<p>错误用法: 完了要是面试问下面这个输出 我就凉凉: <strong>包装类的“&#x3D;&#x3D;” 运算在不遇到算术运算的情况下不会自动拆箱，以及它们 equals() 方法不处理数据转型的关系</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    Integer a = 1;</span><br><span class="line">    Integer b = 2;</span><br><span class="line">    Integer c = 3;</span><br><span class="line">    Integer d = 3;</span><br><span class="line">    Integer e = 321;</span><br><span class="line">    Integer f = 321;</span><br><span class="line">    Long g = 3L;</span><br><span class="line">    System.out.println(c == d);// 比值</span><br><span class="line">    System.out.println(e == f);// 超过[-128,127]比地址</span><br><span class="line">    System.out.println(c == (a + b));// 被自动装箱 转换==</span><br><span class="line">    System.out.println(c.equals(a + b));// 自动装箱equals 比 值&amp;类型</span><br><span class="line">    System.out.println(g == (a + b)); // 自动装箱==</span><br><span class="line">    System.out.println(g.equals(a + b)); // 自动装箱equals 比 值&amp;类型</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>emmmm感觉java需要手工加类型转换[或者编译检测有参数选项可以打开?</p>
<blockquote>
<p>条件编译 解除语法糖阶段（com.sun.tools.javac.comp.Lower类中完成)</p>
</blockquote>
<p>如C++中 <code>#ifdef</code>,java可以用if+常量的方式实现条件编译，2333,66666,,, 其它判断没有这个能力</p>
<blockquote>
<p>除了上面的一些语法糖还有 内部类、枚举类、断言语句、对枚举和字符串（在 JDK 1.7 中支持）的 switch 支持、try 语句中定义和关闭资源（在 JDK 1.7 中支持）等</p>
</blockquote>
<h2 id="插入式注解处理器-实验"><a href="#插入式注解处理器-实验" class="headerlink" title="插入式注解处理器 实验"></a>插入式注解处理器 实验</h2><p>使用 JSR-296 中定义的插入式注解处理器 API 来对 JDK 编译子系统的行为产生一些影响。</p>
<p>javac主要在于看 程序写得对不对，而少的去看程序写得好不好。有辅助工具 <code>CheckStyle、FindBug、Klocwork</code>等，基于java源码或字节码校验</p>
<p>本实验是利用 注解处理器API来编写一款拥有自己编码风格校验工具 NameCheckProcessor</p>
<p>功能:仅仅对Java程序明明进行检查</p>
<ul>
<li>类（或接口）：符合驼式命名法，首字母大写。</li>
<li>方法：符合驼式命名法，首字母小写。</li>
</ul>
<blockquote>
<p>字段：</p>
</blockquote>
<ul>
<li>类或实例变量：符合驼式命名法、首字母小写。</li>
<li>常量：要求全部由大写字母或下划线构成，并且第一个字符不能是下划线。</li>
</ul>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>我们实现注解处理器的代码需要继承抽象类 <code>javax.annotation.processing.AbstractProcessor</code></p>
<p>这个类只有一个必须覆盖的abstract方法<code>process()</code></p>
<p>这个函数在javac执行注解处理器代码时要调用的过程，</p>
<p><a href="https://docs.oracle.com/javase/7/docs/api/javax/annotation/processing/AbstractProcessor.html">https://docs.oracle.com/javase/7/docs/api/javax/annotation/processing/AbstractProcessor.html</a></p>
<p>上面这个链接的example</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="type">boolean</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">process</span><span class="params">(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment roundEnv)</span></span><br><span class="line">Processes a set of annotation types on type elements originating from the prior round and returns whether or not these annotations are claimed by <span class="built_in">this</span> processor.</span><br></pre></td></tr></table></figure>

<p>第一个参数 “annotations” 中获取到此注解处理器所要处理的注解集合，从第二个参数 “roundEnv” 中访问到当前这个 Round 中的语法树节点，每个语法树节点在这里表示为一个 Element。</p>
<p>在 JDK 1.6 新增的 <code>javax.lang.model</code> 包中定义了 16 类 Element，包括了 Java 代码中最常用的元素，如：</p>
<ul>
<li>包（PACKAGE）</li>
<li>枚举（Enum）</li>
<li>类（CLASS）</li>
<li>注解（ANNOTATION_TYPE）</li>
<li>接口（INTERFACE）</li>
<li>枚举值（ENUM_CONSTANT）</li>
<li>字段（FIELD）</li>
<li>参数（PARAMETER）</li>
<li>本地变量（LOCAL_VARIABLE）</li>
<li>异常（EXCEPTION_PARAMETER）</li>
<li>方法（METHOD）</li>
<li>构造函数（CONSTRUCTOR）</li>
<li>静态语句块（STATIC_INIT，即 static{} 块）</li>
<li>实例语句块（INSTANCE_INIT，即 {} 块）</li>
<li>参数化类型（TYPE_PARAMERTER，既泛型尖括号内的类型）</li>
<li>未定义的其他语法树节点（OTHER）</li>
</ul>
<p>除了 process() 方法的传入参数之外，还有一个很常用的实例变量 <code>processingEnv</code>，它是<code>AbstractProcessor</code> 中的一个<code>protected</code> 变量，在注解处理器初始化的时候（init() 方法执行的时候）创建，继承了 AbstractProcessor 的注解处理器代码可以直接访问到它。它代表了注解处理器框架提供的一个上下文环境，要创建新的代码、向编译器输出信息、获取其他工具类等都需要用到这个实例变量</p>
<hr>
<p>返回值 true&#x2F;false表示是否对代码进行更改，如果未更改，javac也就不会再处理？</p>
<p>所有的运行都是单例 这里要实现的 功能仅是检查，所以始终返回false</p>
<p>注解处理器NameCheckProcessor</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可以用 &quot;*&quot; 表示支持所有 Annotations  </span></span><br><span class="line"><span class="meta">@SupportedAnnotationTypes(&quot;*&quot;)</span>  </span><br><span class="line"><span class="comment">// 只支持 JDK 1.6 的 Java 代码  </span></span><br><span class="line"><span class="meta">@SupportedSourceVersion(SourceVersion.RELEASE_6)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NameCheckProcessor</span> <span class="keyword">extends</span> <span class="title class_">AbstractProcessor</span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> NameChecker nameChecker;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 初始化名称检查插件 </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ProcessingEnvironment processingEnv)</span> &#123;  </span><br><span class="line">        <span class="built_in">super</span>.init(processingEnv);  </span><br><span class="line">        nameChecker = <span class="keyword">new</span> <span class="title class_">NameChecker</span>(processingEnv);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 对输入的语法树的各个节点进行名称检查 </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">process</span><span class="params">(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment roundEnv)</span> &#123;  </span><br><span class="line">        <span class="keyword">if</span> (!roundEnv.processingOver()) &#123;  </span><br><span class="line">            <span class="keyword">for</span> (Element element : roundEnv.getRootElements()) &#123;<span class="comment">// 获取当前Round的每一个 RootElement</span></span><br><span class="line">                nameChecker.checkNames(element); <span class="comment">// 检查</span></span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<p>具体检查代码太长就不贴全了，贴几个主要的函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public NameChecker(ProcessingEnvironment processingEnv) &#123;  </span><br><span class="line">    this.messager = processingEnv.getMessager(); // 之后可以调用messager.printMessage()来输出　信息比如　不符合规则的具体内容和具体规则 </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<p>检查部分继承了<code>ElementScanner6&lt;Void, Void&gt;</code></p>
<p>之后就是复写这个类的对应函数，对于访问element的部分根据文档 调用函数得到element的名字 和element的类型，对于名字判断就是if case的事情</p>
<p>它通过一个继承于 javax.lang.model.util.ElementScanner6 的 NameCheckScanner 类，以 Visitor 模式来完成对语法树的遍历，分别执行 visitType()、visitVariable() 和 visitExecutable() 方法来访问类、字段和方法，这 3 个 visit 方法对各自的命名规则做相应的检查，checkCamelCase() 与  checkAllCaps() 方法则用于实现驼式命名法和全大写命名规则的检查。</p>
<p>这一章 我有复制较多的原书上的话，我认为它们已经概括总结得不太能再简略了，就直接用了，也把不是很必要的代码省去</p>
<h1 id="11-晚期-运行期-优化"><a href="#11-晚期-运行期-优化" class="headerlink" title="11 晚期(运行期)优化"></a>11 晚期(运行期)优化</h1><p>解释器+编译器(包含C1 client 编译器 C2 server编译器)并存</p>
<p>C1 简单可靠优化 有必要时加入性能监控逻辑</p>
<p>C2 耗时较长的优化，不可靠的激进优化</p>
<p>触发从解释器到编译器： 采样热点(一定周期发现某个方法经常出现在栈上)，计数热点（阈值+计数器判定）</p>
<p>触发编译器到解释器：如动态的类</p>
<p>HotSpot 采用的是计数器热点探测， 包含两类计数器 (方法调用计数器，回边计数器) 都有各自的阈值</p>
<p>除了单纯的计数 还有一个根据时间的热度半衰期 23333 学习于自然之中</p>
<p>回边计数器是为了统计循环体代码执行的次数</p>
<p>client下 回边计数阈值 &#x3D; 调用计数阈值xOSR比率 (On Stack Replace Rercentage) &#x2F; 100</p>
<p>server下 回边计数阈值 &#x3D; 调用计数阈值xOSR比率 (On Stack Replace Rercentage)xjiesh &#x2F; 100</p>
<p>[嗯！！！ 终于这个代码是hpp后缀的了 吼呀</p>
<p>只要编译还没完成 都是按照解释器继续执行 而不是等待</p>
<p>但可以 加参数禁用后台编译 则是 等待形编译</p>
<p>第一个阶段 一个平台独立的前端将字节码构造成一种高级中间代码表示（High-Level Intermediate Representation，HIR</p>
<p>在第二个阶段，一个平台相关的后端从 HIR 中产生低级中间代码表示（Low-Level Intermediate Representation，LIR），而在此之前会在 HIR 上完成另外一些优化，如空值检查消除、范围检查消除等，以便让 HIR 达到更高效的代码表示形式。</p>
<p>最后阶段是在平台相关的后端使用线性扫描算法（Linear Scan Register Allocation）在 LIR 上分配寄存器，并在 LIR 上做窥孔（Peephole）优化，然后产生机器代码.几乎能达到 GNU C++ 编译器使用 -O2 参数时的优化强度，它会执行所有经典的优化动作，如无用代码消除（Dead Code Elimination）、循环展开（Loop Unrolling）、循环表达式外提（Loop Expression Hoisting）、消除公共子表达式（Common Subexpression Elimination）、常量传播（Constant Propagation）、基本块重排序（Basic Block Reordering）等</p>
<p>还会实施一些与 Java 语言特性密切相关的优化技术，如范围检查消除（Range Check Elimination）、空值检查消除（Null Check Elimination，不过并非所有的控制检查消除都是依赖编译器优化的，有一些是在代码运行过程中自动优化了）等。另外，还可能根据解释器或 Client Compiler 提供的性能监控信息，进行一些不稳定的激进优化，如守护内联（Guarded Inlining）、分支频率预测（Branch Frequency Prediction）等</p>
<hr>
<p>-XX: +PrintCompilation要求虚拟机在即时编译时将被编译成本地代码的方法名称打印出来</p>
<p>带有 % 的输出是由回边计数器触发的OSR</p>
<p>-XX: +PrintInlinint 要求虚拟机输出方法内联信息</p>
<p><strong>优化技术可以看Sun官方的Wiki，也可以搜索 即时编译器优化技术一览 ，向这么多方法低头</strong></p>
<p>示例：</p>
<ol>
<li><p>类的get方法，如果用内联优化，就是把get的方法变成<code>点参数</code>，是可以减少栈帧的开销，又能为其它优化打好基础</p>
</li>
<li><p>访问同一个类的参数，可以消除冗余的访问</p>
</li>
<li><p>把没有意义的进行复写传播 以及无用的代码消除 如 y&#x3D;x;z&#x3D;y;k&#x3D;z+x直接就变成k&#x3D;x&lt;&lt;1</p>
</li>
</ol>
<p>嗯。。。以前编译原理课都有讲过上面列举的</p>
<ul>
<li>语言无关的经典优化技术之一：公共子表达式消除。表达式计算过 在没有变化的情况下 再次计算</li>
<li>语言相关的经典优化技术之一：数组范围检查消除。消除绝对没有越界的数组访问 和安全性相呼应【如果不确定是否越界还是要做的】</li>
<li>最重要的优化技术之一：方法内联。</li>
<li>最前沿的优化技术之一：逃逸分析。</li>
</ul>
<p>除了如数组边界检查优化这种尽可能把运行期检查提到编译期完成的思路之外，另外还有一种避免思路——隐式异常处理，Java 中空指针检查和算术运算中除数为零的检查都采用了这种思路</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (foo != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> foo.value;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointException</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在使用隐式异常优化之后，虚拟机会把上面伪代码所表示的访问过程变为如下伪代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> foo.value;</span><br><span class="line">&#125; <span class="keyword">catch</span> (segment_fault) &#123;</span><br><span class="line">    uncommon_trap();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 虚拟机会注册一个 Segment Fault 信号的异常处理器（伪代码中的 uncommon_trap()），这样当 foo 不为空的时候，对 value 的访问是不会额外消耗一次对 foo 判空的开销的。代价就是当 foo 真的为空时，必须转入到异常处理器中恢复并抛出 NullPointException 异常，这个过程必须从用户态转到内核态中处理，结束后再回到用户态，速度远比一次判空检查慢。当 foo 极少为空的时候，隐式异常优化是值得的，但假如 foo 经常为空的话，这样的优化反而会让程序更慢，还好 HotSpot 虚拟机足够 “聪明”，它会根据运行期收集到的 Profile 信息自动选择最优方案。</p>
<hr>
<p>方法内联</p>
<p>为了解决虚方法的内联问题，Java 虚拟机设计团队想了很多办法，首先是引入了一种名为 “类型继承关系分析”（Class Hierarchy Analysis，CHA）的技术，这是一种基于整个应用程序的类型分析技术，它用于确定在目前已加载的类中，某个接口是否有多于一种的实现，某个类是否存在子类、子类是否为抽象类等信息。</p>
<p>编译器在进行内联时，如果是非虚方法，那么直接进行内联就可以了，这时候的内联是有稳定前提保障的。如果遇到虚方法，则会向 CHA 查询此方法在当前程序下是否有多个目标版本可供选择，如果查询结果只有一个版本，那也可以进行内联，不过这种内联就属于激进优化，需要预留一个 “逃生门”（Guard 条件不成立时的 Slow Path），称为守护内联（Guarded Inlining）</p>
<hr>
<p>逃逸分析（Escape Analysis）</p>
<p>它与类型继承关系分析一样，并不是直接优化代码的手段，而是为其他优化手段提供依据的分析技术</p>
<p>证明一个对象不会逃逸到方法或线程之外，也就是别的方法或线程无法通过任何途径访问到这个对象，则可能为这个变量进行一些高效的优化</p>
<ul>
<li>栈上分配（Stack Allocation）：Java 虚拟机中，在 Java 堆上分配创建对象的内存空间几乎是 Java 程序员都清楚的常识了，Java 堆中的对象对于各个线程都是共享和可见的，只要持有这个对象的引用，就可以访问堆中存储的对象数据。虚拟机的垃圾收集系统可以回收堆中不再使用的对象，但回收动作无论是筛选可回收对象，还是回收和整理内存都需要耗费时间。如果确定一个对象不会逃逸出方法之外，那让这个对象在栈上分配内存将会是一个很不错的注意，对象所占用的内存空间就可以随栈帧出栈而销毁。在一般应用中，不会逃逸的局部对象所占的比例很大，如果能使用栈上分配，那大量的对象就会随着方法的结束而自动销毁了，垃圾收集系统的压力将会小很多。</li>
<li>同步消除（Synchronized Elimination）：线程同步本身是一个相对耗时的过程，如果逃逸分析能够确定一个变量不会逃逸出线程，无法被其他线程访问，那这个变量的读写肯定就不会有竞争，对这个变量实施的同步措施也就可以消除掉。</li>
<li>标量替换（Scalar Replacement）：标量（Scalar）是指一个数据已经无法再分解成更小的数据来表示了，Java 虚拟机中的原始数据类型（int、long 等数值类型以及 reference 类型等）都不能再进一步分解，它们就可以称为标量。相对的，如果一个数据可以继续分解，那它就称作聚合量（Aggregate），Java 中的对象就是最典型的聚合量。如果把一个 Java 对象拆散，根据程序访问的情况，将其使用到的成员变量恢复原始类型来访问就叫做标量替换。如果逃逸分析证明一个对象不会被外部访问，并且这个对象可以被拆散的话，那程序真正执行的时候将可能不创建这个对象，而改为直接创建它的若干个被这个方法使用到的成员变量来代替。将对象拆分后，除了可以让对象的成员变量在栈上（栈上存储的数据，有很大的概率会被虚拟机分配至物理机器的告诉寄存器中存储）分配和读写之外，还可以为后续进一步的优化手段创建条件。</li>
</ul>
<p> 关于逃逸分析的论文在 1999 年就已经发表，但直到 Sun JDK 1.6 才实现了逃逸分析，而且直到现在这项优化尚未足够成熟，仍有很大的改进余地。不成熟的原因主要是不能保证逃逸分析的性能收益必定高于它的消耗。</p>
<p>目前发展并不够成熟</p>
<hr>
<h2 id="Java与C-编译器对比"><a href="#Java与C-编译器对比" class="headerlink" title="Java与C++编译器对比"></a>Java与C++编译器对比</h2><ol>
<li>即时编译器运行占用的是用户程序的运行时间， 因此即时编译器 不敢大量引入优化技术</li>
<li>JAVA是动态的类型安全，因此有很多安全方面的检查开销 是不会彻底的被编译器优化掉的</li>
<li>虽然java没有virtual但虚方法使用频率远大于C++，这方面的优化难度也更大</li>
<li>动态语言，编译器难以看清全貌，职能运行时撤销或者重新进行一些优化</li>
<li>C++有很多在栈上，而java很多在堆上，<code>垃圾回收</code>效率</li>
</ol>
<p>【可以 ，，，基本是java的劣势，但是 并不是说不如，而是说有 安全 动态性等所作出的 代价回报</p>
<p>有java更容易分析的 <code>别名分析</code> Java 的类型安全保证了在类似如下代码中，只要 ClassA 和 ClassB 没有继承关系，那对象 objA 和 objB 就绝不可能是同一个对象，即不会是同一块内存两个不同别名。</p>
<p>void foo(ClassA objA, ClassB objB) {<br>    objA.x &#x3D; 123;<br>    objB.y &#x3D; 456;<br>    &#x2F;&#x2F; 只要 objB.y 不是 objA.x 的别名，下面就可以保证输出为 123<br>    print(objA.x);<br>}</p>
<p>但是C++有union之类的？？？</p>
<p>另外的话 JAVA能够在 运行期间有调用频率预测 分支频率预测 等动态的运行红利</p>
<p>个人感觉就是 有大量相似、相同的优化技术，但因为优化的源和目标结果并不相同会有一些差异。差异可以概括为用性能换得了更多的可控和安全性(比如 安全性 是相对于同样精力编码来说的？因为C++要强行写应该也能做出安全保障吧？)，而优化技术可以看做基本都是那么些方法</p>
<h1 id="12-Java内存模型与线程"><a href="#12-Java内存模型与线程" class="headerlink" title="12 Java内存模型与线程"></a>12 Java内存模型与线程</h1><p>震惊 希望计算机能同时做其他事的原因竟然是 io等其它速度太慢，把这些原本的等待时间 压榨出来</p>
<p>java 带有的并发逻辑 更加容易让程序员关注业务逻辑，而不是协调</p>
<p>现代 加上cache，但面临一致性问题，为了解决一致性缓存问题，协议有MSI MESI  MOSI Synapse Firefly Dragon Protocol</p>
<hr>
<p>内存模型JMM(java memory model)，用于让在不同的硬件和不同的操作系统上达到效果一致[相对于C++使用物理硬件来说]</p>
<p>需要严谨 &amp; 宽松</p>
<p>主内存与工作内存 之间的交互协议</p>
<ul>
<li>lock 作用于主内存的变量，它把一个变量标识为一条线程独占的状态</li>
<li>unlock 作用于主内存的变量，它把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定</li>
<li>read 作用于主内存的变量，它把一个变量的值从主内存传输到线程的工作内存中</li>
<li>load 作用于工作内存变量，把read 操作从主内存中得到的变量值放入工作内存的变量副本中</li>
<li>use 作用于工作内存的变量，它把工作内存中一个变量的值传递给执行引擎，虚拟机需要使用变量的值得字节码指令时，将会执行这个操作</li>
<li>assign 作用于工作内存变量 把执行引擎接收到的的值付给工作内存的变量，</li>
<li>store 作用工作内存变量，把值传送到主内存方便以后write操作使用</li>
<li>write 写入 作用于主内存的变量，它把store 操作从工作内存中得到的变量的值防御主内存中</li>
</ul>
<p>流线可以看作,【似乎下面的意思这些都原子 不需要lock，只有程序员想额外保证原子的再lock?</p>
<p>read(主内存到线程内存) -&gt; read(从线程内存到变量副本中) -&gt; use(使用)</p>
<p>assign(写) -&gt; store(变量副本到从线程内存) -&gt; write(写入主内存)</p>
<ol>
<li>不允许read和load、store和write操作之一单独出现，即不允许一个变量从主内存读取了但工作内存不接受，或者从工作内存发起回写了但主内存不接受的情况出现。</li>
<li>不允许一个线程丢弃它的最近的assign操作，即变量在工作内存中改变了之后必须把该变化同步回主内存。</li>
<li>不允许一个线程无原因地（没有发生过任何assign操作）把数据从线程的工作内存同步回主内存中。</li>
<li>一个新的变量只能在主内存中“诞生”，不允许在工作内存中直接使用一个未被初始化（load或assign）的变量，换句话说，就是对一个变量实施use、store操作之前，必须先执行过了assign和load操作。</li>
<li>一个变量在同一时刻只允许一条线程对其进行lock操作，但lock操作可以被同一条线程重复执行多次，多次执行lock后，只有执行相同次数的unlock操作，变量才会被解锁。</li>
<li>如果对一个变量执行了lock操作，那将会清空工作内存中此变量的值，在执行引擎使用这个变量前， 需要重新执行load或assign操作初始化变量的值。</li>
<li>如果一个变量事先没有被lock操作锁定，那就不允许对它执行unlock操作，也不允许去unlock一个被其它线程锁定住的变量。</li>
<li>对一个变量执行unlock操作之前，必须把此变量同步回主内存中（执行store、write操作）。</li>
</ol>
<p>以及Volatile的规定，当一个变量定义为volatile之后，它将具备两种特性：</p>
<ol>
<li>保证此变量对所有线程的可见性；普通变量（没被volatile修饰）做不到这一点，普通变量的值在线程间传递均需要通过主内存来完成。</li>
<li>volatile变量不是线程安全的；volatile变量在各个线程的工作内存中不存在一致性问题（在各个线程的工作内存中，volatile变量也可以存在不一致的情况，但由于每次使用之前都要先刷新，执行引擎看不到不一致的情况，因此可以认为不存在一致性问题），但是Java里面的运算并非原子操作，导致volatile变量的运算在并发下一样是不安全的。</li>
</ol>
<p>即使编译出来只有一条字节码指令，也并不意味执行这条指令就是一个原子操作。 所以需要同步保护（synchronized或 java.util.concurrent）</p>
<p>这里是说用 lock add $0x0 (%esp)的技巧 来制作重排序屏障 理论上是比锁快</p>
<blockquote>
<p>对于long和double型变量的特殊规则</p>
</blockquote>
<p>要求上面lock unlock等8个操作都是原子性， 但允许没有被volatile的64位类型读写划分为两次32位操作，也就是64位 可以不保证load  store read write的原子性【 所以可能读到半个变量，虽然标准中没有原子规定，但是建议的虚拟机实现最好是原子的实现</p>
<ul>
<li>原子性： 内存模型直接保护 就是除了lock和unlock，如果用户需要更多原子性保护可以用lock和unlock，对于更高层次，虚拟机提供了monitorenter和monitorexit来隐式使用两个操作，再向上说就是java中 的synchronized</li>
<li>可见性：volatile的特殊规则保证了新值能够立即 同步到主内存</li>
<li>有序性: 线程内是有序的 volatile(包含禁止重排序的语义) synchronized(包含一个变量同一时刻只允许一条线程对其lock)</li>
</ul>
<p>顺序性</p>
<ul>
<li>程序次序规则：根据控制流来说 控制流前面的代码先执行</li>
<li>管程锁定规则 一个unlock先于同一个锁的lock</li>
<li>volatile 写先于（后面的）读</li>
<li>线程启动规则，Thread对象的start()方法先行发生于次线程的每一个动作</li>
<li>线程中断规则： 线程中断调用 先于 中断检测</li>
<li>对象终结规则， 初始化先于finalize() </li>
<li>传递性： A先于B B先于C 则 A先于C</li>
</ul>
<p>在满足上面的无同步手段保障时 可以随意重排序，线程不安全的例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">private int value = 0;</span><br><span class="line">public void setValue(int value)&#123;</span><br><span class="line">  this.value = value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public int getValue()&#123;</span><br><span class="line">  return value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面规则都不适用，但是缺无法确定不同线程同时执行时这里的返回结果，所以它是线程不安全的</p>
<p>修复问题 解决方案</p>
<ol>
<li>getter&#x2F;setter都定义为synchronized方法 可以套用管程规则</li>
<li>把值定义为volatile变量</li>
</ol>
<hr>
<p>java提供了在不同硬件和操作系统平台下对线程操作的统一处理，每个已经执行start()且未结束的java.lang.Thread类的实例就代表了一个线程</p>
<p>实现方法主要有3种：</p>
<ul>
<li>内核线程实现(Kernel-Level Thread) 直接让内核调度器调度，层级关系CPU-线程调度器-KLT-LWP(Light Weight Process)-程序使用</li>
<li>用户线程实现 (User Thread), 完全建立在用户控件的线程库上，系统内核不能感知存在的，可以降低 用户态和内核态切换的消耗，java和ruby曾经用过最终放弃了？</li>
<li>用户线程实现 加 轻量级进程混合实现，solaris HP-UX提供了相应的模型实现，和内核线程实现比起来是在LWP和程序使用之间 用UT</li>
</ul>
<hr>
<p>线程调度 协同或者抢占式</p>
<p>java设置了10个级别的线程优先级，windows 有7种，solaris有2^32种。。。。 windows还有一个 优先级推进器6666</p>
<p>5个状态</p>
<ul>
<li>新建</li>
<li>运行</li>
<li>等待(无限等待 时间等待)</li>
<li>阻塞 相对于等来说就是有一个明确的阻塞目标？？？</li>
<li>结束</li>
</ul>
<h1 id="13-线程安全与锁优化"><a href="#13-线程安全与锁优化" class="headerlink" title="13 线程安全与锁优化"></a>13 线程安全与锁优化</h1><p>你看这个本书都说 google都找不到“线程安全”的标准定义了 ：-） 面试官还一天问个不停</p>
<p>java中的线程安全</p>
<ol>
<li>不可变 -一定安全 只要被正确构建 final 以及例如java.lang.String 枚举类型等</li>
<li>绝对线程安全,不管运行时环境如何，调用者都不需要任何额外的同步措施，，，，这里说理论上没有 绝对的库还能向上用，因为你上层的实现可能是对一个线程安全的进行分步操作，，，，</li>
<li>相对线程安全，，通常意义的线程安全</li>
<li>线程兼容，，，本身不是线程安全，但可以通过 同步手段让它们达到线程安全</li>
<li>线程对立，，，无论如何都无法达到</li>
</ol>
<h2 id="线程安全的实现"><a href="#线程安全的实现" class="headerlink" title="线程安全的实现"></a>线程安全的实现</h2><ol>
<li>互斥同步，临界区 互斥量 信号量 都是主要手段，。。。。互斥是因 同步是果，互斥是方法 同步是目的</li>
</ol>
<p>synchronized 同步 对同一个线程来说是可以重入的</p>
<p>也可以使用java.util.concurrent 包中的重入锁（ReentrantLock）,相对于synchronized多了 三个功能，等待可中断，公平锁，锁绑定多个condition，，，然后性能说 单核多线程，线程数量上去后 ReentrantLock表现更好jdk1.5,之后版本优化得差不多，所以能直接sync实现也就不用麻烦</p>
<ol start="2">
<li>非阻塞同步  emmm这就是类似乐观锁 而上面就是悲观锁</li>
</ol>
<p>需要硬件支持</p>
<ul>
<li>测试并设置</li>
<li>获取并增加</li>
<li>交换</li>
<li>比较并交换 CAS</li>
<li>加载链接、条件存储</li>
</ul>
<ol start="3">
<li>无同步方案</li>
</ol>
<p>只要保证可重入，没有因果关系，也可以实现</p>
<h2 id="锁优化"><a href="#锁优化" class="headerlink" title="锁优化"></a>锁优化</h2><p>高效并发是jdk1.5到1.6的一个重要改进，如</p>
<ul>
<li>自旋锁与适应性自旋，相当于说 如果锁的交替很快，那么自旋锁实际就是通过帮你多等一会，来节省内核态切换的开销，默认等待次数10次，然后自旋锁再自适应次数，就能更准确的预测等待次数。</li>
<li>锁清除，清除无意义的锁 也就是前面逃逸分析里提到过的</li>
<li>锁粗化 原则上是同步块越小越好，但连续的拿锁放锁有较大不必要的性能消耗</li>
<li>轻量级锁 使用CAS 相对于操作系统的互斥量的锁，并不是代替操作系统互斥量锁，，，emm相当于先简单的读写尝试 成功则运行，不然膨胀为重量级锁 允许多个线程获得 但不允许竞争</li>
<li>偏向锁(Biased Locking) 和轻量级锁类似，但它向上升级就是轻量级锁 只允许一个线程获得</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><blockquote>
<p>感觉看jvm最好先学C++一遍再看一遍操作系统,反而java不怎么需要看，感觉作者是站在你已经会C++的程度上来写的这本书</p>
</blockquote>
<h2 id="本Markdown文档依赖和感谢"><a href="#本Markdown文档依赖和感谢" class="headerlink" title="本Markdown文档依赖和感谢"></a>本Markdown文档依赖和感谢</h2><p>《深入理解Java虚拟机》盗版pdf XD</p>
<p><code>Ubuntu 18.04 bionic</code> &amp;&amp; <code>java-8-openjdk-amd64</code> &amp;&amp; 各种工具了</p>
<p>董哥的指路</p>
<p>网上各个对该书的图文完全复制的博客，[以及chrome的去广告插件和自定义css插件</p>
<p>google+stackoverflow对相关问题的回答</p>
<p>github上搜到的书中所述的相关代码仓库</p>
<p>在线java编辑编译器<code>https://www.tutorialspoint.com/compile_java_online.php</code></p>
<p>[排序根据贡献从前到后]</p>
]]></content>
      <categories>
        <category>backend</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>jvm</tag>
      </tags>
  </entry>
  <entry>
    <title>vue slot</title>
    <url>/Blog/19-03-20-vueslot/</url>
    <content><![CDATA[<p>参考:<a href="https://blog.csdn.net/qq_38128179/article/details/85273522">https://blog.csdn.net/qq_38128179/article/details/85273522</a></p>
<p>父组件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Child</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">&quot;header&quot;</span>&gt;</span>我是header<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>我是footer<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">&quot;abcdef&quot;</span>&gt;</span>我是abcdef<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Child</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;abcdef&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是子组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;footer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>父组件中没有标注<code>slot=&quot;&quot;</code>的会被插入到 没有标注的子组件的<code>&lt;slot&gt;&lt;/slot&gt;</code></p>
<hr>
<p>父组件反过来解构<code>slot-scope</code></p>
<p>Child</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:data</span>=<span class="string">&quot;data&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: [<span class="string">&#x27;Neinei&#x27;</span>,<span class="string">&#x27;Laoba&#x27;</span>,<span class="string">&#x27;Demi&#x27;</span>,<span class="string">&#x27;Feiyan&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>父组件 这里的<code>.data</code> 和子组件的<code>:data</code>对应</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 循环数据列表 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Child</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot-scope</span>=<span class="string">&quot;msg&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">&quot;item in msg.data&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125; <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 直接显示数据 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Child</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot-scope</span>=<span class="string">&quot;msg&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;msg.data&#125;&#125; <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 不使用其提供的数据, 作用域插槽退变成匿名插槽 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Child</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是插槽<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>frontend</category>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
        <tag>vue slot</tag>
      </tags>
  </entry>
  <entry>
    <title>vuex 源码阅读</title>
    <url>/Blog/19-03-21-vuex/</url>
    <content><![CDATA[<p>本文对应版本 <code>b58d3d6a6426e901175a04bf6dcf206561cc82f5</code></p>
<blockquote>
<p>获得代码</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git remote add origin https://github.com/vuejs/vuex.git</span><br><span class="line">git fetch origin</span><br><span class="line">git checkout b58d3d6a6426e901175a04bf6dcf206561cc82f5</span><br></pre></td></tr></table></figure>

<h1 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h1><p>是个啥，状态管理工具</p>
<p>先了解如何用</p>
<p>前置知识</p>
<p><a href="https://cn.vuejs.org/v2/guide/mixins.html">https://cn.vuejs.org/v2/guide/mixins.html</a></p>
<p><a href="https://cn.vuejs.org/v2/guide/plugins.html">https://cn.vuejs.org/v2/guide/plugins.html</a></p>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./</span><br><span class="line">├── helpers.js 简化 一些映射代码的编写，建议最后看【以下文档写的是按照我的阅读顺序写的】</span><br><span class="line">├── index.esm.js 为了注入Vue</span><br><span class="line">├── index.js 为了注入Vue</span><br><span class="line">├── mixin.js 为了注入Vue</span><br><span class="line">├── module</span><br><span class="line">│   ├── module-collection.js 模块化的树状结构，主要对原来json配置的改为内部的实现结构</span><br><span class="line">│   └── module.js 模块化的实现 单个模块</span><br><span class="line">├── plugins</span><br><span class="line">│   ├── devtool.js 辅助</span><br><span class="line">│   └── logger.js 辅助</span><br><span class="line">├── store.js 核心实现，实现commit，dispatch 等，对module分析结果 进行再解构，让访问简洁，同时做一些 访问保护检测</span><br><span class="line">└── util.js 单纯工具与vuex 关系性极小</span><br></pre></td></tr></table></figure>

<h2 id="依赖-表面的"><a href="#依赖-表面的" class="headerlink" title="依赖(表面的)"></a>依赖(表面的)</h2><table>
<thead>
<tr>
<th>文件</th>
<th>import 依赖</th>
</tr>
</thead>
<tbody><tr>
<td>mixin</td>
<td></td>
</tr>
<tr>
<td>util</td>
<td></td>
</tr>
<tr>
<td>helpers</td>
<td></td>
</tr>
<tr>
<td>store.js</td>
<td>依赖见下方</td>
</tr>
<tr>
<td>index.js&#x2F;index.esm.js</td>
<td>store.js &amp; helpers.js</td>
</tr>
<tr>
<td>plugins&#x2F;devtool</td>
<td></td>
</tr>
<tr>
<td>plugins&#x2F;logger</td>
<td>util:deepCopy</td>
</tr>
<tr>
<td>module&#x2F;module</td>
<td>util:forEachValue</td>
</tr>
<tr>
<td>module&#x2F;module-collection</td>
<td>module:Module , util:{ assert, forEachValue }</td>
</tr>
</tbody></table>
<p><strong>注</strong> 之所以说是表面的，实际上比如logger是有调用store里面的方法的，比如subscribe</p>
<h1 id="代码阅读"><a href="#代码阅读" class="headerlink" title="代码阅读"></a>代码阅读</h1><h2 id="index-x2F-index-esm-js"><a href="#index-x2F-index-esm-js" class="headerlink" title="index&#x2F;index.esm.js"></a>index&#x2F;index.esm.js</h2><p>主要是方法导出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; Store, install &#125; from &#x27;./store&#x27;</span><br><span class="line">import &#123; mapState, mapMutations, mapGetters, mapActions, createNamespacedHelpers &#125; from &#x27;./helpers&#x27;</span><br></pre></td></tr></table></figure>

<h2 id="mixin-js"><a href="#mixin-js" class="headerlink" title="mixin.js"></a>mixin.js</h2><p>主要是按照vue的mixin规则，根绝vue版本，向vue里注入 vuex，也就是$store</p>
<p>规则是,有this.$options.store则 this.$store&#x3D; $options.store&#x2F;store() 根据是不是函数</p>
<p>没有的话，用this.$options.parent.$store</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">vuexInit</span> () &#123;</span><br><span class="line">  <span class="keyword">const</span> options = <span class="variable language_">this</span>.<span class="property">$options</span></span><br><span class="line">  <span class="comment">// store injection</span></span><br><span class="line">  <span class="keyword">if</span> (options.<span class="property">store</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$store</span> = <span class="keyword">typeof</span> options.<span class="property">store</span> === <span class="string">&#x27;function&#x27;</span></span><br><span class="line">      ? options.<span class="title function_">store</span>()</span><br><span class="line">      : options.<span class="property">store</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (options.<span class="property">parent</span> &amp;&amp; options.<span class="property">parent</span>.<span class="property">$store</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$store</span> = options.<span class="property">parent</span>.<span class="property">$store</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="util-js"><a href="#util-js" class="headerlink" title="util.js"></a>util.js</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">find</span> (list, f) <span class="comment">//list中f函数返回true的第一个值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">deepCopy</span> (obj, cache = []) <span class="comment">// 带有处理指针循环结构的 deepCopy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">forEachValue</span> (obj, fn) <span class="comment">// 遍历obj的所有k-v</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">isObject</span> (obj)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">isPromise</span> (val)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">assert</span> (condition, msg)</span><br></pre></td></tr></table></figure>

<h2 id="plugins-x2F"><a href="#plugins-x2F" class="headerlink" title="plugins&#x2F;"></a>plugins&#x2F;</h2><h3 id="devtool"><a href="#devtool" class="headerlink" title="devtool"></a>devtool</h3><p>目测是一些调试相关的钩子挂载，TODO</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> target = <span class="keyword">typeof</span> <span class="variable language_">window</span> !== <span class="string">&#x27;undefined&#x27;</span></span><br><span class="line">  ? <span class="variable language_">window</span></span><br><span class="line">  : <span class="keyword">typeof</span> <span class="variable language_">global</span> !== <span class="string">&#x27;undefined&#x27;</span></span><br><span class="line">    ? <span class="variable language_">global</span></span><br><span class="line">    : &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> devtoolHook = target.<span class="property">__VUE_DEVTOOLS_GLOBAL_HOOK__</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">devtoolPlugin</span> (store) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!devtoolHook) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  store.<span class="property">_devtoolHook</span> = devtoolHook</span><br><span class="line"></span><br><span class="line">  devtoolHook.<span class="title function_">emit</span>(<span class="string">&#x27;vuex:init&#x27;</span>, store)</span><br><span class="line"></span><br><span class="line">  devtoolHook.<span class="title function_">on</span>(<span class="string">&#x27;vuex:travel-to-state&#x27;</span>, <span class="function"><span class="params">targetState</span> =&gt;</span> &#123;</span><br><span class="line">    store.<span class="title function_">replaceState</span>(targetState)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  store.<span class="title function_">subscribe</span>(<span class="function">(<span class="params">mutation, state</span>) =&gt;</span> &#123;</span><br><span class="line">    devtoolHook.<span class="title function_">emit</span>(<span class="string">&#x27;vuex:mutation&#x27;</span>, mutation, state)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="logger"><a href="#logger" class="headerlink" title="logger"></a>logger</h3><p>嗯 第一行 <code>// Credits: borrowed code from fcomb/redux-logger</code></p>
<p>借来的代码，依赖上 只用了util的deepCopy</p>
<p>基本上是输出 state状况用于调试的</p>
<h2 id="module-x2F"><a href="#module-x2F" class="headerlink" title="module&#x2F;"></a>module&#x2F;</h2><h3 id="module"><a href="#module" class="headerlink" title="module"></a>module</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Module:</span><br><span class="line">  constructor (rawModule, runtime) &#123;</span><br><span class="line">    this.runtime = runtime</span><br><span class="line">    this._children = Object.create(null)</span><br><span class="line">    this._rawModule = rawModule</span><br><span class="line">    const rawState = rawModule.state</span><br><span class="line">    this.state = (typeof rawState === &#x27;function&#x27; ? rawState() : rawState) || &#123;&#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>child 操作:对<code>this._children</code>的增删</p>
<p>update(rawModule):对namespaced,actions,mutations,getters 有则覆盖的更新</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update (rawModule) &#123;</span><br><span class="line">  this._rawModule.namespaced = rawModule.namespaced</span><br><span class="line">  if (rawModule.actions) &#123;</span><br><span class="line">    this._rawModule.actions = rawModule.actions</span><br><span class="line">  &#125;</span><br><span class="line">  if (rawModule.mutations) &#123;</span><br><span class="line">    this._rawModule.mutations = rawModule.mutations</span><br><span class="line">  &#125;</span><br><span class="line">  if (rawModule.getters) &#123;</span><br><span class="line">    this._rawModule.getters = rawModule.getters</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>除此以外就是 在该class上 foreach再封装了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">forEachChild (fn) </span><br><span class="line">forEachGetter (fn) </span><br><span class="line">forEachAction (fn) </span><br><span class="line">forEachMutation (fn) </span><br></pre></td></tr></table></figure>

<h3 id="module-collection"><a href="#module-collection" class="headerlink" title="module-collection"></a>module-collection</h3><p>export:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default class ModuleCollection &#123;</span><br><span class="line">  constructor (rawRootModule) &#123;</span><br><span class="line">    // register root module (Vuex.Store options)</span><br><span class="line">    this.register([], rawRootModule, false)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>这边一个runtime有啥用,这里传的false，下面默不传是true，在Module里只是存一下，TODO</p>
<p>function makeAssertionMessage &#x2F;&#x2F; 生成 assert错误message</p>
<p>使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> functionAssert = &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> objectAssert = &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> assertTypes = &#123;</span><br><span class="line">  <span class="attr">getters</span>: functionAssert,</span><br><span class="line">  <span class="attr">mutations</span>: functionAssert,</span><br><span class="line">  <span class="attr">actions</span>: objectAssert</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">assertRawModule</span> (path, rawModule) &#123;</span><br></pre></td></tr></table></figure>

<p>来检测是否是个合法的RawModule</p>
<p>这里实现可以看到，rawModule也可以不含getters&#x2F;mutations&#x2F;actions，如果含有则需要分别是function&#x2F;function&#x2F;object(function &#x2F; obj.handler &#x3D;&#x3D; function)</p>
<p>然后发现一个有点意思的东西，之前没看过源码还不知道， <code>process.env.NODE_ENV !== &#39;production&#39;</code>才会assert</p>
<p>也就是开发环境才会assert，产品环境去掉</p>
<p>get:按照 从this.root开始，按照上面设计的Module Class的层级访问, <code>this.root._children[path[0]]._children[path[1]]...</code></p>
<p>解释register</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">register (path, rawModule, runtime = true) &#123;</span><br></pre></td></tr></table></figure>

<p>靠外部传来的rawModule，作用是把 rawModule中描述的层级关系的modules，递归的解析成为内部实现的Module，这里的path只是配合内部实现的get，方便查找树状上的Module，是临时生成的一个传递变量</p>
<p>这里也可以看到，实现过程中重名的话是后者覆盖前者.</p>
<p>unregister (path) {&#x2F;&#x2F;通过path定位 也就是上面get的办法，然后删除，需要满足 路径上的runtime都为true TODO</p>
<blockquote>
<p>getNamespace (path) { </p>
</blockquote>
<p>看起来像是 <code>path.join(&#39;/&#39;)</code>实际上，是只会join有namespaced的每一层</p>
<blockquote>
<p>update (rawRootModule) &#x2F; function update (path, targetModule, newModule) {</p>
</blockquote>
<p>这两个update的作用就是在已经建立Module树上，进行更新，其中如果遇到树的结构不同则忽略掉，更新的过程不会变更树结构，只会对namespaced、actions、mutations、getters进行替换(更新)</p>
<h2 id="helpers"><a href="#helpers" class="headerlink" title="helpers"></a>helpers</h2><p>export:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export const createNamespacedHelpers = (namespace) =&gt; (&#123;</span><br><span class="line">  mapState: mapState.bind(null, namespace),</span><br><span class="line">  mapGetters: mapGetters.bind(null, namespace),</span><br><span class="line">  mapMutations: mapMutations.bind(null, namespace),</span><br><span class="line">  mapActions: mapActions.bind(null, namespace)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<p><code>function normalizeMap (map) </code> 把array，obj转化成<code>[&#123;&#39;key&#39;:,&#39;val&#39;:&#125;,...]</code></p>
<p><code>function normalizeNamespace (fn) &#123; // 函数参数预处理(namespace,map) -&gt; fn(namespace,map)</code></p>
<p><code>function getModuleByNamespace (store, helper, namespace) &#123; return store._modulesNamespaceMap[namespace]</code></p>
<p>上面封了一层以后，每个<code>map×××</code> 被export出的都是单参数了</p>
<p>看了具体实现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mapState: .vuex=true &#123;支持devtools&#125;</span><br><span class="line">mapMutations: </span><br><span class="line">mapActions: </span><br><span class="line">mapGetters: .vuex=true &#123;支持devtools&#125;</span><br></pre></td></tr></table></figure>

<p>除了getter，其它都是有namespace用namespace所指的，没有就用全局的<code>this.$store</code>里的</p>
<p>getter 特殊在全是在<code>this.$store.getters[]</code>里，如果有namespace则是<code>namespace+val</code>构成新的<code>val</code></p>
<h2 id="Store"><a href="#Store" class="headerlink" title="Store"></a>Store</h2><p>最后，最大的一个,505行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import applyMixin from &#x27;./mixin&#x27;</span><br><span class="line">import devtoolPlugin from &#x27;./plugins/devtool&#x27;</span><br><span class="line">import ModuleCollection from &#x27;./module/module-collection&#x27;</span><br><span class="line">import &#123; forEachValue, isObject, isPromise, assert &#125; from &#x27;./util&#x27;</span><br></pre></td></tr></table></figure>

<p>export:</p>
<p><code>install &amp;&amp; Class Store</code></p>
<p>先看install，也就是调用applyMixin(Vue)进行注入</p>
<p>Store上这里分析源码，省略一些错误判断的解释了，只要说说逻辑</p>
<p>Store:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">constructor (options = &#123;&#125;) &#123;</span><br><span class="line">  const &#123;</span><br><span class="line">    plugins = [],</span><br><span class="line">    strict = false</span><br><span class="line">  &#125; = options</span><br><span class="line"></span><br><span class="line">  // store internal state</span><br><span class="line">  this._committing = false</span><br><span class="line">  this._actions = Object.create(null)</span><br><span class="line">  this._actionSubscribers = []</span><br><span class="line">  this._mutations = Object.create(null)</span><br><span class="line">  this._wrappedGetters = Object.create(null)</span><br><span class="line">  this._modules = new ModuleCollection(options) // 这里调用前面实现的 递归解析options中的modules</span><br><span class="line">  this._modulesNamespaceMap = Object.create(null)</span><br><span class="line">  this._subscribers = []</span><br><span class="line">  this._watcherVM = new Vue() // TODO 这个是什么用</span><br><span class="line"></span><br><span class="line">  // bind commit and dispatch to self // 这一段没有看懂，是为了兼容哪个版本的js吗，这两个本身已经实现了在下面了啊 怎么还要再绑定一次 TODO</span><br><span class="line">  const store = this</span><br><span class="line">  const &#123; dispatch, commit &#125; = this</span><br><span class="line">  this.dispatch = function boundDispatch (type, payload) &#123;</span><br><span class="line">    return dispatch.call(store, type, payload)</span><br><span class="line">  &#125;</span><br><span class="line">  this.commit = function boundCommit (type, payload, options) &#123;</span><br><span class="line">    return commit.call(store, type, payload, options)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // strict mode //控制是否启用StrictMode store._vm.$watch(function () &#123; return this._data.$$state &#125;, 严格要求禁止在mutation handler以外的地方修改_data.$$state</span><br><span class="line"></span><br><span class="line">  实现原理是 利用vue进行watch</span><br><span class="line"></span><br><span class="line">  在允许的函数修改的时候修改`_committing 为 true` 环绕 见`_withCommit`</span><br><span class="line">  </span><br><span class="line">  当watch到修改时，判断是否`_committing=true`这样就可以判断是否被外部修改</span><br><span class="line"></span><br><span class="line">  this.strict = strict</span><br><span class="line"></span><br><span class="line">  const state = this._modules.root.state // 获取的是 生成的module的根部的state</span><br><span class="line"></span><br><span class="line">  // 递归初始化 root module 以及所有子modules.</span><br><span class="line">  // 并且收集所有module getters mutation等  到store._下面 比如`_wrappedGetters`</span><br><span class="line">  installModule(this, state, [], this._modules.root)</span><br><span class="line"></span><br><span class="line">  // 初始化 store._vm , 作为回调的使用</span><br><span class="line">  // (also registers _wrappedGetters as computed properties)</span><br><span class="line">  resetStoreVM(this, state)</span><br><span class="line"></span><br><span class="line">  // 使用插件</span><br><span class="line">  plugins.forEach(plugin =&gt; plugin(this))</span><br><span class="line"></span><br><span class="line">  const useDevtools = options.devtools !== undefined ? options.devtools : Vue.config.devtools</span><br><span class="line">  if (useDevtools) &#123;</span><br><span class="line">    devtoolPlugin(this)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>function unifyObjectStyle (type, payload, options) { &#x2F;&#x2F;感觉是特殊处理type的情况 返回{type,payload,options}</p>
<h3 id="makeLocalContext-store-namespace-path"><a href="#makeLocalContext-store-namespace-path" class="headerlink" title="makeLocalContext(store,namespace,path)"></a>makeLocalContext(store,namespace,path)</h3><p>如果没有namespace 就用root上的</p>
<p>如果有则建立 本地化 的 dispatch commit getters 和 state</p>
<p>建立的实现过程 一个是调用unifyObjectStyle处理type的特殊情况，另一个就是给type 加上namespace</p>
<p>getters和state，使用defineProperties写到local上，注释说是因为它们会被vm更新，应该lazily的获取</p>
<p>其中getters的makeLocalGetters的原理是 namespace对比，和从<code>store.getters[type]</code>中读取</p>
<p>makeLocalContext的结果会写入到module.context</p>
<h3 id="installModule"><a href="#installModule" class="headerlink" title="installModule"></a>installModule</h3><p>如果当前路径有namespace， 那把它丢到<code>store._modulesNamespaceMap[namespace]</code> 和之前的获取对应</p>
<p>有点没看懂 set state，按理说 在 new ModuleCollection(options)就应该已经 在 new Module的部分设置了state，这里是为了触发Vue.set()?</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="title function_">forEachMutation</span>(<span class="function">(<span class="params">mutation, key</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> namespacedType = namespace + key</span><br><span class="line">  <span class="title function_">registerMutation</span>(store, namespacedType, mutation, local)</span><br><span class="line">  <span class="comment">// 简单的讲 就是把 所有mutations压入 `store._mutations[namespace+mutationname]，之所以是压入，是因为 可能出现多个相同的 namespace+mutationname</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="title function_">forEachAction</span>(<span class="function">(<span class="params">action, key</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> type = action.<span class="property">root</span> ? key : namespace + key</span><br><span class="line">  <span class="keyword">const</span> handler = action.<span class="property">handler</span> || action</span><br><span class="line">  <span class="title function_">registerAction</span>(store, type, handler, local)</span><br><span class="line">  <span class="comment">// 入口参数和上面还是类似，这个是塞入 store._actions</span></span><br><span class="line">  <span class="comment">// 但是看了源码才知道，action的交付的第二个参数</span></span><br><span class="line">  <span class="comment">// &#123;</span></span><br><span class="line">  <span class="comment">//  dispatch: local.dispatch,</span></span><br><span class="line">  <span class="comment">//  commit: local.commit,</span></span><br><span class="line">  <span class="comment">//  getters: local.getters,</span></span><br><span class="line">  <span class="comment">//  state: local.state,</span></span><br><span class="line">  <span class="comment">//  rootGetters: store.getters,</span></span><br><span class="line">  <span class="comment">//  rootState: store.state &#125;</span></span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="title function_">forEachGetter</span>(<span class="function">(<span class="params">getter, key</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> namespacedType = namespace + key</span><br><span class="line">  <span class="title function_">registerGetter</span>(store, namespacedType, getter, local)</span><br><span class="line">  <span class="comment">// 入口参数和上面还是类似，这个是塞入 store._wrappedGetters</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">并对所有子<span class="variable language_">module</span> <span class="title function_">installModule</span>()</span><br></pre></td></tr></table></figure>

<p>整个install就是把 构建出的module 拆出所有的 操作函数</p>
<h3 id="resetStoreVM"><a href="#resetStoreVM" class="headerlink" title="resetStoreVM"></a>resetStoreVM</h3><p><code>store._vm = new Vue(&#123;data:&#123;$$state:state&#125;,computed&#125;)</code> 其中 computed是 上面 提取出的<code>_wrappedGetters</code>改动的，改动出的computed将 有和getters相同的keys，区别是 它会从<code>store._vm[key]</code>的方式去读数据</p>
<p>在这一步设置<code>_vm</code>时，临时设置Vue.config.silent</p>
<p>如果原来有<code>._vm</code>则调用销毁</p>
<h2 id="vuex-API"><a href="#vuex-API" class="headerlink" title="vuex API"></a>vuex API</h2><p>至此 内部的基本结构就结束了，来看看调用api对应的实现</p>
<p>先看 官网的图 <a href="https://raw.githubusercontent.com/vuejs/vuex/dev/docs/.vuepress/public/vuex.png">VUEX</a></p>
<h3 id="store-state-xxx"><a href="#store-state-xxx" class="headerlink" title="store.state.xxx"></a>store.state.xxx</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">get state () &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_vm</span>.<span class="property">_data</span>.<span class="property">$$state</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="commit-type-payload-options"><a href="#commit-type-payload-options" class="headerlink" title="commit(type,payload,options)"></a>commit(type,payload,options)</h3><p>这里实现的过程，通过解构出的<code>this._mutations[type]</code>得到type对应的mutations 的函数句柄，</p>
<p>然后调用有withcommit包围的，进行 函数 执行</p>
<p>所有执行以后，对所有<code>_subscribers</code> 通知<code>(mutation,new state)</code> , 简单的订阅模式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep -r <span class="string">&quot;subscribe&quot;</span> *</span><br><span class="line">plugins/logger.js:    store.subscribe((mutation, state) =&gt; &#123;</span><br><span class="line">plugins/devtool.js:  store.subscribe((mutation, state) =&gt; &#123;</span><br></pre></td></tr></table></figure>

<h3 id="dispatch-type-payload"><a href="#dispatch-type-payload" class="headerlink" title="dispatch (type, payload)"></a>dispatch (type, payload)</h3><p>同理 通过解构出的<code>this._actions[type]</code>获得actions</p>
<p>区别是 action的订阅者 可以指定 before 和 after，分别会在action发生前后调用，</p>
<p><code>subscribeAction (fn) </code> 如果fn是函数则 默认变为订阅action发生前 ,否则fn应该是类似<code>&#123;&#39;before&#39;:()=&gt;&#123;&#125;,&#39;after&#39;:()=&gt;&#123;&#125;&#125;</code>的格式</p>
<p>关于订阅的调用，目前只在测试里看到有，其它部分没有调用</p>
<p>除了环绕的订阅以外，就是执行对应的action,entry,如果是多个 调用Promise.all(),如果是一个直接entry<a href="payload">0</a></p>
<h2 id="剩余的"><a href="#剩余的" class="headerlink" title="剩余的"></a>剩余的</h2><p>剩余的 hotUpdate，replaceState等 应该属于调试时使用的不属于核心功能了,watch 基本是靠的Vue的$watch</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol start="0">
<li>整个源码阅读完后，才发现原来根本没有用到<a href="%60https://vuex.vuejs.org/guide/modules.html%60">module</a>这一部分，甚至都不知道，看来是没仔细读文档，原来这一块已经实现好了。</li>
<li>从Module部分可以看到，实现rawModule相关 过程是 加了一层套把rawModule套了一层，保护了树的结构，做到期望内的更新</li>
<li>潜在bug？ 从外部传入rawModule 的第一次构建是 <code>_rawModule=rawModule</code>,而在后面update的过程中是修改<code>_rawModule</code>的字段，可能导致 期望外的修改？ 不过根据代码，这一部分只会发生在hotUpdate</li>
</ol>
<h2 id="个人其它收获"><a href="#个人其它收获" class="headerlink" title="个人其它收获"></a>个人其它收获</h2><ol start="0">
<li>实际实现的代码 除了实现想法外还有很多细节，这些细节感觉也蛮庞大？的</li>
<li>这样path的写法? 省一些指针?感觉每次get代价会大一些</li>
<li>reduce 的用法(<a href="http://www.runoob.com/jsref/jsref-reduce.html">http://www.runoob.com/jsref/jsref-reduce.html</a>)</li>
<li>bind的用法(<a href="https://blog.csdn.net/kongjunchao159/article/details/59113129">https://blog.csdn.net/kongjunchao159/article/details/59113129</a>)</li>
<li>es6 destructuring (<a href="https://www.deadcoderising.com/2017-03-28-es6-destructuring-an-elegant-way-of-extracting-data-from-arrays-and-objects-in-javascript/">https://www.deadcoderising.com/2017-03-28-es6-destructuring-an-elegant-way-of-extracting-data-from-arrays-and-objects-in-javascript/</a>)</li>
<li>get,defineProperties , 都是在调用时才计算，区别是get在原型上，而defineProperties 是在实例上(<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get#Smart_self-overwriting_lazy_getters">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get#Smart_self-overwriting_lazy_getters</a>)</li>
<li>同时 其中实现，有些注释错误，有些函数的默认参数没有设置 &#x3D;false，不过个人对js不太熟，要是c++的强迫症话 感觉还是要加的</li>
<li>getters ,函数-&gt;计算属性</li>
<li>普通对象变化不会影响刷新，需要有getter和setter的，简单的方法就是用 new Vue({data:{xxx}});来包裹会自动加上 getter和setter</li>
<li>发布订阅</li>
<li>strict通过 包裹限制 只有mutation改动数据， 但建议仅在开发时使用,在发布时为了性能不使用strict</li>
</ol>
<p>其他:</p>
<p>感觉要去看看Promise的源码 以及 Vue的源码了</p>
<h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1><p>Module 里的runtime有啥用</p>
<p>重复注册state、mutation等等? 有文章说是 因为module的原因，</p>
<p>modules使用</p>
<p>modules{<br>  模块名:{<br>    state{<br>      x:1,<br>      y:1<br>    }<br>  },<br>  模块名2:{</p>
<p>  }<br>}</p>
<p>模块内的mutations,getters,actions 不同层级都会被调用!? 都会被合并到根上</p>
<p>所以要做的是方法映射出来，但是 把每个方法的所属模块的state绑定过去</p>
<p>但是 只有mutations和actions是数组，getters是由 defineProperties来的所以只会有一个</p>
<h1 id="TODO-1"><a href="#TODO-1" class="headerlink" title="TODO"></a>TODO</h1><p>namespace:true 可以让模块化，不让actions等绑定在global上 通过<code>module/module</code>路径访问,实现就是 根下的 map[ 拼接的module namespace路径实现的]</p>
<p>registerModule 动态注册模块</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">registerModule (path, rawModule, options = &#123;&#125;) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_modules</span>.<span class="title function_">register</span>(path, rawModule)</span><br><span class="line">    <span class="title function_">installModule</span>(<span class="variable language_">this</span>, <span class="variable language_">this</span>.<span class="property">state</span>, path, <span class="variable language_">this</span>.<span class="property">_modules</span>.<span class="title function_">get</span>(path), options.<span class="property">preserveState</span>)</span><br><span class="line">    <span class="comment">// reset store to update getters...</span></span><br><span class="line">    <span class="title function_">resetStoreVM</span>(<span class="variable language_">this</span>, <span class="variable language_">this</span>.<span class="property">state</span>)</span><br></pre></td></tr></table></figure>

<p>store.subscribe() vuex中间件?? ,也是发布订阅模式</p>
<p>注册的是 和 函数指针放入数组，返回移出数组的函数，这个和vue-router里的registerHooks一样</p>
<p>commit后</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">commit里</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">_withCommit</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      entry.<span class="title function_">forEach</span>(<span class="keyword">function</span> <span class="title function_">commitIterator</span> (handler) &#123;</span><br><span class="line">        <span class="title function_">handler</span>(payload)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 提交后 调用 所有订阅</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_subscribers</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">sub</span> =&gt;</span> <span class="title function_">sub</span>(mutation, <span class="variable language_">this</span>.<span class="property">state</span>))</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>frontend</category>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
        <tag>vuex</tag>
        <tag>source code</tag>
      </tags>
  </entry>
  <entry>
    <title>promises分析</title>
    <url>/Blog/19-03-22-promise/</url>
    <content><![CDATA[<p>个人其实建议阅读下方的参考链接<code>zh.javascript.info</code>,本篇整理的主要是基于个人已有经验进行提要，简化和再解释，不够完整</p>
<h1 id="使用Promise-和简单解释"><a href="#使用Promise-和简单解释" class="headerlink" title="使用Promise 和简单解释"></a>使用Promise 和简单解释</h1><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">  <span class="comment">// executor (生产者代码，&quot;singer&quot;)</span></span><br><span class="line">  <span class="comment">// 根据你自己的逻辑</span></span><br><span class="line">  <span class="comment">//   调用resolve(value)</span></span><br><span class="line">  <span class="comment">//   或者调用reject(error)</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="Promise的内部状态"><a href="#Promise的内部状态" class="headerlink" title="Promise的内部状态"></a>Promise的内部状态</h2><ul>
<li>state —— 最初是 “pending”，然后被改为 “fulfilled” 或 “rejected”，</li>
<li>result —— 一个任意值，最初是 undefined。</li>
</ul>
<p>当 executor 完成任务时，应调用下列之一：</p>
<ul>
<li>resolve(value) —— 说明任务已经完成：<ul>
<li>将 state 设置为 “fulfilled”，</li>
<li>sets result to value。</li>
</ul>
</li>
<li>reject(error) —— 表明有错误发生：<ul>
<li>将 state 设置为 “rejected”，</li>
<li>将 result 设置为 error。</li>
</ul>
</li>
</ul>
<p><img data-src="https://zh.javascript.info/article/promise-basics/promise-resolve-reject.png" alt="状态图"></p>
<p>总之，executor 应该完成任务（通常会需要时间），然后调用 resolve 或 reject 来改变 promise 对象的对应状态。</p>
<p><strong>注意的是</strong> 状态一旦从pending变化后， 其它代码都会被忽略</p>
<p>let promise &#x3D; new Promise(function(resolve, reject) {<br>  resolve(“done”);</p>
<p>  reject(new Error(“…”)); &#x2F;&#x2F; 被忽略<br>  setTimeout(() &#x3D;&gt; resolve(“…”)); &#x2F;&#x2F; 被忽略<br>});</p>
<h2 id="then-x2F-catch-结果处理"><a href="#then-x2F-catch-结果处理" class="headerlink" title="then&#x2F;catch 结果处理"></a>then&#x2F;catch 结果处理</h2><p>then返回的是一个promise对象（准确的说是带有then方法的对象）</p>
<p>then(处理resolve的结果的函数,处理reject状态的函数)</p>
<p>then(处理resolve的结果的函数)</p>
<p>then(null,处理reject状态的函数) || .catch(处理reject状态的函数)</p>
<blockquote>
<p>更确切地说，当<code>.then/catch</code> 处理器应该执行时，它会首先进入内部队列。<code>JavaScript</code> 引擎从队列中提取处理器，并在当前代码完成时执行 <code>setTimeout(..., 0)</code>。</p>
</blockquote>
<blockquote>
<p>换句话说，<code>.then(handler)</code> 会被触发，会执行类似于 <code>setTimeout(handler, 0)</code> 的动作。</p>
</blockquote>
<p>在下述示例中，<code>promise</code> 被立即 <code>resolved</code>，因此 <code>.then(alert)</code> 被立即触发：<code>alert</code> 会进入队列，在代码完成之后立即执行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> // an immediately resolved promise</span><br><span class="line">let promise = new Promise(resolve =&gt; resolve(&quot;done!&quot;));</span><br><span class="line"></span><br><span class="line">promise.then(alert); // 完成！（在当前代码完成之后）</span><br><span class="line"></span><br><span class="line">alert(&quot;code finished&quot;); // 这个 alert 会最先显示</span><br></pre></td></tr></table></figure>

<p>因此在 <code>.then</code> 之后的代码总是在处理器之前被执行（即使实在预先解决 promise 的情况下）。通常这并不重要，只会在特定情况下才会重要。</p>
<h2 id="Promise-链"><a href="#Promise-链" class="headerlink" title="Promise 链"></a>Promise 链</h2><p>首先因为then返回的是promise对象(准确说是带有then方法的对象)，和原来的不同，从api角度看是一个新的对象，其中return改变了 结果值</p>
<p>和原来的不同，不会覆盖原来的</p>
<p><img data-src="https://zh.javascript.info/article/promise-chaining/promise-then-many.png" alt="图意"></p>
<p>然后处理程序的返回值里也可以 返回promise</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="number">1</span>), <span class="number">1000</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">result</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(result); <span class="comment">// 1</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123; <span class="comment">// (*)</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(result * <span class="number">2</span>), <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>所以假设<code>loadScript = function(url)&#123; return Promise ...; &#125;</code></p>
<p>那么可以,来顺序加载脚本</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">loadScript</span>(<span class="string">&quot;/article/promise-chaining/one.js&quot;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">script</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">loadScript</span>(<span class="string">&quot;/article/promise-chaining/two.js&quot;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">script</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">loadScript</span>(<span class="string">&quot;/article/promise-chaining/three.js&quot;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">script</span>) &#123;</span><br><span class="line">    <span class="comment">//  work on one two three</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<h3 id="链上的错误处理"><a href="#链上的错误处理" class="headerlink" title="链上的错误处理"></a>链上的错误处理</h3><p>promise 链在这方面做的很棒。当一个 promise reject 时，代码控制流程跳到链中最近的 rejection 处理程序。这在实践中非常方便。</p>
<p>隐式 try…catch ,如果在execute中出现 throw，那么会和 reject方法传递的类似，被promise丢入catch里,所以这里意味着非同步的代码不会被处理，例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Whoops!&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(alert);</span><br></pre></td></tr></table></figure>

<p>同样 如果在过程中 throw 或发生错误，也就意味着返回一个rejected promise</p>
<p>在catch块中可以重新再抛出错误，也可以处理掉错误</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">XXX</span></span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">e</span>=&gt;</span>&#123;<span class="comment">/*处理*/</span>&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;<span class="comment">/*如果上面catch正常处理*/</span>&#125;)</span><br></pre></td></tr></table></figure>


<p>这里的建议是 继承实现你希望的Error类，在处理过程中控制错误对象的类型</p>
<p>如果没有错误处理，浏览器中 通过<code>unhandledrejection</code>捕获它</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.addEventListener(&#x27;unhandledrejection&#x27;, function(event) &#123;</span><br><span class="line">  // the event object has two special properties:</span><br><span class="line">  alert(event.promise); // [object Promise] - the promise that generated the error</span><br><span class="line">  alert(event.reason); // Error: Whoops! - the unhandled error object</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">new Promise(function() &#123;</span><br><span class="line">  throw new Error(&quot;Whoops!&quot;);</span><br><span class="line">&#125;); // no catch to handle the error</span><br></pre></td></tr></table></figure>

<h1 id="js-promise-cache-example"><a href="#js-promise-cache-example" class="headerlink" title="js+promise+cache example"></a>js+promise+cache example</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function loadCached(url) &#123;</span><br><span class="line">  let cache = loadCached.cache || (loadCached.cache = new Map());</span><br><span class="line"></span><br><span class="line">  if (cache.has(url)) &#123;</span><br><span class="line">    return Promise.resolve(cache.get(url)); // (*)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return fetch(url)</span><br><span class="line">    .then(response =&gt; response.text())</span><br><span class="line">    .then(text =&gt; &#123;</span><br><span class="line">      cache[url] = text;</span><br><span class="line">      return text;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>之后使用<code>loadCached(url).then(…)</code></p>
<h1 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all"></a>Promise.all</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="number">1</span>), <span class="number">3000</span>)), <span class="comment">// 1</span></span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="number">2</span>), <span class="number">2000</span>)), <span class="comment">// 2</span></span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="number">3</span>), <span class="number">1000</span>))  <span class="comment">// 3</span></span><br><span class="line">]).<span class="title function_">then</span>(alert); <span class="comment">// 1,2,3 when promises are ready: each promise contributes an array member</span></span><br></pre></td></tr></table></figure>

<p>在 3 秒之后被处理，然后它的结果就是一个<code>[1, 2, 3]</code>数组：</p>
<p>它们的相对顺序是相同的。尽管第一个 promise 需要很长的时间来解决，但它仍然是结果数组中的第一个。</p>
<p>这里可以看到，不同处理之间是并行的，结果位置是对应插槽的</p>
<p>实例，并行获取资源，统一等待结束</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let urls = [</span><br><span class="line">  &#x27;https://api.github.com/users/iliakan&#x27;,</span><br><span class="line">  &#x27;https://api.github.com/users/remy&#x27;,</span><br><span class="line">  &#x27;https://api.github.com/users/jeresig&#x27;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">// map every url to the promise fetch(github url)</span><br><span class="line">let requests = urls.map(url =&gt; fetch(url));</span><br><span class="line"></span><br><span class="line">// Promise.all waits until all jobs are resolved</span><br><span class="line">Promise.all(requests)</span><br><span class="line">  .then(responses =&gt; responses.forEach(</span><br><span class="line">    response =&gt; alert(`$&#123;response.url&#125;: $&#123;response.status&#125;`)</span><br><span class="line">  ));</span><br></pre></td></tr></table></figure>

<p>如果任何 promise 为 rejected，Promise.all 就会立即以 error reject。重要的细节是 promise 没有提供 “cancel” 或 “abort” 执行方法。因此，其他 promise 会继续执行，并最终为 settle，但它们的结果会被忽略。</p>
<p>所以建议的是，如果要使用all，那么在每个处理内部把错误处理掉，这样就不会单个的错误导致整个promise结束</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Promise.all(</span><br><span class="line">  fetch(&#x27;https://api.github.com/users/iliakan&#x27;).catch(err =&gt; err),</span><br><span class="line">  fetch(&#x27;https://api.github.com/users/remy&#x27;).catch(err =&gt; err),</span><br><span class="line">  fetch(&#x27;http://no-such-url&#x27;).catch(err =&gt; err)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>原始</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let urls = [</span><br><span class="line">  &#x27;https://api.github.com/users/iliakan&#x27;,</span><br><span class="line">  &#x27;https://api.github.com/users/remy&#x27;,</span><br><span class="line">  &#x27;https://api.github.com/users/jeresig&#x27;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">// make fetch requests</span><br><span class="line">Promise.all(urls.map(url =&gt; fetch(url)))</span><br><span class="line">  // map each response to response.json()</span><br><span class="line">  .then(responses =&gt; Promise.all(</span><br><span class="line">    responses.map(r =&gt; r.json())</span><br><span class="line">  ))</span><br><span class="line">  // show name of each user</span><br><span class="line">  .then(users =&gt; &#123;  // (*)</span><br><span class="line">    for(let user of users) &#123;</span><br><span class="line">      alert(user.name);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>改进</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let urls = [</span><br><span class="line">  &#x27;https://api.github.com/users/iliakan&#x27;,</span><br><span class="line">  &#x27;/&#x27;,</span><br><span class="line">  &#x27;http://no-such-url&#x27;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">Promise.all(</span><br><span class="line">    urls.map(url =&gt; fetch(url).catch(err =&gt; err))</span><br><span class="line">  )</span><br><span class="line">  .then(responses =&gt; Promise.all(</span><br><span class="line">    // if it&#x27;s an error then pass on</span><br><span class="line">    // otherwise response.json() and catch errors as results</span><br><span class="line">    responses.map(r =&gt; r instanceof Error ? r : r.json().catch(err =&gt; err))</span><br><span class="line">  ))</span><br><span class="line">  .then(results =&gt; &#123;</span><br><span class="line">    alert(results[0].name); // Ilya Kantor</span><br><span class="line">    alert(results[1]); // SyntaxError: Unexpected token &lt; in JSON at position 0</span><br><span class="line">    alert(results[2]); // TypeError: failed to fetch (text may vary)</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>


<h2 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race"></a>Promise.race</h2><p>相对于<code>Promise.all</code>类似,区别是只会等最快的完成</p>
<h1 id="async-x2F-await"><a href="#async-x2F-await" class="headerlink" title="async&#x2F;await"></a>async&#x2F;await</h1><p>更舒适的方法使用promise</p>
<h2 id="async"><a href="#async" class="headerlink" title="async"></a>async</h2><p>放在函数前，总会返回promise,如果不是则会把函数封装成promise</p>
<h2 id="await"><a href="#await" class="headerlink" title="await"></a>await</h2><p>await 关键字使 JavaScript 等待，直到 promise 得到解决并返回其结果。</p>
<p>不能在常规函数中使用 await,await 在顶层代码中无效, 我们需要将 await 代码封装在一个async 函数中</p>
<p>await + promise&#x2F;thenable函数</p>
<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>正常的话 返回结果，否则抛出error</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><img data-src="https://zh.javascript.info/article/promise-chaining/promise-handler-variants.png" alt="img"></p>
<h1 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h1><p><a href="http://www.ituring.com.cn/article/66566">【翻译】Promises&#x2F;A+规范</a></p>
<p><a href="https://zh.javascript.info/promise-basics">Promise Tutorial</a></p>
<p><a href="https://zh.javascript.info/promise-chaining">Promise chaining</a></p>
]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>promise</tag>
      </tags>
  </entry>
  <entry>
    <title>vue custom v-model</title>
    <url>/Blog/19-04-01-vue-custom-v-model/</url>
    <content><![CDATA[<h1 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h1><p><a href="https://scotch.io/tutorials/add-v-model-support-to-custom-vuejs-component">https://scotch.io/tutorials/add-v-model-support-to-custom-vuejs-component</a></p>
<p>To let our component support v-model two-way binding, I stated earlier that the component needs to accept a <code>value</code> prop and emit an <code>input</code> event.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">input</span>=<span class="string">&quot;handleInput&quot;</span> /&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">prop</span>: [<span class="string">&#x27;value&#x27;</span>],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  data () &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">content</span>: <span class="variable language_">this</span>.<span class="property">value</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    handleInput (e) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.$emit(<span class="string">&#x27;input&#x27;</span>, <span class="variable language_">this</span>.<span class="property">content</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>frontend</category>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
        <tag>v-model</tag>
      </tags>
  </entry>
  <entry>
    <title>snap</title>
    <url>/Blog/19-04-09-snap/</url>
    <content><![CDATA[<p>Ubuntu推出的 软件管理程序(类似debian系列是apt，arch系列是pacman)，跨linux的</p>
<p><img data-src="https://tutorials.ubuntu.com/es6-bundled/src/codelabs/basic-snap-usage/img/f9f287c2e1980df1.png" alt="linuxs"></p>
<h1 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h1><p>Arch</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S snapd</span><br><span class="line"></span><br><span class="line"><span class="comment"># enable the snapd systemd service:</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> --now snapd.socket</span><br></pre></td></tr></table></figure>

<p>Debian (Sid only)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install snapd</span><br></pre></td></tr></table></figure>

<p><strong>注</strong>Ubuntu &gt;16.04默认安装了 </p>
<p>Fedora</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo dnf install snapd</span><br></pre></td></tr></table></figure>

<p>Gentoo</p>
<p>Install the <a href="https://github.com/zyga/gentoo-snappy">gentoo-snappy overlay.</a><br>OpenEmbedded&#x2F;Yocto<br>Install the <a href="https://github.com/morphis/meta-snappy/blob/master/README.md">snap meta layer.</a></p>
<p>openSuSE</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo zypper addrepo http://download.opensuse.org/repositories/system:/snappy/openSUSE_Leap_42.2/ snappy</span><br><span class="line">sudo zypper install snapd</span><br></pre></td></tr></table></figure>

<h1 id="start-using"><a href="#start-using" class="headerlink" title="start using"></a>start using</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">snap find hello</span><br><span class="line">sudo snap install hello</span><br><span class="line">hello</span><br><span class="line">snap list</span><br><span class="line">sudo snap refresh &lt;snap name&gt;</span><br><span class="line">sudo snap refresh</span><br><span class="line">sudo snap remove</span><br></pre></td></tr></table></figure>

<p>好消息是snap每日自动在后台更新</p>
<p>软件默认安装的是stable版本</p>
<p>如果要其他版本则通过指定channel</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo snap refresh hello --channel=beta</span><br><span class="line">sudo snap refresh hello --beta</span><br></pre></td></tr></table></figure>

<p>可选的channel有 <code>stable</code>稳定,<code>candidate</code>稍早于稳定版的版本,<code>beta</code>未完成但是一个里程碑的版本,<code>edge</code>每日构建的冒烟测试</p>
<p>版本回滚</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">sudo snap revert hello </span><br></pre></td></tr></table></figure>

<h1 id="进阶snap用法"><a href="#进阶snap用法" class="headerlink" title="进阶snap用法"></a>进阶snap用法</h1><p>首先申请个账号<a href="https://login.ubuntu.com/">https://login.ubuntu.com/</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo snap login</span><br></pre></td></tr></table></figure>

<p>登陆以后，你再使用snap就不需要sudo了，除非你执行了<code>snap logout</code></p>
<p>可以看snap使用历史记录，以及一个历史记录的细节</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">snap changes</span><br><span class="line">snap change &lt;changes ID&gt;</span><br><span class="line">snap watch &lt;changes ID&gt;</span><br><span class="line">snap abort &lt;changes ID&gt;</span><br></pre></td></tr></table></figure>

<p>snap安装的流程</p>
<p>下载-&gt;验证-&gt;mount-&gt;备份老版本的一些data到另一个文件夹-&gt;The security profiles are set and snapd checks which interfaces to connect to.-&gt;添加到$PATH-&gt;设置aliases-&gt;运行snap中定义的services-&gt; 运行snap中定义的 configure钩子</p>
<p>类似的可以查看refresh remove revert的过程</p>
<h2 id="离线安装例子"><a href="#离线安装例子" class="headerlink" title="离线安装例子"></a>离线安装例子</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">snap download nethack</span><br><span class="line"><span class="built_in">ls</span></span><br></pre></td></tr></table></figure>

<p>会下载本身的(.snap)包以及对应(.assert)文件</p>
<p>直接 <code>snap install XXXX.snap</code>会报错 cannot find signatures</p>
<p>解决方案(误，如果你勇敢或疯狂 想无视assertion的install)<code>snap install --dangerous XXXX.snap</code></p>
<p><strong>注</strong><code>--devmode</code>内涵了<code>--dangerous</code></p>
<p>正确的安装方式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">snap ack XXX.assert</span><br><span class="line">snap install XXX.snap</span><br></pre></td></tr></table></figure>

<p>关于assert(大概了解 account-key, account, snap-declaration, snap-revision 各个部分的元数组)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> XXX.assert</span><br></pre></td></tr></table></figure>

<p>查看已知(即是ack 过的)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">snap known snap-declaration snap-name=nethack</span><br></pre></td></tr></table></figure>

<p>所有stable channel的是confined，相对的devmode是unconfined，意味有访问系统的权限，所以要么这个开发者是你，要么是你信任的</p>
<h2 id="interfaces"><a href="#interfaces" class="headerlink" title="interfaces"></a>interfaces</h2><p>先安装<code>chuck-norris-webserver</code></p>
<p>interfaces是可插拔插槽模式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">snap interfaces</span><br></pre></td></tr></table></figure>

<p>你可以看到，<code>chuck-norris-webserver</code>绑定到了<code>nextwork-bind</code> 上,</p>
<p>但有一些连接的Slot是空的(如camera)，这种 是认为非安全的，访问用户的摄像机</p>
<p>执行<code>chuck-norris-webserver.cli</code> 你可以看到 有一些权限访问是被拒绝了的</p>
<p>授权camera</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">snap connect chuck-norris-webserver:camera :camera</span><br></pre></td></tr></table></figure>

<p>我们再执行<code>snap interfaces</code>可以看到camera被连接上了</p>
<p>取消连接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">snap disconnect chuck-norris-webserver:camera</span><br></pre></td></tr></table></figure>

<p>例如,服务和cli请求访问不同的接口定义:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">node-<span class="attr">service</span>:</span><br><span class="line">   <span class="attr">command</span>: bin/chuck-norris-app</span><br><span class="line">   <span class="attr">daemon</span>: simple</span><br><span class="line">   restart-<span class="attr">condition</span>: always</span><br><span class="line">   <span class="attr">plugs</span>: [network-bind]</span><br><span class="line"> <span class="attr">cli</span>:</span><br><span class="line">   <span class="attr">command</span>: bin/chuck-norris-cli</span><br><span class="line">   <span class="attr">plugs</span>: [network, camera]</span><br></pre></td></tr></table></figure>

<p>读写network，使用camera</p>
<p>devmode 是用于开发者的不是 devil 23333</p>
<p>保证devmode的不会在stable里，也就不会被snap find到</p>
<p>你如果要安装，可以强制–beta,–devmode,前提是你信任它</p>
<p>安装后你会在snap list的notes中看到 它的channel</p>
<p>一种看法是把它看成container式的样子，在它上面运行的未授权的看不到根目录, 重定位</p>
<p><code>--classic</code>强制使用 未重定位的包，这种classic的包和重定位的包不兼容，这种classic的包是能够读到宿主系统的目录的</p>
<p>综上这么多模式虽然你可能不是开发者也可以了解一下，主要还是为开发设计的，</p>
<ol>
<li>先用classic模式开发</li>
<li>再用重定位dev模式</li>
<li>最后用严格模式包</li>
</ol>
<h2 id="snaps-amp-services的可用性，日志，状态"><a href="#snaps-amp-services的可用性，日志，状态" class="headerlink" title="snaps&amp;services的可用性，日志，状态"></a>snaps&amp;services的可用性，日志，状态</h2><ol>
<li>当一个snap被安装，意味着，该snap命令在用户$PATH中可访问</li>
<li>snap中包括的services都被启动，它们会跟随系统启动和关闭，而启动关闭，当它们crash可以自动重启</li>
</ol>
<p>你可以<code>snap enable</code>,<code>snap restart</code>,<code>snap disable</code>控制这些服务</p>
<p>[原来我机器上有apache，然后安了这个用来讲例子的webserver，需要先stop apache再重启这个webserver]</p>
<p><code>ll /etc/systemd/system/snap*</code></p>
<p><code>cat /etc/systemd/system/snap.chuck-norris-webserver.node-service.service </code></p>
<p>所以snap用的还是系统的systemd的工具来管理服务，所以可以用传统的systemctl来管理</p>
<p><code>systemctl status -l snap.chuck-norris-webserver.node-service</code></p>
<p>这里在讲systemctl就不记了</p>
<p>同样可以查看日志<code>sudo journalctl -fu snap.chuck-norris-webserver.node-service</code></p>
<h2 id="管理snap配置"><a href="#管理snap配置" class="headerlink" title="管理snap配置"></a>管理snap配置</h2><p><code>snap set</code></p>
<p><code>snap set chuck-norris-webserver title=&quot;I can bind Chuck Norris to my will&quot;</code></p>
<p><code>snap set chuck-norris-webserver port=81</code></p>
<p>这应该是看具体应用提供的key和value范围了</p>
<p><code>snap set &lt;snap-name&gt; key1=value1 [key2=value2...]</code></p>
<p>与set对应的就是 get，可以获取值 <code>snap get &lt;snap-name&gt; key</code></p>
<p><code>snap run --shell chuck-norris-webserver.cli</code></p>
<p>中<code>--shell</code>会提供一个subshell</p>
<p>subshell的环境<code>env | grep SNAP</code></p>
<p>直接cd 和 touch都会无权,能够操作的是 <code>ls $SNAP</code>(可读 不可写),<code>touch $SNAP_USER_DATA/foo</code>(读+写),<code>$SNAP_USER_COMMON</code> (读+写)</p>
<p>实际路径<code>echo $SNAP_USER_COMMON</code> &#x3D;&gt; <code>/home/didrocks/snap/chuck-norris-webserver/common</code></p>
<p>你通过snap set配置的值在<code>$SNAP_DATA/config</code></p>
<p><code>snap info chuck-norris-webserver</code> ,相对于snap find可以看stable以及非stable的channel</p>
<p>这里举例如果1.0.3(–beta)版本的revision是22(–edge)</p>
<p>然后得到了一些反馈，修复了一些issues</p>
<p>作者再提交，则还是1.0.3(–beta),但revision会变化可能就成了24(–edge)</p>
<p><code>snap find --section</code></p>
<h1 id="创建发布snap-TODO"><a href="#创建发布snap-TODO" class="headerlink" title="创建发布snap TODO"></a>创建发布snap TODO</h1><h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>总有人想搞统一 :-)</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://tutorials.ubuntu.com/tutorial/basic-snap-usage">https://tutorials.ubuntu.com/tutorial/basic-snap-usage</a></p>
<p><a href="https://tutorials.ubuntu.com/tutorial/advanced-snap-usage">https://tutorials.ubuntu.com/tutorial/advanced-snap-usage</a></p>
<p><a href="https://tutorials.ubuntu.com/tutorial/create-your-first-snap">https://tutorials.ubuntu.com/tutorial/create-your-first-snap</a></p>
]]></content>
      <categories>
        <category>software</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>snap</tag>
      </tags>
  </entry>
  <entry>
    <title>原则</title>
    <url>/Blog/19-04-12-principles/</url>
    <content><![CDATA[<h1 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h1><p>这本书我看了下来，主要是生活和工作团队建设的指导。本文是个人总结的一些东西，建议阅读原书。</p>
<h2 id="生活原则"><a href="#生活原则" class="headerlink" title="生活原则"></a>生活原则</h2><p>这一部分本身是在 xmind上写的，但是图太大pdf也很大，xmind提供了自动转换为markdown的功能，感谢！</p>
<h3 id="拥抱现实，应对现实"><a href="#拥抱现实，应对现实" class="headerlink" title="拥抱现实，应对现实"></a>拥抱现实，应对现实</h3><span id="more"></span>

<ul>
<li>通过练习 也能改变自己的习惯，体验同样的“从犯错中学习的愉悦感”</li>
<li>1.1做一个超级现实的人<ul>
<li>梦想+现实+决心&#x3D;成功的生活<ul>
<li>没有深深扎根于现实的理想主义者会制造问题 而不是推动进步</li>
<li>享受生活和改变世界：对它们分别追求多少，你如何努力工作以尽量实现二者兼得，两者很可能是一回事相辅相成。</li>
</ul>
</li>
</ul>
</li>
<li>1.2真相（对现实的准确理解）是任何良好结果的根本依据<ul>
<li>真相与现实不符合时，大多人抗拒真相</li>
</ul>
</li>
<li>1.3 做到头脑极度开放、极度透明<ul>
<li>a.对于快速学习和有效改变而言，头脑极度开放、极度透明是价值无限的。<ul>
<li>学习过程：做决定-》看到结果-〉根据结果改进对现实理解，反馈过程，需要头脑开放</li>
<li>知道什么时候不自行做决定，例子：生病最好听从医生的。所以在适时的时候让别人来决定，或参考别人的决定</li>
</ul>
</li>
<li>b.不要担心他人的看法，使之成为你的障碍<ul>
<li>除了能自由的做自己外，还能让我和其他人相互理解，</li>
</ul>
</li>
<li>c. 拥抱极度求真和极度透明讲带来更有意义的工作和更有意义的人际关系<ul>
<li>作者说大多人习惯的改变通常需要约18月，这个习惯可能也一样需要一定时间才能改变</li>
</ul>
</li>
</ul>
</li>
<li>1.4 观察自然，学习现实规律<ul>
<li>a. 不要固守你对事物“应该”是什么样的看法，这将使你无法了解真实的情况</li>
<li>b. 一个东西要“好”，必须符合现实的规律，并促进整体的进化，这能带来最大的回报<ul>
<li>例如，如果你发明了某种世界觉得有价值的东西，你几乎肯定会获得回报？？？？ 当时日心说可不是这样。。不过我好喜欢作者这种说法，这种有点完全抽离现实社会，去谈一个理想形的</li>
<li>作者注解：人们常因为很多东西和善体贴而认为它“好”，但这些东西无法带来人们想要的东西，自然会认为这些东西是“坏”的，而我会赞同自然。</li>
<li>这里作者是把 “好”定义了一下，成自然认为的“好”，而这种虽然普遍存在，有些或有很多（我不确定占比）比 人们认为“好”但实际“坏”的来得晚很多，例如“抢票软件”</li>
</ul>
</li>
<li>c. 进化是宇宙中最强大的力量，是唯一永恒的东西，是一切的驱动力。</li>
<li>d. 不进化就死亡<ul>
<li>需要不停学习 不停进化</li>
</ul>
</li>
</ul>
</li>
<li>1.5 进化是生命最大的成就和最大的回报<ul>
<li>a. 个体的激励机制必须符合群体的目标。</li>
<li>b. 现实为了整体趋向最优化，而不是为了个体。</li>
<li>c. 通过快速试错以适应现实是无价的。<ul>
<li>记忆为基础的学习</li>
<li>经验中潜意识学习</li>
<li>与人类思考无关的 ，如基因进化的学习</li>
</ul>
</li>
<li>d. 意识到你既是一切又什么都不是，并决定你想成为什么样子<ul>
<li>和上面讲得一样，从上往下，自然角度看，我们很小，一生可能微不足道，从下而上，对我们自己来说，自己死了什么都感受不到。</li>
</ul>
</li>
<li>e. 你的未来取决于你的视角<ul>
<li>作者喜欢这种为人类总体进化做贡献的事</li>
<li>尽管 情感上，作者会难受，和他自身最终分离</li>
</ul>
</li>
</ul>
</li>
<li>1.6 理解自然提供的现实教训<ul>
<li>简单看作觉得不好的，放到大背景下 可能是好的</li>
<li>a. 把你的进化最大化<ul>
<li>爱与工作是人性的基石</li>
</ul>
</li>
<li>b. 记住“没有痛苦就没有收获” <ul>
<li>？天将降大任于斯人也。。</li>
</ul>
</li>
<li>c. 自然的一项根本法则是，为了赢得力量，人必须努力突破极限。而这是痛苦的。<ul>
<li>人类本能躲避痛苦</li>
</ul>
</li>
</ul>
</li>
<li>1.7 痛苦+反思&#x3D;进步<ul>
<li>自动反思痛苦而不是躲避痛苦<ul>
<li>方法有自我观察周围自己环境</li>
<li>也可以询问其他可信的人</li>
<li>关键是深入到具体问题。和 面对痛苦的习惯</li>
<li>相对于在痛苦时反思来说，在痛苦后，但是痛苦记忆前反思</li>
<li>如果你没经历失败，也就是你没有努力突破极限，这边的概念是自己向上去找问题</li>
</ul>
</li>
<li>a 迎接而非躲避痛苦<ul>
<li>你将喜欢以下3点<ul>
<li>找到、接受、并学会如何应对你的弱点</li>
<li>更喜欢周围的人对你坦诚，而不是隐瞒对你的负面看法</li>
<li>展现真实的自我，而不是强行把弱点伪装成优势。</li>
</ul>
</li>
</ul>
</li>
<li>b接受严厉的爱<ul>
<li>需要有应对显现实 实现愿望的能力，</li>
<li>每个人优缺点，把缺点摆桌上帮助你改掉坏习惯，养成好习惯，</li>
<li>使痛苦成为某种你渴望的东西</li>
</ul>
</li>
</ul>
</li>
<li>1.8 考虑后续与再后续的结果<ul>
<li>不要只考虑决策的直接结果，长远考虑</li>
</ul>
</li>
<li>1.9 接受结果<ul>
<li>糟糕就是糟糕了，不要抱怨你无法控制的东西</li>
</ul>
</li>
<li>1.10 从更高的层次俯视机器<ul>
<li>a把自己想象成一部在大机器里运转的小机器。并明白你有能力改变你的机器以实现更好的结果</li>
<li>b通过比较你是闲的结果和你的目标，你就能确定如何改进你的机器<ul>
<li>TODO 158图</li>
<li>反馈循环</li>
</ul>
</li>
<li>c区别作为及其设计者的你和作为机器中工作者的你</li>
<li>d大多数人犯下的最大错误是不客观看待自己，以及其他人，这导致他们一次次的栽在自己或其他人的弱点上。<ul>
<li>简单的说是固执己见</li>
</ul>
</li>
<li>e成功的人能超越自身，客观看待事物，并管理实务以塑造改变<ul>
<li>1 不要为自己某些方面不行而难过，而是发现不行的点，并找到替代工作者</li>
<li>最好的机会大多来自苦拼的经历</li>
<li>面对缺点选择<ul>
<li>1 否认缺点（大多数人做法）<ul>
<li>极度不建议，因为这里描述的缺点不是说人们说你什么什么不好，而是说客观意义上，你存在的某个缺点</li>
</ul>
</li>
<li><ol start="2">
<li>承认缺点并应对，努力把缺点转化为优势（能不能成功取决于你的自我改变能力）</li>
</ol>
<ul>
<li>如果能成功最好的办法</li>
<li>但有很多事情你可能永远不会擅长，改变也需要花费很多时间和精力</li>
<li>这里提到的一个标准来判断你是否应该继续——你要做的事是否符合自己的特性<ul>
<li>个人认为这不应该是唯一标准，对于一些必要的事情来说，不论适不适应，在初始阶段都应该努力去处理缺点</li>
</ul>
</li>
</ul>
</li>
<li><ol start="3">
<li>你可以承认确定并找到 绕过缺点的方法</li>
</ol>
<ul>
<li>最容易通常最可行，但很少有人这样实践</li>
</ul>
</li>
<li>4 改变你的目标<ul>
<li>需要你有很大灵活性 克服自己各种先入之见</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>f在你不擅长的领域请教擅长的其他人，这是一个你无论如何都应该培养的出色技能，这将帮助你建立起安全护栏，避免自己做错事。</li>
<li>g因为客观看待自身很困难，所以你需要依赖其他人的意见，以及全部证据</li>
<li>h如果你的头脑足够开放，足够有决心，你几乎可以实现任何愿望<ul>
<li>突然觉得我的愿望是不是有点极端，我只能想到向愿望迈进的路，也逐步付诸实践，但始终没有一个可及感，但依然坚持着，不过之前老师的研究的确有让我感觉距离又近了许多</li>
<li>注意愿望需要符合你的特性</li>
</ul>
</li>
<li>5项抉择<ul>
<li>1.不要混淆你的愿望和事实。</li>
<li><ol start="2">
<li>不要为自身形象担心，只需要关心，能不能实现你的目标</li>
</ol>
</li>
<li><ol start="3">
<li>不要过于重视直接结果而忽视后续、再后续的结果。</li>
</ol>
</li>
<li><ol start="4">
<li>不要让痛苦妨碍进步。</li>
</ol>
</li>
<li>5.不要把不好的结果归咎于任何人，从自己身上找原因<ul>
<li>这是近几年我自己也意识到的！无论周围再糟，再黑，那在这种情况下，你做到自己的最好了吗，就你自己来说真的就只剩余周围环境的原因了吗，你自己能否改变自己以外再影响周围的环境呢？</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>TODO 163 pic</li>
</ul>
<h3 id="用五步流程实现你的人生愿望"><a href="#用五步流程实现你的人生愿望" class="headerlink" title="用五步流程实现你的人生愿望"></a>用五步流程实现你的人生愿望</h3><ul>
<li>TODO P170</li>
<li>5步的每一步实践时进行隔离化，不要在定目标时去考虑失败了怎么办，诊断时是诊断，不要想解决方案，认真做好每一步</li>
<li>如果情绪大于理智，请冷静下来再进行</li>
<li>各种各样借口毫无价值，需要的是坚持和克服</li>
<li>当你不具备技能时，你需要知道<ul>
<li>什么时候需要这些技能</li>
<li>你能从哪里学到这些技能</li>
</ul>
</li>
<li><ol>
<li>有明确目标</li>
</ol>
<ul>
<li>明确的目标才有具体的方向</li>
<li>a 排列优先顺序：尽管你几乎可以得到你想要的任何东西，但你不可能得到你想要的所有东西<ul>
<li>同时意味着你需要明确你去放弃一些东西，不要试图同时追求太多目标</li>
</ul>
</li>
<li>b 不要混淆目标和欲望。<ul>
<li>欲望是有直接结果，但是会阻止你实现目标的东西</li>
</ul>
</li>
<li>c 调和你的目标和欲望，以明确你在生活中真正想要的东西。<ul>
<li>做有激情的事</li>
</ul>
</li>
<li>d 不要把成功的装饰误以为成功本身<ul>
<li>这里举例是 大众认为的成功 很多来说只是成功的装饰，要找你自己能感到满足的成功</li>
</ul>
</li>
<li>e 永远不要因为你觉得某个目标无法实现就否决它<ul>
<li>放心大胆的做，总有一条最好的道路</li>
<li>在你的路途中，你和他人沟通的情况下，你从未预想过的道路会呈现</li>
</ul>
</li>
<li>f 谨记伟大的愿望创造伟大的能力。<ul>
<li>如果你把怒标志线定位明知自己能实现的东西，你的自我要求就太低了！！！！！</li>
</ul>
</li>
<li>g 如果你拥有灵活性并自我归责，那么几乎没有什么能阻止你成功。<ul>
<li>寻找方法的积极性</li>
</ul>
</li>
<li>h 知道如何对待挫折和知道如何前进一样重要</li>
</ul>
</li>
<li>2 找到阻碍你实现这些目标的问题，并且不容忍这些问题。<ul>
<li>具体的方向 将让你直面自己的缺点 应对这些缺点带来的痛苦</li>
<li>a 把令人痛苦的问题视为考验你的潜在进步机会<ul>
<li>把问题摆到桌面上不要担心暴怒自己的缺点</li>
</ul>
</li>
<li>b 不要逃避问题，因为问题根植于看起来并不美好的残酷现实<ul>
<li>承认弱点，并不是向弱点投降，而是正确认识自己。</li>
</ul>
</li>
<li>c 要精准地找到问题所在<ul>
<li>明确问题究竟是一个必要问题你的技能不足，还是固有的弱点，需要他人帮助，还是他人的弱点需要换人。</li>
</ul>
</li>
<li>d 不要把问题的某个原因误认为本问题本身</li>
<li>e 区分大问题和小问题<ul>
<li>探寻大问题， 回报最大的问题，同时留时间探索小问题，因为它们可能是潜在的大问题</li>
</ul>
</li>
<li>f 找出一个问题之后，不要容忍问题<ul>
<li>无论什么原因，只要你没有战胜问题的意志，你就处于毫无希望的境地</li>
</ul>
</li>
</ul>
</li>
<li>3 准确诊断问题，找到问题的根源<ul>
<li>一定沉着冷静，保证准确，一定迅速、持续这么做，不断定更高的目标，保证快速进化</li>
<li>a. 先把问题是什么弄明白，再决定怎么做<ul>
<li>一次良好的诊断通常需要15-60分钟，取决于 诊断的效率和问题的复杂性，需要和合适的人交流，分析证据，确定根本原因，</li>
</ul>
</li>
<li>b. 区分直接原因与根本原因，<ul>
<li>直接原因一般是 动词具体动作</li>
<li>根本原因一般是形容词描述，描述性质</li>
</ul>
</li>
<li>c. 认识到了解人（包括你自己）的特性，有助于对其形成合理预期<ul>
<li>认识自己，常见 自尊心起阻碍作用，你需要客观看待自身和其它人。</li>
</ul>
</li>
</ul>
</li>
<li>4 规划可以解决问题的方案<ul>
<li>a. 前进之前先回顾</li>
<li>b. 把你的问题看做一部机器产生的一系列结果。<ul>
<li>通过俯视你的机器并思考如何改变这部机器以创造更好的结果来从事，更高层次的思考。</li>
</ul>
</li>
<li>c. 谨记实现你的目标通常有很多途径。<ul>
<li>你只需要找出一条有效途径</li>
</ul>
</li>
<li>d. 把你的方案设想为一个电影剧本，然后循序渐进的思考由谁来做什么事。<ul>
<li>先框架，再具体，具体问题在推进过程中都会浮现，那你需要进一步晚上方案，直到各个部分都吻合</li>
</ul>
</li>
<li>e. 把你的方案写下来让所有人都能看到，并对照方案执行。<ul>
<li>方案中应当巨细靡遗地写明谁在何时完成什么任务，任务、方案和目标是不同的，不要混淆。谨记，任务是方案和目标之间的纽带。</li>
</ul>
</li>
<li>f. 要明白，规划一个好的方案不一定需要很多时间。草拟和完善一个方案，可以用短短几个小时，也可以用几天甚至几周，但这个过程是必不可少的。<ul>
<li>规划先于行动， 确保做的事有效， 草拟完善方案可能几个小时几天几周。</li>
</ul>
</li>
</ul>
</li>
<li>5 做一切必要的事来践行这些方案，实现成果<ul>
<li>坚定地从头至尾执行方案</li>
<li>a. 规划做得再好，不执行也无济于事。<ul>
<li>时刻谨记任务极其意在实现的目标之间的联系，当你觉得看不清其间的联系时，就暂停一下，问问自己为什么看不清找不到原因，你就肯定会迷失自己的目标</li>
</ul>
</li>
<li>b. 良好工作习惯的重要性常被大大低谷</li>
<li>c. 建立清晰地衡量标准来确保你在严格执行方案。<ul>
<li>理想的做法是让其他人客观评估并报告你的进度，如果未能实现目标就是另一个需要诊断和解决的问题。</li>
<li>这里提到很多成功 有创造力的人不善于执行，他们因和高度可信赖的任务执行者建立互助互利的关系而取得成功。</li>
</ul>
</li>
</ul>
</li>
<li>你的价值观，层层递进的，都完成后需要一个新目标。如果行之有效，目标变化速度&lt;规划变化速度&lt;任务变化速度</li>
<li>既明白目标也知晓实现进度</li>
<li>6 如果你找到了解决方案，弱点是不重要的，<ul>
<li>几乎肯定不可能把每一步做好</li>
<li>a. 考察你犯错误的类型，并识别你通常在五步流程中的哪一步上做得不好。</li>
<li>b. 每个人都至少有一个最大的弱点阻碍其成功，找到你的这个弱点并处理它<ul>
<li>把你最大弱点写下来 找出问题，规划解决方案，执行落实</li>
<li>可以自己处理掉也可以找人帮你更好的处理，<ul>
<li><ol>
<li>自己有用成功所需的要素</li>
</ol>
</li>
<li><ol start="2">
<li>从其他人那里得到成功所需的要素，需要你千寻</li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>7 理解你和其他人的“意境地图”与谦逊性<ul>
<li>有人能自己找到“意境地图” <ul>
<li>好奇这个翻译的原文是什么</li>
</ul>
</li>
<li>有的人通过谦逊 头脑开放  通过他人帮助 找到比你自己想的方案更好的“意境地图“<ul>
<li>TODO图P180</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="做到头脑极度开放"><a href="#做到头脑极度开放" class="headerlink" title="做到头脑极度开放"></a>做到头脑极度开放</h3><ul>
<li>本书最重要的一条</li>
<li>1 认识你的两大障碍<ul>
<li>自我意识 和思维盲点<ul>
<li>让你难以客观看到你和你所处环境的真相，难以通过最大限度地利用他人的帮助来做出最佳决择，</li>
</ul>
</li>
<li>a 理解你的自我意识障碍。<ul>
<li>潜意识里的防卫机制，它使你难以接受自己的错误和弱点。你有一些根植于内心最深处的需求和恐惧<ul>
<li>这里用生理结构上讲大脑的情绪处理部分会本能的反应，例如把“批评”视为“攻击”，渴望“赞誉”</li>
<li>前额皮层 属于高级的部分用于做决策应用逻辑和推理</li>
</ul>
</li>
</ul>
</li>
<li>b. “两个你”在争夺对你的控制权。<ul>
<li>回忆过去， 简单处理部分 和高级部分，都均有过胜利，</li>
<li>不能允许“想要自己正确”的需求压倒“找出真相”的需求</li>
</ul>
</li>
<li>c. 理解你的思维盲点障碍。<ul>
<li>人的思维方式不同，所以人们无法理解自己看不到的东西。但不容易发现，很多色盲最终能发现自己是色盲，而心里弱点常常难以发现<ul>
<li>人们之间当意见分歧会导致各方通常始终坚信自己是对的</li>
<li>会导致人们无法从其他人的想法中获益<ul>
<li>这个问题和举例相同啊，就是如何让色盲认识到他看不到的颜色？一个方案当然说通过工具，比如电脑返回rgb数值，并通过一定办法让他认为电脑返回值可信。那另一个问题是如何认识到自己是色盲。再后，认识到自己是色盲以后，如何主动找到可信的工具。希望书中之后能找到解答</li>
</ul>
</li>
</ul>
</li>
<li>适应和进化的三种途径<ul>
<li>训练自己的头脑以反直觉的方式思考</li>
<li>利用辅助机制，如程序化的提醒器</li>
<li>在自己的短板上依靠长着的帮助</li>
</ul>
</li>
</ul>
</li>
<li>P187 上 文字 TODO</li>
</ul>
</li>
<li>2 奉行头脑极度开放<ul>
<li>a 诚恳地相信你也许并不知道最好的解决办法是什么，并认识到，与你知道的东西相比，能不能妥善处理“不知道” 才是更重要的。</li>
<li>b. 认识到决策应当分成两步：先分析所有相关信息，然后决定。<ul>
<li>大多人的决定过程是 “先决定” -&gt;反过来找对决定有用的信息，抛弃与决定不符合的信息，而不是采用所有信息</li>
</ul>
</li>
<li>c. 不要担心自己的形象，只关心如何实现目标<ul>
<li>我开始以为说 找合适的人来做的原因只是，个体的差异导致做一件事情需要更多时间和精力，或者对于目标你自己应该只关注最核心的部分，而这里有着补充的意思是，即使你全部投入到某个分支的实现，基于你的生理特性，你依然可能无法找到更好的答案，而这种情况，你甚至反而可能相信你找到了更好的答案</li>
</ul>
</li>
<li>d. 认识到你不能“只产出不吸纳”<ul>
<li>产出指输出想法，吸纳指输入想法。这点我完全相反，毕竟我是把“自私”特性列为优点的撒旦教派倾向XD</li>
</ul>
</li>
<li>e. 认识到了能够从他人的角度看待事物，你必须暂时闲置判断，只有设身处地，你才能合理评估另一种观点的价值<ul>
<li>可以鼓励他人告诉你错在哪里</li>
</ul>
</li>
<li>f. 谨记，你是在寻找最好的答案，而不是你自己能得出最好的答案。<ul>
<li>如果你客观，你很容易承认你总是拥有最好答案的可能性是很小的<ul>
<li>有点数学上的疑问，假设整个社会所有人对某件事的答案构成集合，且最好答案存在且唯一，那么对于不同的问题的不同集合再构成集合，那么假设m人和n个问题，则有n个最好的答案。假设你能直接咨询和接触到的人有k个(k&lt;&#x3D;m),你可以向他们寻求这n个问题的答案。那么从期望上来说，如果均匀分布，mu sigma正态分布。对于你专长，普通，弱势问题中,分别的拥有最好的答案的期望是多少？</li>
<li>没有定量算过，但这模型大概样子1.只能找到更好而不是最好的答案，也就是向相关专长的人求助，而如果你在某个具体的科研方面上，更好的答案来源基本只剩师长，和他山之石的paper了</li>
</ul>
</li>
<li>不要只从自己的视角看问题</li>
</ul>
</li>
<li>g. 搞清楚你这是在争论还是在试图理解一个问题，并根据你和对方的可信度，想象那种做法最合理。<ul>
<li>如果双方水平相当，那么合理</li>
<li>如果一方明显比另一方更有知识，就应该（老师，学生）关系</li>
<li>这里说可信度 在相关领域至少成功3次找到答案，拥有过硬履历<ul>
<li>在被问责的情况下能对自己的观点做出很好的解释</li>
</ul>
</li>
<li>嗯 这里举例医生，感觉万能例子</li>
</ul>
</li>
</ul>
</li>
<li>3 领会并感激：深思熟虑的意见分歧<ul>
<li>你的目标不是让对方相信你是对的而是弄明白谁是对的。<br>双方的都应是真诚担忧错过重要观点，从而双方更高层次的自我要真正看到对方看到的东西，双方收益匪浅</li>
<li>你的沟通方式应该让对方觉得你只是试图在理，不是争论，理性，平等对待对方。<ul>
<li>愤怒毫无意义</li>
</ul>
</li>
<li>向对方复述对方的观点，如果对方认可，说明你在接受对方观点上没有偏差，其二，两分钟不打断对方，以便有时间把想法说清楚</li>
<li>跟任何人都头脑开放不一定有好处，你应该话时间和你能找到的最可信的人探讨观点。</li>
<li>讨论进入僵局，就商定一个你们都尊重的人，让他帮着主持<ul>
<li>这个方案是让第三方认证，因为有些事情因为你的本身特点是根本无法想明白的，这样做只是徒劳</li>
</ul>
</li>
<li>在讨论收效在不断减小的时候达成相互理解，不等于达成一致，可以同时保持分歧</li>
<li>！？？？？ 如果两个人去一家餐馆，一个人说他喜欢，另一个人通常会说“我也喜欢”，或者什么也不说，尽管他不喜欢，因为“较低层次的你”误以为分歧是冲突，所以做到头脑极度开放并不容易，你需要学会在交换意见时努力让你和对方不出现这种反应<ul>
<li>老实说这技能我觉得有点难，我会去尝试</li>
</ul>
</li>
<li>观点错误并根据它做出糟糕决策而不是奉行深思熟虑的意见分歧，这是人类的悲剧之一XD 哎</li>
</ul>
</li>
<li>4 和可信的、愿意表达芬奇的人一起审视你的观点<ul>
<li>愿意表达分歧的专家 是最好的老师比例行公事授课的黑板教授好得多.</li>
<li>在有限时间难以理解时，找知识丰富，可信度高帮我决策，旁听他们深思熟虑方式发表的不同意见<ul>
<li>而大多数人喜欢自己决定即使他们没有在这方面能力</li>
<li>多个可信者<ul>
<li>太吊了！让多个可信者之间交流，自己旁听【虽然自己可能也无法理解】，</li>
</ul>
</li>
</ul>
</li>
<li>a 为最坏的情况做准备，以尽量使其不那么糟糕</li>
</ul>
</li>
<li><ol start="5">
<li>识别你应当注意的头脑封闭和头脑开放的不同迹象</li>
</ol>
<ul>
<li>区分方法<ul>
<li>头脑封闭<br>1 不喜欢看到自己观点被挑战，因为自己无法说服对方感到沮丧，而不是好奇对方为何看法不同。把事情弄错时会产生坏情绪，更关心自己能不能被证明是正确的而不是提出问题，了解其他人的观点。</li>
</ul>
</li>
</ul>
</li>
</ul>
<ol start="2">
<li>喜欢做陈述而不是提问（常态的）。</li>
<li>更关心是否被理解，而不是理解其他人，当对方不赞同时，他们通常会认定自己没有被理解，而不是想想是不是自己没有理解对方的观点。</li>
<li>会说我可能错了 但是这是我的观点 敷衍式表态</li>
<li>阻挠其他人发言</li>
<li>难同时持有两种想法，让自己的想法独大</li>
<li>缺乏深刻的谦逊意识<br>     * hhhhh这里阻挠其他发言竟然是两分钟法则吗，我还以为是减少、或不和这个人交流【改变他人是一门学问】<br> * 头脑开放</li>
<li>更想了解为什么出现分歧，当其他人不赞同时他们不会发怒，他们明白自己总有可能是错的，值得花一点时间考虑对方的观点，以确定自己没有忽略一些因素或犯错。</li>
<li>真诚的相信自己可能是错的，提出真诚的问题，他们还经常权衡自己的相对可信度，以确定自己应该主要扮演学生、老师还是对等的角色。</li>
<li>觉得有必要从对方的视角看待事物</li>
<li>直到何时陈述何时提问</li>
<li>总是喜欢倾听而不是发言表达观点</li>
<li>考虑他人观点并保持自己深入思考能力，同时思考两个或更多相互冲突的概念反复权衡其相对价值</li>
<li>看待事物时，时刻在心底担忧自己可能是错的。<br>     * 这点有个体验，但不是我，之前有玩过2周炉石（然后就放弃了），不知道怎么组牌，我问很多玩的人，都是说要怎样怎样。我一直无法理解。然后钱神是让我自己先随便根据模板自己组一套，打几局，然后问我在打的过程中的感觉是什么，缺什么哪里不连贯，再解释给我这样的话应该把哪些牌换掉，用什么换，换完了再怎么用。这算一个我印象很深的感受到别人从对方的视角看待事物<ul>
<li>根据区分方法，给我自己的一点总结：总体是偏头脑开放的，<br>此外还要加强：多提问少陈述，多理解其他人观点，学习“更好的”从对方视角看待事物</li>
</ul>
</li>
</ol>
<ul>
<li><ol start="6">
<li>理解你如何做到头脑极度开放</li>
</ol>
<ul>
<li>a. 经常利用痛苦来引导自己进行高质量的思考<ul>
<li>。。。我笑出了声 我好像一直身体力行着 原来我不是m，是高质量思考吗？</li>
<li>作者描述的练习过程 感觉能用程式来起到一些帮助</li>
</ul>
</li>
<li>b. 将头脑开放作为一种习惯<ul>
<li>建立受挫感的神经自省反应机制</li>
<li>杏仁核绑架通常不会持续很长时间</li>
</ul>
</li>
<li>c. 认识自己的思维盲点<ul>
<li>记录一下你经常在哪些方面因为看不到别人看得到的东西而做出糟糕的决策<br>make a list</li>
<li>当你再次做这些list上的时候，你应该不要自己做，让曾经看到过的人，或者有能力的人帮你做</li>
</ul>
</li>
<li>d. 假如很多可信的人都说你正在做错事，只有你不这么看，就要想想自己是不是看偏了<ul>
<li>客观<br>不要吵架模式 要提问模式<br>中立第三方</li>
</ul>
</li>
<li>e. 冥想</li>
<li>f. 重视证据，并鼓励其他人也这么做<ul>
<li>重审你的证据，即使让可信的人来决策，也不会质疑这些证据吗</li>
</ul>
</li>
<li>g. 尽力帮助其他人也保持头脑开放<ul>
<li>平静理性表达观点 减少让对方激动的可能性</li>
</ul>
</li>
<li>h. 使用以证据为基础的决策工具<ul>
<li>最理想的方案是机器决策，作者已经做了一定可用的这样的工具<ul>
<li>。。。。。我搜了一下 搜到一篇水文，上面他说盲目相信机器决策是危险的，所以量化评估机器可信性又可以开一个讲座了</li>
</ul>
</li>
</ul>
</li>
<li>i. 知道什么时候应当停止为自己的观点辩护，信任自己的决策程序<ul>
<li>相信其他可信人共识观点 比你的观点都更好，</li>
</ul>
</li>
</ul>
</li>
<li>人一生最重要的抉择只有一个：你愿意努力探寻真相吗？你是否深信找出真相对你的信服至关重要？你是否真诚地渴望弄明白自己或其他人有没有犯下阻碍你实现目标的错误？<ul>
<li>第一步是 客观看待自身</li>
</ul>
</li>
</ul>
<h3 id="理解人与人大不相同"><a href="#理解人与人大不相同" class="headerlink" title="理解人与人大不相同"></a>理解人与人大不相同</h3><ul>
<li>事实1: 在尝试、创造性、记忆力、综合分析能力、关注细节能力等方面，人和人天生就有擅长与不擅长的差别，但大多数科学家也不大愿意客观研究这些差别</li>
<li>TODO P204文字</li>
<li>了解自身</li>
<li>1 明白你与其他人的思维方式能带来的力量<ul>
<li>作者过去经常对别人的决策感到愤怒和沮丧，逐渐明白，并不是有意识地采取这种看起来低效率的做法，只不过是依据自己看到的情况来做事。（由他们大脑运行方式决定的），不只是作者觉得他们离谱，相反他们也觉得作者离谱</li>
<li>a 我们拥有各种天生特征，即可能帮助自己也可能伤害自己，取决于如何应用<ul>
<li>作者的员工管理，用 棒球卡 记录每个人的特征（公开的），这样从来没有和他们公事的人和他们交流起来，可以合理预期他们的行为</li>
<li>简单说1公开，2公开后大家就都是面对事实真相在思考和处理问题</li>
<li>人脑的复杂程度超出我们的想象</li>
<li>新生儿的大脑里就包含了数亿年生物进化积累的成果</li>
<li>所有哺乳动物、鱼类、鸟类、两栖动物、爬行动物的脑都拥有同一套伟大的构造</li>
<li>这一“所有脊椎动物共有的脑”的进化是自下而上进行的，也就是说，较低的去浴室进化意义上最古老的，顶层区域是最新的。</li>
</ul>
</li>
</ul>
</li>
<li>2有意义的工作和有意义的人际关系不仅是我们做出的美好选择，而且是我们天生的生理需求<ul>
<li>P212 一张大脑的图 TODO</li>
<li>大多数4岁儿童能读懂其他人的心理状态</li>
<li>人类永远处在塑造人类的两极两支箭<ul>
<li>一极是激发罪恶的个体选择，</li>
<li>另一极是激发美德的群体选择</li>
</ul>
</li>
</ul>
</li>
<li>3理解大脑的主要斗争，以及如何控制这些斗争，以实现“你”的愿望<ul>
<li>这里说大脑的运作方式到目前生理学家也只能有大概，我在设想如果未来真的能区分了，是否能有相关的“专注药剂”，“感性抑制剂”真的可以使用</li>
<li>a 要明白，意识与潜意识在不断斗争。<ul>
<li>这里作者说的是意识与潜意识各有优点，最好的方式是合理的连接两者</li>
<li>潜意识既可以伤害你也可以帮助你</li>
<li>所以要做的不是意识完全占主导，而是相互联系，让潜意识产生想法（如冥想），而让意识分析后再做决定</li>
</ul>
</li>
<li>b. 要知道最常发生的斗争是情绪和思考的斗争</li>
<li>c. &#96;调和你的情绪和思考</li>
<li>d. 善择你的习惯。<ul>
<li>从生理学上说，你的习惯由脑部一个模块控制，所以你几乎可以养成任何习惯<ul>
<li><ol>
<li>信号：用信号来告诉你的大脑进入自动运行模式，以及使用哪种习惯</li>
</ol>
</li>
<li><ol start="2">
<li>常规：可以是肢体性，心理性，情感性的常规</li>
</ol>
</li>
<li><ol start="3">
<li>奖励：帮助你大脑发现这个特定的贿赂是不是 值得记下来以备后用，反复练习加强回路</li>
</ol>
</li>
</ul>
</li>
<li>如果你真的想改变，你最好是决定养成那些习惯，戒掉那些习惯，然后执行<ul>
<li>有价值的习惯常来源于什么造就了你的痛苦</li>
</ul>
</li>
</ul>
</li>
<li>e. 坚持友善地训练“较低层次的你” 以养成好习惯</li>
<li>f. 理解右脑思维和左脑思维的差别<ul>
<li>左脑：按顺序推理，分析细节，并擅长线性分析，“左脑型”或“线性”思考者分析能力强，通常被形容为“明智”</li>
<li>右脑，思考不同类别，识别主题，综合大局，富有“街头只会 ”，“发散” 思维，机灵</li>
<li>P220图TODO</li>
</ul>
</li>
<li>g. 理解大脑可以改变的程度<ul>
<li>主动训练新的思维方式，冥想</li>
</ul>
</li>
</ul>
</li>
<li>4 认识自己和他人的特性<ul>
<li>人天生思维偏向，评估（自我他人 通常会很不准确）</li>
<li>作者在（心理测试）和（背景履历）测试二选一中，作者会选 心理测试</li>
<li>4种测试<ul>
<li>MBTI</li>
<li>职场人格量表</li>
<li>团队倾向简表</li>
<li>分层系统理论</li>
</ul>
</li>
<li>a 内向与外向<ul>
<li>让他们以各自舒适的方式沟通很重要</li>
</ul>
</li>
<li>b. 直觉与感知<ul>
<li>感知 是细节<br>而直觉是全局</li>
</ul>
</li>
<li>c. 思考与感觉<ul>
<li>两种人之间的对话是令人沮丧的</li>
</ul>
</li>
<li>d. 计划与发觉<ul>
<li>计划从内到外 先目标后现实<br>发觉着先现实后实践<br>往往难以相互理解</li>
</ul>
</li>
<li>e. 创造者、推进者、改进这、贯彻着与变通者<ul>
<li>创造者 提出新想法、新概念。他们喜欢非结构化、抽象的活动，喜欢创新和不走寻常路</li>
<li>推进者，传递新想法并推进。喜欢感觉和人际关系，管理各种人的因素。他们非常善于激发工作热情</li>
<li>改进者挑战想法。他们分析计划以寻找缺陷，然后以很客观、符合逻辑的方式改进计划。他们喜欢事实和理论，以系统性的方式工作。</li>
<li>贯彻者也可以叫作执行者。他们确保重要的工作得到执行，目标被实现，他们关注细节和结果。</li>
<li>变通者是上面的结合，能根据特定需求调整自身，并能从各种各样的视角看待问题</li>
</ul>
</li>
<li>f.关注任务与关注目标。</li>
<li>g. 职场人格量表<ul>
<li>毅力</li>
<li>独立性</li>
<li>抗压能力</li>
<li>分析能力</li>
<li>等</li>
<li>20-50种特征很好的描述一个人</li>
<li>了解刻画一个人是互利的</li>
</ul>
</li>
<li>h. 塑造者是能从构想一路走到构想实现的人<ul>
<li>塑造者&#x3D;理想家+务实思考着+坚毅者</li>
<li>TODO 文字P227 描述塑造者</li>
</ul>
</li>
</ul>
</li>
<li>5无论你要实现什么目标，让合适的人各司其职以支持你的目标，是成功的关键<ul>
<li>a. 管理你自己，并协调其他人实现你的目标<ul>
<li>找到缺失的积木</li>
<li>换掉不能用的积木</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="学习如何有效决策"><a href="#学习如何有效决策" class="headerlink" title="学习如何有效决策"></a>学习如何有效决策</h3><ul>
<li>理论一 实践是习得的第一要务<ul>
<li>如果一个会开车的人 想办法记录如何开车到文字，让不会开车的人通过文字学习，也不会学会开车？吗？</li>
</ul>
</li>
<li>1 要认识到：（1）影响好决策的最大威胁是有害的情绪；（2）决策是一个两步流程（先了解后决定）<ul>
<li>学习的知识内容要客观现实</li>
<li>决策要想之后的结果</li>
<li>把了解做好 综合分析</li>
</ul>
</li>
<li><ol start="2">
<li>综合分析眼前的形势</li>
</ol>
<ul>
<li>a 你能做的最重要的决定之一是决定问谁<ul>
<li>可信的人，请教不了解情况的人，还不如找不到答案</li>
</ul>
</li>
<li>b. 不要听到什么信什么<ul>
<li>观点廉价，许多人把观点表述为事实，你需要区分观点和事实</li>
</ul>
</li>
<li>c. 所有东西都是放在眼前看更大<ul>
<li>你应该跳出去看到全局</li>
</ul>
</li>
<li>d. 不要夸大新东西的好处<ul>
<li>时间证明的经典好于轰动性作品</li>
</ul>
</li>
<li>e. 不要过度分析细节</li>
</ul>
</li>
<li><ol start="3">
<li>综合分析变化中的形势</li>
</ol>
<ul>
<li>没大看懂这个对每天事情好坏的排序P235 图 TODO</li>
<li>a 始终记住改善事物的速度和水平，以及两者的关系。<ul>
<li>TODO 图P236-240</li>
</ul>
</li>
<li>b 不必过于精确，<ul>
<li>38<em>12&#x3D;40</em>10&#x3D;400左右</li>
<li>在差不多层面理解大多数事</li>
<li>当你问一个东西对不对而对方告诉你并不完全对时，那它大致是对的。</li>
</ul>
</li>
<li>c. 谨记80&#x2F;20 法则并明白关键的20%是什么<ul>
<li>20%信息得到80%价值，同样剩余80%信息只能得到20%价值</li>
<li>不必再陷入不必要的细节中</li>
</ul>
</li>
<li>d. 不要做完美主义者<ul>
<li>通常只有5-10个需要考虑的重要因素。重要的是深入了解这些因素</li>
</ul>
</li>
</ul>
</li>
<li>4 高效地综合考虑各个层次<ul>
<li>多个层次的全局 TODO P242</li>
<li>a 用 基线以上 和 基线一下来确定谈话位于那一层</li>
<li>b. 谨记，决策需要在合理的层次做出，但也应在各层次之间保持一致。<ul>
<li>谨记任何问题都存在很多层次，</li>
<li>针对一个问题明白你分析的是哪个层次</li>
<li>有意识地在不同层次之间转换，而不是把问题视为一堆没有内在区别、可以随意考察的事实。</li>
<li>以下页图为模板把你思考过程画成图<ul>
<li>TODO P244-245</li>
</ul>
</li>
</ul>
</li>
<li>把决策做好<ul>
<li>虽然动物不会“数学”但是他们同样能够计算自身能量消耗，成功繁衍生存。</li>
<li>一种以证据和逻辑为基础（来自较高层次的大脑），另一种以潜意识和情绪为基础（来自较低层次的动物性的大脑）</li>
</ul>
</li>
</ul>
</li>
<li>5 综合分析现实、理解如何行动的最好工具是逻辑、理性和常识<ul>
<li>事实上大多数人决策时伴随着潜意识</li>
</ul>
</li>
<li>6 根据预期价值计算做决策<ul>
<li>预期价值最高的决策是最好的决策<ul>
<li>价值？钱吗？</li>
<li>多问问总没坏处</li>
</ul>
</li>
<li>a 不管你押对的概率已经有多大，提高你的押对概率始终有价值</li>
<li>b知道什么时候不要去押注，和知道什么注值得押同样重要</li>
<li>c最好的选择是好处多与坏处的选择，不是毫无坏处的选择<ul>
<li>不要因为有缺点就反对某件事</li>
</ul>
</li>
</ul>
</li>
<li>7 比较更多信息带来的价值和不做决定造成的成本，决定优先顺序<ul>
<li>a 先把你的“必做之事”做完，再做你的“想做之事”<ul>
<li>不要错误的把任何“想做之事”拍到最前面</li>
</ul>
</li>
<li>b. 你很可能没有时间处理不重要的的事，那最好将它留着，以免自己没有时间处理重要的事。</li>
<li>c. 不要把概率当做可能性。</li>
</ul>
</li>
<li>8 简化<ul>
<li>撇掉无关细节，让重要因素及其关系呈现出来。</li>
</ul>
</li>
<li>9 使用原则<ul>
<li>1.让思维慢下来，以注意到你正在引用的决策标准</li>
<li><ol start="2">
<li>把这个标准作为一项原则写下来。</li>
</ol>
</li>
<li>3 当结果出现时，评估结果，思考标准，并在下一个“类似情境”出现之前改进标准</li>
</ul>
</li>
<li>10 对你的决策进行可信度加权<ul>
<li>与高度可信，愿意表达深思熟虑的分歧的人交流，一直都能深化我对问题的理解、改进我的决策质量</li>
<li>你需要避免的常见失误<ul>
<li>1 不合逻辑地高估自己的可信度</li>
<li><ol start="2">
<li>不区分可信度不同的人</li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
<li>11把你的原则转换成算法，让计算机和你一起决策<ul>
<li>P253</li>
<li>和计算机中的另一个你形成合作关系，</li>
<li>TODO P254 的构想把我说哭了 </li>
<li>计算机做大的优点是没有生物的情绪性</li>
</ul>
</li>
<li>12 在深刻理解人工智能前不要过度信赖它<ul>
<li>？？？？？？这里 是作者在畅想闲谈吧内容没啥值得记录的？感觉</li>
</ul>
</li>
</ul>
<h3 id="生活原则总结"><a href="#生活原则总结" class="headerlink" title="生活原则总结"></a>生活原则总结</h3><ul>
<li>P260 图 TODO</li>
<li>拥抱现实并妥善应对现实</li>
<li>进化进程描述为一个实现你愿望的五步流程</li>
<li>头脑极度开放</li>
<li>理解人与人大不相同</li>
<li>1最求你想要的东西</li>
<li>2通过头脑极度开放从失败中汲取良好的教益</li>
<li>3 不断改变和进化</li>
<li>与目标一致的人合作，</li>
</ul>
<h2 id="三-工作原则"><a href="#三-工作原则" class="headerlink" title="三 工作原则"></a>三 工作原则</h2><h3 id="任何组织或机构-若想正常运转其工作原则-必须与其成员的生活原则相契合"><a href="#任何组织或机构-若想正常运转其工作原则-必须与其成员的生活原则相契合" class="headerlink" title="任何组织或机构 若想正常运转其工作原则 必须与其成员的生活原则相契合"></a>任何组织或机构 若想正常运转其工作原则 必须与其成员的生活原则相契合</h3><ul>
<li>不是说方方面面，是必须要在最重要的事情</li>
</ul>
<h3 id="每个机构，都应当明确、清晰地阐明其工作原则和价值观，并持续贯彻下去"><a href="#每个机构，都应当明确、清晰地阐明其工作原则和价值观，并持续贯彻下去" class="headerlink" title="每个机构，都应当明确、清晰地阐明其工作原则和价值观，并持续贯彻下去"></a>每个机构，都应当明确、清晰地阐明其工作原则和价值观，并持续贯彻下去</h3><ul>
<li>TODO P304</li>
</ul>
<h2 id="作者的原则总结"><a href="#作者的原则总结" class="headerlink" title="作者的原则总结"></a>作者的原则总结</h2><h3 id="生活原则总结-1"><a href="#生活原则总结-1" class="headerlink" title="生活原则总结"></a>生活原则总结</h3><h3 id="工作原则总结"><a href="#工作原则总结" class="headerlink" title="工作原则总结"></a>工作原则总结</h3><h2 id="一-我的历程"><a href="#一-我的历程" class="headerlink" title="一 我的历程"></a>一 我的历程</h2><h3 id="自己思考！你想要什么？事实是什么？如何行动？"><a href="#自己思考！你想要什么？事实是什么？如何行动？" class="headerlink" title="自己思考！你想要什么？事实是什么？如何行动？"></a>自己思考！你想要什么？事实是什么？如何行动？</h3><h3 id="最好的方式不是回避，是应对"><a href="#最好的方式不是回避，是应对" class="headerlink" title="最好的方式不是回避，是应对"></a>最好的方式不是回避，是应对</h3><h3 id="作者的探险召唤"><a href="#作者的探险召唤" class="headerlink" title="作者的探险召唤"></a>作者的探险召唤</h3><ul>
<li>作者18岁前 对股票感兴趣那是 对股票认知在之后看来是错误的，但当时却靠股票赚着钱</li>
</ul>
<h3 id="跨越门槛"><a href="#跨越门槛" class="headerlink" title="跨越门槛"></a>跨越门槛</h3><ul>
<li>18-30岁 完成大学，美国经济震荡，创办公司“桥水”，设计机器化的市场模型（因为比股票更容易认知）</li>
<li>提取模型 输入计算机</li>
<li>最好假设自己没有看到全部</li>
<li>发展业务</li>
</ul>
<h3 id="低谷3年"><a href="#低谷3年" class="headerlink" title="低谷3年"></a>低谷3年</h3><ul>
<li>没有从中提取到通常的点，主要还是经济和投资方面</li>
<li>作者找到的唯一成功的途径P36<ul>
<li>1找打与自己观点不同的最聪明的人，以便自己能够努力理解他们的推理</li>
<li>2.知道自己在什么时候不能有明确的意见，不急于下结论</li>
<li><ol start="3">
<li>逐步归纳永恒和普适的原则，对其进行测试，将其系统化</li>
</ol>
</li>
<li>4 通过平衡风险来保持较大的回报并降低下行波动</li>
</ul>
</li>
</ul>
<h3 id="试炼之路11年"><a href="#试炼之路11年" class="headerlink" title="试炼之路11年"></a>试炼之路11年</h3><ul>
<li>重建桥水，中国金融市场初期，在</li>
<li>作为管理者，得到了员工的反馈 ，那些地方做得好，哪些地方做得不好，一些员工对作者不够了解并不满意</li>
<li>1.把我们的真实想法摆在桌面上</li>
<li>2.存在经过深思熟虑的分歧，但人们愿意在相互了解的过程中更改观点</li>
<li>3.如果分歧依然存在，拥有一种大家一致同意的决策方式（如投票，清晰的权威），以便我们能够不带怨气地把分歧留在身后</li>
<li></li>
</ul>
<h3 id="终极恩惠15年"><a href="#终极恩惠15年" class="headerlink" title="终极恩惠15年"></a>终极恩惠15年</h3><ul>
<li>风险评价</li>
<li>精品店vs大机构 路的选择</li>
<li>充实原则 改进 编写 执行</li>
<li>心理测试</li>
<li>明确标注和公开展示不同人擅长的任务</li>
</ul>
<h3 id="回报恩惠4年"><a href="#回报恩惠4年" class="headerlink" title="回报恩惠4年"></a>回报恩惠4年</h3><ul>
<li>卸任 并想办法让团队在脱离自己还能运作，理清新旧人在各个职责上的差异</li>
<li>找各个伟大塑造者【成功创业者 科学家】对他们进行分析，甚至直接找他们聊 让他们自己总结，再从中去找寻共同点 以及 他们之间的差异，并用客观的方式标准化答案<ul>
<li>1.独立思考者  不会让任何东西或任何人妨碍自己追求大胆的目标（哎。。。）</li>
<li><ol start="2">
<li>对于事情应该怎么做脑里有十分坚定的规则，同时又是中愿意在现实中检验这些头脑规划，调整做法，从而让它变得更好</li>
</ol>
</li>
<li><ol start="3">
<li>极为坚韧，实现的决心强于经历的痛苦，</li>
</ol>
</li>
<li><ol start="4">
<li>相对于大多数人有更广的视野</li>
</ol>
</li>
<li><ol start="5">
<li>能看到大图景和小细节中间层次，并且不同层次上总结的观点</li>
</ol>
</li>
<li>6 对自己的事业充满热情，对表现一般的手下不能容忍，同时想给世界带来巨大有益的财富</li>
<li>见notability</li>
</ul>
</li>
<li>P99 塑造者vs发明家，作者更期望找到的人是塑造者</li>
<li>把我们的创意择优系统化：简单说原来可能是人处理虽然能好的运作但还是看人，在没有系统化之前 ，作者都有”不稳当的感受”，对于工作人员，能够清晰的评估，也从“心理”层面 让大家更能认可所有的决策以及提出意见</li>
<li>做慈善&#x2F;科学地。</li>
</ul>
<h3 id="最后的一年和最大的挑战"><a href="#最后的一年和最大的挑战" class="headerlink" title="最后的一年和最大的挑战"></a>最后的一年和最大的挑战</h3><ul>
<li>交接后 不做CEO别人做遇到问题，公司转型，改变领导层</li>
<li>创意择优 好于任何单人决策</li>
<li>所以在交接CEO才发现缺少CEO相关的机制</li>
<li>在一个职位成功 不等于 在另一个职位也能成功</li>
</ul>
<h3 id="从更高层面回顾"><a href="#从更高层面回顾" class="headerlink" title="从更高层面回顾"></a>从更高层面回顾</h3><ul>
<li>最初 遇到困境 感受十万火急</li>
<li>意识到其中大多有别的人在别的时间地点曾经经历过，1.是 对历史抱有健康的尊重，2渴望对现实机理形成普遍性的理解</li>
<li>这一整个4页都蛮有价值，见notability</li>
</ul>
<h3 id="第一部分总结"><a href="#第一部分总结" class="headerlink" title="第一部分总结"></a>第一部分总结</h3><ul>
<li>良好的原则是应对现实的有效方法。为了总结出自己的原则，我花了很多时间思考。我将分享背后的思考，而不是简单地告诉你我的原则。</li>
<li>emm 作者是唯物主义</li>
<li>考察影响你的那些事物的规律，从而理解其背后的因果关系，并学习有效应对这些事物的原则<ul>
<li>对于个体而言大多遇到的都是别人遇到的过的困境</li>
</ul>
</li>
</ul>
<h2 id="导言"><a href="#导言" class="headerlink" title="导言"></a>导言</h2><h3 id="拥有你自己的原则"><a href="#拥有你自己的原则" class="headerlink" title="拥有你自己的原则"></a>拥有你自己的原则</h3><h3 id="独立思考并决定"><a href="#独立思考并决定" class="headerlink" title="独立思考并决定"></a>独立思考并决定</h3><ul>
<li>1 你想要什么</li>
<li>2 事实是什么</li>
<li>3 面对事实 你如何实现自己的愿望</li>
</ul>
<h3 id="作者的原则-来源"><a href="#作者的原则-来源" class="headerlink" title="作者的原则 来源"></a>作者的原则 来源</h3><ul>
<li>见 notability的图</li>
</ul>
<h3 id="以可信度加权的方式做决定"><a href="#以可信度加权的方式做决定" class="headerlink" title="以可信度加权的方式做决定"></a>以可信度加权的方式做决定</h3><h3 id="遵照原则做事"><a href="#遵照原则做事" class="headerlink" title="遵照原则做事"></a>遵照原则做事</h3><ul>
<li>原则需要非常清晰，人们可以轻松评估其中逻辑，也可以判断是否知行合一</li>
</ul>
<h3 id="以系统化的方式来决策"><a href="#以系统化的方式来决策" class="headerlink" title="以系统化的方式来决策"></a>以系统化的方式来决策</h3><p><em>XMind: ZEN - Trial Version</em></p>
<h2 id="工作原则"><a href="#工作原则" class="headerlink" title="工作原则"></a>工作原则</h2><p>因为作者也有整理要点，这个目录看下来偏向于企业管理，这里打算不用xmind记录了，也只记录一些个人觉得重要或引发思考的。</p>
<p>P304 图</p>
<p>P307 图</p>
<p>P317 图</p>
<p>作者以40年时间跨度 给你展示 公司的成功 P307-309</p>
<p>换位思考自己的可信度</p>
<p>像是公开源代码 ，233333</p>
<p>大多数公司，人们都在从事两个工作；一个是他们自己实际的工作，另一个是努力给别人留下自己如何工作的好印象。</p>
<p>公开&#x3D;效率</p>
<p>P319图 P320 文字 ‘谁疯了’ TODO</p>
<p>principles 安卓</p>
<h3 id="打造良好的文化"><a href="#打造良好的文化" class="headerlink" title="打造良好的文化"></a>打造良好的文化</h3><h4 id="相信极度求真和极度透明"><a href="#相信极度求真和极度透明" class="headerlink" title="相信极度求真和极度透明"></a>相信极度求真和极度透明</h4><p>适应几度求真和极度透明的环境</p>
<p>实践中的几度求真和极度透明</p>
<p>不要在当事人不在事议论人，如果要议论，就在当事人在的时候直接说，总之不要在背后说，即使是你的下属，不允许私下抱怨和背后批评</p>
<p>比如录音，随时可以公开，的方式自我保护，也做到极度透明</p>
<p>极度透明常见不适用的情况:</p>
<ol>
<li>信息设计隐私，个人，或属于保密范畴，且不会严重影响整个集体的利益。</li>
<li>分享并管理此类信息时，可能导致桥水和客户的长期利益受损，或是我们难以维持工作原则，如（内部我们的自营投资逻辑或以总法律纠纷）</li>
<li>整个公司层面分享某一信息的价值甚低，并会严重分散大家的精力（如具体的薪酬）</li>
</ol>
<h4 id="做有意义的工作，发展有意义的人际关系"><a href="#做有意义的工作，发展有意义的人际关系" class="headerlink" title="做有意义的工作，发展有意义的人际关系"></a>做有意义的工作，发展有意义的人际关系</h4><h4 id="打造允许犯错，但不容忍罔顾教训，一错再错的文化"><a href="#打造允许犯错，但不容忍罔顾教训，一错再错的文化" class="headerlink" title="打造允许犯错，但不容忍罔顾教训，一错再错的文化"></a>打造允许犯错，但不容忍罔顾教训，一错再错的文化</h4><p>痛苦+反思&#x3D;进步</p>
<h4 id="求取共识并坚持"><a href="#求取共识并坚持" class="headerlink" title="求取共识并坚持"></a>求取共识并坚持</h4><p>使用白板保护不要跑题，明确讨论了的目标，有始有终</p>
<p>3-5人效率高于20人</p>
<p>尽快和价值观不同的人分道扬镳</p>
<h4 id="做决策时要从观点的可信度触发"><a href="#做决策时要从观点的可信度触发" class="headerlink" title="做决策时要从观点的可信度触发"></a>做决策时要从观点的可信度触发</h4><p>可信度来源</p>
<ol>
<li>多次成功解决了相关问题的人</li>
<li>能有逻辑地解释结论背后因果关系的人</li>
</ol>
<p>上面两点都没有则不可信，如果一个人没有任何经验，但是道理合乎逻辑且可经受压力测试，则一定要试一试</p>
<p>可信度加权 &gt; 人数多胜少 或 权利上下决策</p>
<p>这里下面大多主要的可信度讲解中，主要还是来源于历史的行为</p>
<p>你要明辨以什么人的意见为评判标准，并不断提升辨别能力，你既要找出事实，从而有效判断，同时又要直到你听到的很多建议毫无价值，包括你自己的。</p>
<p>说教（老师）提问（学生）还是辩论（同事）</p>
<blockquote>
<p>高效处理分歧</p>
</blockquote>
<p>决策的责任人可以推翻可信度加群的投票结论，但要为此负责（这条原则存在的目的和意义是什么?）</p>
<h4 id="知道如何超越分歧"><a href="#知道如何超越分歧" class="headerlink" title="知道如何超越分歧"></a>知道如何超越分歧</h4><p>一边保证流程化，公开化，一边也需要担心内容的真实性，可信度，和有价值</p>
<p>把不和要求的人清除出公司</p>
<p>公司利益特殊情况&gt;规则&gt;公开透明</p>
<p>为了保证公开透明尽可能做到，所以就要尽早清除那些威胁公司利益的人，破坏规则的人</p>
<p>所以面对现实，最后还是 权利第一，但在这基础上，尽可能做到公开透明，可信加权</p>
<h3 id="用对人"><a href="#用对人" class="headerlink" title="用对人"></a>用对人</h3><p>在一教健康的机构中，应该是员工与其低层次的自我进行竞争，而不是员工与员工相互竞争，你的目标是找到懂得这一点的人，给他们配备能使他们在岗位上施展才华的工具和信息，而不是事无巨细地对他们进行微观管理。如果他们在受训后仍无法胜任，那就辞掉；如果能胜任，就提拔。</p>
<h4 id="比做什么事更重要的是找对做事的人"><a href="#比做什么事更重要的是找对做事的人" class="headerlink" title="比做什么事更重要的是找对做事的人"></a>比做什么事更重要的是找对做事的人</h4><ol>
<li>记住目标是什么</li>
<li>把目标布置给能胜任它的人（这是最佳情况），或者告诉他们怎样做能够达成目标（这属于微观管理，故略逊一筹）。</li>
<li>让他们尽职尽责</li>
</ol>
<p>如果你把目标任务交给能很好将其落实的责任人，并让他们明白要对达成目标和完成任务自负其责，他们就会干得很出色。</p>
<p>对你自己也是如此。如果作为规划者&#x2F;管理者的你根本不相信作为普通与昂工的你能胜任某项任务，但你仍然亲自去做，而不去找具有可信度的人来知道你，那就太不靠谱了。</p>
<p>辞掉会降低工作标准的人。错误的人造成的损失是无法用金钱衡量的</p>
<h4 id="要用对人，因为用人不当的代价高昂"><a href="#要用对人，因为用人不当的代价高昂" class="headerlink" title="要用对人，因为用人不当的代价高昂"></a>要用对人，因为用人不当的代价高昂</h4><p>8.1.a </p>
<p>价值观&gt;能力&gt;技艺,</p>
<p>[233333 哎 多少公司是 技艺&gt;能力 不考虑价值观的?????</p>
<p>8.2</p>
<p>人容易选择与自己相似的人，因此安排面试官要确保其能发现你想找的人。</p>
<p>如果你想招类型A的人，你就应该用有类型Ａ特制的人来面试</p>
<p>一位积极主动地导师的忠告会管用至少一半</p>
<p>当你了解一个人时，就会直到　可从他那里　得到什么。</p>
<p>8.3</p>
<h3 id="持续培训、测试、评估和调配员工"><a href="#持续培训、测试、评估和调配员工" class="headerlink" title="持续培训、测试、评估和调配员工"></a>持续培训、测试、评估和调配员工</h3><p>如果你让机构里的每个人说说自己对机构成功所做贡献的占比，加起来你会得到300%，你必须要确保具体功劳归具体人，否则，你就不知道谁该负责。更糟糕的是，你会错误地相信有人在不当邀功。</p>
<p>要像评估应聘者一样严格评估员工</p>
<p>培训、保护或辞退员工，不要修复</p>
<p>以点的形式收集事实，以点集的整体来评估</p>
<h3 id="建造并进化你的机器"><a href="#建造并进化你的机器" class="headerlink" title="建造并进化你的机器"></a>建造并进化你的机器</h3><h4 id="像操作一部机器那样进行管理以实现目标"><a href="#像操作一部机器那样进行管理以实现目标" class="headerlink" title="像操作一部机器那样进行管理以实现目标"></a>像操作一部机器那样进行管理以实现目标</h4><p>每次解决问题 有两个关键：1.实现目标，2.改进机器</p>
<p>10.3.d 如果你把自己限于细节，你要么存在管理或培训方面的问题，要么手下人能力不济。出色的管理者的标志是他不必亲自做任何事。管理者应视自己陷入细枝末节为不良信号。 招募 培训 监督，让员工尽量很好地独立完成任务。</p>
<p>10.7</p>
<p>一个基本的事实是，如果你不受你行为结果的影响，那么你就不会为行为负责。</p>
<p>如果你没有明确表达你的预期，你就不能让下属为没有达到预期而承担相应的责任。不要假定有些事情不明说也能理解，常识在实际中并非都那么常见，如果有具体要求，就要明示出来。</p>
<p>清楚目标的人通常能有大局观，一种测试方法是：问一个高层次的 问题：“目标XYZ的进展如何”，好的回答是先指出关于XYZ整体进展的总体情况，如果需要，再分述各任务情况来支持论证。只见任务不减目标的人只会讲任务完成情况。</p>
<p>当心温水煮青蛙，人们都有慢慢习惯与不可接受事物的强烈倾向，而这些不可接受的事物明眼人一看就会非常吃惊。</p>
<h4 id="发现问题，不容忍问题"><a href="#发现问题，不容忍问题" class="headerlink" title="发现问题，不容忍问题"></a>发现问题，不容忍问题</h4><p>发现问题-&gt;确定谁是问题的责任人，决定什么时间适合进行讨论。</p>
<p>具体责任人直接挂钩，禁止“我们”，“他们”的使用，要具体</p>
<h4 id="诊断问题，探究根源"><a href="#诊断问题，探究根源" class="headerlink" title="诊断问题，探究根源"></a>诊断问题，探究根源</h4><p>根源很重要:</p>
<p>例子假设一件事情的责任人分析后是 A</p>
<p>具体的问题是 A很粗心</p>
<p>那么根源是1.A总是很粗心 还是 2. 这次粗心得不像A会发生的</p>
<p>因素的分析可以考虑反问，如果下次 这个因素不出现，是否也就不会再出现相同的问题了?</p>
<p>原因深挖，把量化做到细节具体</p>
<p>评价决策，要根据决策时能获得的信息评估，不要事后诸葛亮的角度评估.</p>
<h4 id="改进机器，解决问题"><a href="#改进机器，解决问题" class="headerlink" title="改进机器，解决问题"></a>改进机器，解决问题</h4><p>每年两次会议公开重演</p>
<p>一部好的机器要考虑人可能并不完美这一因素。</p>
<p>自上而下地建设组织</p>
<p>管理者对其直接下级应该有 管理其技能和专注力的能力，并对下属工作有深入理解。【这里举例的是不同部门采用同一个主管的不当,管理者层级比例约1:5-1:10</p>
<p>员工适应机构，而不是机构适应员工</p>
<p>做两遍&gt; 二次确认 [….对拍大法好 啊</p>
<p>有点问题了，既然是层级机构，那么所有层级都要做两遍的话，那是O(2^层级)的增长咯?</p>
<p>顾问有风险外包需谨慎</p>
<p>组织架构的图应该仅是树</p>
<p>警察(审计人员) 是 几个少数 不公开透明的</p>
<p>为了让培训事半功倍，要把最常见的问题和答案通过音频、视频或书面形式记录下来，指定专人整理成手册，并定期更新完善。</p>
<h4 id="按既定计划行事"><a href="#按既定计划行事" class="headerlink" title="按既定计划行事"></a>按既定计划行事</h4><h4 id="运用工具和行为准则指导工作"><a href="#运用工具和行为准则指导工作" class="headerlink" title="运用工具和行为准则指导工作"></a>运用工具和行为准则指导工作</h4><h4 id="千万别忽视公司治理"><a href="#千万别忽视公司治理" class="headerlink" title="千万别忽视公司治理"></a>千万别忽视公司治理</h4><h3 id="将工作原则融会贯通"><a href="#将工作原则融会贯通" class="headerlink" title="将工作原则融会贯通"></a>将工作原则融会贯通</h3><p>世上没有乌托邦</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>图,xmind这里就不提供了,我已经整理到ipad上了，再整理到博文里的话，暂时没有这个精力，有兴趣email我XD,然后把个人的一些中间观点省去了。</p>
]]></content>
      <categories>
        <category>notes</category>
        <category>book</category>
      </categories>
      <tags>
        <tag>life</tag>
        <tag>book</tag>
      </tags>
  </entry>
  <entry>
    <title>js 基础&amp;进阶 速查笔记</title>
    <url>/Blog/19-04-19-jsmore1/</url>
    <content><![CDATA[<h1 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h1><p>个人笔记！不是文档！大家 尽量减少个人文档行为，多做公共wiki和文档翻译！</p>
<h1 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h1><p><a href="https://zh.javascript.info/">https://zh.javascript.info</a></p>
<p><a href="https://javascript.info/">https://javascript.info</a></p>
<p>有精力的朋友还是建议读上面链接,如果它们的文档有帮助，也建议购买它们的 epub&#x2F;pdf 作为支持</p>
<p>本文是基于我C++的熟练，和一定时间js使用后的阅读知识补充整理,章节分化基本和上面链接的内容对应</p>
<h1 id="JavaScript-基础知识-2"><a href="#JavaScript-基础知识-2" class="headerlink" title="JavaScript 基础知识 2"></a>JavaScript 基础知识 2</h1><h2 id="函数-2-15"><a href="#函数-2-15" class="headerlink" title="函数 2.15"></a>函数 2.15</h2><h3 id="函数表达式-vs-函数声明-2-16"><a href="#函数表达式-vs-函数声明-2-16" class="headerlink" title="函数表达式 vs 函数声明 2.16"></a>函数表达式 vs 函数声明 2.16</h3><p><code>function a()&#123;&#125;</code> vs <code>a = function()&#123;&#125;</code></p>
<p>当 JavaScript 准备运行脚本或代码块时，它首先在其中查找函数声明并创建函数。我们可以将其视为“初始化阶段”。</p>
<p>在处理完所有函数声明后，执行继续。</p>
<p>所以以下可以而正常运行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">sayHi</span>(<span class="string">&quot;John&quot;</span>); <span class="comment">// Hello, John</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>( <span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>`</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>声明还是有代码块的问题</p>
<span id="more"></span>


<h3 id="分号"><a href="#分号" class="headerlink" title="分号"></a>分号</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alert(&quot;There will be an error after this message&quot;)</span><br><span class="line"></span><br><span class="line">[1, 2].forEach(alert)</span><br></pre></td></tr></table></figure>

<p>上面会报错，因为编译器不确定加分号，导致</p>
<p><code>alert()[1,2].forEach()</code> , 其中1,2视作 逗号表达式返回2，也就是取<code>alert()</code>返回数组的第二个元素</p>
<h1 id="代码质量-3"><a href="#代码质量-3" class="headerlink" title="代码质量 3"></a>代码质量 3</h1><p><a href="https://zh.javascript.info/ninja-code">https://zh.javascript.info/ninja-code</a> 这一章吐槽真的有趣23333</p>
<h2 id="测试-3-5"><a href="#测试-3-5" class="headerlink" title="测试 3.5"></a>测试 3.5</h2><p>同时适用于浏览器端和服务器端!</p>
<p>Mocha —— 核心框架：提供了包括 describe 和 it 的通用型测试函数和运行测试的主函数。</p>
<p>Chai —— 提供很多断言支持的库。它可以用很多不同的断言。现在我们只需要用 assert.equal。<a href="http://chaijs.com/api/assert/">Chai doc</a></p>
<p>Sinon —— 用于监视函数、模拟内置函数和其他函数的库，我们稍后会用到它。</p>
<p>补充，现在还有可选的jasmine和karma</p>
<p>例子</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">describe(&quot;pow&quot;, function() &#123;</span><br><span class="line"></span><br><span class="line">  it(&quot;raises to n-th power&quot;, function() &#123;</span><br><span class="line">    assert.equal(pow(2, 3), 8);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>一个测试检测一个东西。</p>
<p><a href="https://zh.javascript.info/testing-mocha">https://zh.javascript.info/testing-mocha</a> 上面的demo 有点长，但很好的，建议直接看网页</p>
<p><code>before/after and beforeEach/afterEach</code>测试前后包围</p>
<p>规范先行，实现在后。一个有良好测试的代码通常都有更好的架构。</p>
<p>测试规范，实际上 不应该在测试中 使用”运算“，否则可能需要 <strong>调试测试</strong></p>
<p>经过 具体化以后的测试，还可以使用<code>it()-&gt;it.only()</code>进行单个测试</p>
<h2 id="Polyfill-3-6"><a href="#Polyfill-3-6" class="headerlink" title="Polyfill 3.6"></a>Polyfill 3.6</h2><h3 id="ES6-支持"><a href="#ES6-支持" class="headerlink" title="ES6 支持"></a>ES6 支持</h3><p><a href="https://kangax.github.io/compat-table/es6/">https://kangax.github.io/compat-table/es6/</a></p>
<h3 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h3><p>它将现代的 JavaScript 代码转化为上一代的标准形式。</p>
<p>脚本有一个术语 “polyfill” 表示用来“填补”缺口并添加缺少的实现。</p>
<p>两个有意思的 polyfills 是：</p>
<ul>
<li>babel polyfill 支持很多，但是很大。</li>
<li>polyfill.io 服务允许我们能根据自己所需的特性来按需加载、构建 polyfill。</li>
</ul>
<p>除了针对旧的版本，反过来，还有<a href="https://www.google.com/chrome/canary/">https://www.google.com/chrome/canary/</a> 的为开发人员准备的未来版本，每日构建版本，不支持Linux？？？？？？ 操了</p>
<p><a href="https://groups.google.com/a/chromium.org/forum/#!msg/chromium-discuss/GNE4pEXLMkQ/cis32ewLosYJ">https://groups.google.com/a/chromium.org/forum/#!msg/chromium-discuss/GNE4pEXLMkQ/cis32ewLosYJ</a></p>
<h1 id="Objects（对象）：基础知识-4"><a href="#Objects（对象）：基础知识-4" class="headerlink" title="Objects（对象）：基础知识 4"></a>Objects（对象）：基础知识 4</h1><h2 id="对象-4-1"><a href="#对象-4-1" class="headerlink" title="对象 4.1"></a>对象 4.1</h2><h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> bag = &#123;</span><br><span class="line">  [fruit+<span class="string">&#x27;2333&#x27;</span>]: <span class="number">5</span>, <span class="comment">// 属性名从 fruit 变量中计算 一般只有抽象出方法变量并且用于ide推断辅助时才用这个语法</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>特殊属性</p>
</blockquote>
<p><code>__proto__</code> 历史原因，不能设置为 非对象 值</p>
<blockquote>
<p>属性值简写(不建议)</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">makeUser</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    name, <span class="comment">// 与 name: name 相同</span></span><br><span class="line">    age   <span class="comment">// 与 age: age 相同</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="for…in"><a href="#for…in" class="headerlink" title="for…in"></a>for…in</h3><blockquote>
<p>和标题有点对不上，主要是 string和number转换相关</p>
</blockquote>
<p>字符串整数属性会相互转换,用加号控制</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> codes = &#123;</span><br><span class="line">  <span class="string">&quot;+49&quot;</span>: <span class="string">&quot;Germany&quot;</span>, <span class="comment">//用加号 保护字符串不会被转化为数字</span></span><br><span class="line">  <span class="string">&quot;+41&quot;</span>: <span class="string">&quot;Switzerland&quot;</span>,</span><br><span class="line">  <span class="string">&quot;+44&quot;</span>: <span class="string">&quot;Great Britain&quot;</span>,</span><br><span class="line">  <span class="comment">// ..,</span></span><br><span class="line">  <span class="string">&quot;+1&quot;</span>: <span class="string">&quot;USA&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> code <span class="keyword">in</span> codes) &#123;</span><br><span class="line">  <span class="title function_">alert</span>( +code ); <span class="comment">// 49, 41, 44, 1 // 这里感觉有问题，说是去加号，实际是转化成数值，但是如果值过大汇编成科学计数法，所以正确的应该还是字符串的去加号方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="引用复制-值和引用-4-2"><a href="#引用复制-值和引用-4-2" class="headerlink" title="引用复制(值和引用) 4.2"></a>引用复制(值和引用) 4.2</h2><p>原始类型是：字符串，数字，布尔类型 – 是被整个赋值的。</p>
<p>其它是引用</p>
<p>Object.assign 只是深度为1的深拷贝，要完全深拷贝，还是要自己实现,我喜欢在这里出面试题，深拷贝深比较</p>
<h2 id="垃圾回收-4-3"><a href="#垃圾回收-4-3" class="headerlink" title="垃圾回收 4.3"></a>垃圾回收 4.3</h2><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><p>变量没有let就是全局</p>
<h2 id="Symbol-类型-4-7"><a href="#Symbol-类型-4-7" class="headerlink" title="Symbol 类型 4.7"></a>Symbol 类型 4.7</h2><p>对象的属性键只能是 String 类型或者 Symbol 类型。不是 Number，也不是 Boolean，只有 String 或 Symbol 这两种类型。</p>
<p>Symbol 保证是唯一的。即使我们创建了许多具有相同描述的 Symbol，它们的值也是不同。描述只是一个不影响任何东西的标签。</p>
<p>Symbol 不能隐式的转换为String，要转化的话只能用 <code>toString()</code></p>
<p>Symbol 在 for…in 中被跳过</p>
<p>Symbol 在 Object.assign 中不会被忽略</p>
<p>全局注册表用法</p>
<p>let id &#x3D; Symbol.for(“id”)</p>
<p>返回key</p>
<p>Symbol.keyFor(Symbol.for(“test”))</p>
<p>从技术上说，Symbol 不是 100% 隐藏的。有一个内置方法 Object.getOwnPropertySymbols(obj) 允许我们获取所有的 Symbol。还有一个名为 Reflect.ownKeys(obj) 返回所有键，包括 Symbol。所以它们不是真正的隐藏。但是大多数库、内置方法和语法结构都遵循一个共同的协议。而明确调用上述方法的人可能很清楚他在做什么。</p>
<p><a href="https://tc39.github.io/ecma262/#sec-well-known-symbols">well known symbol</a></p>
<h2 id="对象方法与this-4-4"><a href="#对象方法与this-4-4" class="headerlink" title="对象方法与this 4.4"></a>对象方法与this 4.4</h2><h3 id="this运作方式"><a href="#this运作方式" class="headerlink" title="this运作方式"></a>this运作方式</h3><p>其实真的要讲就一句话，this在运行时才被复为具体的值，所以看运行到解释器去解释this那一行时的运行主体是谁即可。（这里忽略了一些编译器优化 可能发生的直观和实际造成的差异）</p>
<p>从根本上，我们是要去避免它带来的问题，而不是掌握它的各种用法。</p>
<p>怎样选择合适的实体？如何组织它们之间的交互？这就是架构</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123; <span class="attr">name</span>: <span class="string">&quot;John&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> admin = &#123; <span class="attr">name</span>: <span class="string">&quot;Admin&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这样的代码没有语法错误：</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>( <span class="variable language_">this</span>.<span class="property">name</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sayHi</span>(); <span class="comment">// 严格模式(use strict)下是undefined，非严格模式下是window</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在两个对象中使用的是相同的函数</span></span><br><span class="line">user.<span class="property">f</span> = sayHi;</span><br><span class="line">admin.<span class="property">f</span> = sayHi;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 它们调用时有不同的 this 值。</span></span><br><span class="line"><span class="comment">// 函数内部的 &quot;this&quot; 是点之前的这个对象。</span></span><br><span class="line">user.<span class="title function_">f</span>(); <span class="comment">// John  (this == user)</span></span><br><span class="line">admin.<span class="title function_">f</span>(); <span class="comment">// Admin  (this == admin)</span></span><br><span class="line"></span><br><span class="line">admin[<span class="string">&#x27;f&#x27;</span>](); <span class="comment">// Admin（使用点或方括号语法来访问这个方法，都没有关系。）</span></span><br></pre></td></tr></table></figure>

<p><code>this</code> 是在运行时求值的。它可以是任何值。在运行时对 this 求值的这个想法有其优缺点。一方面，函数可以被重用于不同的对象。另一方面，更大的灵活性给错误留下了余地。这里我们的立场并不是要评判编程语言的这个想法的好坏，而是要了解怎样使用它，如何趋利避害。</p>
<p>要深入理解 obj.method() 调用的原理。</p>
<ol>
<li>首先，点 ‘.’ 取得这个 obj.method 属性。</li>
<li>其后的括号 () 调用它。</li>
</ol>
<p>错误示例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">  <span class="title function_">hi</span>(<span class="params"></span>) &#123; <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>); &#125;,</span><br><span class="line">  <span class="title function_">bye</span>(<span class="params"></span>) &#123; <span class="title function_">alert</span>(<span class="string">&quot;Bye&quot;</span>); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">user.<span class="title function_">hi</span>(); <span class="comment">// John (the simple call works) 为了让 user.hi() 有效，JavaScript 用一个技巧 —— 这个 &#x27;.&#x27; 点返回的不是一个函数, 而是一种特殊的[引用类型]的值(https://tc39.github.io/ecma262/#sec-reference-specification-type).</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在我们要判断 name 属性，来决定调用 user.hi 或是 user.bye。</span></span><br><span class="line">(user.<span class="property">name</span> == <span class="string">&quot;John&quot;</span> ? user.<span class="property">hi</span> : user.<span class="property">bye</span>)(); <span class="comment">// Error!</span></span><br></pre></td></tr></table></figure>

<p>实际为</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable constant_">XXX</span> = (user.<span class="property">name</span> == <span class="string">&quot;John&quot;</span> ? user.<span class="property">hi</span> : user.<span class="property">bye</span>);</span><br><span class="line"><span class="title function_">XXX</span>(); <span class="comment">// Error! 因为XXX没有this</span></span><br></pre></td></tr></table></figure>

<p>引用类型 <code>(base, name, strict)</code>三元组 ，其中<code>strict</code>为bool，与是否<code>use strict</code>相关</p>
<p>上面<code>user.hi()</code> (<code>user[&#39;hi&#39;]</code>同理)在严格模式下，对应<code>(user,&#39;hi&#39;,true)</code></p>
<p>而上面的<code>XXX = user.hi</code>过程中会丢掉user，只取函数,所以 一个<code>函数</code>，要么是一个单纯的函数，要没么是一个上面的三元组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">user.<span class="title function_">hi</span>() <span class="comment">// 直接的调用</span></span><br><span class="line">(user.<span class="property">hi</span>)() <span class="comment">// 解析过程去括号 不算赋值，传递三元组引用</span></span><br><span class="line">(x=user.<span class="property">hi</span>)() <span class="comment">// 会在赋值时去掉user实体</span></span><br><span class="line">(<span class="number">1</span>==<span class="number">1</span>?user.<span class="property">hi</span>:alert)() <span class="comment">// 并没有看到 解析会自动简化</span></span><br><span class="line">(<span class="literal">true</span>?user.<span class="property">hi</span>:alert)() <span class="comment">// +1</span></span><br><span class="line">(user.<span class="property">hi</span> || alert)() <span class="comment">// +1</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">makeUser</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">    <span class="attr">ref1</span>: <span class="variable language_">this</span>, <span class="comment">// 会在上面的return的时候计算，这时候没有this ,所以 (a = makeUser())[&#x27;ref1&#x27;] 是undefined</span></span><br><span class="line">    <span class="attr">ref2</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">// 在执行时才计算 (a = makeUser())[&#x27;ref2&#x27;]() 得到本体</span></span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>; <span class="comment">// 不会预先算</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="箭头函数没有自己的this"><a href="#箭头函数没有自己的this" class="headerlink" title="箭头函数没有自己的this"></a>箭头函数没有自己的this</h3><p>箭头函数使用外部<code>正常的</code>函数的this</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="string">&quot;Ilya&quot;</span>,</span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="title function_">arrow</span> = (<span class="params"></span>) =&gt; <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">firstName</span>);<span class="comment">// 替换为function()&#123;alert(this.firstName);&#125;后变为undefined</span></span><br><span class="line">    <span class="title function_">arrow</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">user.<span class="title function_">sayHi</span>(); <span class="comment">// Ilya</span></span><br></pre></td></tr></table></figure>

<h2 id="对象原始值转换-4-8"><a href="#对象原始值转换-4-8" class="headerlink" title="对象原始值转换 4.8"></a>对象原始值转换 4.8</h2><h3 id="Symbol-toPrimitive-String-Number"><a href="#Symbol-toPrimitive-String-Number" class="headerlink" title="Symbol.toPrimitive String Number"></a>Symbol.toPrimitive String Number</h3><blockquote>
<p>相对于c++ 的重载operator，</p>
</blockquote>
<h4 id="Symbol-toPrimitive"><a href="#Symbol-toPrimitive" class="headerlink" title="Symbol.toPrimitive"></a>Symbol.toPrimitive</h4><p>当一个对象被用在需要原始值的上下文中时，例如，在 alert 或数学运算中，它会使用 ToPrimitive 算法转换为原始值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(x = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>])[<span class="title class_">Symbol</span>.<span class="property">toPrimitive</span>] = <span class="keyword">function</span>(<span class="params">hint</span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`HINT[<span class="subst">$&#123;hint&#125;</span>]`</span>);&#125;</span><br><span class="line"><span class="title function_">alert</span>(x);</span><br></pre></td></tr></table></figure>

<p>从例子，首先能看到，是会调用到 该函数，第二能看到hint传递过来的是<code>string</code></p>
<h4 id="string"><a href="#string" class="headerlink" title="string"></a>string</h4><p>当一个操作期望一个字符串时，对于对象到字符串的转换</p>
<p><code>alert(obj)</code> 或<code>anotherObj[obj] = XXX;</code></p>
<p><code>toString -&gt; valueOf</code></p>
<h4 id="number"><a href="#number" class="headerlink" title="number"></a>number</h4><p>当一个操作需要一个数字时，用于对象到数字的转换，如 maths</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 显式转换</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="title class_">Number</span>(obj);</span><br><span class="line"></span><br><span class="line"><span class="comment">// maths（除了二进制加法）</span></span><br><span class="line"><span class="keyword">let</span> n = +obj; <span class="comment">// 一元加法</span></span><br><span class="line"><span class="keyword">let</span> delta = date1 - date2;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 小于/大于的比较</span></span><br><span class="line"><span class="keyword">let</span> greater = user1 &gt; user2;</span><br></pre></td></tr></table></figure>

<p><code>valueOf -&gt; toString</code></p>
<h4 id="default-未知状况"><a href="#default-未知状况" class="headerlink" title="default 未知状况"></a>default 未知状况</h4><p>例如 字符串+数字，是采用链接字符串，或数值相加，，这里说了一堆，大概意思是，default 可以视为和number 状况一致</p>
<h4 id="string-number-例子"><a href="#string-number-例子" class="headerlink" title="string+number 例子"></a>string+number 例子</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">  <span class="attr">money</span>: <span class="number">1000</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对于 hint=&quot;string&quot;</span></span><br><span class="line">  <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`&#123;name: &quot;<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>&quot;&#125;`</span>;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对于 hint=&quot;number&quot; 或 &quot;default&quot;</span></span><br><span class="line">  <span class="title function_">valueOf</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">money</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(user); <span class="comment">// toString -&gt; &#123;name: &quot;John&quot;&#125;</span></span><br><span class="line"><span class="title function_">alert</span>(+user); <span class="comment">// valueOf -&gt; 1000</span></span><br><span class="line"><span class="title function_">alert</span>(user + <span class="number">500</span>); <span class="comment">// valueOf -&gt; 1500 假设valueOf不存在，则采用toString()</span></span><br></pre></td></tr></table></figure>

<h3 id="运作方式总结"><a href="#运作方式总结" class="headerlink" title="运作方式总结"></a>运作方式总结</h3><p>为了进行转换，JavaScript 尝试查找并调用三个对象方法：</p>
<ol>
<li><p>调用 obj<a href="hint">Symbol.toPrimitive</a> 如果这个方法存在的话，</p>
</li>
<li><p>否则如果暗示是 “string”</p>
</li>
<li><p>尝试 obj.toString() 和 obj.valueOf()，无论哪个存在。</p>
</li>
<li><p>否则，如果暗示 “number” 或者 “default”</p>
</li>
<li><p>尝试 obj.valueOf() 和 obj.toString()，无论哪个存在。</p>
</li>
</ol>
<p>以上三个方法，不规定返回对应值，但一定要返回原始值[强制的]，[否则 有潜在递归可能性, 比如A.toString()返回类型A]</p>
<p>一点区别</p>
<p><code>toString/valueOf</code> 如果返回的不是原始值，则会被忽略该方法</p>
<p><code>Symbol.toPrimitive</code> 如果返回的不是原始值，则会报错被忽略该方法</p>
<h2 id="构造函数和操作符new"><a href="#构造函数和操作符new" class="headerlink" title="构造函数和操作符new"></a>构造函数和操作符new</h2><p>约定首字母大写…我们谈语法时别谈约定，可以说建议，如果代码一定要就eslint什么的搞一搞</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">user</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="comment">// this = &#123;&#125;; 隐方创建</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="comment">// return 2333; // 如果在过程中有return 会从这里停止，但是如果返回的是原始值(包括返回空),如这里的2333，则忽略这个值，返回this，如果返回值是object，则忽略this，返回object</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">fuckable</span> = <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">// return this; 隐式返回</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当一个函数作为<code>new user(...)</code> (没有参数时，可以省略括号)执行时，它执行以下步骤：</p>
<ol>
<li>一个新的空对象被创建并分配给 this。</li>
<li>函数体执行。通常它会修改 this，为其添加新的属性。</li>
<li>返回 this 的值!!!</li>
</ol>
<p>单次使用<code>x = new function()&#123; ... &#125;</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">User</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">new</span>.<span class="property">target</span>) &#123; <span class="comment">// 如果你没有运行 new</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(name); <span class="comment">// ...会为你添加 new</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> john1 = <span class="title class_">User</span>(<span class="string">&quot;John1&quot;</span>); <span class="comment">// 重新调用 new User</span></span><br><span class="line"><span class="keyword">let</span> john2 = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;John2&quot;</span>); <span class="comment">// 正常的使用方法</span></span><br></pre></td></tr></table></figure>

<p><strong>但是不建议这样做，这样会对代码的阅读造成困扰</strong></p>
<h2 id="Optional-chaining-‘-’-4-6"><a href="#Optional-chaining-‘-’-4-6" class="headerlink" title="Optional chaining ‘?.’ 4.6"></a>Optional chaining ‘?.’ 4.6</h2><p>觊觎这个很久了，感觉还是历史遗留问题的 半 优化，没有从根本上解决问题。</p>
<p>虽然感觉根本办法还是应该在 和 其它端交互时进行 强制的状态和空值处理，TS基本考虑100%上，然后可以考虑用protobuf替代json。</p>
<h1 id="数据类型-5"><a href="#数据类型-5" class="headerlink" title="数据类型 5"></a>数据类型 5</h1><p>吐槽：看到<code>IE 浏览器不支持这个方法</code>就想笑</p>
<p>基本类型</p>
<ol>
<li>Boolean</li>
<li>Null</li>
<li>Undefined</li>
<li>Number</li>
<li>String</li>
<li>Symbol (new in ECMAScript 6)</li>
</ol>
<p>基本类型在作为对象使用时，会临时创造一个包装对象，使用完后即销毁</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">a= <span class="number">3</span></span><br><span class="line">a.<span class="property">wasd</span>=<span class="function">()=&gt;</span><span class="number">233</span>; <span class="comment">//不会报错，因为a是基本类型，但是是放在上面说的临时对象上了</span></span><br><span class="line">a.<span class="title function_">wasd</span>();<span class="comment">// 报错 a.wasd不是function</span></span><br><span class="line">a.<span class="title function_">toFixed</span>(<span class="number">2</span>); <span class="comment">// 基本类型 带有一些基本的方法</span></span><br></pre></td></tr></table></figure>

<p>哎 js还不支持<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3499.html#SingleQuote">c++14支持的</a><code>a=1&#39;000&#39;000&#39;000</code>这种写法</p>
<p><code>toString(base)</code> 可以进行进制转换 <code>base</code> 取值<code>2-&gt;36</code></p>
<p>isNaN &#x2F; isFinite</p>
<p>之前看vuex源码时 ，看到很喜欢用new 来建立空的对象、数组什么的，难道是英文友好性，比如我一般写<code>a=[]</code>而他们可能就会写<code>a=new Array()</code></p>
<p>数组&#x3D;队列 支持 shift&#x2F;unshift (首部添加 慢)  和 pop&#x2F;push (尾部添加 较快)</p>
<p>数组引用的方式复制</p>
<p>遍历 <code>for i =0 -&gt; arr.length</code>, <code>for key in arr</code> (会迭代所有属性,这里说这还会慢..10-100倍 所以遍历数组通常不用forin), <code>for value of arr</code></p>
<p>性能测试:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>, len = <span class="number">10000000</span>;i &lt; len; i++)&#123;</span><br><span class="line">  arr.<span class="title function_">push</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foriadd</span>(<span class="params">my_arr</span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; my_arr.<span class="property">length</span>; i++)&#123;</span><br><span class="line">    sum += my_arr[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">forinadd</span>(<span class="params">my_arr</span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> my_arr)&#123;</span><br><span class="line">    sum += my_arr[key];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">forofadd</span>(<span class="params">my_arr</span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> val <span class="keyword">of</span> my_arr)&#123;</span><br><span class="line">    sum += val;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">timeTest</span>(<span class="params">func,my_arr,str</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> start_time = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span><br><span class="line">  <span class="title function_">func</span>(my_arr);</span><br><span class="line">  <span class="keyword">let</span> end_time = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(str,(end_time - start_time).<span class="title function_">toString</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">timeTest</span>(foriadd,arr,<span class="string">&#x27;foriadd&#x27;</span>); <span class="comment">// 17</span></span><br><span class="line"><span class="title function_">timeTest</span>(forinadd,arr,<span class="string">&#x27;forinadd&#x27;</span>); <span class="comment">// 3702 之所以慢 据说因为会引起和string之间的转换</span></span><br><span class="line"><span class="title function_">timeTest</span>(forofadd,arr,<span class="string">&#x27;forofadd&#x27;</span>); <span class="comment">// 150</span></span><br></pre></td></tr></table></figure>

<p>修改数组时，length 属性会自动更新。准确来说，它实际上不是数组里元素的个数，而是最大的数字索引值加一。(慎用)</p>
<p>length 属性的另一个有意思的点是它是可写的。把它变小，数组真的可以变短，所以可以用arr.length&#x3D;0来清空..(为什么这里说这是清空数组的最好的方法？？？？？)…….. 危险的语言</p>
<p><strong>警告</strong> new Array(xxxx), 当xxxx是字符obj等东西的时候 实际创建的是 包含对应元素的数组，而是数字时，表示的是 对应长度的空数组</p>
<p>delete arr[1]; &#x2F;&#x2F; 如果arr的长度为5(大于2),会删除index&#x3D;&#x3D;1的元素，但是 不会把后面的向前移动，也不会影响length</p>
<p>arr.splice(index[,deleteCount,elem1,…,])</p>
<p><code>-1</code>的index 表示从尾部计算</p>
<p>还有支持简单参数的slice，</p>
<p>….说这么多 ，简单的说 数组别乱玩,</p>
<p>一些concat函数等就不说了，要用啥查啥</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//map</span></span><br><span class="line"><span class="keyword">let</span> result = arr.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">item, index, array</span>) &#123;</span><br><span class="line">  <span class="comment">// 返回新值而不是当前元素</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// sort</span></span><br><span class="line">[<span class="number">1</span>, -<span class="number">2</span>, <span class="number">15</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">8</span>].<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a, b</span>) &#123; <span class="comment">// 更建议箭头函数 ,返回正负零，不是true/false,类似c++ qsort接受的函数指针</span></span><br><span class="line">  <span class="title function_">alert</span>( a + <span class="string">&quot; &lt;&gt; &quot;</span> + b );</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// reduce , previousValue — 是前一个函数调用的结果，第一次调用是初始化。</span></span><br><span class="line"><span class="keyword">let</span> value = arr.<span class="title function_">reduce</span>(<span class="keyword">function</span>(<span class="params">previousValue, item, index, arr</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;, initial);</span><br></pre></td></tr></table></figure>

<p>判断一个变量是否是数组，不要用typeof，用Array.isArray()</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">find</span>(func, thisArg);</span><br><span class="line">arr.<span class="title function_">filter</span>(func, thisArg);</span><br><span class="line">arr.<span class="title function_">map</span>(func, thisArg);</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// thisArg 是可选的最后一个参数</span></span><br></pre></td></tr></table></figure>

<p>表示比较函数用的 2号参数，也就是 比较过程中采用<code>func(数组中的元素,thisArg);</code></p>
<p>可迭代对象(Iterables)</p>
<p>一个含有 [Symbol.iterator] key的对象，<a href="https://zh.javascript.info/iterable">实例</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="attr">x</span>:<span class="number">1</span>,y=<span class="number">2</span>&#125;;</span><br><span class="line">a[<span class="title class_">Symbol</span>.<span class="property">iterator</span>] = <span class="keyword">function</span>(<span class="params"></span>) &#123; <span class="keyword">return</span> &#123;<span class="attr">current</span>:<span class="variable language_">this</span>.<span class="property">x</span>,<span class="attr">last</span>:<span class="variable language_">this</span>.<span class="property">y</span>,<span class="title function_">next</span>(<span class="params"></span>)&#123; <span class="keyword">return</span> &#123;<span class="attr">done</span>:<span class="literal">false</span>,<span class="attr">value</span>:<span class="variable language_">this</span>.<span class="property">current</span>&#125;; &#125;&#125;; &#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>需要<code>Symbol.iterator</code></li>
<li>该函数返回值是个object (迭代器)，该object需要带有next()方法</li>
<li>next方法回传一个迭代器 <code>&#123;done:Boolean,value:any&#125;</code> 的形式，这样就可以支持，<code>for...of</code></li>
</ol>
<p>学过c++的就可以类比看看vector，string和它们的迭代器</p>
<p>Array.from(XXX) 方法从一个类似数组或可迭代对象中创建一个新的数组实例。</p>
<p>Map 可以用 对象作为key(区别于普通Object)………嗯嗯 好了好了  我知道了,说得c++好像不能用指针作为key一样</p>
<p>map的key比较是采用<code>===</code>, 然后map的set可以链式操作，因为返回本体</p>
<p><code>键值数组-&gt;new Map()-&gt;变为map</code></p>
<p><code>map/obj-&gt; Object.entries() -&gt; 变为键值数组</code> for..of会默认使用entries</p>
<p>js有Set, 迭代for..of 和 set.forEach</p>
<p>WeakMap&#x2F;WeakSet 忽略内存回收的依赖检测</p>
<p>这里说的适用场景，是有主对象控制区，在辅助非必要信息区域可以采用WeakMap来存</p>
<p>比如</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> weakMap = <span class="keyword">new</span> <span class="title class_">WeakMap</span>();</span><br><span class="line"><span class="title class_">WeakMap</span>.<span class="title function_">set</span>(obj,<span class="string">&quot;xxx&quot;</span>) <span class="comment">// obj位置的参数不能用原始类型</span></span><br><span class="line">obj = <span class="literal">null</span>; <span class="comment">// obj 会被回收，也会从weakMap从消失，而如果把WeakMap换成Map，则因为，还能在map中找到不会被回收</span></span><br></pre></td></tr></table></figure>

<p><code>map.keys()</code> 返回的是迭代器不是 数组，用Array.from(map.keys())可以转化成数组</p>
<p>对于obj，Object.keys(obj)来返回<code>数组</code>，而不是迭代器</p>
<p>Object.keys&#x2F;values&#x2F;entries (), 忽略Symbol类型的属性</p>
<p>数组&#x2F;可迭代对象解构</p>
<p><code>let [a,b,c..] = arr/可迭代对象; // 自动分配到a,b,c</code></p>
<p><code>let [,,a,b,c..] = arr/可迭代对象; // 忽略前两个值</code></p>
<p><code>let [a,b,...rest] = arr/可迭代对象; // rest接受剩余元素</code></p>
<p>对象解构</p>
<p><code>let &#123;key1,key2&#125; = &#123;key1:...,key2:...&#125;</code> 以key配对，不是顺序</p>
<p><code>let &#123;key1:var1,key2:var2&#125; = &#123;key1:...,key2:...&#125;</code> 目标变量的写法</p>
<p><code>let &#123;key1= 100,key2:var2&#125; = &#123;key1:...,key2:...&#125;</code> 缺省值写法</p>
<p>严格模式下，先let后解构，外部加括号包起来</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> title, width, height;</span><br><span class="line">(&#123;title, width, height&#125; = &#123;<span class="attr">title</span>: <span class="string">&quot;Menu&quot;</span>, <span class="attr">width</span>: <span class="number">200</span>, <span class="attr">height</span>: <span class="number">100</span>&#125;);</span><br></pre></td></tr></table></figure>

<p>还有嵌套解构……..我觉得还行，感觉这也算得上半结构化了</p>
<p>然后函数传参可以用默认值+ 等于号的python里常看到的方法，假设有定义<code>f(x=1,y=3,z=4)&#123;&#125;</code>, 调用<code>f(z=233)</code></p>
<p>函数还可以写成 <code>f(&#123;a=1,b=7,c=3&#125;)&#123;&#125;</code>, 然后调用<code>x=&#123;b=2&#125;;f(x)</code></p>
<p>这一块来说就很是灵活好用易读的感觉了</p>
<p><code>date.get你希望改变的时间维度()+数值</code></p>
<p>Date.now()相当于 new Date().getTime(), 只会创建时间戳，性能友好 更快！</p>
<p>浏览器方法performance.now() 微秒数</p>
<p>JSON 相关，内部不应该有循环引用</p>
<p><code>JSON.stringify(value [,replacer(替换函数设置),space(空格缩进换行符设置) ])</code></p>
<p><code>JSON.stringify(value ,[指定属性1,指定属性2,...])</code></p>
<p>replacer : function(key,value) {return 替换值;}</p>
<p>toJson 函数可以重写，用于被解析</p>
<p>目前非标准的<a href="https://json5.org/">https://json5.org/</a> 支持注释，无引号的键 !!</p>
<p><code>JSON.parse(data,function(key,value)&#123;return 定制化value;&#125;)，可以进行定制化处理</code></p>
<h1 id="Advanced-working-with-functions-6"><a href="#Advanced-working-with-functions-6" class="headerlink" title="Advanced working with functions 6"></a>Advanced working with functions 6</h1><h2 id="任意长度参数-Rest-参数与-Spread-语法-6-2"><a href="#任意长度参数-Rest-参数与-Spread-语法-6-2" class="headerlink" title="任意长度参数  Rest 参数与 Spread 语法 6.2"></a>任意长度参数  Rest 参数与 Spread 语法 6.2</h2><p><code>function f(...args)&#123;&#125;</code> &#x2F;&#x2F; 注意… 必须放在列表尾</p>
<p>或者通过内置的arguments访问(旧式的，这里没说不建议用)</p>
<p>箭头函数是没有 “arguments”,箭头函数内访问arguments等同于访问其外部非箭头函数的arguments</p>
<p>三点展开<code>a=[2,3,3]; f(...a);</code>&#x2F;&#x2F; 展开a并调用f,可以放在句中, 展开和for .. of 采用相同展开对象</p>
<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>变量环境</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">                                                        <span class="comment">//     3</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">makeCounter</span>(<span class="params"></span>) &#123;                                <span class="comment">//     3</span></span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;                                        <span class="comment">//   2 3</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;                                   <span class="comment">// 1 2 3</span></span><br><span class="line">    <span class="keyword">return</span> count++; <span class="comment">// has access to the outer counter  // 1 2 3</span></span><br><span class="line">  &#125;;                                                    <span class="comment">// 1 2 3</span></span><br><span class="line">&#125;                                                       <span class="comment">//   2 3</span></span><br><span class="line">                                                        <span class="comment">//     3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> counter = <span class="title function_">makeCounter</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>( <span class="title function_">counter</span>() ); <span class="comment">// 0</span></span><br><span class="line"><span class="title function_">alert</span>( <span class="title function_">counter</span>() ); <span class="comment">// 1</span></span><br><span class="line"><span class="title function_">alert</span>( <span class="title function_">counter</span>() ); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<p>JavaScript中的所有函数都是闭包</p>
<p>if for等的花括号内的 都有此法环境</p>
<p>在旧的脚本中，我们可以找到一个所谓的『立即调用函数表达式』（简称为 IIFE）用于此目的。</p>
<p><code>(function()&#123; /*.CODE HERE.*/; &#125;)()</code></p>
<p>除此以外还有方式</p>
<p><code>(function()&#123; /*.CODE HERE.*/; &#125;())</code></p>
<p><code>!function()&#123; /*.CODE HERE.*/; &#125;()</code></p>
<p><code>+function()&#123; /*.CODE HERE.*/; &#125;()</code></p>
<p>垃圾回收 与 闭包</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> value = <span class="title class_">Math</span>.<span class="title function_">random</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">g</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// 注释掉这一句查看变化</span></span><br><span class="line">    <span class="keyword">debugger</span>; <span class="comment">// 在控制台中输入 alert( value );没有该值！</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">h</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> [g,h];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [g,h] = <span class="title function_">f</span>();</span><br><span class="line"><span class="title function_">g</span>();</span><br><span class="line"><span class="title function_">h</span>();</span><br></pre></td></tr></table></figure>

<p>通过上面的实验可以看到，</p>
<p>在有第一个console的时候，我们可以在debugger的位置访问到value，没有的这个console则则不行，也就是这里可以看到js预测下的优化，省略掉一些认为不存在的值,</p>
<p>因为我们的h在g函数之后，还能够访问value，但是g的位置在注释掉第一个console则访问不到，说明这个地方并不是value被回收了，而是，value没有被传入</p>
<p>用 var 声明的变量（不建议 不建议 不建议），不是函数范围就是全局的，它们在块内是可见的。也就是花括号 不会限制var， var 在函数开始时执行，不论声明位置，甚至是这样[所有函数内的var的声明 都会被提升到顶部，但是赋值的顺序不会变]</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">  phrase = <span class="string">&quot;Hello&quot;</span>; <span class="comment">// (*)</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> phrase;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">alert</span>(phrase);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>真的被使用了吗？如果你有疑问，可以去掉if以及var，你会发现在全局可以访问phrase，而加上if和var后，全局是访问不到phrase的，也就是说创建的是函数内的phrase，也就是var真的被执行了！！</p>
<p>在全局下使用let以后，这个变量也不是全局，只是”根”下可访问</p>
<p>全局的使用<code>window.XMLHttpRequest</code>检测类型，iframe 的正确窗口获取变量</p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>函数的<code>.name</code>能得到函数名<code>a =function()&#123;&#125;; b=&#123;c()&#123;&#125;&#125;; a.name;b.c.name;</code></p>
<p>而很多函数也没有函数名，<code>d=&#123;e:function()&#123;&#125;&#125;;d.e.name; l=b.c;</code>&#x2F;&#x2F; 最后这种赋值函数指针会带上函数名一起复制</p>
<p>函数的<code>.length</code>表示接受的参数个数,其中<code>...args</code>在计数中被忽略</p>
<p>函数可以加上属性XD有时用来代替闭包</p>
<p>如下的func秀啊</p>
<ol>
<li>它允许函数在内部引用自己。</li>
<li>它在函数外是不可见的。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sayHi = <span class="keyword">function</span> <span class="title function_">func</span>(<span class="params">who</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (who) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">`Hello, <span class="subst">$&#123;who&#125;</span>`</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">func</span>(<span class="string">&quot;Guest&quot;</span>); <span class="comment">// 使用 func 再次调用自己 而不要使用sayHi，因为这里来说func不可变 sayHi是可变的</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">sayHi</span>(); <span class="comment">// Hello, Guest</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 但这个无法生效</span></span><br><span class="line"><span class="title function_">func</span>(); <span class="comment">// Error, func is not defined（在函数外不可见）</span></span><br></pre></td></tr></table></figure>

<p>嗯。。。。感觉这种就是个函数指针类似的玩法咯</p>
<p>可以还奶了一口jQuery和lodash</p>
<p>可以这样创建 函数，一下所有字段都是字符串 XD</p>
<p><code>let func = new Function ([arg1[, arg2[, ...argN]],] functionBody)</code></p>
<p>比如使用场景是，从服务器获取动态函数</p>
<p>但是new Function不论在哪里创建， 所指向的词法环境是全局，从一定程度上强迫写出好代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;return a + b&#x27;</span>); <span class="comment">// 基础语法</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&#x27;a,b&#x27;</span>, <span class="string">&#x27;return a + b&#x27;</span>); <span class="comment">// 逗号分隔</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&#x27;a , b&#x27;</span>, <span class="string">&#x27;return a + b&#x27;</span>); <span class="comment">// 逗号和空格分隔</span></span><br></pre></td></tr></table></figure>

<h2 id="setTimeout-和-setInterval"><a href="#setTimeout-和-setInterval" class="headerlink" title="setTimeout 和 setInterval"></a>setTimeout 和 setInterval</h2><p>不在标准方法中不在规范中</p>
<p>取消调度</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> timerId = <span class="built_in">setTimeout</span>(...);</span><br><span class="line"><span class="built_in">clearTimeout</span>(timerId);</span><br><span class="line"><span class="title function_">alert</span>(timerId);</span><br></pre></td></tr></table></figure>

<p>弹窗会让 Chrome&#x2F;Opera&#x2F;Safari 内的时钟停止!!!!!!???? 我的chromium 执行setInterval 如果不点，等一会，会连续冒出alert啊,难道chrome也改了？？</p>
<p>setTimeout(…,0) 尽快，但是在当前代码执行完后紧接着执行</p>
<p>这里有一种slot+setTimeout0分割任务CPU占用方法</p>
<p>用 setTimeout 进行分割和没用这两种做法在速度方面平分秋色，总的<code>计数过程</code>所花的时间几乎没什么差别。我一个总耗时2s，一个总耗时8s，但是我把它们都 用nodejs去跑的确时间差不多，也就是8s的应该在过程中处理了其它事件耗时了</p>
<p>HTML5 标准 所言：“经过 5 重嵌套之后，定时器运行间隔强制要求至少达到 4 毫秒”。服务端 JavaScript 就没这个限制了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> start = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line"><span class="keyword">let</span> times = [];</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> <span class="title function_">run</span>(<span class="params"></span>) &#123;</span><br><span class="line">  times.<span class="title function_">push</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>() - start); <span class="comment">// 保存上次调用的延时</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (start + <span class="number">100</span> &lt; <span class="title class_">Date</span>.<span class="title function_">now</span>()) <span class="title function_">alert</span>(times); <span class="comment">// 100 毫秒之后，显示延时信息</span></span><br><span class="line">  <span class="keyword">else</span> <span class="built_in">setTimeout</span>(run, <span class="number">0</span>); <span class="comment">// 没超过 100 毫秒则再进行调度</span></span><br><span class="line">&#125;, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<p>所有的调度方法都不能保证延时的准确性，所以在调度代码中，万不可依赖它。</p>
<h2 id="优化-amp-bug-fix"><a href="#优化-amp-bug-fix" class="headerlink" title="优化 &amp; bug fix"></a>优化 &amp; bug fix</h2><p>缓存包装函数，耗时久，但是输入输出稳定的，大量相同输入访问的函数的通用包装函数，见原文实现</p>
<p><code>func.call(context,...args)</code> 解决包装后上下文丢失没有this</p>
<p><code>func.apply(context,args)</code> 解决 多参数为一个数组</p>
<p><code>func(1,2,3) ≈ func.call(context,1,2,3) ≈ func.apply(context,[1,2,3])</code></p>
<p>&#x2F;&#x2F; 这里是外部再接受一个自定义hash函数来对多参数计算一个key,arguments本身不是数组，不过可以<code>[].join.call(arguments)</code>来拼接</p>
<p>下面几个装饰器 任务 挺有用</p>
<p>对于延迟的this丢失 处理</p>
<p><code>let newFunc = func.bind(thecontextyouwant)</code> 通过bind 指定this,只能bind一次，多次bind，第2次及以后的会被忽略</p>
<p><code>lodash 中的 _.bindAll(obj)。</code>批量绑定</p>
<p>另一种方案就是箭头函数了</p>
<p>偏函数,函数的封装&#x3D;.&#x3D; lodash 大法好啊 有对应的<code>_.partial</code></p>
<p>柯里化 把调用形式<code>f(a,b,c)</code>变为<code>f(a)(b)(c)</code>形式 lodash <code>_.curry</code> 用lodash的封装，柯里化之后 原来调用方法 依然正常运行：也可以柯里化格式调用</p>
<p>高级柯里化<code>https://github.com/lodash/lodash/blob/4.1.1-npm-packages/lodash.curry/index.js</code></p>
<h1 id="对象、类和继承-7-amp-8"><a href="#对象、类和继承-7-amp-8" class="headerlink" title="对象、类和继承 7&amp;8"></a>对象、类和继承 7&amp;8</h1><p>对象属性除<code>value</code>外还有三个特殊属性（所谓的“标志”）：</p>
<ol>
<li>writable — 如果为 true，则可以修改，否则它是只读的。</li>
<li>enumerable — 如果是 true，则可在循环中列出，否则不列出。for … in</li>
<li>configurable — 如果是 true，则此属性可以被删除，相应的特性也可以被修改，否则不可以。使属性不可配置是一条单行道。我们不能把它改回去.非严格模式 写入被忽略，严格模式报错</li>
</ol>
<p><code>Object.getOwnPropertyDescriptor(obj, propertyName);</code> 方法允许查询有关属性的完整信息。</p>
<p><code>Object.defineProperty(obj, propertyName, descriptor)</code> 可以修改标识</p>
<p>上面的两个方法均有带s的 多元素方法</p>
<p>如果用for..in复制对象，会忽略symbolic属性，这样可以 获取所有属性(“更好”的克隆)</p>
<p>还有一些属性(实践中不常用的) 见原文了</p>
<p><code>set v()&#123;return val;&#125;</code> &amp;&amp; <code>get v(val)&#123;return this.xxx=val;&#125;</code> 可以只有其中一个， 意味着只读或只写</p>
<p>属性可以是“数据属性”或“访问器属性”，但不能同时属于两者。</p>
<p>访问器没有value和writable属性，有的4个是</p>
<ol>
<li>get —— 一个没有参数的函数，在读取属性时工作，</li>
<li>set —— 带有一个参数的函数，当属性被设置时调用，</li>
<li>enumerable —— 与数据属性相同，</li>
<li>configurable —— 与数据属性相同。</li>
</ol>
<p>众所周知的协议，即以下划线<code>&quot;_&quot;</code>开头的属性是内部的，不应该从对象外部访问。eslint里没有 ，tslint有一种<code>member-access</code>的限制办法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="variable language_">this</span>, <span class="string">&quot;age&quot;</span>, &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br></pre></td></tr></table></figure>

<p>对象有一个特殊的隐藏属性 <code>Prototype</code> 值是null或是另一个引用对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> animal = &#123;</span><br><span class="line">  <span class="attr">eats</span>: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> rabbit = &#123;</span><br><span class="line">  <span class="attr">jumps</span>: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">rabbit.<span class="property">__proto__</span> = animal; <span class="comment">// (*)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// we can find both properties in rabbit now:</span></span><br><span class="line"><span class="title function_">alert</span>( rabbit.<span class="property">eats</span> ); <span class="comment">// true (**) 不存在属性 则从原型找，方法也是,原型也没有再一直向上直到找到或者遇到null</span></span><br><span class="line"><span class="title function_">alert</span>( rabbit.<span class="property">jumps</span> ); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>不能通过子的修改原型的数据属性，只会对子实体增加键，</p>
<p>而原型上的getters&#x2F;setters，会运行，但是不论能找到的值在哪，只要解析this，始终是最初的子实体,也就是this不受到原型影响</p>
<p>意味着<code>A</code>有写方法<code>W</code>，会写<code>this.X</code>,<code>B</code>继承于<code>A</code>，那么<code>B</code>执行<code>W</code>会调用<code>A</code>的<code>W</code>，但是写的<code>this.x</code>会写到<code>B</code>上</p>
<p>按照c++的一些理解的话，是 他们之间有继承关系，所以执行函数会去找函数表，当子类没有时，就去父的表里找，找到执行时，传入的实体还是 子类</p>
<p>即使是这样，下面也列出了一个 <code>错误/危险</code>的实现:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> hamster = &#123;</span><br><span class="line">  <span class="attr">stomach</span>: [],</span><br><span class="line"></span><br><span class="line">  <span class="title function_">eat</span>(<span class="params">food</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">stomach</span>.<span class="title function_">push</span>(food);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> speedy = &#123;</span><br><span class="line">  <span class="attr">__proto__</span>: hamster</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> lazy = &#123;</span><br><span class="line">  <span class="attr">__proto__</span>: hamster</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This one found the food</span></span><br><span class="line">speedy.<span class="title function_">eat</span>(<span class="string">&quot;apple&quot;</span>);</span><br><span class="line"><span class="title function_">alert</span>( speedy.<span class="property">stomach</span> ); <span class="comment">// apple</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// This one also has it, why? fix please.</span></span><br><span class="line"><span class="title function_">alert</span>( lazy.<span class="property">stomach</span> ); <span class="comment">// apple</span></span><br></pre></td></tr></table></figure>

<h2 id="函数原型"><a href="#函数原型" class="headerlink" title="函数原型"></a>函数原型</h2><p>设置 Rabbit.prototype &#x3D; animal 的这段代码表达的意思是：“当 new Rabbit 创建时，把它的 [[Prototype]] 赋值为 animal” 。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Rabbit</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 默认的 prototype</span></span><br><span class="line"><span class="comment">Rabbit.prototype = &#123; constructor: Rabbit &#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Rabbit</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="title class_">Rabbit</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123; <span class="comment">// 如果我们将整个默认原型替换掉，那么其中就不会有构造函数。</span></span><br><span class="line">  <span class="attr">jumps</span>: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> rabbit = <span class="keyword">new</span> <span class="title class_">Rabbit</span>();</span><br><span class="line"><span class="title function_">alert</span>(rabbit.<span class="property">constructor</span> === <span class="title class_">Rabbit</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>所以这个prototype，只是用于当一个 实例找不到对象key的时候，会去访问找个对象的原型(<code>.prototype</code>)的对应对象key，相当于用于记录的父类的一个属性，</p>
<p><code>__proto__</code>（实例上原型上都有，指向它的原型的<code>.prototype</code>）和<code>.prototype</code> (一般在原型上)的关系</p>
<p><a href="https://stackoverflow.com/questions/9959727/proto-vs-prototype-in-javascript">https://stackoverflow.com/questions/9959727/proto-vs-prototype-in-javascript</a></p>
<p><img data-src="https://i.stack.imgur.com/UfXRZ.png" alt="protovsprototype"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">( <span class="keyword">new</span> <span class="title class_">Foo</span> ).<span class="property">__proto__</span> === <span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">( <span class="keyword">new</span> <span class="title class_">Foo</span> ).<span class="property"><span class="keyword">prototype</span></span> === <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure>

<ol>
<li>Object.create(proto[, descriptors]) —— 利用 proto 作为 [[Prototype]] 和可选的属性描述来创建一个空对象。</li>
<li>Object.getPrototypeOf(obj) —— 返回 obj 对象的 [[Prototype]]。</li>
<li>Object.setPrototypeOf(obj, proto) —— 将 obj 对象的 [[Prototype]] 设置为 proto。</li>
</ol>
<p>潜在问题，如果我们的Object存的是用户提供的键值对，那么<code>__proto__</code>将会被忽略或其它错误，办法是使用Map，或者极简单的对象<code>let obj = Object.create(null)</code>，它的prototype是null,缺点则是没有默认的toString方法</p>
<p>属性描述器定义出来的是不可枚举的</p>
<p>ES6的class语法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">User</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">User</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------------</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123; <span class="comment">// 必须与new 关键字一起使用</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125; <span class="comment">// 不需要逗号</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">staticMethod</span>(<span class="params"></span>) &#123; <span class="comment">// 静态方法 等同于写 User.staticMethod = ....</span></span><br><span class="line">    <span class="title function_">alert</span>(<span class="variable language_">this</span> === <span class="title class_">User</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// -------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;John&quot;</span>);</span><br><span class="line">user.<span class="title function_">sayHi</span>();</span><br></pre></td></tr></table></figure>

<p><code>super.</code>访问父类中的方法或些元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">speed</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rabbit</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, earLength</span>) &#123; <span class="comment">// 会报错,在 JavaScript 中，“派生类的构造函数”与所有其他的构造函数之间存在区别。在派生类中，相应的构造函数会被标记为特殊的内部属性 [[ConstructorKind]]:&quot;derived&quot;。</span></span><br><span class="line">    <span class="comment">// 正确写法在这里调用 super(name)</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">speed</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">earLength</span> = earLength;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不生效！</span></span><br><span class="line"><span class="keyword">let</span> rabbit = <span class="keyword">new</span> <span class="title class_">Rabbit</span>(<span class="string">&quot;White Rabbit&quot;</span>, <span class="number">10</span>); <span class="comment">// Error: this is not defined.</span></span><br></pre></td></tr></table></figure>

<p>不同点就在于:</p>
<p>当一个普通构造函数执行时，它会创建一个空对象作为 this 并继续执行。</p>
<p>但是当派生的构造函数执行时，它并不会做这件事。它期望父类的构造函数来完成这项工作。</p>
<p>A 是基于 B, B 基于 C，</p>
<p>在调用时候this不变，不会在原型链上找所有,只会调用原型链上的第一个，所以如果写法都是this，可能导致无限递归</p>
<blockquote>
<p>[[HomeObject]] 特殊外部属性</p>
</blockquote>
<p>这个绑定是永久的，内置的，会绑定到父类。因此这是一个非常重要的语言变化。</p>
<p>只有调用<code>super.XXX</code>时才会被使用，所以不会破坏兼容性，解决上面this不会变导致无限循环的bug</p>
<p>在这种情况下，类中的 <code>func()&#123;&#125;</code>写法和<code>func:function()&#123;&#125;</code>写法就不同了，后面一种冒号的写法不会绑定<code>[[HomeObject]]</code></p>
<p>替换构造函数，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 内置函数会使用它作为构造函数</span></span><br><span class="line"><span class="keyword">static</span> get [<span class="title class_">Symbol</span>.<span class="property">species</span>]() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Array</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后的例子很有价值看一看，<code>class X&#123;&#125;</code> vs <code>class X extends Object&#123;&#125;</code></p>
<ol>
<li>用了extends的派生类 必须调用super</li>
<li>用了extends相当于设置了<code>Rabbit.prototype.__proto__ = Object.prototype</code></li>
<li>用了extends相当于设置了<code>Rabbit.__proto__ = Object)</code>;</li>
</ol>
<p>如果没有<code>extends</code>的该处不会被设置,即无法访问静态方法<code>Rabibit.getOwnPropertyNames()</code>报错,其<code>.__proto__ = Function.prototype</code></p>
<p><img data-src="https://zh.javascript.info/task/class-extend-object/rabbit-extends-object@2x.png" alt="pic"></p>
<p><code>xxx instanceof 某类</code>检查一个变量实体是不是 属于一个类,改语法会在原型链上检测</p>
<p>该方法可以指定,设置 <code>static [Symbol.hasInstance](obj)&#123;&#125;</code>自定义检测方法</p>
<p>如果没有<code>[Symbol.hasInstance]</code>方法，那么实际的比较过程就是</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">obj.<span class="property">__proto__</span> === <span class="title class_">Class</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">obj.<span class="property">__proto__</span>.<span class="property">__proto__</span> === <span class="title class_">Class</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">obj.<span class="property">__proto__</span>.<span class="property">__proto__</span>.<span class="property">__proto__</span> === <span class="title class_">Class</span>.<span class="property"><span class="keyword">prototype</span></span></span><br></pre></td></tr></table></figure>

<p>实际的调用可以看做是<code>类.prototype.isPrototypeOf(obj)</code>,可以看做这个调用,所以如果<code>prototype</code>被修改，即使<code>__proto__</code>没被改，<code>rabbit instanceof Rabbit</code>会返回false</p>
<p>也可以用<code>toString</code>来做类型识别，<code>let arr=[];alert(arr.toString())</code>,或者</p>
<p><code>objectToString = Object.prototype.toString;alert(objectToString.call(arr))</code></p>
<p>对于自动以class，可以写<code>[Symbol.toStringTag]</code>字段来改变<code>toString()</code>的输出</p>
<p>这样的话 就比typeof更强大(支持自定义),甚至可以带上更多自定义信息，替代<code>instanceof</code></p>
<table>
<thead>
<tr>
<th></th>
<th>实例a</th>
<th>类名A</th>
<th>Function</th>
<th>Object</th>
</tr>
</thead>
<tbody><tr>
<td><code>__proto__</code></td>
<td>等于它来源类的<code>prototype</code>,如果是Object.create(实例b)来的，则指向实例b</td>
<td><code>Object.__proto__</code> , 如果是 class extends B创建的 则等于<code>B</code></td>
<td>见下</td>
<td>见下</td>
</tr>
<tr>
<td><code>prototype</code></td>
<td>无</td>
<td>它自己的prototype,相反的方向Foo.prototype.constructor &#x3D;&#x3D;&#x3D; Foo</td>
<td>见下</td>
<td>Object的prototype</td>
</tr>
<tr>
<td><code>prototype.__proto__</code></td>
<td>无</td>
<td>Object.prototype</td>
<td>Object.prototype</td>
<td>null</td>
</tr>
</tbody></table>
<p><code>Function.__proto__ === Function.prototype === Object.__proto__ !== Object.prototype</code></p>
<table>
<thead>
<tr>
<th></th>
<th>用于</th>
<th>返回</th>
</tr>
</thead>
<tbody><tr>
<td>typeof</td>
<td>基本数据类型</td>
<td>string</td>
</tr>
<tr>
<td>{}.toString</td>
<td>基本数据类型、内置对象以及包含 Symbol.toStringTag 属性的对象</td>
<td>string</td>
</tr>
<tr>
<td>instanceof</td>
<td>任意对象</td>
<td>true&#x2F;false</td>
</tr>
</tbody></table>
<h3 id="Mixin-模式-9-7"><a href="#Mixin-模式-9-7" class="headerlink" title="Mixin 模式 9.7"></a>Mixin 模式 9.7</h3><p>单继承模式有时会对人进行限制，所以有了mixin，能同时实现支持多个类的方法实现</p>
<p>根据维基百科的定义，mixin 是一个包含许多供其它类使用的方法的类，而且这个类不必是其它类的父类。</p>
<p>换句话说，一个 mixin 提供了许多实现具体行为的方法，但是我们不单独使用它，我们用它来将这些行为添加到其它类中。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// mixin</span></span><br><span class="line"><span class="keyword">let</span> sayHiMixin = &#123;<span class="comment">// mixin自身内部可以使用继承</span></span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">`Hello <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">sayBye</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">`Bye <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用法：</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拷贝方法</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(<span class="title class_">User</span>.<span class="property"><span class="keyword">prototype</span></span>, sayHiMixin);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在 User 可以说　hi 了</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;Dude&quot;</span>).<span class="title function_">sayHi</span>(); <span class="comment">// Hello Dude!</span></span><br></pre></td></tr></table></figure>

<p><code>User.mixinfunction()</code>-&gt;首先通过User的prototype找到<code>User.prototype</code>,在调用<code>mixinfunction</code>时，因为mixin的类有自己的<code>[[HomeObject]]</code>所以如果有super，则会沿着<code>mixin</code>去找，而不是user</p>
<p>事件订阅mixin</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> eventMixin = &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 订阅事件，用法：</span></span><br><span class="line"><span class="comment">   *  menu.on(&#x27;select&#x27;, function(item) &#123; ... &#125;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="title function_">on</span>(<span class="params">eventName, handler</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">_eventHandlers</span>) <span class="variable language_">this</span>.<span class="property">_eventHandlers</span> = &#123;&#125;;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">_eventHandlers</span>[eventName]) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_eventHandlers</span>[eventName] = [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_eventHandlers</span>[eventName].<span class="title function_">push</span>(handler);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 取消订阅，用法：</span></span><br><span class="line"><span class="comment">   *  menu.off(&#x27;select&#x27;, handler)</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">off</span>(<span class="params">eventName, handler</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> handlers = <span class="variable language_">this</span>.<span class="property">_eventHandlers</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">_eventHandlers</span>[eventName];</span><br><span class="line">    <span class="keyword">if</span> (!handlers) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; handlers.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (handlers[i] === handler) &#123;</span><br><span class="line">        handlers.<span class="title function_">splice</span>(i--, <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 触发事件并传递参数</span></span><br><span class="line"><span class="comment">   *  this.trigger(&#x27;select&#x27;, data1, data2);</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">trigger</span>(<span class="params">eventName, ...args</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">_eventHandlers</span> || !<span class="variable language_">this</span>.<span class="property">_eventHandlers</span>[eventName]) &#123;</span><br><span class="line">      <span class="keyword">return</span>; <span class="comment">// 对应事件名没有事件处理函数。</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用事件处理函数</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_eventHandlers</span>[eventName].<span class="title function_">forEach</span>(<span class="function"><span class="params">handler</span> =&gt;</span> handler.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="异常try…catch…finally-10-1"><a href="#异常try…catch…finally-10-1" class="headerlink" title="异常try…catch…finally 10.1"></a>异常try…catch…finally 10.1</h3><p>catch到的</p>
<p>name -&gt; 异常名称</p>
<p>message -&gt; 详情描述</p>
<p>stack -&gt; 用于调试的</p>
<p>建议的:throw</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> error = <span class="keyword">new</span> <span class="title class_">Error</span>(message);</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">let</span> error = <span class="keyword">new</span> <span class="title class_">SyntaxError</span>(message);</span><br><span class="line"><span class="keyword">let</span> error = <span class="keyword">new</span> <span class="title class_">ReferenceError</span>(message);</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>

<p>catch 应该只捕获已知的异常，而重新抛出其他的异常。</p>
<p><code>try -&gt; catch -&gt; finally。</code>或者<code>try -&gt; finally</code></p>
<p>缺少catch时, <code>try-finally-&gt;throw err</code></p>
<blockquote>
<p>自定义错误</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ValidationError</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Error</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">message</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(message); <span class="comment">// (1)</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;ValidationError&quot;</span>; <span class="comment">// (2)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PropertyRequiredError</span> <span class="keyword">extends</span> <span class="title class_ inherited__">ValidationError</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">property</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(<span class="string">&quot;No property: &quot;</span> + property);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;PropertyRequiredError&quot;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">property</span> = property;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当代码越来越大，对于每个层次应该有专门的处理和转换</p>
<h2 id="Error-10-2"><a href="#Error-10-2" class="headerlink" title="Error 10.2"></a>Error 10.2</h2><p>其实是warning，但是写warning 可能没人看</p>
<p>现代的 JavaScript 引擎会做很多优化。相对于「正常情况」，它们可能会改变「人为测试」的结果，特别是我们度量的目标很细微。因此，如果你想好好了解一下性能，请学习 JavaScript 引擎的工作原理。在那之后，你可能再也不需要微度量了。</p>
<p>关于 V8 引擎的大量文章，点击：<a href="http://mrale.ph/">http://mrale.ph</a>.</p>
<h2 id="Generator-and-Promise"><a href="#Generator-and-Promise" class="headerlink" title="Generator and Promise"></a>Generator and Promise</h2><p>我分别有写笔记</p>
<h2 id="Module-简介"><a href="#Module-简介" class="headerlink" title="Module 简介"></a>Module 简介</h2><p>AMD — 最古老的模块系统之一，最初由 require.js 库实现。</p>
<p>CommonJS — 为 Node.js 服务器创建的模块系统。</p>
<p>UMD — 另外一个模块系统，建议作为通用的模块系统，它与 AMD 和 CommonJS 都兼容</p>
<p><code>&lt;script type=&quot;module&quot;&gt;</code>和旧浏览器的nomodule</p>
<p>模块代码仅在第一次导入时被解析, 生成导出，然后它被分享给所有对其的导入，所以如果某个地方修改了 admin 对象，其他的模块也能看到这个修改。</p>
<h2 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h2><h1 id="感谢-1"><a href="#感谢-1" class="headerlink" title="感谢"></a>感谢</h1><p><a href="https://zh.javascript.info/">https://zh.javascript.info</a></p>
<p>有精力的朋友还是建议读上面链接,如果它们的文档有帮助，也建议购买它们的 epub&#x2F;pdf 作为支持</p>
<p>本文是基于我C++的熟练，和一定时间js使用后的阅读知识补充整理,章节分化基本和上面链接的内容对应</p>
<p>该篇是对应上述链接的第二部分</p>
<h1 id="Document-1"><a href="#Document-1" class="headerlink" title="Document 1"></a>Document 1</h1><p>运行时 鸟瞰图</p>
<p><img data-src="https://zh.javascript.info/article/browser-environment/windowObjects.png" alt="鸟瞰图"></p>
<!-- more -->

<p>文档对象模型 DOM : document <a href="https://dom.spec.whatwg.org/">https://dom.spec.whatwg.org/</a></p>
<p>开发人员必须为每个浏览器编写不同的代码。那是昏暗、混乱的时代。</p>
<p>现在尽管有两个组在做document，但它们99%是相似的</p>
<p>当我们修改文档的样式规则时，CSSOM 与 DOM 一起使用。但实际上，很少需要 CSSOM，因为通常 CSS 规则是静态的。 <a href="https://www.w3.org/TR/cssom-1/">https://www.w3.org/TR/cssom-1/</a></p>
<p>BOM(HTML规范的一部分):例如包括 <a href="https://html.spec.whatwg.org/">https://html.spec.whatwg.org</a></p>
<p>navigator,提供有关浏览器和操作系统的背景信息。</p>
<p>location允许读取和重定向URL</p>
<p>Mozilla 手册 <a href="https://developer.mozilla.org/en-US/search">https://developer.mozilla.org/en-US/search</a></p>
<p>DOM:</p>
<p><code>#text</code>永远是 DOM中的叶子节点</p>
<p><a href="https://zh.javascript.info/dom-nodes">https://zh.javascript.info/dom-nodes</a></p>
<p>看这个举例，你会发现，比你预期的的#text会多更多,不过好在是这些都是#text，都是叶子节点，在过滤时只要规则正确，不会被过滤到</p>
<p>下面举例说如果你把各个<code>&lt;html&gt;</code>，<code>&lt;body&gt;</code>等之间的空格回车都去掉，那它们生成的dom树就不再会有多余的#text</p>
<p>开发者工具中的 DOM 结构已经过简化。文本节点仅以文本形式显。根本没有“空白”（只有空格）的文本节点</p>
<p>历史原因:</p>
<ol>
<li>由于历史原因，<code>&lt;head&gt;</code> 之前的空格和换行符被忽略，</li>
<li>如果我们在 <code>&lt;/body&gt;</code> 之后放置了一些东西，那么它会自动移动到 <code>body</code> 内部，因为 <code>HTML</code> 规范要求所有内容必须位于 <code>&lt;body&gt;</code> 内。所以 <code>&lt;/body&gt;</code> 后面可能没有空格。</li>
</ol>
<p>自动修正【看看，更多的还是应该保证 正确的编写</p>
<p>表格是一个有趣的“特例”。按照 <code>DOM</code> 规范，它们必须具有 <code>&lt;tbody&gt;</code>，但 <code>HTML</code> 文本可能（官方的）忽略它。然后浏览器自动在 <code>DOM</code> 中创建 <code>&lt;tbody&gt;</code>。</p>
<p>有12个节点类型，常用的就是你F12能看到的<code>document</code>，元素节点，文本节点,和注释</p>
<p><a href="http://software.hixie.ch/utilities/js/live-dom-viewer/">http://software.hixie.ch/utilities/js/live-dom-viewer/</a></p>
<blockquote>
<p>以前也没系统的看过chrome的控制台方法 官方文档 TODO: <a href="https://developers.google.com/web/tools/chrome-devtools/">https://developers.google.com/web/tools/chrome-devtools/</a></p>
</blockquote>
<p>现在最后选中的元素可以用 $0 来进行操作，以前选择的是 $1，如此等等。</p>
<p>我们可以在它们之上运行命令。例如，$0.style.background &#x3D; ‘red’ 使选定的列表项变成红色，</p>
<p>inspect(node)来从命令行，反过去找document中的元素</p>
<p>DOM 结构</p>
<p><img data-src="https://zh.javascript.info/article/dom-navigation/dom-links.png" alt="DOM"></p>
<p><code>document.body</code>,<code>document.head</code></p>
<p>在DOM中用<code>===null</code>判断节点不存在</p>
<p><code>childNodes</code>一个类似数组的个迭代集合只读,引用(实时的), <code>===.firstChild</code>, <code>===.lastChild</code>,<code>.hasChildNodes()</code></p>
<p><code>.previousSibling</code>,<code>.nextSibling</code></p>
<p>如果希望忽略文本和注释节点，只访问元素节点</p>
<p><img data-src="https://zh.javascript.info/article/dom-navigation/dom-links-elements.png" alt="DOM"></p>
<p>table支持更多的东西[感觉这部分主要是了解，因为 实际编写中，现在主流框架，基本很少需要进行原生元素的操作了[github说没用任何框架除外</p>
<p><code>.getElementsBy*</code>:<code>Id</code>,<code>TagName</code>,<code>Name</code>,<code>ClassName</code></p>
<p><code>.querySelectorAll()</code> ,<code>querySelector</code>,<code>.matches</code>,<code>.closest</code>(最近祖先匹配) 都是css相关的调用 方法 </p>
<p><strong>注意</strong>！ <code>getElementsBy*</code>返回的是 一个实时会变动的集合，而<code>querySelectorAll</code>返回的是一个<code>static</code>的</p>
<p>场景:</p>
<ol>
<li><p>获取元素</p>
</li>
<li><p>改变元素</p>
</li>
<li><p>操作元素 [如果用的<code>querySelectorAll</code>得到的，那么可能和当前真是的元素不一致]</p>
</li>
</ol>
<p>原文上给了几个操作的一个总结表[感觉因为现在基本都是框架就不整理进来了]</p>
<p><img data-src="https://zh.javascript.info/article/basic-dom-node-properties/dom-class-hierarchy.png" alt="DOM节点类"></p>
<p><a href="https://dom.spec.whatwg.org/#interface-node">Node</a></p>
<p><code>Node</code> 是实现了DOM树上的节点方法，父，子，前后节点等</p>
<p><code>Element</code> 是DOM元素的基类,在Node之上，提供了<code>.*Element.*</code>,<code>query*</code></p>
<p><code>.nodeType == </code> 检查，是不是,元素节点，文本节点，document对象</p>
<p><code>.nodeName</code>(Node定义) 和<code>.tagName</code>(Element的节点) 总是全大写</p>
<p><code>.innerHTML</code>字符串html,<code>.outerHTML</code> , 相对于<code>.innerHTML</code>会多一层外层的包裹,注意到这些都是指针式的操作，所以outerHTML改完以后，不应该继续使用</p>
<p><code>.data</code>可以获取<code>.nodeValue/data</code>文本节点内容</p>
<p><code>.textContent</code>纯文本 [安全的！也就是不担心元素注入]</p>
<p><code>.hidden</code>是否可见 等同于<code>display:none;</code></p>
<p>除此以外，特例</p>
<p><code>input</code>,<code>select</code>,<code>textarea</code>都有<code>.value</code></p>
<p><code>a</code>有<code>href</code></p>
<p><code>id</code></p>
<h1 id="事件简介-2"><a href="#事件简介-2" class="headerlink" title="事件简介 2"></a>事件简介 2</h1><h1 id="UI事件-3"><a href="#UI事件-3" class="headerlink" title="UI事件 3"></a>UI事件 3</h1><h1 id="表单，控件-4"><a href="#表单，控件-4" class="headerlink" title="表单，控件 4"></a>表单，控件 4</h1><h1 id="加载文档和其他资源-5"><a href="#加载文档和其他资源-5" class="headerlink" title="加载文档和其他资源 5"></a>加载文档和其他资源 5</h1><h1 id="杂项-6"><a href="#杂项-6" class="headerlink" title="杂项 6"></a>杂项 6</h1><hr>
<h1 id="MORE"><a href="#MORE" class="headerlink" title="MORE"></a>MORE</h1><h2 id="Task-x2F-MicroTask"><a href="#Task-x2F-MicroTask" class="headerlink" title="Task&#x2F;MicroTask"></a>Task&#x2F;MicroTask</h2><p><a href="https://javascript.info/event-loop">https://javascript.info/event-loop</a></p>
<p>同步</p>
<p>Task: script标签加载完，一个用户事件如Click,一个setTimeout</p>
<p>MicroTask: MutationObserver callbacks,例如promise的callback 或 await以后</p>
<p>看规范 <a href="https://tc39.es/ecma262/#sec-jobs">https://tc39.es/ecma262/#sec-jobs</a></p>
<p>Host environments are not required to treat Jobs uniformly with respect to scheduling. For example, web browsers and Node.js treat Promise-handling Jobs as a higher priority than other work; future features may add Jobs that are not treated at such a high priority.</p>
<p>其实只严格FIFO</p>
]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>oiTerminal</title>
    <url>/Blog/19-05-03-oiTerminal/</url>
    <content><![CDATA[<p><a href="https://github.com/CroMarmot/oiTerminal">oiTerminal</a></p>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>能够通过命令行 打oj比赛</p>
<h1 id="开发进度"><a href="#开发进度" class="headerlink" title="开发进度"></a>开发进度</h1><ul>
<li>codeforces 已经完全支持 分析题目，上传，获取评测结果</li>
<li>其它oj准备开工</li>
</ul>
<p> 对任意oj都支持本地的代码测试了</p>
<h1 id="相关项目"><a href="#相关项目" class="headerlink" title="相关项目"></a>相关项目</h1><p><a href="https://github.com/xalanq/cf-tool">cf-tool</a></p>
<p><a href="https://github.com/endiliey/idne">idne</a></p>
<p><a href="https://github.com/CroMarmot/cfterminal">cfTerminal</a></p>
<p><a href="https://github.com/VirtualJudge/spider">spider</a></p>
<h1 id="开发过程中的一些想法"><a href="#开发过程中的一些想法" class="headerlink" title="开发过程中的一些想法"></a>开发过程中的一些想法</h1><p>首先 cfTerminal 是基于idne开发的</p>
<span id="more"></span>

<p>而本仓库也是收到 spider 启发而开发的</p>
<h2 id="idne-gt-cfTerminal"><a href="#idne-gt-cfTerminal" class="headerlink" title="idne -&gt; cfTerminal"></a>idne <code>-&gt;</code> cfTerminal</h2><p>robobrower 把我们需要的浏览器模拟完成了，感谢！这也是这个仓库运行起来的体验比oiTerminal稳定，实际是因为网络环境不太好的时候，oiTerminal会报网络错误</p>
<p>idne 上次阅读有些久了，没太多印象了。</p>
<ol>
<li><p>大概有重排列一下它的代码，修复了time使用的问题，修复了不能提交比赛时代码的问题。</p>
</li>
<li><p>idne 有一个缺点是，用户每次都要多输入很多信息，以及每次都需要运行“环境命令”,通过从用户使用的角度反向思考，改动了接受的参数，并且通过复制脚本省去环境命令</p>
</li>
<li><p>如果使用过idne，你可以发现，结果文件都放在项目根目录了，既没有.gitignore,也感觉有点乱。解决的方法是 全丢到dist文件夹里，并且让<code>config.json</code>不进版本，所以创造了模板<code>_config.json</code></p>
</li>
<li><p>解决了一下 新出的题目名，原来都是单字母，现在出现了 <code>D1</code>,<code>D2</code>这种题目名</p>
</li>
<li><p>原来是靠拼接字符串生成的测试shell脚本XD，然后我改成了 接受参数的通用shell脚本</p>
</li>
<li><p>简化了依赖，虽然不必要，用argparse代替click,毕竟原来就稍微用了一下</p>
</li>
<li><p>把上面 复制测试和提交文件，改为了 用软链接。</p>
</li>
<li><p>设计了language.json 简单键值对，可以 控制来做多语言</p>
</li>
</ol>
<p>然后这样可用度很高了，我就没啥动力继续改下去了。</p>
<h2 id="spider-gt-oiTerminal"><a href="#spider-gt-oiTerminal" class="headerlink" title="spider -&gt; oiTerminal"></a>spider -&gt; oiTerminal</h2><p>本身spider那个项目就是一个支持很多oj的项目</p>
<p>感觉我主要做的是删代码XD，然后移动代码。</p>
<ol>
<li><p>首先还是说毕竟本身不是用于打比赛的，我把题目分析样例数据和测试的部分移动了过来</p>
</li>
<li><p>我想尽力 支持跨平台用py代替sh，但实际代码中还有调用linux命令的，例如cat，例如diff，XD，不过我转念一想，现在不是都有ubuntu on windows了吗，还有啥支持原生windows的必要，2333 现在是py不是sh了</p>
</li>
<li><p>做一些用户使用的工具，目前新做的中最有用的就是<code>lang.py</code>可以查看本地支持的语言，和远程的语言键值对(用于配置)</p>
</li>
<li><p>因为这边是基于一个Base设计的，我在第一轮修改的时候，也没有大改，主要增加我需要的功能为主</p>
</li>
<li><p>这里没有用特殊的浏览器，这里就靠纯获取+bs4来提取页面。</p>
</li>
<li><p>这里说是有cookie优化，实际只有提交部分有，并没有做本地cookie存储，未来可能会支持？</p>
</li>
<li><p>加个thread 分析题目，就几道题 也快不了多少</p>
</li>
<li><p>后来我想的还是再增加几个我想打的平台，所以要先大改一下结构。</p>
</li>
<li><p>我遇到的一个问题，有些操作可能大多平台都有，但是从性质上来说的访问层级不是很适合在公共层级。比如判断提交结果，我的想法是，要么放在最接近用户交互的层次上，要么放在具体实现里，总之不要放在用户和具体实现的中间共用交互中。还没有写更多oj支持，还不知道这样的想法是更好还是更遭</p>
</li>
<li><p>第二是属性归类，和方法外置，比如结果是对是错，不要放在contest层，应该直接丢在result 的model里，而判断丢在外层，写入丢在具体实现</p>
</li>
<li><p>上面几个问题是，层级划分 和 重复代码的处理如果出现冲突应该怎么办。我的另一个支援的办法是，更多model，增加type hint,增加与层级无关的util，比如像原本提供的网络访问，我还提供了 oj名字 类名，支持的类，lang的接近静态获取的类</p>
</li>
<li><p>做一些常量提取，还没完成，还有一些残留</p>
</li>
<li><p>尝试增加自动化测试，首先是以前没有相关经验，还不知道多少合适，已经调通过一次，但是遵循 建议先 测试样例，后代码的写法，写得我反而更难受了，测过了一波后，决定先放弃，还是先纯编码的方式。最后再补上测试</p>
</li>
<li><p>受到cf-tool的启发，考虑动态获取结果，因为cf的api不会获取进度，所以要么分析网页(idne之前用过类似的)，要么就通过websocket却获取,暂时未实现</p>
</li>
<li><p>受到cf-tool的启发，决定之后采用更舒适的配置方式？ 去增加一个config.py, 尚未实现，也就有考虑是否有必要加入sqlite，还是继续json</p>
</li>
<li><p>在json设计读取中 采用 类和json之间转换，减少字符串操作。</p>
</li>
<li><p>感觉cf-tool的自动更新，没必要</p>
</li>
<li><p>atcoder的题目名称和url真的毒瘤XD TODO</p>
</li>
<li><p>还要再增加 problem.py支持</p>
</li>
<li><p>其中有一点体验是，你其实是要把各种不同的oj，接入进来再开放给用户调用你的接口，所以在公用部分，我的设计喜欢尽量松（Base部分），因为如果把实现具体化到各个OJ里，那么最多也就重复代码多，不太会因为未来OJ的特殊改动原来其它OJ的代码，如果放在更表层（也不是Base），大概是Core的部分，那么这里可以大不了加一点if处理一下特殊情况。总之觉得在Base处丢过多东西总是不太妥当,毕竟我无法预知未来的OJ的格式</p>
</li>
</ol>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>crawler</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>从 angular generate 看 分化想法</title>
    <url>/Blog/19-06-06-angular/</url>
    <content><![CDATA[<h1 id="从-angular-generate-看-分化想法"><a href="#从-angular-generate-看-分化想法" class="headerlink" title="从 angular generate 看 分化想法"></a>从 angular generate 看 分化想法</h1><p>参考原文</p>
<p>英文:<a href="https://angular.io/cli/generate">https://angular.io/cli/generate</a></p>
<p>中文:<a href="https://angular.cn/cli/generate">https://angular.cn/cli/generate</a></p>
<h2 id="支持的-generate"><a href="#支持的-generate" class="headerlink" title="支持的 generate"></a>支持的 generate</h2><ul>
<li>appShell</li>
<li>application</li>
<li>class</li>
<li>component</li>
<li>directive</li>
<li>enum</li>
<li>guard</li>
<li>interface</li>
<li>library</li>
<li>module</li>
<li>pipe</li>
<li>service</li>
<li>serviceWorker</li>
<li>universal</li>
</ul>
<span id="more"></span>

<h2 id="appShell"><a href="#appShell" class="headerlink" title="appShell"></a>appShell</h2><p>Generates an app shell for running a server-side version of an app.</p>
<p>服务端 shell app</p>
<h2 id="application"><a href="#application" class="headerlink" title="application"></a>application</h2><p>Generates a new basic app definition in the “projects” subfolder of the workspace.</p>
<p>在projects文件夹中 新的基础app</p>
<h2 id="class"><a href="#class" class="headerlink" title="class"></a>class</h2><p>新的通用class</p>
<h2 id="interface"><a href="#interface" class="headerlink" title="interface"></a>interface</h2><p>ts 的知识点范畴了&#x3D;.&#x3D;，ts大法好啊</p>
<p>和class 的区别是 接口</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="attr">age</span>: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> implements <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>等价于</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: string;</span><br><span class="line">    <span class="attr">age</span>: number;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="component"><a href="#component" class="headerlink" title="component"></a>component</h2><p>感觉上就是angular1 的directive，也就是 DOM+逻辑</p>
<p><a href="https://angular.io/api/core/Component">https://angular.io/api/core/Component</a></p>
<p>从官方的文档上来看，它是继承 下面的directive的</p>
<p>从我的体验上来说，它是视觉上，最常用的，你的每一个重复的，不重复的，需要封装一下的，都会用到它</p>
<h2 id="directive"><a href="#directive" class="headerlink" title="directive"></a>directive</h2><p><a href="https://angular.io/api/core/Directive">https://angular.io/api/core/Directive</a></p>
<p>分化很有趣，我的理解是，分离了 具体的实体组件，和组件行为，</p>
<p>假设我们有 两个不同组件，点击时都要背景变红，那么原来有写法，两个组件都引入相同的js</p>
<p>而有了directive后，我们可以实现一个背景变红的directive，在你需要这个效果的具体实例上加上，即可,可以看做它是一个寄生者，而只需要在需要的宿主上加上它</p>
<h2 id="enum"><a href="#enum" class="headerlink" title="enum"></a>enum</h2><p>枚举量,主要是typescript那一套,尽量用枚举量取代 常量！</p>
<h2 id="guard"><a href="#guard" class="headerlink" title="guard"></a>guard</h2><p><a href="https://angular.io/api/router">https://angular.io/api/router</a></p>
<p>route guard 路由保护,有什么用呢，目前看到的一个实用的用途 是 角色管理+页面控制，当用户的角色不能访问某些页面的时候阻止路由的一些访问</p>
<p>p.s. 想起以前写angular1的时候我的leader一个大佬，有自己通过实现角色管理来控制页面的可见性，orz</p>
<h2 id="library"><a href="#library" class="headerlink" title="library"></a>library</h2><p>和Application不同 library 不会生成 index.html, styles.css, polyfills.ts, main.ts. library 是一个可复用组件的集合 包含 components,services,directives 等.</p>
<h2 id="module"><a href="#module" class="headerlink" title="module"></a>module</h2><p>A module is simply a way of defining how these elements work both internally and externally.</p>
<p>大概层级是 application &gt; library &gt; module</p>
<p>NgModule</p>
<h2 id="pipe"><a href="#pipe" class="headerlink" title="pipe"></a>pipe</h2><p><a href="https://angular.io/guide/pipes">https://angular.io/guide/pipes</a></p>
<p>主要用途页面文字渲染，举例如把时间戳转换为 <code>年-月-日</code> 进行展示，angular默认有一些pipes</p>
<h2 id="service"><a href="#service" class="headerlink" title="service"></a>service</h2><p><a href="https://angular.io/docs/ts/latest/api/core/InjectableMetadata-class.html">https://angular.io/docs/ts/latest/api/core/InjectableMetadata-class.html</a></p>
<p>个人体验，主要请求数据，单例服务等等会用到</p>
<h2 id="serviceWorker"><a href="#serviceWorker" class="headerlink" title="serviceWorker"></a>serviceWorker</h2><p><a href="https://angular.io/guide/service-worker-intro">https://angular.io/guide/service-worker-intro</a></p>
<p>简单的说，在浏览器上运行，拦截http请求，从而改善网络访问体验。 对于版本更新，它也能去做保持 不会仅有部分模块是新的，其它不是新的，而可能引发的相互不兼容。</p>
<p>和渐进式一起用</p>
<h2 id="universal"><a href="#universal" class="headerlink" title="universal"></a>universal</h2><p><a href="https://angular.io/guide/universal">https://angular.io/guide/universal</a></p>
<p>SSR服务端渲染，在服务端生成静态的应用页面</p>
<p>相比于普通的来说，是在客户端渲染。</p>
<h1 id="总结-闲谈"><a href="#总结-闲谈" class="headerlink" title="总结+闲谈"></a>总结+闲谈</h1><p>使用理由等见官方页面&#x3D;.&#x3D; 每次开始写 都感觉无拘无束真好，但每次到了项目大了，还是会觉得工程化真香，[最大的实例理由，看看spring</p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>Angular2+</tag>
      </tags>
  </entry>
  <entry>
    <title>TDD 测试驱动开发</title>
    <url>/Blog/19-06-10-TDD/</url>
    <content><![CDATA[<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.cigniti.com/blog/7-best-practices-for-agile-test-driven-development/">https://www.cigniti.com/blog/7-best-practices-for-agile-test-driven-development/</a></p>
<p><a href="https://www.freecodecamp.org/news/test-driven-development-what-it-is-and-what-it-is-not-41fa6bca02a2/">https://www.freecodecamp.org/news/test-driven-development-what-it-is-and-what-it-is-not-41fa6bca02a2/</a></p>
<h1 id="避免过于复杂的函数"><a href="#避免过于复杂的函数" class="headerlink" title="避免过于复杂的函数"></a>避免过于复杂的函数</h1><p>保持每个函数 自扫门前雪,与团队讨论保证每个测试用例覆盖了所有期望的函数功能</p>
<h1 id="聚焦于你真正需要实现的"><a href="#聚焦于你真正需要实现的" class="headerlink" title="聚焦于你真正需要实现的"></a>聚焦于你真正需要实现的</h1><p>测试用例要清晰描述 期望的 最终实现的功能，并按照这个原则编写。</p>
<h1 id="Maintain-code-austerity"><a href="#Maintain-code-austerity" class="headerlink" title="Maintain code austerity"></a>Maintain code austerity</h1><p>在通过测试样例的前提下，尽可能保持代码可读，可迭代。</p>
<h1 id="Test-repeatedly"><a href="#Test-repeatedly" class="headerlink" title="Test repeatedly"></a>Test repeatedly</h1><p>…编写过程中持续测试，CI等工具都可以</p>
<h1 id="Maintain-code-sanctity"><a href="#Maintain-code-sanctity" class="headerlink" title="Maintain code sanctity"></a>Maintain code sanctity</h1><p>用git，Jenkins等工具…….?????</p>
<h1 id="Application-knowledge"><a href="#Application-knowledge" class="headerlink" title="Application knowledge"></a>Application knowledge</h1><p>文档维护，</p>
<p>In TDD, coding needs to be limited but effective in that it achieves its purpose without breaking anything else. Also, the new code should ideally pass the test case in the very first run. Maintaining adequate system documentation, including a repository of test cases and engaging team members with good application knowledge can ensure a smooth and successful project execution.</p>
<h1 id="Know-when-to-use-TDD"><a href="#Know-when-to-use-TDD" class="headerlink" title="Know when to use TDD"></a>Know when to use TDD</h1><p>任何延长或复杂的测试都会破坏TDD的目的。</p>
<h1 id="TDD-rules"><a href="#TDD-rules" class="headerlink" title="TDD rules"></a>TDD rules</h1><ul>
<li><p>你不被允许编写任何让单元测试挂掉的代码</p>
</li>
<li><p>Write only enough of a unit test to fail.</p>
</li>
<li><p>Write only enough production code to make the failing unit test pass.</p>
</li>
</ul>
<p>就是说，不论是测试代码还是业务代码，都是足量，但又尽量少，【例子 红绿灯</p>
<h2 id="red-phase"><a href="#red-phase" class="headerlink" title="red phase"></a>red phase</h2><p>首先 写一些 用户会需要的 ’需求‘ 而不是 ’测试‘</p>
<p>所以 你考虑的角度是类似BDD(行为驱动开发)的,你会在开发前首先写代码，假设它已经完成了</p>
<p>这个阶段你需要考虑代码的出入参数 如何被使用，需要注意的是再该阶段 关注你核心需要的，而不是写大量的</p>
<h2 id="green-phase"><a href="#green-phase" class="headerlink" title="green phase"></a>green phase</h2><p>编码</p>
<p>注意的是，这部分主要关注的是按照 red phase部分的 代码，实现，在这部分，不需要过度关注 性能，代码复用，也不要改测试</p>
<p>代码的优化应该在todolist 或 重构的时候清理 整理</p>
<p>但你应该写 直接实现，且可迭代的代码</p>
<p>新的feature只要还没有测试，就不应该先实现</p>
<h2 id="refactor-phase"><a href="#refactor-phase" class="headerlink" title="refactor phase"></a>refactor phase</h2><p>代码抽象 去重 等等</p>
<h2 id="Final-considerations-Q-amp-A"><a href="#Final-considerations-Q-amp-A" class="headerlink" title="Final considerations Q&amp;A"></a>Final considerations Q&amp;A</h2><blockquote>
<p>TDD 需要很多 多于普通编码的时间</p>
</blockquote>
<p>当你熟练了 不会多很多，而在后续的持续开发中，将省时间</p>
<blockquote>
<p>需要写多少</p>
</blockquote>
<p>足够你测试开发的代码，的最少量，因为每个测试都会拖慢重构，但重构需要测试来支撑</p>
<blockquote>
<p>分析设计框架</p>
</blockquote>
<p>你依然需要，TDD无法替代，在TDD之前，应该先分析设计。</p>
<p>这个是我具体实践起来感觉 很重要也有难度的，如果你对业务和功能，没有实践过，那么你可能分析得设计得不全面，这样的情况下你的测试样例也实现的 有缺失。一个可能就是编码的过程可能发现测试不够，这样一个办法就是继续走cycle再改。而我之前的写python的实践时，就直接把测试ban掉了XD。还是走了先代码后测试的老路</p>
<blockquote>
<p>100% coverage</p>
</blockquote>
<p>不必，视图等常变的微量逻辑毫无必要写TDD测试</p>
<blockquote>
<p>TDD 在examples上 工作得号，但实际代码上 很多代码未被测试</p>
</blockquote>
<p>emmmmmmm….. 作者用TDD方法 写了一个俄罗斯方块</p>
<blockquote>
<p>TDD 谁来写</p>
</blockquote>
<p>这里的观点是TDD是开发写，而真正的<code>测试</code>是测试人员来写</p>
]]></content>
      <categories>
        <category>software</category>
      </categories>
      <tags>
        <tag>test</tag>
        <tag>TDD</tag>
      </tags>
  </entry>
  <entry>
    <title>material学习</title>
    <url>/Blog/19-06-11-material/</url>
    <content><![CDATA[<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://material.io/collections/developer-tutorials/#web">https://material.io/collections/developer-tutorials/#web</a></p>
<p>很早就有人说过了material，不过在那时，1是不太能阅读英文文档，2是没有实际的需要，也没有要用的想法，没有阅读</p>
<p>下面是个人整理 (大概需要的前置知识 node基本+html+js+css</p>
<h1 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h1><p>跨平台，好看的，google出的ui标准 </p>
<h1 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h1><p><code>git clone https://github.com/material-components/material-components-web-codelabs</code></p>
<p>安装所有ui</p>
<p><code>npm install material-components-web</code></p>
<p>从文档和操作上来看 需要做3件事</p>
<ol>
<li>引入css 如<code>@import &quot;@material/textfield/mdc-text-field&quot;;</code></li>
<li>在html的元素上 给对应的class</li>
<li>js里引入组件和 对相应元素进行处理,如下</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">MDCTextField</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@material/textfield&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> username = <span class="keyword">new</span> <span class="title class_">MDCTextField</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.username&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p>demo101 102里介绍了 输入框，按钮，图片，列表</p>
<p>然后103 介绍了一些，theme(例如主题颜色)，subtitle(typography),elevation(实际是阴影效果 用来让页面元素有高低感觉),<code>mdc-image-list--masonry</code>非等长图片排列</p>
<p>demo111 介绍了，如何对一个原来写过的原始工程，修改成Material Components的样式(基本就是 npm引入，js引入，css引入，换class，加js</p>
<p>demo112 介绍了一个react工程上 改为material components</p>
<p>最后 目前看下来 angular+material 最多star的是<a href="https://material.angular.io/">https://material.angular.io</a></p>
]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>Angular2+</tag>
        <tag>material design</tag>
      </tags>
  </entry>
  <entry>
    <title>vue声明式交互能力 &amp; vue3.0 进展</title>
    <url>/Blog/19-06-13-vue-declarative/</url>
    <content><![CDATA[<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.bilibili.com/video/av37345007?from=search&amp;seid=12943305398860809438">https://www.bilibili.com/video/av37345007?from=search&amp;seid=12943305398860809438</a></p>
<p><a href="https://www.bilibili.com/video/av55286346?from=search&amp;seid=13529674123410117444">https://www.bilibili.com/video/av55286346?from=search&amp;seid=13529674123410117444</a></p>
<h1 id="吹什么"><a href="#吹什么" class="headerlink" title="吹什么"></a>吹什么</h1><p>vue的 声明式写法，最常见讲是computed</p>
<p>比如<code>0 js代码</code> ，直接组件实现 阶乘，斐波那契数列的计算</p>
<p>和 命令式相比，</p>
<p>历史发展向讲解</p>
<p>就 应用程序 实体举例</p>
<p>跨语言啊交互举例 <a href="https://weex.apache.org/zh/docs/components/recycle-list.html">recycle-list</a></p>
<p>简单说 原来的命令式 比较常用的是 事件-&gt;执行的代码</p>
<p>现在 实现 大概是 数据 &#x3D; 构成来源</p>
<h1 id="vue3"><a href="#vue3" class="headerlink" title="vue3"></a>vue3</h1><p>chrome devTools 周活用户90万 &#x2F; react的160万</p>
<p>what’s target?</p>
<span id="more"></span>

<ul>
<li>更小</li>
<li>更快(重点)</li>
<li>加强TS支持(重点)</li>
<li>加强API设计一致性</li>
<li>提高自身可维护性</li>
<li>开放更多底层功能</li>
</ul>
<h2 id="更快"><a href="#更快" class="headerlink" title="更快"></a>更快</h2><p>数据变动检测:</p>
<p>Object.defineProperty -&gt; Proxy (es6)</p>
<hr>
<p>用TS重写了Virtual DOM</p>
<p>编译时优化</p>
<p>Slot 默认便以为函数</p>
<p>单例vnode工厂，设计一致的函数参数</p>
<p>vdom 监测 设计改动</p>
<p>原来是整个遍历，大多数情况16ms完成整个更新(传统情况)</p>
<p>react，难在 代码中 提取 究竟哪个数据变化会影响 函数重算 ，方案CPU时间分片</p>
<p>参考svelte框架， 强限制+静态编译<code>-&gt;</code>不需要virtual DOM 的代码，性能强,但 底线只能用模板,编译后代码体积大，但速度快</p>
<p>vue3:兼容2，手写render function,其次 最大化利用模板信息</p>
<p>直接 分析模板 把 动静结合 分离分析动态和静态的块[放弃可能存在的 原生js改动 html的检测？]</p>
<p>做的benchmark 约6x快</p>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><p>之前Class API …然后被放弃了</p>
<p>Function-based API 对比 Class API</p>
<ul>
<li>更好的TypeScript 类型推导，这样js写法 基本是 ts写法(不需要多余类型声明)</li>
<li>tree-shaking !!!!!!!!!!!!!!!!!效果更好,</li>
<li>写法 函数变量名更容易被压缩[编译优化]</li>
<li>逻辑复用:</li>
</ul>
<p> 2.0方案 Mixins(缺点 多mixins时，命名空间 模板 数据 来源不清晰,)</p>
<p>react: higher-order components 高阶组件(多个高阶组件 也有同样问题{命名空间冲突，数据来源不清晰，无额外的组件实例性能消耗})</p>
<p>作用域插槽:(没有命名空间冲突，数据来源清晰,额外的组件实例性能消耗) 如<code>v-slot</code></p>
<p>最新的 函数式 复用,+函数返回 解构,{没有命名空间冲突,数据来源清晰，无额外的组件实例性能消耗}</p>
<p>和 react Hooks 对比:</p>
<ul>
<li>vue 只在初始化时调用(值可追踪),没有闭包变量问题，没有 内存 gc压力问题</li>
</ul>
<h1 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h1><p><a href="https://segmentfault.com/a/1190000012794598?utm_source=tag-newest">tree-shaking</a></p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
        <tag>js</tag>
        <tag>vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack文档 阅读笔记</title>
    <url>/Blog/19-06-17-webpack/</url>
    <content><![CDATA[<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://webpack.js.org/concepts/">https://webpack.js.org/concepts/</a></p>
<p><strong>警告！虽然有<code>.com</code>的中文文档，但是存在没有更新文档的问题，不是webpack4版本的文档！！例如CommonsChunkPlugin已经被弃用，CleanWebpackPlugin的引入和使用方法不同版本不同</strong></p>
<h1 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h1><h2 id="入口entry"><a href="#入口entry" class="headerlink" title="入口entry"></a>入口entry</h2><p>对应配置中的<code>entry</code>属性</p>
<p>如<code>webpack.config.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./path/to/my/entry/file.js&#x27;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>常见 分离应用程序和三方库入口</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">entry</span>: &#123;</span><br><span class="line">    <span class="attr">app</span>: <span class="string">&#x27;./src/app.js&#x27;</span>,</span><br><span class="line">    <span class="attr">vendors</span>: <span class="string">&#x27;./src/vendors.js&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据经验：每个 HTML 文档只使用一个入口起点。多页面应用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">entry</span>: &#123;</span><br><span class="line">    <span class="attr">pageOne</span>: <span class="string">&#x27;./src/pageOne/index.js&#x27;</span>,</span><br><span class="line">    <span class="attr">pageTwo</span>: <span class="string">&#x27;./src/pageTwo/index.js&#x27;</span>,</span><br><span class="line">    <span class="attr">pageThree</span>: <span class="string">&#x27;./src/pageThree/index.js&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong> 以上都可以用<code>CommonsChunkPlugin</code>来优化公用代码</p>
<h2 id="输出output"><a href="#输出output" class="headerlink" title="输出output"></a>输出output</h2><p>在哪里输出所建立的bundles以及命名</p>
<span id="more"></span>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./path/to/my/entry/file.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;my-first-webpack.bundle.js&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>多个入口起点</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">entry</span>: &#123;</span><br><span class="line">    <span class="attr">app</span>: <span class="string">&#x27;./src/app.js&#x27;</span>,</span><br><span class="line">    <span class="attr">search</span>: <span class="string">&#x27;./src/search.js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;[name].js&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>: __dirname + <span class="string">&#x27;/dist&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>高级</p>
</blockquote>
<p>用hash或者 运行时path</p>
<h2 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h2><p>webpack 本身只理解js，</p>
<p>loader 可以 把所有类型 转换为 webpack可以处理 引用的模块</p>
<p><code>test</code>: 哪些文件应该被转换处理</p>
<p><code>use</code>: 转换应该使用哪个loader</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;my-first-webpack.bundle.js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.txt$/</span>, <span class="attr">use</span>: <span class="string">&#x27;raw-loader&#x27;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = config;</span><br></pre></td></tr></table></figure>

<p>例如<code>ts</code>和<code>css</code>的<code>loader</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save-dev css-loader</span><br><span class="line">npm install --save-dev ts-loader</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="attr">use</span>: <span class="string">&#x27;css-loader&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.ts$/</span>, <span class="attr">use</span>: <span class="string">&#x27;ts-loader&#x27;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>在上面use中也可以1个test，数组的use,</p>
<p>除了配置还有<code>import Styles from &#39;style-loader!css-loader?modules!./styles.css&#39;;</code>内联写法</p>
<p>和CLI写法<code>webpack --module-bind jade-loader --module-bind &#39;css=style-loader!css-loader&#39;</code>这样<code>.jade</code>和<code>.css</code>用不同的loader</p>
<h2 id="插件plugins"><a href="#插件plugins" class="headerlink" title="插件plugins"></a>插件plugins</h2><p>和loader相比，loader 主要用于转换某些类型的模块</p>
<p>而 plugins一般功能范围更广，从打包优化，压缩，一直到重新定义环境中的变量</p>
<p>例如</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>); <span class="comment">// 通过 npm 安装</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>); <span class="comment">// 用于访问内置插件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.txt$/</span>, <span class="attr">use</span>: <span class="string">&#x27;raw-loader&#x27;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;<span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span>&#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = config;</span><br></pre></td></tr></table></figure>

<p>定位 完成loader 无法实现的其它事</p>
<p>一个插件 是 具有apply方法的class，它的apply会被webpack compiler调用</p>
<p>配置使用：需要new</p>
<p>样例:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>); <span class="comment">//通过 npm 安装</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>); <span class="comment">//访问内置的插件</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./path/to/my/entry/file.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;my-first-webpack.bundle.js&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(js|jsx)$/</span>,</span><br><span class="line">        <span class="attr">use</span>: <span class="string">&#x27;babel-loader&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> webpack.<span class="property">optimize</span>.<span class="title class_">UglifyJsPlugin</span>(),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;<span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span>&#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = config;</span><br></pre></td></tr></table></figure>

<p>通过node主动 调用 webpack示例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>); <span class="comment">//访问 webpack 运行时(runtime)</span></span><br><span class="line"><span class="keyword">const</span> configuration = <span class="built_in">require</span>(<span class="string">&#x27;./webpack.config.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> compiler = <span class="title function_">webpack</span>(configuration);</span><br><span class="line">compiler.<span class="title function_">apply</span>(<span class="keyword">new</span> webpack.<span class="title class_">ProgressPlugin</span>());</span><br><span class="line"></span><br><span class="line">compiler.<span class="title function_">run</span>(<span class="keyword">function</span>(<span class="params">err, stats</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>


<h2 id="模式mode"><a href="#模式mode" class="headerlink" title="模式mode"></a>模式mode</h2><p>通过选择<code>development</code>或<code>production</code>之中的一个，来设置<code>mode</code>参数，你可以启用相应模式下的<code>webpack</code>内置的优化</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;production&#x27;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>或者从cli传递<code>webpack --mode=production</code></p>
<p>差异</p>
<p>建立不同的配置文件<code>webpack.development.config.js</code>和<code>webpack.production.config.js</code></p>
<h3 id="development"><a href="#development" class="headerlink" title="development"></a>development</h3><p>会将 <code>process.env.NODE_ENV</code> 的值设为 <code>development</code>。启用 <code>NamedChunksPlugin</code> 和 <code>NamedModulesPlugin</code>。</p>
<h3 id="production"><a href="#production" class="headerlink" title="production"></a>production</h3><p>会将 <code>process.env.NODE_ENV</code> 的值设为 <code>production</code>。启用 <code>FlagDependencyUsagePlugin</code>, <code>FlagIncludedChunksPlugin</code>, <code>ModuleConcatenationPlugin</code>, <code>NoEmitOnErrorsPlugin</code>, <code>OccurrenceOrderPlugin</code>, <code>SideEffectsFlagPlugin</code> 和 <code>UglifyJsPlugin</code>.</p>
<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>关于模块引入 分为3种</p>
<ol>
<li>绝对路径 </li>
<li>相对路径</li>
<li>模块路径，将在<code>resolve.modules</code> 中指定的所有目录内搜索，</li>
</ol>
<p>一旦根据上述规则解析路径后，解析器(resolver)将检查路径是否指向文件或目录。如果路径指向一个文件：</p>
<ul>
<li>如果路径具有文件扩展名，则被直接将文件打包。</li>
<li>否则，将使用 [resolve.extensions] 选项作为文件扩展名来解析，此选项告诉解析器在解析中能够接受哪些扩展名（例如 .js, .jsx）。</li>
</ul>
<p>如果路径指向一个文件夹，则采取以下步骤找到具有正确扩展名的正确文件：</p>
<ul>
<li>如果文件夹中包含 package.json 文件，则按照顺序查找 resolve.mainFields 配置选项中指定的字段。并且 package.json 中的第一个这样的字段确定文件路径。</li>
<li>如果 package.json 文件不存在或者 package.json 文件中的 main 字段没有返回一个有效路径，则按照顺序查找 resolve.mainFiles 配置选项中指定的文件名，看是否能在 import&#x2F;require 目录下匹配到一个存在的文件名。</li>
<li>文件扩展名通过 resolve.extensions 选项采用类似的方法进行解析。</li>
</ul>
<h2 id="manifest"><a href="#manifest" class="headerlink" title="manifest"></a>manifest</h2><p>在使用 webpack 构建的典型应用程序或站点中，有三种主要的代码类型：</p>
<ul>
<li>你或你的团队编写的源码。</li>
<li>你的源码会依赖的任何第三方的 library 或 “vendor” 代码。</li>
<li>webpack 的 runtime 和 manifest，管理所有模块的交互。</li>
</ul>
<p><code>__webpack_require__</code>+<code>manifest</code> 来做运行时模块检索</p>
<h2 id="target"><a href="#target" class="headerlink" title="target"></a>target</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> serverConfig = &#123;</span><br><span class="line">  <span class="attr">target</span>: <span class="string">&#x27;node&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;lib.node.js&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//…</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> clientConfig = &#123;</span><br><span class="line">  <span class="attr">target</span>: <span class="string">&#x27;web&#x27;</span>, <span class="comment">// &lt;=== 默认是 &#x27;web&#x27;，可省略</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;lib.js&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//…</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = [ serverConfig, clientConfig ];</span><br></pre></td></tr></table></figure>

<p>打分别服务端js和 网页端js</p>
<h2 id="模块热替换-hot-module-replacement"><a href="#模块热替换-hot-module-replacement" class="headerlink" title="模块热替换(hot module replacement)"></a>模块热替换(hot module replacement)</h2><p>webpack watch mode</p>
<p>webpack-dev-server</p>
<p>webpack-dev-middleware</p>
<p>…</p>
<h1 id="使用webpack"><a href="#使用webpack" class="headerlink" title="使用webpack"></a>使用webpack</h1><p>编写代码</p>
<p>配置<code>webpack.config.json</code></p>
<h1 id="webpack-cli"><a href="#webpack-cli" class="headerlink" title="webpack-cli"></a>webpack-cli</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i webpack-cli @webpack-cli/init</span><br><span class="line">npx webpack-cli init</span><br></pre></td></tr></table></figure>

<p>例如ts支持</p>
<p><code>npm install --save-dev typescript ts-loader</code></p>
<p>增加<code>tsconfig.json</code>文件</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist/&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;noImplicitAny&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es6&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;jsx&quot;</span><span class="punctuation">:</span> <span class="string">&quot;react&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;allowJs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>编辑<code>webpack.config.js</code></p>
<p>把<code>index.js</code>换为<code>index.ts</code></p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"> module.exports = &#123;</span><br><span class="line">   mode: &#x27;development&#x27;,</span><br><span class="line"><span class="deletion">-  entry: &#x27;./index.js&#x27;,</span></span><br><span class="line"><span class="addition">+  entry: &#x27;./index.ts&#x27;,</span></span><br><span class="line"> </span><br><span class="line">   output: &#123;</span><br><span class="line">     filename: &#x27;[name].[chunkhash].js&#x27;,</span><br></pre></td></tr></table></figure>

<p>在<code>module.exports.module.rules</code>增加</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">   module: &#123;</span><br><span class="line">     rules: [</span><br><span class="line"><span class="addition">+      &#123;</span></span><br><span class="line"><span class="addition">+        test: /\.tsx?$/,</span></span><br><span class="line"><span class="addition">+        use: &#x27;ts-loader&#x27;,</span></span><br><span class="line"><span class="addition">+        exclude: /node_modules/</span></span><br><span class="line"><span class="addition">+      &#125;,</span></span><br><span class="line">       &#123;</span><br><span class="line">         test: /.(js|jsx)$/,</span><br></pre></td></tr></table></figure>

<p>然后新建文件<code>index.ts</code></p>
<h1 id="plugins"><a href="#plugins" class="headerlink" title="plugins"></a>plugins</h1><p>用已有的就见文档了</p>
<p>说说自定义plugins:</p>
<p><a href="https://webpack.js.org/contribute/writing-a-plugin/#creating-a-plugin">https://webpack.js.org/contribute/writing-a-plugin/#creating-a-plugin</a></p>
<p>你需要实现</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyExampleWebpackPlugin</span> &#123;</span><br><span class="line">  <span class="comment">// Define `apply` as its prototype method which is supplied with compiler as its argument</span></span><br><span class="line">  <span class="comment">// 你需要一个带apply的类 或者说 prototype里有 apply方法</span></span><br><span class="line">  <span class="title function_">apply</span>(<span class="params">compiler</span>) &#123;</span><br><span class="line">    <span class="comment">// 在这里 监听 comipler的钩子并处理</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// https://webpack.js.org/api/plugins/#tapable</span></span><br><span class="line">    <span class="comment">// 这里的tap是同步函数 有替代函数 包括 tapAsync, tapPromise </span></span><br><span class="line">    compiler.<span class="property">hooks</span>[<span class="string">&quot;事件名称&quot;</span>].<span class="title function_">tap</span>(<span class="string">&#x27;你的插件名称&#x27;</span>,处理函数); <span class="comment">// 处理函数会传递 compilation</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//https://webpack.js.org/api/plugins/#custom-hooks</span></span><br><span class="line">    <span class="comment">// 也可以自定义同步钩子事件 require(&#x27;tapable&#x27;).SyncHook</span></span><br><span class="line">    <span class="comment">// https://github.com/webpack/tapable</span></span><br><span class="line">    compiler.<span class="property">hooks</span>.<span class="property">myCustomHook</span> = <span class="keyword">new</span> <span class="title class_">SyncHook</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]); <span class="comment">// 拟定的参数名</span></span><br><span class="line">    <span class="comment">// 调用自定义钩子</span></span><br><span class="line">    compiler.<span class="property">hooks</span>.<span class="property">myCustomHook</span>.<span class="title function_">call</span>(a, b, c);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关于所有hook可以看<code>https://webpack.js.org/api/compiler-hooks/</code> 也可以输出 <code>compiler.hooks</code>的key</p>
<p>Compiler 和 Compilation 源码</p>
<p><code>https://github.com/webpack/webpack/blob/master/lib/Compiler.js</code></p>
<p><code>https://github.com/webpack/webpack/blob/master/lib/Compilation.js</code></p>
<p>一个既有<code>compiler</code>也有<code>compilation</code>的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">HelloCompilationPlugin</span>(<span class="params">options</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">HelloCompilationPlugin</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">apply</span> = <span class="keyword">function</span>(<span class="params">compiler</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置回调来访问 compilation 对象：</span></span><br><span class="line">  compiler.<span class="title function_">plugin</span>(<span class="string">&quot;compilation&quot;</span>, <span class="keyword">function</span>(<span class="params">compilation</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 现在，设置回调来访问 compilation 中的步骤：</span></span><br><span class="line">    compilation.<span class="title function_">plugin</span>(<span class="string">&quot;optimize&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Assets are being optimized.&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h1 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h1><p>如果使用 init 生成，在填写entry point的时候不是文件夹，则在你生成的<code>webpack.config.js</code>的 loader的include有问题可能为<code>[]</code></p>
<p>例如实现代码见<code>~/.npm_global/lib/node_modules/@webpack-cli/init/node_modules/@webpack-cli/generators/utils/languageSupport.js</code>的 <code>getTypescriptLoader</code> 等的include实现，也就是<code>getEntryFolders</code>返回为空</p>
<p><code>https://github.com/webpack/webpack-cli/pull/817/files</code></p>
]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>RxJS文档 阅读笔记</title>
    <url>/Blog/19-06-27-rxjs/</url>
    <content><![CDATA[<h1 id="知识依赖"><a href="#知识依赖" class="headerlink" title="知识依赖"></a>知识依赖</h1><ol start="0">
<li>基本的js语法</li>
<li>基本的nodejs用法</li>
<li>Promise用法</li>
</ol>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>我想用nodejs直接跑rxjs，然而它并不支持es6的import，尝试了<code>--experimental-modules</code>依然有报错</p>
<h2 id="方案1-在线编辑器"><a href="#方案1-在线编辑器" class="headerlink" title="方案1 在线编辑器"></a>方案1 在线编辑器</h2><p><code>https://rxjs-dev.firebaseapp.com/guide/observable</code> 在上面代码点击右上角的<code>Edit in StackBlitx</code></p>
<h2 id="方案2-nodejs-rxjs-ES6"><a href="#方案2-nodejs-rxjs-ES6" class="headerlink" title="方案2 nodejs + rxjs + ES6"></a>方案2 nodejs + rxjs + ES6</h2><p><code>https://github.com/standard-things/esm</code></p>
<p>安装:<code>npm install esm rxjs</code></p>
<p>带上<code>esm</code>运行</p>
<p><code>node -r esm index.js</code></p>
<h2 id="方案3-webpack-rxjs-ES6"><a href="#方案3-webpack-rxjs-ES6" class="headerlink" title="方案3 webpack + rxjs + ES6"></a>方案3 webpack + rxjs + ES6</h2><p>创建文件夹 并初始化</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> rxjsdemo &amp;&amp; <span class="built_in">cd</span> rxjsdemo</span><br><span class="line">npx webpack-cli init</span><br></pre></td></tr></table></figure>

<p>这样选择</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">? Will your application have multiple bundles? No</span><br><span class="line">? Which will be your application entry point? index</span><br><span class="line">? In which folder do you want to store your generated bundles? dist</span><br><span class="line">? Will you use one of the below JS solutions? ES6</span><br><span class="line">? Will you use one of the below CSS solutions? No</span><br></pre></td></tr></table></figure>

<p>然后运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save-dev rxjs</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Subject</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; interval &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> subject = <span class="keyword">new</span> <span class="title class_">Subject</span>();</span><br><span class="line"></span><br><span class="line">subject.<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="function">(<span class="params">v</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`observerA: <span class="subst">$&#123;v&#125;</span>`</span>)</span><br><span class="line">&#125;);</span><br><span class="line">subject.<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="function">(<span class="params">v</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`observerB: <span class="subst">$&#123;v&#125;</span>`</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">subject.<span class="title function_">next</span>(<span class="number">1</span>);</span><br><span class="line">subject.<span class="title function_">next</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> observable = <span class="title function_">interval</span>(<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">const</span> subscription = observable.<span class="title function_">subscribe</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(x));</span><br></pre></td></tr></table></figure>

<p>运行<code>npm start</code>在打开的网页查看<code>console</code>是否正常输出， 忽略红字，能输出如下即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">observerA: 1</span><br><span class="line">observerB: 1</span><br><span class="line">observerA: 2</span><br><span class="line">observerB: 2</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="是个啥"><a href="#是个啥" class="headerlink" title="是个啥"></a>是个啥</h1><p>众所周知<code>Promise</code></p>
<p><code>Observable</code>可以看作一个更高级的<code>Promise</code></p>
<ul>
<li>Observable 返回值的个数为非负整数个，而Promise返回的个数为0或1个</li>
</ul>
<p>它说 Observables 不像 事件emitters也不像多个值的Promise， [虽然在某些使用下像</p>
<p>Observables are like functions with zero arguments, but generalize those to allow multiple values.</p>
<p>来源<code>https://subscription.packtpub.com/book/application_development/9781787120426/1/01lvl1sec7/a-brief-history-of-reactivex-and-rxjava</code></p>
<p>据说是2010年 微软一个大佬写的 <code>.NET</code>的一个框架,然后现在除了RxJs，还有Rx.Java,Rx.C++等等多语言支持</p>
<h1 id="Observables"><a href="#Observables" class="headerlink" title="Observables"></a>Observables</h1><h2 id="基本使用和对比"><a href="#基本使用和对比" class="headerlink" title="基本使用和对比"></a>基本使用和对比</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Observable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> foo = <span class="keyword">new</span> <span class="title class_">Observable</span>(<span class="function"><span class="params">subscriber</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello&#x27;</span>);</span><br><span class="line">  subscriber.<span class="title function_">next</span>(<span class="number">42</span>);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">foo.<span class="title function_">subscribe</span>(<span class="function"><span class="params">x</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">&#125;);</span><br><span class="line">foo.<span class="title function_">subscribe</span>(<span class="function"><span class="params">y</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(y);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Hello</span><br><span class="line">42</span><br><span class="line">Hello</span><br><span class="line">42</span><br></pre></td></tr></table></figure>

<ol>
<li>lazy计算</li>
<li>订阅 类似于调用函数，它们是分开的，不同的订阅的执行不共享(相对而言 事件emitters并不会根据 订阅者个数而决定事件个数)</li>
</ol>
<h2 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;before&#x27;</span>);</span><br><span class="line">foo.<span class="title function_">subscribe</span>(<span class="function"><span class="params">x</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;after&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>ok 它是同步的</p>
<p>其实Observable有能力 同步分发值，和异步分发值</p>
<h2 id="和函数区别，能return很多次值"><a href="#和函数区别，能return很多次值" class="headerlink" title="和函数区别，能return很多次值"></a>和函数区别，能return很多次值</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Observable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> foo = <span class="keyword">new</span> <span class="title class_">Observable</span>(<span class="function"><span class="params">subscriber</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello&#x27;</span>);</span><br><span class="line">  subscriber.<span class="title function_">next</span>(<span class="number">42</span>);</span><br><span class="line">  subscriber.<span class="title function_">next</span>(<span class="number">100</span>); <span class="comment">// &quot;return&quot; another value</span></span><br><span class="line">  subscriber.<span class="title function_">next</span>(<span class="number">200</span>); <span class="comment">// &quot;return&quot; yet another</span></span><br><span class="line">  <span class="comment">// 异步返回</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    subscriber.<span class="title function_">next</span>(<span class="number">300</span>); <span class="comment">// happens asynchronously</span></span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;before&#x27;</span>);</span><br><span class="line">foo.<span class="title function_">subscribe</span>(<span class="function"><span class="params">x</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;after&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><code>func.call()</code> 同步给我一个返回值<br><code>observable.subscribe()</code> 异步或同步 给我任意数量的值</p>
<h2 id="拆解-Observable"><a href="#拆解-Observable" class="headerlink" title="拆解 Observable"></a>拆解 Observable</h2><h3 id="创建-Observables"><a href="#创建-Observables" class="headerlink" title="创建 Observables"></a>创建 Observables</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Observable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> observable = <span class="keyword">new</span> <span class="title class_">Observable</span>(<span class="keyword">function</span> <span class="title function_">subscribe</span>(<span class="params">subscriber</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> id = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    subscriber.<span class="title function_">next</span>(<span class="string">&#x27;hi&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>以上是一个每秒向订阅者 发送<code>hi</code> 的<code>Observable</code></p>
<p>更常见的创建方式，是用创建函数<code>of</code>,<code>from</code>,<code>interval</code></p>
<h3 id="订阅-Observables"><a href="#订阅-Observables" class="headerlink" title="订阅 Observables"></a>订阅 Observables</h3><p>observable.subscribe(x &#x3D;&gt; console.log(x)); &#x2F;&#x2F; 相当于call了observable的函数</p>
<h3 id="执行-Observable"><a href="#执行-Observable" class="headerlink" title="执行 Observable"></a>执行 Observable</h3><p>可以调用的方法</p>
<p>Next 通知: 发送 数值，字符串，结构体</p>
<p>Error 通知: 发送一个 JavaScript Error or exception.</p>
<p>Complete 通知: 不带值.</p>
<p>正则描述<code>next*(error|complete)?</code> , 任意多个next，但当error或complete 其中一个执行后，就没有其它的可以分发了。</p>
<p>然后 建议了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  subscriber.<span class="title function_">next</span>(...)<span class="comment">// ...</span></span><br><span class="line">  subscriber.<span class="title function_">next</span>(...)<span class="comment">// ...</span></span><br><span class="line">  subscriber.<span class="title function_">next</span>(...)<span class="comment">// ...</span></span><br><span class="line">  subscriber.<span class="title function_">next</span>(...)<span class="comment">// ...</span></span><br><span class="line">  subscriber.<span class="title function_">complete</span>();</span><br><span class="line">&#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">  subscriber.<span class="title function_">error</span>(e)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Disposing-Observables"><a href="#Disposing-Observables" class="headerlink" title="Disposing Observables"></a>Disposing Observables</h3><p>订阅者的退订</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">from</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> observable = <span class="title function_">from</span>([<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]);</span><br><span class="line"><span class="keyword">const</span> subscription = observable.<span class="title function_">subscribe</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(x));</span><br><span class="line"><span class="comment">// Later:</span></span><br><span class="line">subscription.<span class="title function_">unsubscribe</span>();</span><br></pre></td></tr></table></figure>

<p>发布者的关闭</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> observable = <span class="keyword">new</span> <span class="title class_">Observable</span>(<span class="keyword">function</span> <span class="title function_">subscribe</span>(<span class="params">subscriber</span>) &#123;</span><br><span class="line">  <span class="comment">// Keep track of the interval resource</span></span><br><span class="line">  <span class="keyword">const</span> intervalId = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    subscriber.<span class="title function_">next</span>(<span class="string">&#x27;hi&#x27;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Provide a way of canceling and disposing the interval resource</span></span><br><span class="line">  <span class="comment">// 提供关闭发布者的方法</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">unsubscribe</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(intervalId);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="Operators"><a href="#Operators" class="headerlink" title="Operators"></a>Operators</h1><h2 id="piping"><a href="#piping" class="headerlink" title="piping"></a>piping</h2><p><code>op4()(op3()(op2()(op1()(obs))))</code> 可读性差改为</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">obs.<span class="title function_">pipe</span>(</span><br><span class="line">  <span class="title function_">op1</span>(),</span><br><span class="line">  <span class="title function_">op2</span>(),</span><br><span class="line">  <span class="title function_">op3</span>(),</span><br><span class="line">  <span class="title function_">op4</span>(),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>按照这种格式，即使只有一层 也不应该用<code>op()(obs)</code>而是<code>obs.pipe(op())</code></p>
<p>pipeable operators: 用<code> observableInstance.pipe(operator())</code>的语法，如<code>filter(...)</code>和<code>mergeMap(...)</code>它们不会改变原来的<code>Observable</code>实例，而是返回新的<code>Observable</code></p>
<h2 id="Creation-Operators"><a href="#Creation-Operators" class="headerlink" title="Creation Operators"></a>Creation Operators</h2><p>Creation Operators: 创建新的Observable,如of,interval</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">of</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; map &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/operators&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> x * x)(<span class="title function_">of</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)).<span class="title function_">subscribe</span>(<span class="function">(<span class="params">v</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`value: <span class="subst">$&#123;v&#125;</span>`</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Logs:</span></span><br><span class="line"><span class="comment">// value: 1 </span></span><br><span class="line"><span class="comment">// value: 4</span></span><br><span class="line"><span class="comment">// value: 9</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">first</span>()(<span class="title function_">of</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>).<span class="title function_">subscribe</span>(<span class="function">(<span class="params">v</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`value: <span class="subst">$&#123;v&#125;</span>`</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Logs:</span></span><br><span class="line"><span class="comment">// value: 1</span></span><br></pre></td></tr></table></figure>

<h2 id="Higher-order-Observables-高阶Observables"><a href="#Higher-order-Observables-高阶Observables" class="headerlink" title="Higher-order Observables 高阶Observables"></a>Higher-order Observables 高阶Observables</h2><p>处理 Observables of Observables</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const fileObservable = urlObservable.pipe(</span><br><span class="line">   map(url =&gt; http.get(url)),</span><br><span class="line">   concatAll(),</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ol>
<li><code>concatAll()</code> subscribes to each “inner” Observable that comes out of the “outer” Observable, and copies all the emitted values until that Observable completes, and goes on to the next one. All of the values are in that way concatenated,顺序 调用每个Observable</li>
<li><code>mergeAll()</code> — subscribes to each inner Observable as it arrives, then emits each value as it arrives,并行 调用每个Observable，获得了就输出</li>
<li><code>switchAll()</code> — subscribes to the first inner Observable when it arrives, and emits each value as it arrives, but when the next inner Observable arrives, unsubscribes to the previous one, and subscribes to the new one. 每当接受到新的 Observable 会舍弃老的Observable，当一个Observable 返回值，会立即emit</li>
<li><code>exhaust()</code> — subscribes to the first inner Observable when it arrives, and emits each value as it arrives, discarding all newly arriving inner Observables until that first one completes, then waits for the next inner Observable. 当前Observable 没有结束时，会抛弃后来的所有Observable，结束以后，接受一个Observables</li>
</ol>
<p>可以看到 <code>1</code>,<code>3</code>,<code>4</code>一个时刻 只有一个Observable在运行，1是串行办法，3是很可能半途而废 尽可能新，4是做就做完不被打断</p>
<p>就像很多 和<code>map</code>融合的方法这也有对应的,<code>concatMap()</code>, <code>mergeMap()</code>, <code>switchMap()</code>, and <code>exhaustMap()</code></p>
<h2 id="Marble-diagrams"><a href="#Marble-diagrams" class="headerlink" title="Marble diagrams"></a>Marble diagrams</h2><p><img data-src="https://rxjs-dev.firebaseapp.com/assets/images/guide/marble-diagram-anatomy.svg" alt="marble diagrams"></p>
<ol start="0">
<li>圆是值</li>
<li>上面的箭头是输入</li>
<li>下面的是输出</li>
<li>竖着的线是 完成态</li>
<li>叉是 抛出错误</li>
<li>正中是描述</li>
</ol>
<h2 id="所有Observables"><a href="#所有Observables" class="headerlink" title="所有Observables"></a>所有Observables</h2><p>按分类的: <code>https://rxjs-dev.firebaseapp.com/guide/operators</code></p>
<h2 id="自定义Observables"><a href="#自定义Observables" class="headerlink" title="自定义Observables"></a>自定义Observables</h2><p>组合已有的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; pipe &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; filter, map &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">discardOddDoubleEven</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">pipe</span>(</span><br><span class="line">    <span class="title function_">filter</span>(<span class="function"><span class="params">v</span> =&gt;</span> ! (v % <span class="number">2</span>)),</span><br><span class="line">    <span class="title function_">map</span>(<span class="function"><span class="params">v</span> =&gt;</span> v + v),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意这里的<code>pipe</code>和<code>.pipe</code>是不同的</p>
<p>从零开始写一个Observable</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Observable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">delay</span>(<span class="params">delayInMillis</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">observable</span>) =&gt;</span> <span class="keyword">new</span> <span class="title class_">Observable</span>(<span class="function"><span class="params">observer</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// this function will called each time this</span></span><br><span class="line">    <span class="comment">// Observable is subscribed to.</span></span><br><span class="line">    <span class="keyword">const</span> allTimerIDs = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">    <span class="keyword">const</span> subscription = observable.<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">      <span class="title function_">next</span>(<span class="params">value</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> timerID = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          observer.<span class="title function_">next</span>(value);</span><br><span class="line">          allTimerIDs.<span class="title function_">delete</span>(timerID);</span><br><span class="line">        &#125;, delayInMillis);</span><br><span class="line">        allTimerIDs.<span class="title function_">add</span>(timerID);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">error</span>(<span class="params">err</span>) &#123;</span><br><span class="line">        observer.<span class="title function_">error</span>(err);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">complete</span>(<span class="params"></span>) &#123;</span><br><span class="line">        observer.<span class="title function_">complete</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// the return value is the teardown function,</span></span><br><span class="line">    <span class="comment">// which will be invoked when the new</span></span><br><span class="line">    <span class="comment">// Observable is unsubscribed from.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      subscription.<span class="title function_">unsubscribe</span>();</span><br><span class="line">      allTimerIDs.<span class="title function_">forEach</span>(<span class="function"><span class="params">timerID</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timerID);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>你需要实现3个Observer functions, <code>next()</code>,<code>error()</code>,<code>complete()</code></li>
<li>实现<code>teardown</code>函数(清理结束内部的方法等) ，返回该函数</li>
</ol>
<h1 id="Subscription"><a href="#Subscription" class="headerlink" title="Subscription"></a>Subscription</h1><p><code>父子关系 + unsubscribe()</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; interval &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> observable1 = <span class="title function_">interval</span>(<span class="number">400</span>);</span><br><span class="line"><span class="keyword">const</span> observable2 = <span class="title function_">interval</span>(<span class="number">300</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> subscription = observable1.<span class="title function_">subscribe</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;first: &#x27;</span> + x));</span><br><span class="line"><span class="keyword">const</span> childSubscription = observable2.<span class="title function_">subscribe</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;second: &#x27;</span> + x));</span><br><span class="line"> </span><br><span class="line">subscription.<span class="title function_">add</span>(childSubscription);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// Unsubscribes BOTH subscription and childSubscription</span></span><br><span class="line">  subscription.<span class="title function_">unsubscribe</span>();</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<h1 id="Subject"><a href="#Subject" class="headerlink" title="Subject"></a>Subject</h1><p>plain Observables 是一个<code>单向广播</code>的</p>
<p>Subject 是一种<code>多向广播</code>的Observable</p>
<p><code>A Subject is like an Observable, but can multicast to many Observers. Subjects are like EventEmitters: they maintain a registry of many listeners.</code></p>
<p>对于订阅者来说，它无法区别它订阅的是Subject还是plain Observable</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Subject</span>, <span class="keyword">from</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> subject = <span class="keyword">new</span> <span class="title class_">Subject</span>&lt;number&gt;();</span><br><span class="line"></span><br><span class="line">subject.<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="function">(<span class="params">v</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`observerA: <span class="subst">$&#123;v&#125;</span>`</span>)</span><br><span class="line">&#125;);</span><br><span class="line">subject.<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="function">(<span class="params">v</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`observerB: <span class="subst">$&#123;v&#125;</span>`</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">subject.<span class="title function_">next</span>(<span class="number">1</span>);</span><br><span class="line">subject.<span class="title function_">next</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> observable = <span class="title function_">from</span>([<span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>]);</span><br><span class="line"></span><br><span class="line">observable.<span class="title function_">subscribe</span>(subject); <span class="comment">// You can subscribe providing a Subject</span></span><br></pre></td></tr></table></figure>

<p>以上我们可以看到，Subject既可以看作 订阅者，也可以当作发送者</p>
<h2 id="Multicasted-Observables"><a href="#Multicasted-Observables" class="headerlink" title="Multicasted Observables"></a>Multicasted Observables</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">from</span>, <span class="title class_">Subject</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; multicast &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/operators&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> source = <span class="title function_">from</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// 数据源</span></span><br><span class="line"><span class="keyword">const</span> subject = <span class="keyword">new</span> <span class="title class_">Subject</span>();</span><br><span class="line"><span class="keyword">const</span> multicasted = source.<span class="title function_">pipe</span>(<span class="title function_">multicast</span>(subject)); <span class="comment">// multicast(subject)(source) 见上面pipe用法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// These are, under the hood, `subject.subscribe(&#123;...&#125;)`:</span></span><br><span class="line">multicasted.<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="function">(<span class="params">v</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`observerA: <span class="subst">$&#123;v&#125;</span>`</span>)</span><br><span class="line">&#125;);</span><br><span class="line">multicasted.<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="function">(<span class="params">v</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`observerB: <span class="subst">$&#123;v&#125;</span>`</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// This is, under the hood, `source.subscribe(subject)`:</span></span><br><span class="line">multicasted.<span class="title function_">connect</span>();</span><br></pre></td></tr></table></figure>

<p><code>multicast</code>: Observers 订阅一个潜在的 Subject, Subject 订阅 <code>源Observable</code>. 返回一个ConnectableObservable, 可以看作一个简单的 有 <code>connect()</code>方法的 <code>Observable</code></p>
<p><code>connect()</code>方法在后台执行<code>source.subscribe(subject)</code>方法,返回一个<code>Subscription</code>,对返回的变量可以 unsubscribe来结束执行</p>
<p>考虑下面情景</p>
<ol>
<li>A 订阅了 multicasted Observable</li>
<li>multicasted Observable 开始 connected</li>
<li>next 值 0 分发给A</li>
<li>B 订阅了 multicasted Observable</li>
<li>next 值 1 分发给A</li>
<li>next 值 1 分发给B</li>
<li>A 取消订阅</li>
<li>next 值 2 分发给B</li>
<li>B 取消订阅</li>
<li>multicasted Observable 的 connection  被 unsubscribed</li>
</ol>
<p>可以如下实现</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; interval, <span class="title class_">Subject</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; multicast &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/operators&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> source = <span class="title function_">interval</span>(<span class="number">500</span>);</span><br><span class="line"><span class="keyword">const</span> subject = <span class="keyword">new</span> <span class="title class_">Subject</span>();</span><br><span class="line"><span class="keyword">const</span> multicasted = source.<span class="title function_">pipe</span>(<span class="title function_">multicast</span>(subject));</span><br><span class="line"><span class="keyword">let</span> subscription1, subscription2, subscriptionConnect;</span><br><span class="line"> </span><br><span class="line">subscription1 = multicasted.<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="function">(<span class="params">v</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`observerA: <span class="subst">$&#123;v&#125;</span>`</span>)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// We should call `connect()` here, because the first</span></span><br><span class="line"><span class="comment">// subscriber to `multicasted` is interested in consuming values</span></span><br><span class="line">subscriptionConnect = multicasted.<span class="title function_">connect</span>();</span><br><span class="line"> </span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  subscription2 = multicasted.<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">    <span class="attr">next</span>: <span class="function">(<span class="params">v</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`observerB: <span class="subst">$&#123;v&#125;</span>`</span>)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, <span class="number">600</span>);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  subscription1.<span class="title function_">unsubscribe</span>();</span><br><span class="line">&#125;, <span class="number">1200</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// We should unsubscribe the shared Observable execution here,</span></span><br><span class="line"><span class="comment">// because `multicasted` would have no more subscribers after this</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  subscription2.<span class="title function_">unsubscribe</span>();</span><br><span class="line">  subscriptionConnect.<span class="title function_">unsubscribe</span>(); <span class="comment">// for the shared Observable execution</span></span><br><span class="line">&#125;, <span class="number">2000</span>);</span><br></pre></td></tr></table></figure>

<p>手动调用<code>connect</code>有时很笨重,通常我们希望在第一个<code>Observer</code>到达时调用，在最后一个<code>Observer</code> unsubscribes 时, <code>refCount</code> 让 <code>multicasted Observable</code> 第一个<code>subscriber</code>到达时自动执行，在最后一个<code>subscriber</code>结束时自动 结束执行.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; interval, <span class="title class_">Subject</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; multicast, refCount &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/operators&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> source = <span class="title function_">interval</span>(<span class="number">500</span>);</span><br><span class="line"><span class="keyword">const</span> subject = <span class="keyword">new</span> <span class="title class_">Subject</span>();</span><br><span class="line"><span class="keyword">const</span> refCounted = source.<span class="title function_">pipe</span>(<span class="title function_">multicast</span>(subject), <span class="title function_">refCount</span>());</span><br><span class="line"><span class="keyword">let</span> subscription1, subscription2;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// This calls `connect()`, because</span></span><br><span class="line"><span class="comment">// it is the first subscriber to `refCounted`</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;observerA subscribed&#x27;</span>);</span><br><span class="line">subscription1 = refCounted.<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="function">(<span class="params">v</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`observerA: <span class="subst">$&#123;v&#125;</span>`</span>)</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;observerB subscribed&#x27;</span>);</span><br><span class="line">  subscription2 = refCounted.<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">    <span class="attr">next</span>: <span class="function">(<span class="params">v</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`observerB: <span class="subst">$&#123;v&#125;</span>`</span>)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, <span class="number">600</span>);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;observerA unsubscribed&#x27;</span>);</span><br><span class="line">  subscription1.<span class="title function_">unsubscribe</span>();</span><br><span class="line">&#125;, <span class="number">1200</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// This is when the shared Observable execution will stop, because</span></span><br><span class="line"><span class="comment">// `refCounted` would have no more subscribers after this</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;observerB unsubscribed&#x27;</span>);</span><br><span class="line">  subscription2.<span class="title function_">unsubscribe</span>();</span><br><span class="line">&#125;, <span class="number">2000</span>);</span><br></pre></td></tr></table></figure>

<p>注意 只有<code>ConnectableObservable</code>上面有<code>refCount()</code>方法</p>
<h2 id="BehaviorSubject"><a href="#BehaviorSubject" class="headerlink" title="BehaviorSubject"></a>BehaviorSubject</h2><p><code>当前的值</code></p>
<p>它存储最后 给它consumers的值，当有新的订阅，则立即发送给它的订阅者</p>
<p>demo:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BehaviorSubject</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> subject = <span class="keyword">new</span> <span class="title class_">BehaviorSubject</span>(<span class="number">0</span>); <span class="comment">// 0 is the initial value</span></span><br><span class="line"> </span><br><span class="line">subject.<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="function">(<span class="params">v</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`observerA: <span class="subst">$&#123;v&#125;</span>`</span>)</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">subject.<span class="title function_">next</span>(<span class="number">1</span>);</span><br><span class="line">subject.<span class="title function_">next</span>(<span class="number">2</span>);</span><br><span class="line"> </span><br><span class="line">subject.<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="function">(<span class="params">v</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`observerB: <span class="subst">$&#123;v&#125;</span>`</span>)</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">subject.<span class="title function_">next</span>(<span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<h2 id="ReplaySubject"><a href="#ReplaySubject" class="headerlink" title="ReplaySubject"></a>ReplaySubject</h2><p>和BehaviorSubject类似，但是不是记录最后一个，而是buffer大小来决定记录最后的多少个，初始化传入buffer的大小</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ReplaySubject</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> subject = <span class="keyword">new</span> <span class="title class_">ReplaySubject</span>(<span class="number">3</span>); <span class="comment">// buffer 3 values for new subscribers</span></span><br><span class="line"> </span><br><span class="line">subject.<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="function">(<span class="params">v</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`observerA: <span class="subst">$&#123;v&#125;</span>`</span>)</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">subject.<span class="title function_">next</span>(<span class="number">1</span>);</span><br><span class="line">subject.<span class="title function_">next</span>(<span class="number">2</span>); <span class="comment">// 上面 buffer大小设置为3，所以 observerB 只能接收到 [2,3,4]</span></span><br><span class="line">subject.<span class="title function_">next</span>(<span class="number">3</span>);</span><br><span class="line">subject.<span class="title function_">next</span>(<span class="number">4</span>);</span><br><span class="line"> </span><br><span class="line">subject.<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="function">(<span class="params">v</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`observerB: <span class="subst">$&#123;v&#125;</span>`</span>)</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">subject.<span class="title function_">next</span>(<span class="number">5</span>);</span><br></pre></td></tr></table></figure>

<p>除了可以指定buffer的size，也可以指定buffer的过期时间 <code>new ReplaySubject(buffer size, buffer time)</code>,单位毫秒</p>
<h2 id="AsyncSubject"><a href="#AsyncSubject" class="headerlink" title="AsyncSubject"></a>AsyncSubject</h2><p>只有在<code>complete</code>时才向它的订阅者发送最后一个 值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AsyncSubject</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> subject = <span class="keyword">new</span> <span class="title class_">AsyncSubject</span>();</span><br><span class="line"> </span><br><span class="line">subject.<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="function">(<span class="params">v</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`observerA: <span class="subst">$&#123;v&#125;</span>`</span>)</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">subject.<span class="title function_">next</span>(<span class="number">1</span>);</span><br><span class="line">subject.<span class="title function_">next</span>(<span class="number">2</span>);</span><br><span class="line">subject.<span class="title function_">next</span>(<span class="number">3</span>);</span><br><span class="line">subject.<span class="title function_">next</span>(<span class="number">4</span>);</span><br><span class="line"> </span><br><span class="line">subject.<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="function">(<span class="params">v</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`observerB: <span class="subst">$&#123;v&#125;</span>`</span>)</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">subject.<span class="title function_">next</span>(<span class="number">5</span>);</span><br><span class="line">subject.<span class="title function_">complete</span>();</span><br></pre></td></tr></table></figure>

<p>只会接受到5</p>
<h1 id="Scheduler"><a href="#Scheduler" class="headerlink" title="Scheduler"></a>Scheduler</h1><p>调度！</p>
<p>关于<code>Promise</code>能有的和调度沾边的 只有<code>Promise.all()</code>,和<code>Promise.race()</code></p>
<ol>
<li>它是个数据结构，储存，基于 优先级或其它表转 执行队列任务</li>
<li>是一个执行环境,它表示 一个任务在何时何地被执行， 立即 或 回调</li>
<li>它有一个虚拟时钟， 通过调度器的<code>now()</code>方法，会回一个时间 标识，task得到的时间标识仅与其所在的调度器有关。</li>
</ol>
<p>A Scheduler lets you define in what execution context will an Observable deliver notifications to its Observer.</p>
<p>调度器，让你定义 在什么执行上下文下，一个Observale会向它的Observer分发同志</p>
<p>串行 <code>emit 1 2 3</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Observable</span>, asyncScheduler &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; observeOn &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/operators&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> observable = <span class="keyword">new</span> <span class="title class_">Observable</span>(<span class="function">(<span class="params">proxyObserver</span>) =&gt;</span> &#123;</span><br><span class="line">  proxyObserver.<span class="title function_">next</span>(<span class="number">1</span>);</span><br><span class="line">  proxyObserver.<span class="title function_">next</span>(<span class="number">2</span>);</span><br><span class="line">  proxyObserver.<span class="title function_">next</span>(<span class="number">3</span>);</span><br><span class="line">  proxyObserver.<span class="title function_">complete</span>();</span><br><span class="line">&#125;).<span class="title function_">pipe</span>(</span><br><span class="line">  <span class="title function_">observeOn</span>(asyncScheduler)</span><br><span class="line">);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> finalObserver = &#123;</span><br><span class="line">  <span class="title function_">next</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;got value &#x27;</span> + x)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">error</span>(<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;something wrong occurred: &#x27;</span> + err);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">complete</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;done&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;just before subscribe&#x27;</span>);</span><br><span class="line">observable.<span class="title function_">subscribe</span>(finalObserver);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;just after subscribe&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><code>proxyObserver</code> 是 <code>observeOn(asyncScheduler)</code>创建出的，其中<code>next(val)</code>函数大约是</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> proxyObserver = &#123;</span><br><span class="line">  <span class="title function_">next</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    asyncScheduler.<span class="title function_">schedule</span>(</span><br><span class="line">      <span class="function">(<span class="params">x</span>) =&gt;</span> finalObserver.<span class="title function_">next</span>(x),</span><br><span class="line">      <span class="number">0</span> <span class="comment">/* delay */</span>, <span class="comment">// 仅管 这里设置为0, async 依然用的是setTimeout 或 setInterval来进行操作</span></span><br><span class="line">      val <span class="comment">/* will be the x for the function above */</span></span><br><span class="line">    );</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>除了<code>asyncScheduler</code>还有<code>queueScheduler</code>（遍历 当前事件frame）,<code>asapScheduler</code>（微任务队列调度，promise有用，在当前任务后，在下一个任务前用于异步交流）,<code>animationFrameScheduler</code>(在下一个 浏览器内容绘制前，可用于创建流畅的浏览器动画)</p>
<p>然后 你其实已经使用了调度器，只是隐式的</p>
<p>如，你在创建少量有限返回值的Observale时 用的是null或undefined调度器</p>
<p>对于返回大量或无限数据的用的是queue调度器</p>
<p>对于用到了timer的 用的是async调度器</p>
<p>对于一些性能优化的目的，你可以指定具体的调度器，如 <code>creation operator</code>的<code>from([10,20,30],asyncScheduler)</code></p>
<p>以下这些都支持传递 调度器 参数</p>
<ul>
<li>bindCallback</li>
<li>bindNodeCallback</li>
<li>combineLatest</li>
<li>concat</li>
<li>empty</li>
<li>from</li>
<li>fromPromise</li>
<li>interval</li>
<li>merge</li>
<li>of</li>
<li>range</li>
<li>throw</li>
<li>timer</li>
</ul>
<p>subscribeOn 可以把 上面 第二个参数传递调度器，改成， <code>obs.pipe(subscribeOn(调度器))</code>的写法</p>
<p><a href="https://rxjs-dev.firebaseapp.com/api/operators/subscribeOn">https://rxjs-dev.firebaseapp.com/api/operators/subscribeOn</a></p>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>输入事件 每100ms的限制 来进行搜索</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Observable</span>.<span class="title function_">fromEvent</span>(input, <span class="string">&#x27;input&#x27;</span>)</span><br><span class="line">  .<span class="title function_">map</span>(<span class="function"><span class="params">e</span> =&gt;</span> e.<span class="property">target</span>.<span class="property">value</span>)</span><br><span class="line">  .<span class="title function_">filter</span>(<span class="function"><span class="params">value</span> =&gt;</span> value.<span class="property">length</span> &gt;= <span class="number">1</span>)</span><br><span class="line">  .<span class="title function_">throttleTime</span>(<span class="number">100</span>) <span class="comment">// https://rxjs-dev.firebaseapp.com/api/operators/throttleTime</span></span><br><span class="line">  .<span class="title function_">distinctUntilChanged</span>() <span class="comment">// https://rxjs-dev.firebaseapp.com/api/operators/distinctUntilChanged</span></span><br><span class="line">  .<span class="title function_">switchMap</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> <span class="string">&quot;message is &quot;</span> + value) <span class="comment">// 或者替换为搜索 函数</span></span><br><span class="line">  .<span class="title function_">subscribe</span>(</span><br><span class="line">    <span class="function"><span class="params">x</span> =&gt;</span> <span class="title function_">renderSearchResult</span>(x), <span class="comment">// 渲染搜索结果</span></span><br><span class="line">    <span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(err)</span><br><span class="line">  )</span><br></pre></td></tr></table></figure>

<p>同时调用 多个 异步方法，等待3个全回调</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Observable</span>, pipe &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; skip, take &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/operators&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fetchdata</span>(<span class="params">url,cb</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;start fetch&#x27;</span>+url);</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fetched&#x27;</span>+url);</span><br><span class="line">    <span class="title function_">cb</span>();</span><br><span class="line">  &#125;,<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ob = <span class="title class_">Observable</span>.<span class="title function_">create</span>(<span class="function">(<span class="params">observer</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="title function_">fetchdata</span>(<span class="string">&#x27;/url1&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    observer.<span class="title function_">next</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="title function_">fetchdata</span>(<span class="string">&#x27;/url2&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    observer.<span class="title function_">next</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="title function_">fetchdata</span>(<span class="string">&#x27;/url3&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    observer.<span class="title function_">next</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;).<span class="title function_">pipe</span>(<span class="title function_">skip</span>(<span class="number">2</span>),<span class="title function_">take</span>(<span class="number">1</span>)).<span class="title function_">subscribe</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;finish&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="生命周期实例"><a href="#生命周期实例" class="headerlink" title="生命周期实例"></a>生命周期实例</h1><p>需求: angular 内页面上有一些observables。</p>
<p>我们希望在页面销毁时 能结束这些。（否则会有内存泄漏）</p>
<h2 id="方案1-手动逐个unsubscrible"><a href="#方案1-手动逐个unsubscrible" class="headerlink" title="方案1 手动逐个unsubscrible"></a>方案1 手动逐个unsubscrible</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;...&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span>, <span class="title class_">OnDestroy</span> &#123;</span><br><span class="line">    <span class="attr">subscription1$</span>: <span class="title class_">Subscription</span></span><br><span class="line">    <span class="attr">subscription2$</span>: <span class="title class_">Subscription</span> </span><br><span class="line">    ngOnInit () &#123;</span><br><span class="line">        <span class="keyword">var</span> observable1$ = <span class="title class_">Rx</span>.<span class="property">Observable</span>.<span class="title function_">interval</span>(<span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">var</span> observable2$ = <span class="title class_">Rx</span>.<span class="property">Observable</span>.<span class="title function_">interval</span>(<span class="number">400</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">subscription1$</span> = observable.<span class="title function_">subscribe</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;From interval 1000&quot;</span> x));</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">subscription2$</span> = observable.<span class="title function_">subscribe</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;From interval 400&quot;</span> x));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">ngOnDestroy</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">subscription1$</span>.<span class="title function_">unsubscribe</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">subscription2$</span>.<span class="title function_">unsubscribe</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="方案2-用数组，循环unsubscrible"><a href="#方案2-用数组，循环unsubscrible" class="headerlink" title="方案2 用数组，循环unsubscrible"></a>方案2 用数组，循环unsubscrible</h2><p>优点，新增时，只需要 新增和添加到数组，不需要修改OnDestroy的代码</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;...&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span>, <span class="title class_">OnDestroy</span> &#123;</span><br><span class="line">    <span class="attr">subscription1$</span>: <span class="title class_">Subscription</span> </span><br><span class="line">    <span class="attr">subscription2$</span>: <span class="title class_">Subscription</span> </span><br><span class="line">    <span class="attr">subscriptions</span>: <span class="title class_">Subscription</span>[] = []</span><br><span class="line">    ngOnInit () &#123;</span><br><span class="line">        <span class="keyword">var</span> observable1$ = <span class="title class_">Rx</span>.<span class="property">Observable</span>.<span class="title function_">interval</span>(<span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">var</span> observable2$ = <span class="title class_">Rx</span>.<span class="property">Observable</span>.<span class="title function_">interval</span>(<span class="number">400</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">subscription1$</span> = observable.<span class="title function_">subscribe</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;From interval 1000&quot;</span> x));</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">subscription2$</span> = observable.<span class="title function_">subscribe</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;From interval 400&quot;</span> x));</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">subscriptions</span>.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="property">subscription1$</span>)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">subscriptions</span>.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="property">subscription2$</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">ngOnDestroy</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">subscriptions</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">subscription</span>) =&gt;</span> subscription.<span class="title function_">unsubscribe</span>())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="方案3-用Subscription"><a href="#方案3-用Subscription" class="headerlink" title="方案3 用Subscription"></a>方案3 用Subscription</h2><p>优点，用自带的Subscription 替代手工数组(对写法影响不大。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;...&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span>, <span class="title class_">OnDestroy</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="attr">subscription</span>: <span class="title class_">Subscription</span></span><br><span class="line">    ngOnInit () &#123;</span><br><span class="line">        <span class="keyword">var</span> observable1$ = <span class="title class_">Rx</span>.<span class="property">Observable</span>.<span class="title function_">interval</span>(<span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">var</span> observable2$ = <span class="title class_">Rx</span>.<span class="property">Observable</span>.<span class="title function_">interval</span>(<span class="number">400</span>);</span><br><span class="line">        <span class="keyword">var</span> subscription1$ = observable.<span class="title function_">subscribe</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;From interval 1000&quot;</span> x));</span><br><span class="line">        <span class="keyword">var</span> subscription2$ = observable.<span class="title function_">subscribe</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;From interval 400&quot;</span> x));</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">subscription</span>.<span class="title function_">add</span>(subscription1$)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">subscription</span>.<span class="title function_">add</span>(subscription2$)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">ngOnDestroy</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">subscription</span>.<span class="title function_">unsubscribe</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="方案4-async-pipe"><a href="#方案4-async-pipe" class="headerlink" title="方案4 async pipe"></a>方案4 async pipe</h2><p>对于直接的observable，直接上async，不需要手动unsubscribe，依赖angular内部自动unsubscribe。</p>
<p>缺点，对于复杂的并不适用</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">    ...,</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">         Interval: &#123;&#123;observable$ | async&#125;&#125;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span> &#123;</span><br><span class="line">    observable$</span><br><span class="line">    ngOnInit () &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">observable$</span> = <span class="title class_">Rx</span>.<span class="property">Observable</span>.<span class="title function_">interval</span>(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="方案5-take"><a href="#方案5-take" class="headerlink" title="方案5 take"></a>方案5 take</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">take(n)</span><br><span class="line">takeUntil(notifier)</span><br><span class="line">takeWhile(predicate)</span><br></pre></td></tr></table></figure>

<p>take依然需要unsubscribe</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span>, <span class="title class_">OnDestroy</span> &#123;</span><br><span class="line">    subscription$</span><br><span class="line">    ngOnInit () &#123;</span><br><span class="line">        <span class="keyword">var</span> observable$ = <span class="title class_">Rx</span>.<span class="property">Observable</span>.<span class="title function_">interval</span>(<span class="number">1000</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">subscription$</span> = observable$.<span class="title function_">pipe</span>(<span class="title function_">take</span>(<span class="number">1</span>)).</span><br><span class="line">        <span class="title function_">subscribe</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(x))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">ngOnDestroy</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">subscription$</span>.<span class="title function_">unsubscribe</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>takeUntil目前感觉是最好的，3行完成初始化和关闭，在需要的部分用pipe接上即可。易于代码插拔</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;...&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span>, <span class="title class_">OnDestroy</span> &#123;</span><br><span class="line">    notifier = <span class="keyword">new</span> <span class="title class_">Subject</span>()</span><br><span class="line">    ngOnInit () &#123;</span><br><span class="line">        <span class="keyword">var</span> observable$ = <span class="title class_">Rx</span>.<span class="property">Observable</span>.<span class="title function_">interval</span>(<span class="number">1000</span>);</span><br><span class="line">        observable$.<span class="title function_">pipe</span>(<span class="title function_">takeUntil</span>(<span class="variable language_">this</span>.<span class="property">notifier</span>))</span><br><span class="line">        .<span class="title function_">subscribe</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(x));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">ngOnDestroy</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">notifier</span>.<span class="title function_">next</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">notifier</span>.<span class="title function_">complete</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>takeWhile依然需要unsubscrible</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;...&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span>, <span class="title class_">OnDestroy</span> &#123;</span><br><span class="line">    subscription$</span><br><span class="line">    ngOnInit () &#123;</span><br><span class="line">        <span class="keyword">var</span> observable$ = <span class="title class_">Rx</span>.<span class="property">Observable</span>.<span class="title function_">interval</span>(<span class="number">1000</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">subscription$</span> = observable$.<span class="title function_">pipe</span>(<span class="title function_">takeWhile</span>(<span class="function"><span class="params">value</span> =&gt;</span> value &lt; <span class="number">10</span>))</span><br><span class="line">        .<span class="title function_">subscribe</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(x));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">ngOnDestroy</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">subscription$</span>.<span class="title function_">unsubscribe</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="方案6-first"><a href="#方案6-first" class="headerlink" title="方案6 first"></a>方案6 first</h2><p>不确定页面是否先destroy, 还是建议在ngOnDestroy 里显示取消</p>
<h2 id="方案7-利用注解-自动取消"><a href="#方案7-利用注解-自动取消" class="headerlink" title="方案7 利用注解 自动取消"></a>方案7 利用注解 自动取消</h2><p><a href="https://www.typescriptlang.org/docs/handbook/decorators.html">typescript decorators</a></p>
<p>实现(和 参考的文章不同，我们调用apply会传入原始的this，并且让用户的apply先于 unsubscribe, 关注所有的unsubscribe)</p>
<p>缺点是，所有的 需要一个放在this上的变量，才能被自动取消订阅</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">AutoUnsub</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">constructor</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> orig = constructor.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">ngOnDestroy</span>;</span><br><span class="line">    constructor.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">ngOnDestroy</span> = <span class="keyword">function</span>(<span class="params"></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">      orig.<span class="title function_">apply</span>(<span class="variable language_">this</span>);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> element <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">values</span>(<span class="variable language_">this</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((element <span class="keyword">as</span> <span class="title class_">Unsubscribable</span>) &amp;&amp; (element <span class="keyword">as</span> <span class="title class_">Unsubscribable</span>).<span class="property">unsubscribe</span>) &#123;</span><br><span class="line">          (element <span class="keyword">as</span> <span class="title class_">Unsubscribable</span>).<span class="title function_">unsubscribe</span>();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br><span class="line"><span class="meta">@AutoUnsub</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span> &#123;</span><br><span class="line">    observable$</span><br><span class="line">    ngOnInit () &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">observable$</span> = <span class="title class_">Rx</span>.<span class="property">Observable</span>.<span class="title function_">interval</span>(<span class="number">1000</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">observable$</span>.<span class="title function_">subscribe</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(x))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>作者有提到tslint来检查是否有Destroy，但看起来并不够优雅了。</p>
<p>综上，感觉最科学的是takeUntil</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://stackoverflow.com/questions/45854169/how-can-i-use-an-es6-import-in-node">stackoverflow: es6 + node</a></p>
<p><a href="https://github.com/webpack/webpack-cli/blob/master/packages/init/README.md#webpack-cli-init">webpack-cli init</a></p>
<p><a href="https://github.com/standard-things/esm">esm</a></p>
<p><a href="https://rxjs-dev.firebaseapp.com/guide/observable">observable</a></p>
<p><a href="https://angular.io/guide/observables">angular.io:observables</a></p>
<p><a href="https://rxmarbles.com/">rxmarbles 宝石图</a></p>
<p><a href="https://cn.rx.js.org/class/es6/Observable.js~Observable.html">cn.rx.js.org</a></p>
<p><a href="https://webpack.js.org/guides/typescript/">webpack + typescript</a></p>
<p><a href="https://en.wikipedia.org/wiki/Reactive_extensions">wikipedia ReactiveX</a></p>
<p><a href="https://blog.bitsrc.io/6-ways-to-unsubscribe-from-observables-in-angular-ab912819a78f">unsubscribe from observables</a></p>
]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>Angular2+</tag>
        <tag>rxjs</tag>
        <tag>observable</tag>
      </tags>
  </entry>
  <entry>
    <title>gitlab server 搭建</title>
    <url>/Blog/19-07-08-gitlabserver/</url>
    <content><![CDATA[<h1 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h1><p>可以在私有环境下使用。如果想用非私有，现成的，可以考虑<a href="https://github.com/">https://github.com</a> 或 <a href="https://gitlab.com/">https://gitlab.com</a></p>
<h1 id="手工安装-docker-ce"><a href="#手工安装-docker-ce" class="headerlink" title="手工安装 docker-ce"></a>手工安装 <code>docker-ce</code></h1><blockquote>
<p>安装依赖</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install ca-certificates curl openssh-server postfix</span><br></pre></td></tr></table></figure>

<blockquote>
<p>安装 gitlab-ce</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -sS https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.deb.sh | sudo bash</span><br><span class="line">sudo apt install gitlab-ce</span><br></pre></td></tr></table></figure>

<p>注: 国内有不少镜像源 例如<code>https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/</code>，国内镜像会快很多，可以替换上面生成的<code>/etc/apt/sources.list.d/gitlab_gitlab-ce.list</code>中的路径</p>
<p><code>sudo gitlab-ctl reconfigure</code></p>
<p>按理说这里就可以用了</p>
<blockquote>
<p>你需要设置root的密码，和新建一个用户以及(设置该用户的密码)</p>
</blockquote>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>然而 因为我本地apache服务和原来开启的nginx服务，有80冲突和原来nginx服务冲突(？)，导致我找问题找了很久很久[我似乎也没看到报错</p>
<blockquote>
<p>修改 <code>sudo vim /etc/gitlab/gitlab.rb</code></p>
</blockquote>
<p>中的<code>external_url</code> 为你的domain名称+port,如<code>http://192.168.1.51:8081</code></p>
<p>最后我停掉两个服务再重启 <code>gitlab</code>就好了</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 未使用了 如果本身还有nginx据说可以配一下</span></span><br><span class="line"><span class="comment"># nginx listen_port 配置</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">修改</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">`/etc/gitlab/gitlab.rb`</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">找到`nginx[&#x27;listen_port&#x27;]`修改为</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">nginx[&#x27;listen_port&#x27;] = 8081</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">再执行`sudo gitlab-ctl reconfigure`</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">访问`你的domain:8081`即可</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h1 id="gitlab-on-docker"><a href="#gitlab-on-docker" class="headerlink" title="gitlab on docker"></a>gitlab on docker</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker run --detach --name gitlab \</span><br><span class="line">  --hostname gitlab.example.com \</span><br><span class="line">  --publish 30080:30080 \</span><br><span class="line">  --publish 30022:22 \</span><br><span class="line">  --<span class="built_in">env</span> GITLAB_OMNIBUS_CONFIG=<span class="string">&quot;external_url &#x27;http://gitlab.example.com:30080&#x27;; gitlab_rails[&#x27;gitlab_shell_ssh_port&#x27;]=30022;&quot;</span> \</span><br><span class="line">  gitlab/gitlab-ce:latest</span><br></pre></td></tr></table></figure>

<p>好了 ssh 30022和http 30080都ok,docker真香了</p>
<p><a href="https://developer.ibm.com/code/2017/07/13/step-step-guide-running-gitlab-ce-docker/">https://developer.ibm.com/code/2017/07/13/step-step-guide-running-gitlab-ce-docker/</a></p>
<p><a href="https://docs.gitlab.com/omnibus/docker/README.html">https://docs.gitlab.com/omnibus/docker/README.html</a></p>
<h1 id="问题-仓库通过ssh的git-clone报错"><a href="#问题-仓库通过ssh的git-clone报错" class="headerlink" title="问题:仓库通过ssh的git clone报错"></a>问题:仓库通过ssh的git clone报错</h1><p><code>http</code>的<code>clone</code>可用</p>
<p>而<code>ssh</code>的<code>clone</code>报错: <code>fatal: protocol error: bad line length character: Welc</code></p>
<p>gihub上很多说<code>sed -i &#39;s/session\s\+required\s\+pam_loginuid.so/# \0/&#39; /etc/pam.d/sshd</code> 就是注释掉 也没用(也restart 过)</p>
<blockquote>
<p>问题排查</p>
</blockquote>
<p>网上有很多 pam的 校验关闭都没有用</p>
<p>然后 通过<code>ssh -vvv git@&lt;ip&gt;</code>得到<code>Exit status 254</code>,对应也是没有搜到可行方案,但感觉距离问题近了些</p>
<p>查看<code>/var/log/auth.log</code>发现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Aug 20 14:24:03 RBEST systemd: pam_unix(systemd-user:session): session opened for user git by (uid=0)</span><br><span class="line">Aug 20 14:24:03 RBEST systemd-logind[941]: New session 170 of user git.</span><br><span class="line">Aug 20 14:24:03 RBEST sshd[16070]: error: PAM: pam_open_session(): Module is unknown</span><br><span class="line">Aug 20 14:24:03 RBEST sshd[16148]: Received disconnect from 192.168.1.51 port 48618:11: disconnected by user</span><br><span class="line">Aug 20 14:24:03 RBEST sshd[16148]: Disconnected from user git 192.168.1.51 port 48618</span><br><span class="line">Aug 20 14:24:03 RBEST systemd-logind[941]: Removed session 170.</span><br></pre></td></tr></table></figure>

<p>这个error也搜不到对应的</p>
<p>鸽了！ 用 docker来搞</p>
<p>docker的方法测试</p>
<p><code>ssh -vvv git@gitlab.example.com -p 30022</code>的exit code 是0 所以感觉还是 本地的ssh相关的东西配置有问题</p>
<h2 id="修复-重装试试"><a href="#修复-重装试试" class="headerlink" title="修复(重装试试)"></a>修复(重装试试)</h2><p>上面我得到的信息是</p>
<ol>
<li>ssh git@应该是成功登录了 但是没有和gitlab联系上</li>
<li>docker里看 只用简单配置 就应该能用</li>
<li>我尝试新开了个空白虚拟机，装一遍gitlab是能用的</li>
</ol>
<p>于是按照<a href="https://askubuntu.com/a/824723/653605%E6%8A%8A">https://askubuntu.com/a/824723/653605把</a> gitlab完全删除 再重装就好了？喵喵喵，虽然现在能用了，可是之前究竟是什么问题。</p>
<h1 id="TODO-email"><a href="#TODO-email" class="headerlink" title="TODO email"></a>TODO email</h1><p><a href="https://docs.gitlab.com/omnibus/settings/nginx.html">https://docs.gitlab.com/omnibus/settings/nginx.html</a></p>
<h1 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h1><p>权限管理 <a href="https://docs.gitlab.com/ee/administration/#user-settings-and-permissions">https://docs.gitlab.com/ee/administration/#user-settings-and-permissions</a></p>
<p>用root权限用户登陆</p>
<blockquote>
<p><code>&lt;你的地址&gt;/admin/application_settings</code></p>
</blockquote>
<p>可见和可访问性</p>
<p>的Restricted visibility levelsx限制为 内部和私有</p>
<p>关闭了为所有项目默认 runner和默认CI&#x2F;CD</p>
<h1 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h1><p><code>/etc/gitlab/gitlab.rb</code> 设置</p>
<p><code>external_url &#39;https://gitlab.xxx.com&#39;</code></p>
<p>以及</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">letsencrypt[&#x27;enable&#x27;] = true</span><br><span class="line">letsencrypt[&#x27;contact_emails&#x27;] = [&#x27;你的email&#x27;]</span><br></pre></td></tr></table></figure>

<p>再<code>gitlab-ctl reconfigure</code>就可以自动生成证书并且 启用https了</p>
<h1 id="内存占用过大"><a href="#内存占用过大" class="headerlink" title="内存占用过大"></a>内存占用过大</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unicorn[&#x27;worker_timeout&#x27;] = 60</span><br><span class="line">unicorn[&#x27;worker_processes&#x27;] = 2</span><br></pre></td></tr></table></figure>

<p>也有其它git server :<code>https://gogs.io/</code></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://about.gitlab.com/">https://about.gitlab.com/</a></p>
<p><a href="https://hub.docker.com/r/gitlab/gitlab-ce/">https://hub.docker.com/r/gitlab/gitlab-ce/</a></p>
<p><a href="https://gitlab.com/gitlab-org/gitlab-foss/-/issues/25840">https://gitlab.com/gitlab-org/gitlab-foss/-/issues/25840</a></p>
<p><a href="https://docs.gitlab.com/omnibus/settings/unicorn.html">https://docs.gitlab.com/omnibus/settings/unicorn.html</a></p>
]]></content>
      <categories>
        <category>software</category>
        <category>git</category>
      </categories>
      <tags>
        <tag>gitlab</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>vsc extension 入门尝试</title>
    <url>/Blog/19-07-25-vsc_extension/</url>
    <content><![CDATA[<h1 id="开始-amp-安装"><a href="#开始-amp-安装" class="headerlink" title="开始 &amp; 安装"></a>开始 &amp; 安装</h1><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p><a href="https://code.visualstudio.com/api/get-started/your-first-extension">https://code.visualstudio.com/api/get-started/your-first-extension</a></p>
<p><a href="https://github.com/microsoft/vscode-extension-samples">https://github.com/microsoft/vscode-extension-samples</a></p>
<h2 id="install-amp-Run"><a href="#install-amp-Run" class="headerlink" title="install &amp; Run"></a>install &amp; Run</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g yo generator-code</span><br><span class="line">yo code</span><br></pre></td></tr></table></figure>

<p>选择你希望的选项</p>
<p><code>code ./新建目录</code></p>
<p>按<code>F5</code>启动</p>
<p>按<code>Ctrl+Shift+P</code>输入<code>Hello world</code>回车</p>
<p>当你修改了代码后，在新打开的窗口<code>Ctrl+Shift+P</code>再输入<code>Reload Window</code>就重新加载了代码</p>
<h1 id="解剖"><a href="#解剖" class="headerlink" title="解剖"></a>解剖</h1><p>看<code>package.json</code></p>
<ul>
<li><p>注册 <code>onCommand</code> Activation Event:<code>onCommand:extension.helloWorld</code> ,so the extension becomes activated when user runs the <code>Hello World</code> command.</p>
</li>
<li><p>使用<code>contributes.commands</code> Contribution Point 来让<code>Hello World</code>命令 在Command Palette 可用，并且绑定到命令id<code>extension.helloWorld</code></p>
</li>
<li><p>使用<code>commands.registerCommand</code>的VS Code API绑定到已注册的命令ID <code>extension.helloWorld</code></p>
</li>
<li><p><a href="https://code.visualstudio.com/api/references/activation-events">Activation Events</a>: events upon which your extension becomes active.</p>
</li>
<li><p><a href="https://code.visualstudio.com/api/references/contribution-points">Contribution Points</a>: static declarations that you make in the package.json Extension Manifest to extend VS Code.</p>
</li>
<li><p>VS Code API: 代码中API，可以在你的extension代码中调起</p>
</li>
</ul>
<p>其它配置文件</p>
<ul>
<li><code>launch.json</code> used to configure VS Code Debugging</li>
<li><code>tasks.json</code> for defining VS Code Tasks</li>
<li><code>tsconfig.json</code> consult the TypeScript Handbook</li>
</ul>
<p>package.json</p>
<p>vsc使用 <code>&lt;publisher&gt;.&lt;name&gt;</code>作为一个插件的<code>unique ID</code></p>
<h1 id="tree-view"><a href="#tree-view" class="headerlink" title="tree-view"></a>tree-view</h1><p>emmmmmm 看了一会代码 发现有文档 <a href="https://code.visualstudio.com/api/extension-guides/tree-view">https://code.visualstudio.com/api/extension-guides/tree-view</a></p>
<p>直接看文档吧…</p>
]]></content>
      <categories>
        <category>software</category>
        <category>ide</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
        <tag>vscode</tag>
        <tag>extension</tag>
      </tags>
  </entry>
  <entry>
    <title>jenkins 入门尝试</title>
    <url>/Blog/19-07-26-jenkins/</url>
    <content><![CDATA[<h1 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h1><p>作为被factorio洗脑的人 看到 自动化 自动化 自动化 就会激动</p>
<h1 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h1><p>首先你需要 java 8(jre&#x2F;jdk),docker</p>
<p>这两个我之前都安装过了</p>
<p>然后下载jenkins: <a href="https://jenkins.io/zh/download/">https://jenkins.io/zh/download/</a></p>
<p>运行命令<code>java -jar jenkins.war --httpPort=8080</code></p>
<p>打开网页<code>http://localhost:8080</code></p>
<p>输入终端里展示的密码 –&gt; 下一步 –&gt; 等待安装git等一系列工具 –&gt; 创建管理员用户&#96;–&gt; 实例配置(我发现有不少网页开发工具都有意无意的避开了8080端口 这里我直接默认) –&gt;开始使用</p>
<p>我这边最后一步以后白屏了，但是从Network看似乎没有资源卡着，于是我把服务先杀掉再启动一遍，可以进入jenkins了23333</p>
<h1 id="Hell-world"><a href="#Hell-world" class="headerlink" title="Hell world"></a>Hell world</h1><p>单击 New Item</p>
<span id="more"></span>

<p>输入名称如 demo</p>
<p>选择multibranch pipeline(多分支流水线)</p>
<p>这里 Branch Sources里 我用Github尝试</p>
<p>在Owner输入 <code>CroMarmot</code>会自动拉取所有仓库</p>
<p>找到<code>jenkinsdemo</code> ,这个仓库对应代码为<code>https://github.com/CroMarmot/jenkinsdemo</code></p>
<p>其它默认 确定 然后观察 jenkins的输出…..</p>
<p>然后我又迷之触发了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">WARNING	o.j.p.g.webhook.WebhookManager$2#applyNullSafe: Failed to add GitHub webhook for GitHubRepositoryName[host=github.com,username=CroMarmot,repository=jenkinsdemo]</span><br><span class="line">java.lang.NullPointerException: There are no credentials with admin access to manage hooks on GitHubRepositoryName[host=github.com,username=CroMarmot,repository=jenkinsdemo]</span><br><span class="line">	at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:231)</span><br></pre></td></tr></table></figure>

<p>但是 在页面上 我点击配置啥也没改 点确定又看似正常的进行拉取了</p>
<p>又触发了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ERROR: [Fri Jul 26 10:38:48 CST 2019] Could not fetch branches from source 2024a3e8-d0cf-4a42-8de6-49de2562570a</span><br><span class="line">java.lang.InterruptedException: sleep interrupted</span><br><span class="line">	at java.base/java.lang.Thread.sleep(Native Method)</span><br><span class="line">	at org.jenkinsci.plugins.github_branch_source.Connector.checkApiRateLimit(Connector.java:635)</span><br><span class="line">	at org.jenkinsci.plugins.github_branch_source.GitHubSCMSourceRequest.checkApiRateLimit(GitHubSCMSourceRequest.java:400)</span><br><span class="line">	at org.jenkinsci.plugins.github_branch_source.GitHubSCMSource.retrieve(GitHubSCMSource.java:932)</span><br><span class="line">	at jenkins.scm.api.SCMSource._retrieve(SCMSource.java:373)</span><br><span class="line">	at jenkins.scm.api.SCMSource.fetch(SCMSource.java:283)</span><br><span class="line">	at jenkins.branch.MultiBranchProject.computeChildren(MultiBranchProject.java:635)</span><br><span class="line">	at com.cloudbees.hudson.plugins.folder.computed.ComputedFolder.updateChildren(ComputedFolder.java:277)</span><br><span class="line">	at com.cloudbees.hudson.plugins.folder.computed.FolderComputation.run(FolderComputation.java:164)</span><br><span class="line">	at jenkins.branch.MultiBranchProject$BranchIndexing.run(MultiBranchProject.java:1026)</span><br><span class="line">	at hudson.model.ResourceController.execute(ResourceController.java:97)</span><br><span class="line">	at hudson.model.Executor.run(Executor.java:429)</span><br><span class="line">[Fri Jul 26 10:38:48 CST 2019] Finished branch indexing. Indexing took 7 min 0 sec</span><br><span class="line">Aborted</span><br><span class="line">Finished: ABORTED</span><br></pre></td></tr></table></figure>

<p>再把它在页面上结束了重启..</p>
<p>能在 Console Output 中看到 docker在拉取 node了 XD</p>
<p>但拉取又卡住了，….本地这网络真是艹了,决定去云服务上搞.. 不过操作差异应该不大</p>
<p>最后 也没有其它更改，能成功的看到</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+ npm --version</span><br><span class="line">3.10.3</span><br></pre></td></tr></table></figure>

<p>当一次成功以后 再启动，就会很快的直接成功了，从输出看到 github的拉取有再运行一次，但是蛮快，docker就因为之前拉去过node的image，不会再拉去，直接创建了container就也很快了</p>
<p>小总结一下 <code>出了问题 重启试试?</code></p>
<h2 id="尝试增加更多steps"><a href="#尝试增加更多steps" class="headerlink" title="尝试增加更多steps"></a>尝试增加更多steps</h2><p>首先我切了个分支<code>nuxt</code>然后用<code>npx create-nuxt-app</code>创建了一个 hello world</p>
<p>进行了push到github</p>
<p>手动在Jenkins 拉取，</p>
<p>修改了Jenkins 配置的steps,增加了<code>sh &#39;npm install&#39;</code> 和<code>sh &#39;npm run build&#39;</code> ，再次push，还需要再次手动拉取</p>
<p>为了让它能自动获取,我更改了配置在空闲时按照设置频率Scan仓库</p>
<p>接着rust分支上 自动进行了第二次构建，失败</p>
<p>npm install的时候</p>
<p><code>npm ERR! Error: EACCES: permission denied, mkdir &#39;/.npm&#39;</code></p>
<p>没有文件夹创建权限</p>
<p>参考了下面链接，自己也加了<code>whoami</code>,<code>ls -al</code>等来查看运行时状态 最后配置改成了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent &#123; docker &#x27;node:8.12&#x27; &#125;</span><br><span class="line">    environment &#123;</span><br><span class="line">        HOME = &#x27;.&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(&#x27;build&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh &#x27;npm --version&#x27;</span><br><span class="line">                sh &#x27;node -v&#x27;</span><br><span class="line">                sh &#x27;pwd&#x27;</span><br><span class="line">                sh &#x27;ls -al&#x27;</span><br><span class="line">                sh &#x27;npm install&#x27;</span><br><span class="line">                sh &#x27;npm run build&#x27;</span><br><span class="line">                sh &#x27;whoami&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>虽然还是有错误</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Error: Cannot find module &#x27;node-emoji&#x27;</span><br><span class="line">    at Function.Module._resolveFilename (module.js:548:15)</span><br></pre></td></tr></table></figure>

<p>但这已经是具体的npm 的某个package的错误了</p>
<p>至此，算是完成了</p>
<ol>
<li>多分支</li>
<li>自动scan</li>
<li><code>npm install</code> + <code>npm run 命令</code></li>
</ol>
<h3 id="超时、重试和更多"><a href="#超时、重试和更多" class="headerlink" title="超时、重试和更多"></a>超时、重试和更多</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(&#x27;Deploy&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                retry(3) &#123;</span><br><span class="line">                    sh &#x27;./flakey-deploy.sh&#x27;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                timeout(time: 3, unit: &#x27;MINUTES&#x27;) &#123;</span><br><span class="line">                    sh &#x27;./health-check.sh&#x27;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>retry 失败 则再尝试，最多尝试3次</p>
<p>timeout 运行时间最长 3 分钟</p>
<p>以上也可以嵌套</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">steps &#123;</span><br><span class="line">    timeout(time: 3, unit: &#x27;MINUTES&#x27;) &#123;</span><br><span class="line">        retry(5) &#123;</span><br><span class="line">            sh &#x27;./flakey-deploy.sh&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>表示最多尝试5次，总时间不超过3min</p>
<h3 id="完成时"><a href="#完成时" class="headerlink" title="完成时"></a>完成时</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(&#x27;Test&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh &#x27;echo &quot;Fail!&quot;; exit 1&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    post &#123;</span><br><span class="line">        always &#123;</span><br><span class="line">            echo &#x27;This will always run&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">        success &#123;</span><br><span class="line">            echo &#x27;This will run only if successful&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">        failure &#123;</span><br><span class="line">            echo &#x27;This will run only if failed&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">        unstable &#123;</span><br><span class="line">            echo &#x27;This will run only if the run was marked as unstable&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">        changed &#123;</span><br><span class="line">            echo &#x27;This will run only if the state of the Pipeline has changed&#x27;</span><br><span class="line">            echo &#x27;For example, if the Pipeline was previously failing but is now successful&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在post部分里，增加 不同 完成状态时要执行的动作</p>
<h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1><p>先去继续看rust了</p>
<p><a href="https://jenkins.io/zh/doc/pipeline/tour/agents/">https://jenkins.io/zh/doc/pipeline/tour/agents/</a></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://jenkins.io/zh/doc/pipeline/tour/getting-started/">https://jenkins.io/zh/doc/pipeline/tour/getting-started/</a></p>
<p><a href="https://github.com/nuxt/nuxt.js">https://github.com/nuxt/nuxt.js</a></p>
<p><a href="https://github.com/Microsoft/WSL/issues/14">https://github.com/Microsoft/WSL/issues/14</a></p>
<p><a href="https://stackoverflow.com/questions/42743201/npm-install-fails-in-jenkins-pipeline-in-docker/42957034">https://stackoverflow.com/questions/42743201/npm-install-fails-in-jenkins-pipeline-in-docker/42957034</a></p>
<p>所有默认功能:<code>http://localhost:8083/job/yarnwebpipedocker/pipeline-syntax/html</code></p>
<h1 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h1><p><a href="https://github.com/jenkinsci/docker/blob/master/README.md">https://github.com/jenkinsci/docker/blob/master/README.md</a></p>
<p>为了把软件&#x2F;软件依赖插件&#x2F;仓库分开</p>
<p><code>docker run --rm -d --group-add $(stat -c &#39;%g&#39; /var/run/docker.sock) --name myjenkins -p 10080:8080 -p 50000:50000 -v /var/run/docker.sock:/var/run/docker.sock -v $(which docker):/usr/bin/docker -v jenkins_home:/var/jenkins_home jenkins/jenkins:lts</code></p>
<p>解释</p>
<p><code>--rm</code>结束后就自动删除</p>
<p>内部<code>8080</code>映射到外部<code>10080</code></p>
<p>使用<code>docker volume jenkins_home</code>映射到内部使用的<code>/var/jenkins_home</code></p>
<p>为了在docker内的jenkins能使用docker作为agent，对docker和docker.sock 进行了映射,并通过<code>--group-add</code> 授权，</p>
<p>使用官方lts镜像</p>
<p>你需要jenkins中安装 docker pipeline 和 docker 两个插件</p>
<p>&#x2F;&#x2F;??  为了有权限操作docker 还需要 <code>sudo usermod -aG docker jenkins</code></p>
]]></content>
      <categories>
        <category>backend</category>
        <category>devops</category>
      </categories>
      <tags>
        <tag>CI</tag>
        <tag>devops</tag>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>rust book 学习笔记</title>
    <url>/Blog/19-08-15-rust/</url>
    <content><![CDATA[<blockquote>
<p>19-07-12  -&gt; 19-08-15</p>
</blockquote>
<h1 id="Hell-world"><a href="#Hell-world" class="headerlink" title="Hell world"></a>Hell world</h1><h2 id="开始-amp-安装"><a href="#开始-amp-安装" class="headerlink" title="开始 &amp; 安装"></a>开始 &amp; 安装</h2><p><code>curl https://sh.rustup.rs -sSf | sh</code></p>
<p>网络真的是僵硬，下载下一年， 我用远端服务器就很快下了 真是艹了,我在远端 都跟着教程看了两章+尝试demo了，本地的build下载还没下好</p>
<p>国内的话 配置<code>~/.cargo/config</code>如下会稍微快一些,<a href="https://twitter.com/gaocedidi/status/1158558939530706944?s=20">吐槽</a></p>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="section">[registry]</span></span><br><span class="line"><span class="attr">index</span> = <span class="string">&quot;https://mirrors.sjtug.sjtu.edu.cn/git/crates.io-index/&quot;</span></span><br><span class="line"><span class="section">[source.crates-io]</span></span><br><span class="line"><span class="attr">registry</span> = <span class="string">&quot;https://github.com/rust-lang/crates.io-index&quot;</span></span><br><span class="line"><span class="attr">replace-with</span> = <span class="string">&#x27;ustc&#x27;</span></span><br><span class="line"><span class="section">[source.sjtug]</span></span><br><span class="line"><span class="attr">registry</span> = <span class="string">&quot;https://mirrors.sjtug.sjtu.edu.cn/git/crates.io-index/&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>更新</strong> 上面不能用的话看这里 <a href="https://lug.ustc.edu.cn/wiki/mirrors/help/rust-crates">https://lug.ustc.edu.cn/wiki/mirrors/help/rust-crates</a></p>
<h2 id="IDE-x2F-vim配置"><a href="#IDE-x2F-vim配置" class="headerlink" title="IDE&#x2F;vim配置"></a>IDE&#x2F;vim配置</h2><p>我是用的<code>vim</code> + <code>spf13-vim</code>上加自己配置的 <code>~/.vimrc.local</code></p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">function CompileByFileType()</span><br><span class="line">  if &amp;filetype == &quot;cpp&quot;</span><br><span class="line">    &quot;!clang++ -o &quot;%&lt;&quot; &quot;%&quot; -std=gnu++17 -O2 -g -Wall -Wcomma</span><br><span class="line">    !clang++ -o &quot;%&lt;&quot; &quot;%&quot; -std=gnu++17 -g -Wall -Wcomma</span><br><span class="line">    &quot;!g++ -o &quot;%&lt;&quot; &quot;%&quot; -std=gnu++14 -O2 -g -Wall</span><br><span class="line">  elseif &amp;filetype == &quot;c&quot;</span><br><span class="line">    !gcc -o &quot;%&lt;&quot; &quot;%&quot; -O2 -g</span><br><span class="line">  elseif &amp;filetype == &quot;python&quot;</span><br><span class="line">    !python3 &quot;%&quot;</span><br><span class="line">  elseif &amp;filetype == &quot;go&quot;</span><br><span class="line">    !go run &quot;%&quot;</span><br><span class="line"><span class="addition">+  elseif &amp;filetype == &quot;rust&quot;</span></span><br><span class="line"><span class="addition">+    !cargo run</span></span><br><span class="line">  else</span><br><span class="line">    echo &quot;UNKNOWN FILETYPE : &amp;filetype&quot;</span><br><span class="line">  endif</span><br><span class="line">endfunction</span><br><span class="line"></span><br><span class="line">nnoremap &lt;F9&gt; :call CompileByFileType() &lt;CR&gt;</span><br></pre></td></tr></table></figure>

<p>其它的话 据说<code>Clion</code> + <code>rust插件</code> 不错</p>
<h2 id="入门命令"><a href="#入门命令" class="headerlink" title="入门命令"></a>入门命令</h2><p><code>rustup docs --book</code></p>
<p><del>66666 题外话，我觉得现代的游戏 除了游戏本身还需要 背景，目标玩家定位，目标游戏类型定位，以及自身完备性和营销。自身完备性比如观战，历史记录等，去年出的 刀牌 从6万峰值到现在上线就是世界前100,我认为其中缺少的就是完备性。而rust 带一个 这个文档66666</del></p>
<p>有了教程，那我yyp一点 教程里的总结吧</p>
<ul>
<li>单个rs:<code>rustc main.rs</code></li>
<li>build project using <code>cargo build</code> or <code>cargo check</code>.</li>
<li>build + run a project <code>cargo run</code>.</li>
<li>Instead of saving the result of the build in the same directory as our code, Cargo stores it in the <code>target/debug</code> directory.</li>
<li>cargo build –release</li>
</ul>
<h2 id="依赖相关"><a href="#依赖相关" class="headerlink" title="依赖相关"></a>依赖相关</h2><p><del>如果玩过npm可以感觉到和package.json 和对应的lock相似</del></p>
<p>首先<code>Cargo.toml</code> 中加入需要依赖的库和版本描述，如<code>rand = &quot;0.3.14&quot;</code>,会匹配能匹配的某个版本</p>
<p>然后<code>cargo build</code></p>
<p><code>Cargo.lock</code>会保存首次build的各个库的版本</p>
<p>如果希望升级<code>cargo update</code></p>
<h1 id="基本语法-写一个猜测数游戏"><a href="#基本语法-写一个猜测数游戏" class="headerlink" title="基本语法+写一个猜测数游戏"></a>基本语法+写一个猜测数游戏</h1><h2 id="猜数"><a href="#猜数" class="headerlink" title="猜数"></a>猜数</h2><p>依赖</p>
<span id="more"></span>

<p>在<code>Cargo.toml</code>添加</p>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="section">[dependencies]</span></span><br><span class="line"><span class="attr">rand</span> = <span class="string">&quot;0.3.14&quot;</span></span><br></pre></td></tr></table></figure>

<p><code>main.rs</code></p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::io;</span><br><span class="line"><span class="keyword">use</span> std::cmp::Ordering;</span><br><span class="line"><span class="keyword">use</span> rand::Rng;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Guess the number!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">secret_number</span> = rand::<span class="title function_ invoke__">thread_rng</span>().<span class="title function_ invoke__">gen_range</span>(<span class="number">1</span>, <span class="number">101</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// println!(&quot;The secret number is: &#123;&#125;&quot;, secret_number);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">loop</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;Please input your guess.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">guess</span> = <span class="type">String</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line"></span><br><span class="line">        io::<span class="title function_ invoke__">stdin</span>().<span class="title function_ invoke__">read_line</span>(&amp;<span class="keyword">mut</span> guess)</span><br><span class="line">            .<span class="title function_ invoke__">expect</span>(<span class="string">&quot;Failed to read line&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> <span class="variable">guess</span>: <span class="type">u32</span> = <span class="keyword">match</span> guess.<span class="title function_ invoke__">trim</span>().<span class="title function_ invoke__">parse</span>() &#123;</span><br><span class="line">            <span class="title function_ invoke__">Ok</span>(num) =&gt; num,</span><br><span class="line">            <span class="title function_ invoke__">Err</span>(_) =&gt; <span class="keyword">continue</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;You guessed: &#123;&#125;&quot;</span>, guess);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">match</span> guess.<span class="title function_ invoke__">cmp</span>(&amp;secret_number) &#123;</span><br><span class="line">            Ordering::Less =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Too small!&quot;</span>),</span><br><span class="line">            Ordering::Greater =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Too big!&quot;</span>),</span><br><span class="line">            Ordering::Equal =&gt; &#123;</span><br><span class="line">                <span class="built_in">println!</span>(<span class="string">&quot;You win!&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="immutable和mutable"><a href="#immutable和mutable" class="headerlink" title="immutable和mutable"></a>immutable和mutable</h2><p><code>default variables are immutable</code> ： 默认的变量是不变的 &#x3D;。&#x3D;????</p>
<p>和<code>const</code>的区别 <code>const</code> 的值只能由<code>const</code>表达式提供，所以可以看作 <code>immutable</code>是那种 从宏观上看是会变的，例如函数的入参，但对于函数内部可能是不变的?</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">x</span> = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> x : <span class="type">u32</span> = <span class="number">100_000</span>;</span><br></pre></td></tr></table></figure>

<p>shadow掉。。。。。。。。。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = x + <span class="number">1</span>; <span class="comment">// let 不能省略</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = x * <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<h2 id="match"><a href="#match" class="headerlink" title="match"></a>match</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">match</span> 表达式/值 &#123;</span><br><span class="line">  值<span class="number">1</span> =&gt; 表达式/&#123;表达式,...&#125;,</span><br><span class="line">  值<span class="number">2</span> =&gt; ...,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="明确的类型"><a href="#明确的类型" class="headerlink" title="明确的类型"></a>明确的类型</h2><p><code>let guess = &quot;42&quot;.parse().expect(&quot;...&quot;)</code></p>
<p>没有指定<code>guess</code>的类型，而<code>parse</code>是有不同类型的方法，正确的办法<code>let guess: u32</code></p>
<p>基础类型: 浮点数 整数 布尔 字符(Rust’s <code>char</code> type is four bytes in size and represents a Unicode Scalar Value,比<code>ASCII</code>的<code>char</code>定义多 )</p>
<h2 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h2><table>
<thead>
<tr>
<th>Length</th>
<th>Signed</th>
<th>Unsigned</th>
</tr>
</thead>
<tbody><tr>
<td>8-bit</td>
<td>i8</td>
<td>u8</td>
</tr>
<tr>
<td>16-bit</td>
<td>i16</td>
<td>u16</td>
</tr>
<tr>
<td>32-bit</td>
<td>i32</td>
<td>u32</td>
</tr>
<tr>
<td>64-bit</td>
<td>i64</td>
<td>u64</td>
</tr>
<tr>
<td>128-bit</td>
<td>i128</td>
<td>u128</td>
</tr>
<tr>
<td>arch</td>
<td>isize</td>
<td>usize</td>
</tr>
</tbody></table>
<p>进制直接描述法</p>
<table>
<thead>
<tr>
<th>Number literals</th>
<th>Example</th>
</tr>
</thead>
<tbody><tr>
<td>十进制</td>
<td>98_222</td>
</tr>
<tr>
<td>十六进制</td>
<td>0xff</td>
</tr>
<tr>
<td>八进制</td>
<td>0o77</td>
</tr>
<tr>
<td>二进制</td>
<td>0b1111_0000</td>
</tr>
<tr>
<td>Byte (u8 only)</td>
<td>b’A’</td>
</tr>
</tbody></table>
<p>在Debug模式下，overflow会<code>panic</code>，在release模式下， 会把overflow wrap掉</p>
<h2 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h2><p>默认<code>f64</code>,可选 <code>f32</code></p>
<h2 id="tuple-amp-array"><a href="#tuple-amp-array" class="headerlink" title="tuple &amp; array"></a>tuple &amp; array</h2><p>Tuple</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">tup</span>: (<span class="type">i32</span>, <span class="type">f64</span>, <span class="type">u8</span>) = (<span class="number">500.6</span>.<span class="number">4</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> (x,y,z) = tup;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">firstvalue</span> = tup.<span class="number">0</span>; <span class="comment">// 有点意思啊，c++的话 我印象中是 get&lt;index&gt;(某个tuple)</span></span><br></pre></td></tr></table></figure>

<p>Array 定长同类型</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">a</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="variable">a</span>: [<span class="type">i32</span>;<span class="number">5</span>] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br></pre></td></tr></table></figure>

<p>数组越界会报错 <code>:-)</code></p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p><code>let</code> 语句没有返回 所以不能写<code>let x= (let y =6)</code>这种代码</p>
<p>括号是一个表达式可以写成</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">y</span> = &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">3</span>;</span><br><span class="line">        x + <span class="number">1</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of y is: &#123;&#125;&quot;</span>, y);<span class="comment">// 输出4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>函数定义法<code>fn 函数名(参数1:类型,参数2:类型) -&gt; 返回类型 &#123;...&#125;</code></p>
<h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 表达式 &#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> 表达式 &#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>和c++不同 ,rust的类型要求，不能<code>非零</code>和<code>零</code>，一定要<code>布尔</code></p>
<p>有趣的是 花括号时表达式 所以三元运算 可以写成<code>x = if true &#123; 2 &#125; else &#123; 3 &#125;</code></p>
<p>但是 返回类型如果有不同类型<code> let number = if condition &#123; 5 &#125; else &#123; &quot;six&quot; &#125;</code> 会报错</p>
<h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">loop</span> &#123;</span><br><span class="line">  <span class="comment">// code...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">returnvaluefromloop</span> = <span class="keyword">loop</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">break</span> the value you want <span class="keyword">return</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> condition &#123;</span><br><span class="line">  <span class="comment">// code...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">arr</span> = [<span class="number">11</span>,<span class="number">22</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="variable">element</span> <span class="keyword">in</span> arr.<span class="title function_ invoke__">iter</span>() &#123;</span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">&quot;the value is: &#123;&#125;&quot;</span>, element);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="variable">element</span> <span class="keyword">in</span> (<span class="number">1</span>..<span class="number">4</span>).<span class="title function_ invoke__">rev</span>() &#123;</span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">&quot;the value is: &#123;&#125;&quot;</span>, element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Ownership-amp-slice"><a href="#Ownership-amp-slice" class="headerlink" title="Ownership &amp; slice"></a>Ownership &amp; slice</h1><p>这使<code>rust</code>不需要<code>gc</code> 让内存安全得以保证，这一章讲<code>ownership</code>工作</p>
<p>对于内存使用，某些语言用<code>gc</code>，某些语言需要用户自己明确的管理，<code>rust</code>使用memory is managed through a system of ownership with a set of rules that the compiler checks at compile time.所以对运行时速度不会有影响</p>
<p>这也是让<code>rust</code>独特的关键之一</p>
<p>介绍了一下 数据结构意义上的 栈和堆</p>
<p>Ownership rules</p>
<ol>
<li>每一个<code>value</code> 都有一个对应的变量是它的<code>owner</code></li>
<li>同一个时间点 只会有一个<code>owner</code></li>
<li>当<code>owner</code>出了对应的<code>scope</code>，值会被弃用</li>
</ol>
<p>变量的有效有两个关键的 时间点，入和出</p>
<ul>
<li>When s comes into scope, it is valid.</li>
<li>It remains valid until it goes out of scope.</li>
</ul>
<p>字面量string和 String::from的不同是，一个硬编码，一个运行时，如果按c++反编译回来理解，的话，有的<code>char</code>数组直接放在栈上，有的是一个公用地址放的字符，而<code>String</code>就是用多少是啥样了</p>
<p>rust通过 takes a different path: the memory is automatically returned once the variable that owns it goes out of scope</p>
<p>类似于 C++中的Resource Acquisition Is Initalization (RAII)</p>
<p><code>String</code>: <code>let s1 = String::from(&quot;hello&quot;);</code></p>
<p><img data-src="https://doc.rust-lang.org/book/img/trpl04-01.svg" alt="string"></p>
<p>然后<code>String</code>赋值 可以看做指针赋值大概</p>
<p><img data-src="https://doc.rust-lang.org/book/img/trpl04-02.svg" alt="string"></p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s1</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">s2</span> = s1;</span><br><span class="line"></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;, world!&quot;</span>, s1);</span><br></pre></td></tr></table></figure>

<p>以上代码会报错</p>
<p><img data-src="https://doc.rust-lang.org/book/img/trpl04-04.svg" alt="string move"></p>
<p>正确的</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s1</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">s2</span> = s1.<span class="title function_ invoke__">clone</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;s1 = &#123;&#125;, s2 = &#123;&#125;&quot;</span>, s1, s2);</span><br></pre></td></tr></table></figure>

<p>然后 原始类型都是默认<code>copy</code>如 <code>int</code></p>
<p>除此以Tuples, if they only contain types that are also Copy. For example, <code>(i32, i32)</code> is <code>Copy</code>, but <code>(i32, String)</code> is not.</p>
<p>然后一个反 其它语言编程常识的！</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);  <span class="comment">// s comes into scope</span></span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">takes_ownership</span>(s);             <span class="comment">// s&#x27;s value moves into the function...</span></span><br><span class="line">                                    <span class="comment">// ... and so is no longer valid here</span></span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">takes_ownership</span>(s);             <span class="comment">// 然而 在调用函数时 已经被drop了，现在 的s已经被move掉了 不可用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">takes_ownership</span>(some_string: <span class="type">String</span>) &#123; <span class="comment">// some_string comes into scope</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, some_string);</span><br><span class="line">&#125; <span class="comment">// Here, some_string goes out of scope and `drop` is called. The backing</span></span><br><span class="line">  <span class="comment">// memory is freed.</span></span><br></pre></td></tr></table></figure>

<p><code>rust</code>的报错真好看</p>
<p>一个 非原始类型只能用一次？解决方案</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> 函数名(a_str: <span class="type">String</span>) <span class="punctuation">-&gt;</span> <span class="type">String</span>&#123;</span><br><span class="line">  a_str</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>多返回参数<code>fn 函数名(参数) -&gt; (String, usize) &#123; ... (xxx,yyy)&#125;</code></p>
<p>为了不用每一个 函数都这样写 来维持控制权， rust可以用引用来解决</p>
<p><img data-src="https://doc.rust-lang.org/book/img/trpl04-05.svg" alt="reference"></p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s1</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">len</span> = <span class="title function_ invoke__">calculate_length</span>(&amp;s1);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The length of &#x27;&#123;&#125;&#x27; is &#123;&#125;.&quot;</span>, s1, len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">calculate_length</span>(s: &amp;<span class="type">String</span>) <span class="punctuation">-&gt;</span> <span class="type">usize</span> &#123;</span><br><span class="line">    s.<span class="title function_ invoke__">len</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>原理就是 函数并没有 获得 该<code>String</code>的<code>ownership</code>，而是只有其引用的，</p>
<p>所以如果我们 对<code>&amp;s</code>做<code>s.push_str(&quot;, world&quot;);</code>则会报错，不允许修改 默认 引用是 immutable</p>
<p>如果要修改<code>fn 函数名(参数名: &amp;mut String) &#123; 参数名.push_str(&quot;sdafsdfasd&quot;)&#125;</code></p>
<p><strong>限制</strong></p>
<p>对于同一个变量</p>
<p>一个<code>scope</code>里至多只能有一个 <code>mutable</code> 的引用</p>
<p>在有<code>immutable</code>引用的<code>scope</code>里，也不能有<code>mutable</code>的引用</p>
<p>多个<code>immutable</code>的引用时可以的,根据drop意义,以下是可行的</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">r1</span> = &amp;s; <span class="comment">// no problem</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">r2</span> = &amp;s; <span class="comment">// no problem</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 但是r3不能移动到这个位置，因为有 immutable时候不能有mutable 的限制</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125; and &#123;&#125;&quot;</span>, r1, r2);</span><br><span class="line"><span class="comment">// r1 and r2 are no longer used after this point</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 之所以可以，是因为drop的原因，这里看作是所有immutable都已经drop掉了 ,所以他们的scope没有重叠</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">r3</span> = &amp;<span class="keyword">mut</span> s; <span class="comment">// no problem</span></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, r3);</span><br></pre></td></tr></table></figure>

<p>总结描述就是任意一行代码上的<code>scope</code>对任意一个变量 要求<code>immutable*|mutable?</code></p>
<p>rust 编译时会检测 dangling references [如函数内创建的临时值，传出引用,会导致外部并不可用</p>
<h2 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h2><p>没有ownership的类型，slice让你 指向一个连续序列的某一段</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">hello</span> = &amp;s[<span class="number">0</span>..<span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="variable">world</span> = &amp;s[<span class="number">6</span>..<span class="number">11</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="variable">sprefix</span> = &amp;s[..<span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="variable">ssuffix</span> = &amp;s[<span class="number">6</span>..];</span><br><span class="line"><span class="keyword">let</span> <span class="variable">ss</span> = &amp;s[..];</span><br></pre></td></tr></table></figure>

<p><img data-src="https://doc.rust-lang.org/book/img/trpl04-06.svg" alt="slice"></p>
<p>注意在utf-8下 取的slice坐标应该是合法的分割坐标</p>
<p>String slice类型是<code>&amp;str</code>,回顾之前字符串字面量</p>
<p><code>let s= &quot;hell world&quot;;</code>, 这里的s的类型就是<code>&amp;str</code></p>
<p>让函数接受参数是<code>&amp;str</code> 能让代码更加可用</p>
<p>其它 slice，如数值数组的slice，写法和上面类似 类型是<code>&amp;[i32]</code></p>
<h1 id="Struct"><a href="#Struct" class="headerlink" title="Struct"></a>Struct</h1><p>定义</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">struct</span>名&#123;</span><br><span class="line">  字段名<span class="number">1</span>:字段类型<span class="number">1</span>,</span><br><span class="line">  字段名<span class="number">2</span>:字段类型<span class="number">2</span>,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>初始化</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> 变量名 = <span class="keyword">struct</span>名&#123;</span><br><span class="line">  字段名<span class="number">1</span>: 值<span class="number">1</span>,</span><br><span class="line">  字段名<span class="number">2</span>: 值<span class="number">2</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意的是，rust只允许整体上mutable or immutable,不允许 按字段来划分</p>
<p>在参数和字段保持一致时可以略写</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">build_user</span>(email: <span class="type">String</span>, username: <span class="type">String</span>) <span class="punctuation">-&gt;</span> User &#123;</span><br><span class="line">    User &#123;</span><br><span class="line">        email: email, <span class="comment">// 这里可以略写作 email,</span></span><br><span class="line">        username: username, <span class="comment">// 这里可以略写作 username,</span></span><br><span class="line">        active: <span class="literal">true</span>,</span><br><span class="line">        sign_in_count: <span class="number">1</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过其它的struct的部分字段一致造新的struct</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">user2</span> = User &#123;</span><br><span class="line">    email: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;another@example.com&quot;</span>),</span><br><span class="line">    username: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;anotherusername567&quot;</span>),</span><br><span class="line">    active: user1.active,</span><br><span class="line">    sign_in_count: user1.sign_in_count,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 可以写作</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">user2</span> = User &#123;</span><br><span class="line">    email: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;another@example.com&quot;</span>),</span><br><span class="line">    username: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;anotherusername567&quot;</span>),</span><br><span class="line">    ..user1</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>tuple structs! 没有字段名的struct</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Color</span>(<span class="type">i32</span>, <span class="type">i32</span>, <span class="type">i32</span>);</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span>(<span class="type">i32</span>, <span class="type">i32</span>, <span class="type">i32</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">black</span> = <span class="title function_ invoke__">Color</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">origin</span> = <span class="title function_ invoke__">Point</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<p>Unit-Like:</p>
<p>注意到上面的类型是String，是因为我们希望结构体 有对应String的Ownership</p>
<p>如果用 slice，则会因为rust的生命周期管理而报错</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    username: &amp;<span class="type">str</span>,</span><br><span class="line">    email: &amp;<span class="type">str</span>,</span><br><span class="line">    sign_in_count: <span class="type">u64</span>,</span><br><span class="line">    active: <span class="type">bool</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">user1</span> = User &#123;</span><br><span class="line">        email: <span class="string">&quot;someone@example.com&quot;</span>,</span><br><span class="line">        username: <span class="string">&quot;someusername123&quot;</span>,</span><br><span class="line">        active: <span class="literal">true</span>,</span><br><span class="line">        sign_in_count: <span class="number">1</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结构体 &#x2F;&#x2F; rust 的报错真的有意思 还有建议使用</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">    width: <span class="type">u32</span>,</span><br><span class="line">    height: <span class="type">u32</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">rect1</span> = Rectangle &#123; width: <span class="number">30</span>, height: <span class="number">50</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;rect1 is &#123;:?&#125;&quot;</span>, rect1); <span class="comment">// 或者 &#123;:#?&#125; 可以 格式化样式输出</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>struct方法:</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">    width: <span class="type">u32</span>,</span><br><span class="line">    height: <span class="type">u32</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">area</span>(&amp;<span class="keyword">self</span>,other:&amp;Rectangle) <span class="punctuation">-&gt;</span> <span class="type">u32</span> &#123; <span class="comment">// 编译器知道self类型，我们只希望 操作 不希望take ownership,否则 &amp;mut self</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="keyword">self</span>.width * <span class="keyword">self</span>.height</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">// 可以拆分到多个impl 合法的语法 但不建议</span></span><br><span class="line"><span class="comment">//impl</span></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">square</span>(size:<span class="type">u32</span>) <span class="punctuation">-&gt;</span> Rectangle&#123; <span class="comment">//</span></span><br><span class="line">      Rectangle &#123; width:size,height:size&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">rect1</span> = Rectangle &#123; width: <span class="number">30</span>, height: <span class="number">50</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(</span><br><span class="line">        <span class="string">&quot;The area of the rectangle is &#123;&#125; square pixels.&quot;</span>,</span><br><span class="line">        rect1.<span class="title function_ invoke__">area</span>()</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">square1</span> = Rectangle::<span class="title function_ invoke__">square</span>(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>相对于 <code>C++/C</code>的 <code>-&gt;</code> &#x3D;&#x3D; <code>(* ).</code></p>
<p>rust有自动 <code>referencing和dereferencing</code> ,都可以简写为<code>.</code></p>
<h1 id="Enums-and-Option-and-Pattern-Matching"><a href="#Enums-and-Option-and-Pattern-Matching" class="headerlink" title="Enums and Option and Pattern Matching"></a>Enums and Option and Pattern Matching</h1><p>定义枚举类型和成员</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> 枚举类型&#123;</span><br><span class="line">  枚举成员<span class="number">1</span>,</span><br><span class="line">  枚举成员<span class="number">2</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">v1</span> = 枚举类型::枚举成员<span class="number">1</span></span><br><span class="line"></span><br><span class="line">枚举 的每个成员可以不同类型</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">IpAddr</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">V4</span>(<span class="type">u8</span>, <span class="type">u8</span>, <span class="type">u8</span>, <span class="type">u8</span>),</span><br><span class="line">    <span class="title function_ invoke__">V6</span>(<span class="type">String</span>),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">home</span> = IpAddr::<span class="title function_ invoke__">V4</span>(<span class="number">127</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">loopback</span> = IpAddr::<span class="title function_ invoke__">V6</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;::1&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表转库的使用方式</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Ipv4Addr</span> &#123;</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Ipv6Addr</span> &#123;</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">IpAddr</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">V4</span>(Ipv4Addr),</span><br><span class="line">    <span class="title function_ invoke__">V6</span>(Ipv6Addr),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>enum 也可以 impl方法函数</p>
<p>rust中不存在的概念下的枚举量 Option:</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Option</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="title function_ invoke__">Some</span>(T),</span><br><span class="line">    <span class="literal">None</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">some_number</span> = <span class="title function_ invoke__">Some</span>(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">some_string</span> = <span class="title function_ invoke__">Some</span>(<span class="string">&quot;a string&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">absent_number</span>: <span class="type">Option</span>&lt;<span class="type">i32</span>&gt; = <span class="literal">None</span>;</span><br></pre></td></tr></table></figure>

<p>Option 的意味，这 编写者，对于Option中的值并不确定 如 Option<i8></p>
<p>而直接的i8意味着 一定有有效值，所以<code>i8</code>和<code>Option&lt;i8&gt;</code>类型相加会报错，在使用Option中的值时， 需要把<code>Option&lt;T&gt;</code>中的<code>T</code>提取出来</p>
<p>Match 看上去像其它语言的switch</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">[<span class="title function_ invoke__">derive</span>(<span class="built_in">Debug</span>)]</span><br><span class="line"> <span class="keyword">enum</span> <span class="title class_">UsState</span> &#123;</span><br><span class="line">    Alabama,</span><br><span class="line">    Alaska,</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">enum</span> <span class="title class_">Coin</span> &#123;</span><br><span class="line">    Penny,</span><br><span class="line">    Nickel,</span><br><span class="line">    Dime,</span><br><span class="line">    <span class="title function_ invoke__">Quarter</span>(UsState),</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">value_in_cents</span>(coin: Coin) <span class="punctuation">-&gt;</span> <span class="type">u32</span> &#123;</span><br><span class="line">    <span class="keyword">match</span> coin &#123;</span><br><span class="line">        Coin::Penny =&gt; <span class="number">1</span>,</span><br><span class="line">        Coin::Nickel =&gt; <span class="number">5</span>,</span><br><span class="line">        Coin::Dime =&gt; <span class="number">10</span>,</span><br><span class="line">        Coin::<span class="title function_ invoke__">Quarter</span>(state) =&gt; &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;State quarter from &#123;:?&#125;!&quot;</span>, state);</span><br><span class="line">            <span class="number">25</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 支持None的+1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">plus_one</span>(x: <span class="type">Option</span>&lt;<span class="type">i32</span>&gt;) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;<span class="type">i32</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">match</span> x &#123;</span><br><span class="line">        <span class="literal">None</span> =&gt; <span class="literal">None</span>,</span><br><span class="line">        <span class="title function_ invoke__">Some</span>(i) =&gt; <span class="title function_ invoke__">Some</span>(i + <span class="number">1</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">five</span> = <span class="title function_ invoke__">Some</span>(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">six</span> = <span class="title function_ invoke__">plus_one</span>(five);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">none</span> = <span class="title function_ invoke__">plus_one</span>(<span class="literal">None</span>);</span><br></pre></td></tr></table></figure>

<p> It’s a bit tricky at first, but once you get used to it, you’ll wish you had it in all languages. It’s consistently a user favorite. <del>自吹自擂</del></p>
<p>然而 如果你上面省去None，编译会报错，这就和switch有了差异，相当于强制 处理所有</p>
<p>这里有<code>_</code>可以匹配所有,不希望处理的可以在match最后<code>_ =&gt; ()</code></p>
<p>简洁控制流<code>if let</code></p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">some_u8_value</span> = <span class="title function_ invoke__">Some</span>(<span class="number">0u8</span>);</span><br><span class="line"><span class="keyword">match</span> some_u8_value &#123;</span><br><span class="line">    <span class="title function_ invoke__">Some</span>(<span class="number">3</span>) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;three&quot;</span>),</span><br><span class="line">    _ =&gt; (),</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 可以改为</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(<span class="number">3</span>) = some_u8_value &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;three&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Managing-Growing-Projects-with-Packages-Crates-and-Modules"><a href="#Managing-Growing-Projects-with-Packages-Crates-and-Modules" class="headerlink" title="Managing Growing Projects with Packages, Crates, and Modules"></a>Managing Growing Projects with Packages, Crates, and Modules</h1><ul>
<li><code>Packages</code>: A Cargo feature that lets you build, test, and share crates</li>
<li><code>Crates</code>: A tree of modules that produces a library or executable</li>
<li><code>Modules</code> and <code>use</code>: Let you control the organization, scope, and privacy of paths</li>
<li><code>Paths</code>: A way of naming an item, such as a struct, function, or module</li>
</ul>
<h2 id="Packages-amp-Crates"><a href="#Packages-amp-Crates" class="headerlink" title="Packages &amp; Crates"></a>Packages &amp; Crates</h2><p><code>crate = binaray | library</code></p>
<p><code>package = (library crate)?+(binaray crate)*</code></p>
<p>回顾<code>cargo new my-project</code>创建出来的。</p>
<p>会发现<code>Cargo.toml</code>并不会包含<code>src/main.rs</code></p>
<p>是因为默认 <code>src/main.rs</code>会是binary的入口,会编译产生和project同名的二进制文件，同样<code>src/lib.rs</code>会是crate的library的入口</p>
<p>cargo会交给rustc 来build library或binary</p>
<p>A package can have multiple binary crates by placing files in the src&#x2F;bin directory: each file will be a separate binary crate.</p>
<p>如果像第二章里面引入rand，它会提供一个trait叫Rng</p>
<p>而如果我们自己也写了一个struct Rng，那么如果要用rand的，使用<code>rand::Rng</code></p>
<h2 id="Defining-Modules-to-Control-Scope-and-Privacy"><a href="#Defining-Modules-to-Control-Scope-and-Privacy" class="headerlink" title="Defining Modules to Control Scope and Privacy"></a>Defining Modules to Control Scope and Privacy</h2><ul>
<li><code>use</code> keyword that brings a path into scope</li>
<li><code>pub</code> keyword to make items public.</li>
<li><code>as</code></li>
</ul>
<p>文档这里用写一个餐厅举例</p>
<p><code>cargo new --lib restaurant</code></p>
<p>src&#x2F;lib.rs :</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mod</span> front_of_house &#123; <span class="comment">// 用mod 定义一个module</span></span><br><span class="line">    <span class="keyword">mod</span> hosting &#123; <span class="comment">// module 可以嵌套</span></span><br><span class="line">        <span class="keyword">fn</span> <span class="title function_">add_to_waitlist</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">fn</span> <span class="title function_">seat_at_table</span>() &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">mod</span> serving &#123;</span><br><span class="line">        <span class="keyword">fn</span> <span class="title function_">take_order</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">fn</span> <span class="title function_">serve_order</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">fn</span> <span class="title function_">take_payment</span>() &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>记得把<code>#[cfg(test)]</code>去掉</strong></p>
<p>这样分割后，别人阅读代码可以按照group分割找，相对于完全看一遍代码更友好</p>
<h2 id="Path"><a href="#Path" class="headerlink" title="Path"></a>Path</h2><ul>
<li>绝对路径create开头的</li>
<li>相对路径 self,super 或 当前module中的一个identifier</li>
</ul>
<p>例如对上面</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">eat_at_restaurant</span>() &#123;</span><br><span class="line">    <span class="comment">// Absolute path</span></span><br><span class="line">    crate::front_of_house::hosting::<span class="title function_ invoke__">add_to_waitlist</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Relative path</span></span><br><span class="line">    front_of_house::hosting::<span class="title function_ invoke__">add_to_waitlist</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意以上代码并不能通过编译，因为会有hosting is private</p>
<p>Modules aren’t only useful for organizing your code, they also define Rust’s privacy boundary</p>
<p>module的所有成员(functions, methods, structs, enums, modules, and constants) 默认全是private</p>
<p>父级别不能使用子级别的内部private方法，但是子级别可以用它祖先的方法…<del>废话</del></p>
<p>如果希望能被外部调用 上面的mod应该 改为</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mod</span> front_of_house &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">mod</span> hosting &#123;</span><br><span class="line">        <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">add_to_waitlist</span>() &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为相函数和<code>front_of_house</code>的位置是 同层级关系，所以最外的mod不需要pub</p>
<blockquote>
<p>super</p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">serve_order</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">mod</span> back_of_house &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">fix_incorrect_order</span>() &#123;</span><br><span class="line">        <span class="title function_ invoke__">cook_order</span>(); <span class="comment">// 同级别</span></span><br><span class="line">        super::<span class="title function_ invoke__">serve_order</span>(); <span class="comment">// 父级别</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">cook_order</span>() &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果要让一个mod中的 任何一个public，需要在每个需要的地方加上pub</p>
<h2 id="use"><a href="#use" class="headerlink" title="use"></a>use</h2><p>类似C++ <code>using namespace</code> ?</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mod</span> front_of_house &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">mod</span> hosting &#123;</span><br><span class="line">        <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">add_to_waitlist</span>() &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> crate::front_of_house::hosting; <span class="comment">// bring hosting module into the scope</span></span><br><span class="line"><span class="comment">// 相对路径写法 需要加上self::</span></span><br><span class="line"><span class="comment">// use self::front_of_house::hosting;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">eat_at_restaurant</span>() &#123;</span><br><span class="line">    hosting::<span class="title function_ invoke__">add_to_waitlist</span>();</span><br><span class="line">    hosting::<span class="title function_ invoke__">add_to_waitlist</span>();</span><br><span class="line">    hosting::<span class="title function_ invoke__">add_to_waitlist</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后上面这样是idiom的，虽然也可以<code>use crate::front_of_house::hosting::add_to_waitlist</code>然后 之后就省去<code>hosting::</code>,但根据大家书写习惯，建议这样,接受这个建议</p>
<p>不过无论怎么设计，随着3方库的越来越多，总会有重名&#x3D;。&#x3D;解决方案可以用<code>as</code></p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fmt::<span class="type">Result</span>;</span><br><span class="line"><span class="keyword">use</span> std::io::<span class="type">Result</span> <span class="keyword">as</span> IoResult;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">function1</span>() <span class="punctuation">-&gt;</span> <span class="type">Result</span> &#123;</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">function2</span>() <span class="punctuation">-&gt;</span> IoResult&lt;()&gt; &#123;</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="pub-use"><a href="#pub-use" class="headerlink" title="pub use"></a>pub use</h2><p><code>pub use crate::front_of_house::hosting;</code></p>
<p>这样对于外部代码可以用 <code>hosting::add_to_waitlist</code>来调用</p>
<h2 id="package-引入"><a href="#package-引入" class="headerlink" title="package 引入"></a>package 引入</h2><p>回想之前rand的 在<code>Cargo.toml</code>中添加和代码中引入</p>
<p><code>use std::&#123;cmp::Ordering, io&#125;;</code> 内嵌式引入</p>
<p>同时引入<code>std::io</code> 和 <code>std::io::Write</code>: <code>use std::io::&#123;self, Write&#125;;</code></p>
<p><code>use std::collections::*;</code></p>
<p>This use statement brings all public items defined in <code>std::collections</code> into the current scope. <strong>Be careful</strong> when using the glob operator! Glob can make it harder to tell what names are in scope and where a name used in your program was defined.</p>
<h2 id="模块分化"><a href="#模块分化" class="headerlink" title="模块分化"></a>模块分化</h2><p>当项目大了之后模块也会需要分化</p>
<blockquote>
<p>src&#x2F;lib.rs</p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mod</span> front_of_house;<span class="comment">// 分号结束</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">use</span> crate::front_of_house::hosting;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">eat_at_restaurant</span>() &#123;</span><br><span class="line">    hosting::<span class="title function_ invoke__">add_to_waitlist</span>();</span><br><span class="line">    hosting::<span class="title function_ invoke__">add_to_waitlist</span>();</span><br><span class="line">    hosting::<span class="title function_ invoke__">add_to_waitlist</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于子模块</p>
<p>写法1:</p>
<blockquote>
<p><code>src/front_of_house.rs</code></p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">mod</span> hosting &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">add_to_waitlist</span>() &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>写法2:</p>
<blockquote>
<p><code>src/front_of_house.rs</code></p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">mod</span> hosting;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>src/front_of_house/hosting.rs</code></p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">add_to_waitlist</span>() &#123;&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Common-Collections"><a href="#Common-Collections" class="headerlink" title="Common Collections"></a>Common Collections</h1><p>C++ STL即视感?</p>
<ul>
<li>A <code>vector</code> 允许你储存 变化数量的 值</li>
<li>A <code>string</code> is a collection of characters. 之前提到过 这章会更深入的讲解</li>
<li>A <code>hash map</code> allows you to associate a value with a particular key. 是 <code>map</code>的一个具体的实现版本.</li>
</ul>
<h2 id="Vectors"><a href="#Vectors" class="headerlink" title="Vectors"></a>Vectors</h2><p><code>let v: Vec&lt;i32&gt; = Vec::new();</code></p>
<p>vector不知道你要存什么，他使用 generics(泛型)实现的<code>Vec&lt;T&gt;</code> &#x2F;&#x2F; 第10章会详细讲泛型</p>
<p>直接用值 <code>let v = vec![1, 2, 3];</code></p>
<p>操作</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">v</span> = <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line"></span><br><span class="line">v.<span class="title function_ invoke__">push</span>(<span class="number">5</span>); <span class="comment">// push.....</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// read element</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">third</span>: &amp;<span class="type">i32</span> = &amp;v[<span class="number">2</span>]; <span class="comment">// 需要多一个&amp;符号</span></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;The third element is &#123;&#125;&quot;</span>, third);</span><br><span class="line"></span><br><span class="line"><span class="keyword">match</span> v.<span class="title function_ invoke__">get</span>(<span class="number">2</span>) &#123; <span class="comment">// 返回的是 Option&lt;&amp;T&gt;</span></span><br><span class="line">    <span class="title function_ invoke__">Some</span>(third) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;The third element is &#123;&#125;&quot;</span>, third),</span><br><span class="line">    <span class="literal">None</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;There is no third element.&quot;</span>),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>When the vector gets dropped, all of its contents are also dropped</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">v</span> = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">first</span> = &amp;v[<span class="number">0</span>]; <span class="comment">// immutable borrow occurs here</span></span><br><span class="line"></span><br><span class="line">v.<span class="title function_ invoke__">push</span>(<span class="number">6</span>); <span class="comment">// mutable borrow occurs here</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;The first element is: &#123;&#125;&quot;</span>, first);</span><br></pre></td></tr></table></figure>

<p>上面会挂掉，</p>
<ol>
<li>是因为 之前讲过的 rust关于 ownership的管理方法，</li>
<li>是虽然看上去读第一个元素和尾部加元素毫不影响, 但实际上可能rust的内部实现在 push时会 申请新的地址，并整个拷贝，这样的情况下 first会指向一个被释放了的内存地址。所以其实它们可能有关[其实根本还是 ownership</li>
</ol>
<blockquote>
<p>遍历</p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只读</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">v</span> = <span class="built_in">vec!</span>[<span class="number">100</span>, <span class="number">32</span>, <span class="number">57</span>];</span><br><span class="line"><span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> &amp;v &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 可写</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">v</span> = <span class="built_in">vec!</span>[<span class="number">100</span>, <span class="number">32</span>, <span class="number">57</span>];</span><br><span class="line"><span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> &amp;<span class="keyword">mut</span> v &#123;</span><br><span class="line">    *i += <span class="number">50</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过Enum支持 存储多种类型</p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">SpreadsheetCell</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">Int</span>(<span class="type">i32</span>),</span><br><span class="line">    <span class="title function_ invoke__">Float</span>(<span class="type">f64</span>),</span><br><span class="line">    <span class="title function_ invoke__">Text</span>(<span class="type">String</span>),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">row</span> = <span class="built_in">vec!</span>[</span><br><span class="line">    SpreadsheetCell::<span class="title function_ invoke__">Int</span>(<span class="number">3</span>),</span><br><span class="line">    SpreadsheetCell::<span class="title function_ invoke__">Text</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;blue&quot;</span>)),</span><br><span class="line">    SpreadsheetCell::<span class="title function_ invoke__">Float</span>(<span class="number">10.12</span>),</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<p>怎么 这样看上去 就像 自己实现了一个struct，带一个变量标识类型，和 一个<code>void *</code>指针，然后说vector可以装这些 不同 类型 XD</p>
<p>但下面说 Rust needs to know what types will be in the vector at compile time so it knows exactly how much memory on the heap will be needed to store each element.需要在编译时 知道 每个元素 需要的内存大小(max?) </p>
<h2 id="Storing-UTF-8-Encoded-Text-with-Strings"><a href="#Storing-UTF-8-Encoded-Text-with-Strings" class="headerlink" title="Storing UTF-8 Encoded Text with Strings"></a>Storing UTF-8 Encoded Text with Strings</h2><p>如果你从其它语言来，那么你可能因为string而自闭XD</p>
<p>string的实现是 a collection of bytes</p>
<p>core language: <code>string slice</code> : <code>str</code> ,常见的用法<code>&amp;str</code></p>
<p>standard library: 字符串( growable, mutable, owned, UTF-8 encoded string type) : <code>String</code></p>
<p>String 创建</p>
<p>下面两个函数做同样的事情</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字面量 + to_string()</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">s</span> = <span class="string">&quot;initial contents&quot;</span>.<span class="title function_ invoke__">to_string</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// String::from(字面量)</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;initial contents&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">hello</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;السلام عليكم&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">hello</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Dobrý den&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">hello</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">hello</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;שָׁלוֹם&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">hello</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;नमस्ते&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">hello</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;こんにちは&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">hello</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;안녕하세요&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">hello</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">hello</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Olá&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">hello</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Здравствуйте&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">hello</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Hola&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>操作</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">// push</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s1</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">s2</span> = <span class="string">&quot;bar&quot;</span>;</span><br><span class="line">s1.<span class="title function_ invoke__">push_str</span>(s2); <span class="comment">// push_str 不会拿ownership</span></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;s2 is &#123;&#125;&quot;</span>, s2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// concat</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">s1</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Hello, &quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">s2</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;world!&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">s3</span> = s1 + &amp;s2; <span class="comment">// s1 被 moved，之后就不能用了, 但是s2是引用的使用方法，所以之后还是可用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// + 使用的方法是形如 fn add(self, s: &amp;str) -&gt; String ， add 真实的是使用 泛型实现</span></span><br></pre></td></tr></table></figure>

<p>&amp;s2的类型是<code>&amp;String</code> ，被rust通过<code>deref coercion</code>转换为 <code>&amp;s2[..]</code>,也就是类型<code>&amp;str</code></p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s1</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;tic&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">s2</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;tac&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">s3</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;toe&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">s</span> = <span class="built_in">format!</span>(<span class="string">&quot;&#123;&#125;-&#123;&#125;-&#123;&#125;&quot;</span>, s1, s2, s3);<span class="comment">// 易读 而且 不会对参数 take ownership</span></span><br></pre></td></tr></table></figure>

<p>蛋是,想直接访问s1[0]并不可行<code>std::string::String cannot be indexed by &#123;integer&#125;</code></p>
<p><code>String</code> is a wrapper over a <code>Vec&lt;u8&gt;</code></p>
<p>例子</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">len</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Hola&quot;</span>).<span class="title function_ invoke__">len</span>(); <span class="comment">// 4</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">len</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Здравствуйте&quot;</span>).<span class="title function_ invoke__">len</span>(); <span class="comment">// 24</span></span><br></pre></td></tr></table></figure>

<p>如上两个 因为有<code>UTF-8</code>的编码，所以 简单的 index去描述 会难以理解</p>
<p>因为有3种看待String的方式</p>
<ul>
<li>as bytes,</li>
<li>scalar values, </li>
<li>and grapheme clusters (the closest thing to what we would call letters).</li>
</ul>
<p>对于 “नमस्ते”</p>
<ol>
<li><p>我们以u8为单位看<code>[224, 164, 168, 224, 164, 174, 224, 164, 184, 224, 165, 141, 224, 164, 164, 224, 165, 135]</code></p>
</li>
<li><p>以Unicode scalar value 看<code>[&#39;न&#39;, &#39;म&#39;, &#39;स&#39;, &#39;्&#39;, &#39;त&#39;, &#39;े&#39;]</code></p>
</li>
<li><p>以<code>grapheme clusters</code>看<code>[&quot;न&quot;, &quot;म&quot;, &quot;स्&quot;, &quot;ते&quot;]</code></p>
</li>
</ol>
<p>可行的String操作</p>
<blockquote>
<p>1</p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">hello</span> = <span class="string">&quot;Здравствуйте&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">s</span> = &amp;hello[<span class="number">0</span>..<span class="number">4</span>]; <span class="comment">// 类型&amp;str ,值为 Зд</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="variable">b</span> <span class="keyword">in</span> <span class="string">&quot;नमस्ते&quot;</span>.<span class="title function_ invoke__">bytes</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果是一个非法的分割字符，则会 panic</p>
<blockquote>
<p>2</p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="variable">c</span> <span class="keyword">in</span> <span class="string">&quot;नमस्ते&quot;</span>.<span class="title function_ invoke__">chars</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Storing-Keys-with-Associated-Values-in-Hash-Maps"><a href="#Storing-Keys-with-Associated-Values-in-Hash-Maps" class="headerlink" title="Storing Keys with Associated Values in Hash Maps"></a>Storing Keys with Associated Values in Hash Maps</h2><p><code>HashMap&lt;K, V&gt;</code></p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">scores</span> = HashMap::<span class="title function_ invoke__">new</span>();</span><br><span class="line"></span><br><span class="line">scores.<span class="title function_ invoke__">insert</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Blue&quot;</span>), <span class="number">10</span>);</span><br><span class="line">scores.<span class="title function_ invoke__">insert</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Yellow&quot;</span>), <span class="number">50</span>);</span><br></pre></td></tr></table></figure>

<p>所有的key需要同样的类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">把</span><br><span class="line">[&quot;Blue&quot;,&quot;Yellow&quot;]</span><br><span class="line">[10,50]</span><br><span class="line">变为</span><br><span class="line">&#123;&quot;Blue&quot;:10,&quot;Yellow&quot;:50&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">teams</span>  = <span class="built_in">vec!</span>[<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Blue&quot;</span>), <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Yellow&quot;</span>)];</span><br><span class="line"><span class="keyword">let</span> <span class="variable">initial_scores</span> = <span class="built_in">vec!</span>[<span class="number">10</span>, <span class="number">50</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">scores</span>: HashMap&lt;_, _&gt; = teams.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">zip</span>(initial_scores.<span class="title function_ invoke__">iter</span>()).<span class="title function_ invoke__">collect</span>();</span><br></pre></td></tr></table></figure>

<p>注意的是，insert的操作会拿取ownership</p>
<blockquote>
<p>读取</p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">team_name</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Blue&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">score</span> = scores.<span class="title function_ invoke__">get</span>(&amp;team_name);</span><br></pre></td></tr></table></figure>

<p>get返回的是<code>Option&lt;&amp;V&gt;</code>类型</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">for</span> (key, value) <span class="keyword">in</span> &amp;scores &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;: &#123;&#125;&quot;</span>, key, value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>, scores);</span><br></pre></td></tr></table></figure>

<p>调用insert可以更新 原来的值</p>
<p><code>scores.entry(String::from(&quot;Blue&quot;)).or_insert(50);</code></p>
<p>entry来看是否存在，如果存在则无后续操作，如果不存在则插入值</p>
<blockquote>
<p>基于原来的值更新</p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">count</span> = map.<span class="title function_ invoke__">entry</span>(word).<span class="title function_ invoke__">or_insert</span>(<span class="number">0</span>);</span><br><span class="line">*count += <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>By default, HashMap uses a “cryptographically strong”1 hashing function that can provide resistance to Denial of Service (DoS) attacks !!!!!</p>
<h1 id="Error-Handling"><a href="#Error-Handling" class="headerlink" title="Error Handling"></a>Error Handling</h1><p>错误分为<code>recoverable</code> 和 <code>unrecoverable errors</code></p>
<p>Rust 没有exceptions， 它只有<code>type Result&lt;T, E&gt;</code></p>
<h2 id="不可恢复的错误with-panic"><a href="#不可恢复的错误with-panic" class="headerlink" title="不可恢复的错误with panic!"></a>不可恢复的错误with panic!</h2><p>当调用<code>panic!</code>时 macro executes, your program will print a failure message, unwind and clean up the stack, and then quit</p>
<p>panic发生时，默认行为 the program starts unwinding, which means Rust walks back up the stack and cleans up the data from each function it encounters</p>
<p>你也可以通过在Cargo.toml的 <code>[profile]</code>部分 增加<code>panic=&#39;abort&#39;</code>来 达到一旦panic直接<code>abort</code>的效果,如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[profile.release]</span><br><span class="line">panic = &#x27;abort&#x27;</span><br></pre></td></tr></table></figure>

<p>在终端里<code>export RUST_BACKTRACE=1</code>或者 <code>RUST_BACKTRACE=1 cargo run</code>可以让panic时输出栈信息</p>
<h2 id="Recoverable-Errors-with-Result"><a href="#Recoverable-Errors-with-Result" class="headerlink" title="Recoverable Errors with Result"></a>Recoverable Errors with Result</h2><p>Result的样子:</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Result</span>&lt;T, E&gt; &#123;</span><br><span class="line">    <span class="title function_ invoke__">Ok</span>(T),</span><br><span class="line">    <span class="title function_ invoke__">Err</span>(E),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例如 打开文件 的返回就是<code>Result&lt;std::fs::File,std::io::Error&gt;</code></p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fs::File;</span><br><span class="line"><span class="keyword">use</span> std::io::ErrorKind;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">f</span> = File::<span class="title function_ invoke__">open</span>(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">f</span> = <span class="keyword">match</span> f &#123;</span><br><span class="line">        <span class="title function_ invoke__">Ok</span>(file) =&gt; file,</span><br><span class="line">        <span class="title function_ invoke__">Err</span>(error) =&gt; <span class="keyword">match</span> error.<span class="title function_ invoke__">kind</span>() &#123;</span><br><span class="line">            ErrorKind::NotFound =&gt; <span class="keyword">match</span> File::<span class="title function_ invoke__">create</span>(<span class="string">&quot;hello.txt&quot;</span>) &#123;</span><br><span class="line">                <span class="title function_ invoke__">Ok</span>(fc) =&gt; fc,</span><br><span class="line">                <span class="title function_ invoke__">Err</span>(e) =&gt; <span class="built_in">panic!</span>(<span class="string">&quot;Problem creating the file: &#123;:?&#125;&quot;</span>, e),</span><br><span class="line">            &#125;,</span><br><span class="line">            other_error =&gt; <span class="built_in">panic!</span>(<span class="string">&quot;Problem opening the file: &#123;:?&#125;&quot;</span>, other_error),</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意到的是Result被默认 引入，所以不需要在Ok和Err前加上<code>Result::</code></p>
<p>我们这里 打开文件，如果成功直接 <code>Ok(file)=&gt;file</code> ,如果发生错误，则根据错误的类型判断,来进行不同操作</p>
<p>以上出现了很多match，也可以写成</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fs::File;</span><br><span class="line"><span class="keyword">use</span> std::io::ErrorKind;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">f</span> = File::<span class="title function_ invoke__">open</span>(<span class="string">&quot;hello.txt&quot;</span>).<span class="title function_ invoke__">unwrap_or_else</span>(|error| &#123;</span><br><span class="line">        <span class="keyword">if</span> error.<span class="title function_ invoke__">kind</span>() == ErrorKind::NotFound &#123;</span><br><span class="line">            File::<span class="title function_ invoke__">create</span>(<span class="string">&quot;hello.txt&quot;</span>).<span class="title function_ invoke__">unwrap_or_else</span>(|error| &#123;</span><br><span class="line">                <span class="built_in">panic!</span>(<span class="string">&quot;Problem creating the file: &#123;:?&#125;&quot;</span>, error);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">panic!</span>(<span class="string">&quot;Problem opening the file: &#123;:?&#125;&quot;</span>, error);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>还有更简洁的unwrap(正确返回 错误则panic) : <code>let f = File::open(&quot;hello.txt&quot;).unwrap();</code></p>
<p> If the Result value is the Ok variant, unwrap will return the value inside the Ok. If the Result is the Err variant, unwrap will call the <code>panic! macro</code> for us. Here is an example of unwrap in action</p>
<p>还有一个<code>expect</code> 和unwrap一样，但是可以多传参想展示的错误信息<code>let f = File::open(&quot;hello.txt&quot;).expect(&quot;Failed to open hello.txt&quot;);</code></p>
<p>你可以在 match中不处理错误 手动的return 给Err，让上层函数来处理, [就是Exception那个</p>
<p>对于传递错误的可以 简写为 <code>?</code></p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::io;</span><br><span class="line"><span class="keyword">use</span> std::io::Read;</span><br><span class="line"><span class="keyword">use</span> std::fs::File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">read_username_from_file</span>() <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;<span class="type">String</span>, io::Error&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">f</span> = File::<span class="title function_ invoke__">open</span>(<span class="string">&quot;hello.txt&quot;</span>)?;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">    f.<span class="title function_ invoke__">read_to_string</span>(&amp;<span class="keyword">mut</span> s)?;</span><br><span class="line">    <span class="title function_ invoke__">Ok</span>(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在main里使用<code>?</code></p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::error::Error;</span><br><span class="line"><span class="keyword">use</span> std::fs::File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;(), <span class="type">Box</span>&lt;<span class="keyword">dyn</span> Error&gt;&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">f</span> = File::<span class="title function_ invoke__">open</span>(<span class="string">&quot;hello.txt&quot;</span>)?;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">Ok</span>(())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="To-panic-or-Not-to-panic"><a href="#To-panic-or-Not-to-panic" class="headerlink" title="To panic! or Not to panic!"></a>To panic! or Not to panic!</h2><p>本节讨论 panic的时机</p>
<p>在代码原型上和测试代码中，使用panic,如用unwrap，可以 既让你的代码保持干净，也能让你明确知道哪里还没有做处理</p>
<p>当你有比编译器更多的信息时，如你通过一些检查 明确这里不可能发生panic时，直接unwrap(),比如 ip访问127.0.0.1</p>
<p>当你的代码 进入一个<code>bad state</code>时 建议panic,这里<code>bad state</code>指的 assumption, guarantee, contract, or invariant has been broken, such as when invalid values, contradictory values, or missing values are passed to your code—plus one or more of the following:</p>
<ul>
<li>The bad state is not something that’s expected to happen occasionally.</li>
<li>Your code after this point needs to rely on not being in this bad state.</li>
<li>There’s not a good way to encode this information in the types you use.</li>
</ul>
<p>感觉这个就有点像 使用assert</p>
<p>除此以外更建议使用 类型 来做保证，利用rust编译时检查来保护</p>
<p>另一个办法是自定义一个类型</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">Guess</span> &#123;</span><br><span class="line">    value: <span class="type">i32</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Guess</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">new</span>(value: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> Guess &#123;</span><br><span class="line">        <span class="keyword">if</span> value &lt; <span class="number">1</span> || value &gt; <span class="number">100</span> &#123;</span><br><span class="line">            <span class="built_in">panic!</span>(<span class="string">&quot;Guess value must be between 1 and 100, got &#123;&#125;.&quot;</span>, value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Guess &#123;</span><br><span class="line">            value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">value</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>总之 处理不了则 panic!,可以处理 或 有可能处理 等等的其它情况 Result</p>
<h1 id="Generic-Types-Traits-and-Lifetimes"><a href="#Generic-Types-Traits-and-Lifetimes" class="headerlink" title="Generic Types, Traits, and Lifetimes"></a>Generic Types, Traits, and Lifetimes</h1><p>上面章节 我们已经用过的有 <code>Option&lt;T&gt;</code>,<code>Vec&lt;T&gt;</code>,<code>HashMap&lt;K,V&gt;</code>,<code>Result&lt;T,E&gt;</code></p>
<p><del>道理我都懂，为什么tutorial要这样举例 没把tutorial的例子移动过来 要看的话 <a href="https://doc.rust-lang.org/book/ch10-00-generics.html">https://doc.rust-lang.org/book/ch10-00-generics.html</a></del></p>
<h2 id="Generic-Data-Types"><a href="#Generic-Data-Types" class="headerlink" title="Generic Data Types"></a>Generic Data Types</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">largest</span>&lt;T&gt;(list: &amp;[T]) <span class="punctuation">-&gt;</span> T &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">largest</span> = list[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> &amp;item <span class="keyword">in</span> list.<span class="title function_ invoke__">iter</span>() &#123;</span><br><span class="line">        <span class="keyword">if</span> item &gt; largest &#123;</span><br><span class="line">            largest = item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    largest</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">number_list</span> = <span class="built_in">vec!</span>[<span class="number">34</span>, <span class="number">50</span>, <span class="number">25</span>, <span class="number">100</span>, <span class="number">65</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">result</span> = <span class="title function_ invoke__">largest</span>(&amp;number_list);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The largest number is &#123;&#125;&quot;</span>, result);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">char_list</span> = <span class="built_in">vec!</span>[<span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;q&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">result</span> = <span class="title function_ invoke__">largest</span>(&amp;char_list);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The largest char is &#123;&#125;&quot;</span>, result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意上面代码会报错,</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">error[E0369]: binary operation `&gt;` cannot be applied to type `T`</span><br><span class="line"> --&gt; src/main.rs:5:12</span><br><span class="line">  |</span><br><span class="line">5 |         if item &gt; largest &#123;</span><br><span class="line">  |            ^^^^^^^^^^^^^^</span><br><span class="line">  |</span><br><span class="line">  = note: an implementation of `std::cmp::PartialOrd` might be missing for `T`</span><br></pre></td></tr></table></figure>

<p>相对于C++的template来说，如果是这种int char类型的话 并不会报错,对于自己定义的struct的话，自己实现<code>operator &gt;</code>也就能用</p>
<p>关于如何解决 后续讨论</p>
<p>在struct中使用</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span>&lt;T&gt; &#123;</span><br><span class="line">    x: T,</span><br><span class="line">    y: T,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">integer</span> = Point &#123; x: <span class="number">5</span>, y: <span class="number">10</span> &#125;;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">float</span> = Point &#123; x: <span class="number">1.0</span>, y: <span class="number">4.0</span> &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>回顾</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Option</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="title function_ invoke__">Some</span>(T),</span><br><span class="line">    <span class="literal">None</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Result</span>&lt;T, E&gt; &#123;</span><br><span class="line">    <span class="title function_ invoke__">Ok</span>(T),</span><br><span class="line">    <span class="title function_ invoke__">Err</span>(E),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span>&lt;T&gt; &#123;</span><br><span class="line">    x: T,</span><br><span class="line">    y: T,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span>&lt;T&gt; Point&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">x</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> &amp;T &#123;</span><br><span class="line">        &amp;<span class="keyword">self</span>.x</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">p</span> = Point &#123; x: <span class="number">5</span>, y: <span class="number">10</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;p.x = &#123;&#125;&quot;</span>, p.<span class="title function_ invoke__">x</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在<code>Point&lt;T&gt;</code>上实现一个<code>x()</code>方法能够返回<code>x</code>字段的引用</p>
<p>对于一个具体的类型的函数定义和方法实现</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Point</span>&lt;<span class="type">f32</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">distance_from_origin</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">f32</span> &#123;</span><br><span class="line">        (<span class="keyword">self</span>.x.<span class="title function_ invoke__">powi</span>(<span class="number">2</span>) + <span class="keyword">self</span>.y.<span class="title function_ invoke__">powi</span>(<span class="number">2</span>)).<span class="title function_ invoke__">sqrt</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><p>You might be wondering whether there is a runtime cost when you’re using generic type parameters. The good news is that Rust implements generics in such a way that your code doesn’t run any slower using generic types than it would with concrete types.</p>
<p>Monomorphization is the process of turning generic code into specific code by filling in the concrete types that are used when compiled.</p>
<p>编译时,所以运行时没有使用generics的代价</p>
<h2 id="Traits-Defining-Shared-Behavior"><a href="#Traits-Defining-Shared-Behavior" class="headerlink" title="Traits: Defining Shared Behavior"></a>Traits: Defining Shared Behavior</h2><p>Note: Traits are similar to a feature often called interfaces in other languages, although with some differences.</p>
<p><code>src/lib.rs</code></p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">trait</span> <span class="title class_">Summary</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">summarize</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">String</span>;<span class="comment">// 这里使用 分号 具体要实现的每个类型去实现:</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在struct上分别 实现 trait</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">NewsArticle</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> headline: <span class="type">String</span>,</span><br><span class="line">    <span class="keyword">pub</span> location: <span class="type">String</span>,</span><br><span class="line">    <span class="keyword">pub</span> author: <span class="type">String</span>,</span><br><span class="line">    <span class="keyword">pub</span> content: <span class="type">String</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Summary</span> <span class="keyword">for</span> <span class="title class_">NewsArticle</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">summarize</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">String</span> &#123;</span><br><span class="line">        <span class="built_in">format!</span>(<span class="string">&quot;&#123;&#125;, by &#123;&#125; (&#123;&#125;)&quot;</span>, <span class="keyword">self</span>.headline, <span class="keyword">self</span>.author, <span class="keyword">self</span>.location)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">Tweet</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> username: <span class="type">String</span>,</span><br><span class="line">    <span class="keyword">pub</span> content: <span class="type">String</span>,</span><br><span class="line">    <span class="keyword">pub</span> reply: <span class="type">bool</span>,</span><br><span class="line">    <span class="keyword">pub</span> retweet: <span class="type">bool</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Summary</span> <span class="keyword">for</span> <span class="title class_">Tweet</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">summarize</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">String</span> &#123;</span><br><span class="line">        <span class="built_in">format!</span>(<span class="string">&quot;&#123;&#125;: &#123;&#125;&quot;</span>, <span class="keyword">self</span>.username, <span class="keyword">self</span>.content)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面是写在同一个文件中，如果有涉及到分分间，需要注意让 我们的trait是pub，这样其它需要实现其内部方法的 通过<code>use 文件名::Summary</code>来引入</p>
<p>But we can’t implement external traits on external types. For example, we can’t implement the <code>Display</code> trait on <code>Vec&lt;T&gt;</code> within our <code>aggregator</code> crate, because <code>Display</code> and <code>Vec&lt;T&gt;</code> are defined in the standard library and aren’t local to our <code>aggregator</code> crate. This restriction is part of a property of programs called coherence, and more specifically the orphan rule, so named because the parent type is not present. This rule ensures that other people’s code can’t break your code and vice versa. Without the rule, two crates could implement the same trait for the same type, and Rust wouldn’t know which implementation to use.</p>
<p>在上面 trait定义中 可以提供默认实现，然后在使用这个默认实现时写<code>impl Summary for NewsArticle &#123;&#125;</code></p>
<p>默认的 trait的方法可以调用同一个trait里的其他方法,即使其它的方法没有被实现</p>
<p>假设有A,B,C 3个方法，A提供了默认实现，调用了B和C，那么意味着我们对于一个具体的struct 实现了B 和C 那么就可以自然的调用A 方法了</p>
<h3 id="把trait作为参数"><a href="#把trait作为参数" class="headerlink" title="把trait作为参数"></a>把trait作为参数</h3><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">notify</span>(item: <span class="keyword">impl</span> <span class="title class_">Summary</span>) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Breaking news! &#123;&#125;&quot;</span>, item.<span class="title function_ invoke__">summarize</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面<code>impl Trait</code>语法实际是语法糖，<code>trait bound</code>，大概长这样</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">notify</span>&lt;T: Summary&gt;(item: T) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Breaking news! &#123;&#125;&quot;</span>, item.<span class="title function_ invoke__">summarize</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>pub fn notify(item1: impl Summary, item2: impl Summary) &#123;</code> 这样 并没有限制 item1 和item2的类型，它们可以时不同类型</p>
<p>如果我们写成<code>pub fn notify&lt;T: Summary&gt;(item1: T, item2: T) &#123;</code>则可以限制他们的类型为同一类型</p>
<p>关于限制，同时限制满足多个trait</p>
<p><code>pub fn notify(item: impl Summary + Display) &#123;</code> 这样 需要同时实现Summary和Display才能</p>
<p><code>pub fn notify&lt;T: Summary + Display&gt;(item: T) &#123;</code> 也可以这样使用</p>
<p>用<code>where</code>美化trait限制的书写</p>
<p>原本</p>
<p><code>fn some_function&lt;T: Display + Clone, U: Clone + Debug&gt;(t: T, u: U) -&gt; i32 &#123;</code></p>
<p>改写为</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">some_function</span>&lt;T, U&gt;(t: T, u: U) <span class="punctuation">-&gt;</span> <span class="type">i32</span></span><br><span class="line">    <span class="keyword">where</span> T: Display + <span class="built_in">Clone</span>,</span><br><span class="line">          U: <span class="built_in">Clone</span> + <span class="built_in">Debug</span></span><br><span class="line">&#123;</span><br></pre></td></tr></table></figure>

<p>在返回值的地方也可以使用<code>impl Trait</code></p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">returns_summarizable</span>() <span class="punctuation">-&gt;</span> <span class="keyword">impl</span> <span class="title class_">Summary</span> &#123;</span><br><span class="line">    Tweet &#123;</span><br><span class="line">        username: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;horse_ebooks&quot;</span>),</span><br><span class="line">        content: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;of course, as you probably already know, people&quot;</span>),</span><br><span class="line">        reply: <span class="literal">false</span>,</span><br><span class="line">        retweet: <span class="literal">false</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>but the code calling this function doesn’t know that.</code></p>
<p>这里举例说 例如在<code>Iterator</code>之类的使用情景下，让你不需要关注具体，只需要关注功能实现</p>
<p>但是,实际只能返回单一类型..(由于它的实现原理)</p>
<p>假设A 和 B 都实现了Summary, 但是 你不可以使用<code>if somestate &#123; A &#123;&#125; &#125;else &#123; B&#123;&#125; &#125;</code>来返回</p>
<hr>
<p>我们回到<code>Generic Data Types</code>讲的那个比大小的代码</p>
<p>大于号会用到Rust中 的 <code>std::cmp::PartialOrd</code></p>
<p><code>fn largest&lt;T: PartialOrd&gt;(list: &amp;[T]) -&gt; T &#123;</code> 并不能简单的解决问题</p>
<p>为了让我们的largest 只支持 我们实现过PartialOrd 和Copy (char和i32默认实现了)的</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">largest</span>&lt;T: <span class="built_in">PartialOrd</span> + <span class="built_in">Copy</span>&gt;(list: &amp;[T]) <span class="punctuation">-&gt;</span> T &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">largest</span> = list[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> &amp;item <span class="keyword">in</span> list.<span class="title function_ invoke__">iter</span>() &#123;</span><br><span class="line">        <span class="keyword">if</span> item &gt; largest &#123;</span><br><span class="line">            largest = item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    largest</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">number_list</span> = <span class="built_in">vec!</span>[<span class="number">34</span>, <span class="number">50</span>, <span class="number">25</span>, <span class="number">100</span>, <span class="number">65</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">result</span> = <span class="title function_ invoke__">largest</span>(&amp;number_list);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The largest number is &#123;&#125;&quot;</span>, result);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">char_list</span> = <span class="built_in">vec!</span>[<span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;q&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">result</span> = <span class="title function_ invoke__">largest</span>(&amp;char_list);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The largest char is &#123;&#125;&quot;</span>, result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果我们不希望限制 largest函数 限制 需要实现<code>Copy</code>,我们可以用<code>Clone</code>代替<code>Copy</code>，意味着我们需要 使用更多的heap allocations,对于大数据来说，会让速度下降很多</p>
<blockquote>
<p>Another way we could implement largest is for the function to return a reference to a T value in the slice. If we change the return type to &amp;T instead of T, thereby changing the body of the function to return a reference, we wouldn’t need the Clone or Copy trait bounds and we could avoid heap allocations. Try implementing these alternate solutions on your own!</p>
</blockquote>
<p>答案:</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">largest</span>&lt;T: <span class="built_in">PartialOrd</span>&gt;(list: &amp;[T]) <span class="punctuation">-&gt;</span> &amp;T &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">largest</span> = &amp;list[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="variable">item</span> <span class="keyword">in</span> list.<span class="title function_ invoke__">iter</span>() &#123;</span><br><span class="line">        <span class="keyword">if</span> item &gt; largest &#123;</span><br><span class="line">            largest = &amp;item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    largest</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">number_list</span> = <span class="built_in">vec!</span>[<span class="number">34</span>, <span class="number">50</span>, <span class="number">25</span>, <span class="number">100</span>, <span class="number">65</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">result</span> = <span class="title function_ invoke__">largest</span>(&amp;number_list);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The largest number is &#123;&#125;&quot;</span>, result);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">char_list</span> = <span class="built_in">vec!</span>[<span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;q&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">result</span> = <span class="title function_ invoke__">largest</span>(&amp;char_list);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The largest char is &#123;&#125;&quot;</span>, result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>你可以发现通过 限制 不同的trait 能够 有条件的实现 指定范畴内的 方法</p>
<p>例如标准库在任何type上实现了 <code>ToString</code> Trait</p>
<p>the standard library implements the <code>ToString</code> trait on any type that implements the <code>Display</code> trait. The <code>impl</code> block in the standard library looks similar to this code:</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span>&lt;T: Display&gt; <span class="built_in">ToString</span> <span class="keyword">for</span> <span class="title class_">T</span> &#123;</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Validating-References-with-Lifetimes"><a href="#Validating-References-with-Lifetimes" class="headerlink" title="Validating References with Lifetimes"></a>Validating References with Lifetimes</h2><p>Rust编译器有一个<code>borrow checker</code></p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 错误的</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">r</span>;                <span class="comment">// ---------+-- &#x27;a</span></span><br><span class="line">                          <span class="comment">//          |</span></span><br><span class="line">    &#123;                     <span class="comment">//          |</span></span><br><span class="line">        <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span>;        <span class="comment">// -+-- &#x27;b  |</span></span><br><span class="line">        r = &amp;x;           <span class="comment">//  |       |</span></span><br><span class="line">    &#125;                     <span class="comment">// -+       |</span></span><br><span class="line">                          <span class="comment">//          |</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;r: &#123;&#125;&quot;</span>, r); <span class="comment">//          |</span></span><br><span class="line">&#125;                         <span class="comment">// ---------+</span></span><br><span class="line"><span class="comment">// 正确的 data has a longer lifetime than the reference</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span>;            <span class="comment">// ----------+-- &#x27;b</span></span><br><span class="line">                          <span class="comment">//           |</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">r</span> = &amp;x;           <span class="comment">// --+-- &#x27;a  |</span></span><br><span class="line">                          <span class="comment">//   |       |</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;r: &#123;&#125;&quot;</span>, r); <span class="comment">//   |       |</span></span><br><span class="line">                          <span class="comment">// --+       |</span></span><br><span class="line">&#125;                         <span class="comment">// ----------+</span></span><br></pre></td></tr></table></figure>

<p>有问题的代码</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">longest</span>(x: &amp;<span class="type">str</span>, y: &amp;<span class="type">str</span>) <span class="punctuation">-&gt;</span> &amp;<span class="type">str</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> x.<span class="title function_ invoke__">len</span>() &gt; y.<span class="title function_ invoke__">len</span>() &#123;</span><br><span class="line">        x</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        y</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于编译时来说，你不知道x和y的生命周期，当然编译器更不知道x和y的生命周期</p>
<h3 id="生命周期注解"><a href="#生命周期注解" class="headerlink" title="生命周期注解"></a>生命周期注解</h3><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">&amp;<span class="type">i32</span>        <span class="comment">// 引用</span></span><br><span class="line">&amp;<span class="symbol">&#x27;a</span> <span class="type">i32</span>     <span class="comment">// 带有显式生命周期的引用</span></span><br><span class="line">&amp;<span class="symbol">&#x27;a</span> <span class="keyword">mut</span> <span class="type">i32</span> <span class="comment">// 带有显式生命周期的可变引用</span></span><br></pre></td></tr></table></figure>

<p>单个注解无意义</p>
<p>For example, let’s say we have a function with the parameter first that is a reference to an i32 with lifetime ‘a. The function also has another parameter named second that is another reference to an i32 that also has the lifetime ‘a. The lifetime annotations indicate that the references first and second must both live as long as that generic lifetime.</p>
<p>上面的代码修复为</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">longest</span>&lt;<span class="symbol">&#x27;a</span>&gt;(x: &amp;<span class="symbol">&#x27;a</span> <span class="type">str</span>, y: &amp;<span class="symbol">&#x27;a</span> <span class="type">str</span>) <span class="punctuation">-&gt;</span> &amp;<span class="symbol">&#x27;a</span> <span class="type">str</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> x.<span class="title function_ invoke__">len</span>() &gt; y.<span class="title function_ invoke__">len</span>() &#123;</span><br><span class="line">        x</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        y</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>要注意的是 这并不会改变任何的存活时间????,这只会保证 lifetime的合法性</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">string1</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;long string is long&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">string2</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;xyz&quot;</span>);</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">result</span> = <span class="title function_ invoke__">longest</span>(string1.<span class="title function_ invoke__">as_str</span>(), string2.<span class="title function_ invoke__">as_str</span>());</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;The longest string is &#123;&#125;&quot;</span>, result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 错误 并不能给string2续命</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">string1</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;long string is long&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">result</span>;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">string2</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;xyz&quot;</span>);</span><br><span class="line">        result = <span class="title function_ invoke__">longest</span>(string1.<span class="title function_ invoke__">as_str</span>(), string2.<span class="title function_ invoke__">as_str</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The longest string is &#123;&#125;&quot;</span>, result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Thinking-in-Terms-of-Lifetimes-从生命周期的角度思考"><a href="#Thinking-in-Terms-of-Lifetimes-从生命周期的角度思考" class="headerlink" title="Thinking in Terms of Lifetimes 从生命周期的角度思考"></a>Thinking in Terms of Lifetimes 从生命周期的角度思考</h3><p>注意的是，你只用标注有关联的，如下 当y和 结果无关联时，不写注解也能通过编译</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">longest</span>&lt;<span class="symbol">&#x27;a</span>&gt;(x: &amp;<span class="symbol">&#x27;a</span> <span class="type">str</span>, y: &amp;<span class="type">str</span>) <span class="punctuation">-&gt;</span> &amp;<span class="symbol">&#x27;a</span> <span class="type">str</span> &#123;</span><br><span class="line">    x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从理论上讲对引用来说 至少有一个入参和它的生命周期相关，如果全无关，全是函数内部产生的，那么显然在函数结束的时候，会被drop掉，那么返回的引用也就无效了</p>
<p>在 struct中也可以使用 生命周期注解</p>
<p>在历史版本的代码中Rust 需要很多的 生命周期注解，后来Rust team 发现 有许多是可推断的，也就是可省略的<code>lifetime elision rules</code></p>
<p>在未来，可能需要的 生命周期注解会更少</p>
<p>总的来说 ，平时编码你不需要过多关注，如果有编译器无法推断的情况，它会抛错，请你提供注解</p>
<ol>
<li>函数或方法 参数的Lifetimes称作 input lifetimes,</li>
<li>返回值上的lifetimes 称作 output lifetimes.</li>
</ol>
<p>编译器用3条规则来推测</p>
<ol>
<li>每一个 input 变量 对应单独一个 lifetimes,也就是有几个参数就有几个不同的Lifetimes</li>
<li>如果只有一个input Lifetimes 参数,那么 它的lifetimes会被应用到所有 out lifetimes参数</li>
<li>如果是个方法，也就是参数中有 <code>&amp;self</code>或<code>&amp;mut self</code> 那么<code>self</code>的lifetime会被 应用到所有output lifetime</li>
</ol>
<h3 id="Lifetime-Annotations-in-Method-Definitions"><a href="#Lifetime-Annotations-in-Method-Definitions" class="headerlink" title="Lifetime Annotations in Method Definitions"></a>Lifetime Annotations in Method Definitions</h3><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span>&lt;<span class="symbol">&#x27;a</span>&gt; ImportantExcerpt&lt;<span class="symbol">&#x27;a</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">announce_and_return_part</span>(&amp;<span class="keyword">self</span>, announcement: &amp;<span class="type">str</span>) <span class="punctuation">-&gt;</span> &amp;<span class="type">str</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;Attention please: &#123;&#125;&quot;</span>, announcement);</span><br><span class="line">        <span class="keyword">self</span>.part</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回值根据规则3 和self一样</p>
<h3 id="The-Static-Lifetime"><a href="#The-Static-Lifetime" class="headerlink" title="The Static Lifetime"></a>The Static Lifetime</h3><p>通过如下的<code>&#39;static</code>注解</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s</span>: &amp;<span class="symbol">&#x27;static</span> <span class="type">str</span> = <span class="string">&quot;I have a static lifetime.&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>这样的注解意味着 生命周期 占整个程序，建议可用的地方有 错误提示信息的字串</p>
<h3 id="Generic-Type-Parameters-Trait-Bounds-and-Lifetimes-Together"><a href="#Generic-Type-Parameters-Trait-Bounds-and-Lifetimes-Together" class="headerlink" title="Generic Type Parameters, Trait Bounds, and Lifetimes Together"></a>Generic Type Parameters, Trait Bounds, and Lifetimes Together</h3><p>all in one</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fmt::Display;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">longest_with_an_announcement</span>&lt;<span class="symbol">&#x27;a</span>, T&gt;(x: &amp;<span class="symbol">&#x27;a</span> <span class="type">str</span>, y: &amp;<span class="symbol">&#x27;a</span> <span class="type">str</span>, ann: T) <span class="punctuation">-&gt;</span> &amp;<span class="symbol">&#x27;a</span> <span class="type">str</span></span><br><span class="line">    <span class="keyword">where</span> T: Display</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Announcement! &#123;&#125;&quot;</span>, ann);</span><br><span class="line">    <span class="keyword">if</span> x.<span class="title function_ invoke__">len</span>() &gt; y.<span class="title function_ invoke__">len</span>() &#123;</span><br><span class="line">        x</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        y</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Writing-Automated-Tests"><a href="#Writing-Automated-Tests" class="headerlink" title="Writing Automated Tests"></a>Writing Automated Tests</h1><h2 id="How-to-Write-Tests"><a href="#How-to-Write-Tests" class="headerlink" title="How to Write Tests"></a>How to Write Tests</h2><p>基本3个步骤</p>
<ol>
<li>设置依赖的数据和状态</li>
<li>运行你想要测试的代码</li>
<li>验证结果 和期望的一致</li>
</ol>
<p>在函数前加上<code>#[test]</code>，当你运行cargo test时，<code>cargo</code>会调用他们</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cargo new adder --lib</span><br><span class="line"><span class="built_in">cd</span> adder</span><br><span class="line">vim src/lib.rs</span><br></pre></td></tr></table></figure>

<p>运行 <code>cargo test</code></p>
<p>下面我们把<code>src/lib.rs</code>换成</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">    width: <span class="type">u32</span>,</span><br><span class="line">    height: <span class="type">u32</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">can_hold</span>(&amp;<span class="keyword">self</span>, other: &amp;Rectangle) <span class="punctuation">-&gt;</span> <span class="type">bool</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.width &gt; other.width &amp;&amp; <span class="keyword">self</span>.height &gt; other.height</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>新增文件<code>src/test.rs</code>   感觉 tutorial 这里写错了(吗?)，这里写的还是<code>src/lib.rs</code>虽然把下面一段代码放在上面代码后面也可以运行</p>
<p>**补,注:**看完这一章后 我去掉了<code>test.rs</code>把 测试代码放在实现代码同一份代码的下部</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[cfg(test)]</span></span><br><span class="line"><span class="keyword">mod</span> tests &#123;</span><br><span class="line">    <span class="keyword">use</span> super::*;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#[test]</span></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">larger_can_hold_smaller</span>() &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">larger</span> = Rectangle &#123; width: <span class="number">8</span>, height: <span class="number">7</span> &#125;;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">smaller</span> = Rectangle &#123; width: <span class="number">5</span>, height: <span class="number">1</span> &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">assert!</span>(larger.<span class="title function_ invoke__">can_hold</span>(&amp;smaller));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#[test]</span></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">smaller_cannot_hold_larger</span>() &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">larger</span> = Rectangle &#123; width: <span class="number">8</span>, height: <span class="number">7</span> &#125;;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">smaller</span> = Rectangle &#123; width: <span class="number">5</span>, height: <span class="number">1</span> &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">assert!</span>(!smaller.<span class="title function_ invoke__">can_hold</span>(&amp;larger));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>src</code>下的样子:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">src/</span><br><span class="line">├── lib.rs</span><br><span class="line">└── test.rs</span><br></pre></td></tr></table></figure>

<p>运行<code>cargo test</code>,忽略那些黄色的warning提示，能成功通过<code>assert</code></p>
<p>测试常用的宏:</p>
<ul>
<li><code>assert!</code></li>
<li><code>assert_eq!</code></li>
<li><code>assert_ne!</code></li>
</ul>
<p>相对于 <code>手动assert</code> + <code>== 运算</code>来说 ，后面两种方法 会自动带出 输入的值</p>
<p>根据后面两个宏的实现原理，你传入的struct需要同时实现<code>PartialEq</code>和<code>Debug</code>两个trait</p>
<p>通常会在你的struct或enum前加上 <code>#[derive(PartialEq, Debug)]</code></p>
<p>可以自定义额外的输出消息</p>
<p><code>assert!(表达式,额外的输出消息)</code></p>
<blockquote>
<p><code>#[should_panic]</code>来 检测panic是否发生</p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">Guess</span> &#123;</span><br><span class="line">    value: <span class="type">i32</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Guess</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">new</span>(value: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> Guess &#123;</span><br><span class="line">        <span class="keyword">if</span> value &lt; <span class="number">1</span> || value &gt; <span class="number">100</span> &#123;</span><br><span class="line">            <span class="built_in">panic!</span>(<span class="string">&quot;Guess value must be between 1 and 100, got &#123;&#125;.&quot;</span>, value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Guess &#123;</span><br><span class="line">            value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[cfg(test)]</span></span><br><span class="line"><span class="keyword">mod</span> tests &#123;</span><br><span class="line">    <span class="keyword">use</span> super::*;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#[test]</span></span><br><span class="line">    <span class="meta">#[should_panic]</span></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">greater_than_100</span>() &#123;</span><br><span class="line">        Guess::<span class="title function_ invoke__">new</span>(<span class="number">200</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>更精确的 panic,增加expected</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">// --snip--</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Guess</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">new</span>(value: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> Guess &#123;</span><br><span class="line">        <span class="keyword">if</span> value &lt; <span class="number">1</span> &#123;</span><br><span class="line">            <span class="built_in">panic!</span>(<span class="string">&quot;Guess value must be greater than or equal to 1, got &#123;&#125;.&quot;</span>,</span><br><span class="line">                   value);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> value &gt; <span class="number">100</span> &#123;</span><br><span class="line">            <span class="built_in">panic!</span>(<span class="string">&quot;Guess value must be less than or equal to 100, got &#123;&#125;.&quot;</span>,</span><br><span class="line">                   value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Guess &#123;</span><br><span class="line">            value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[cfg(test)]</span></span><br><span class="line"><span class="keyword">mod</span> tests &#123;</span><br><span class="line">    <span class="keyword">use</span> super::*;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#[test]</span></span><br><span class="line">    <span class="meta">#[should_panic(expected = <span class="string">&quot;Guess value must be less than or equal to 100&quot;</span>)]</span></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">greater_than_100</span>() &#123;</span><br><span class="line">        Guess::<span class="title function_ invoke__">new</span>(<span class="number">200</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在测试代码中使用<code>Result&lt;T,E&gt;</code></p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[cfg(test)]</span></span><br><span class="line"><span class="keyword">mod</span> tests &#123;</span><br><span class="line">    <span class="meta">#[test]</span></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">it_works</span>() <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;(), <span class="type">String</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="number">2</span> + <span class="number">2</span> == <span class="number">4</span> &#123;</span><br><span class="line">            <span class="title function_ invoke__">Ok</span>(())</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_ invoke__">Err</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;two plus two does not equal four&quot;</span>))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>You can’t use the <code>#[should_panic]</code> annotation on tests that use <code>Result&lt;T, E&gt;</code></p>
<h2 id="Controlling-How-Tests-Are-Run"><a href="#Controlling-How-Tests-Are-Run" class="headerlink" title="Controlling How Tests Are Run"></a>Controlling How Tests Are Run</h2><p>默认的 test是并行运行的!</p>
<p>如果你的不同测试会读写同一个文件,那么可能在测试中有冲突，<code>cargo test -- --test-threads=1</code>可以让只有一个测试线程</p>
<p>函数的输出，当测试成功时，你<strong>不会</strong>在terminal看到 被测试程序中的输出，当测试失败时，你<strong>会</strong>看到所有被测试程序过程中的输出</p>
<p><code>cargo test -- --nocapture</code> 可以让 程序的过车给你输出始终能看到</p>
<p>运行一定条件函数名测试<code>cargo test &lt;希望被函数名包含的字符串&gt;</code>,同时在输出中,你会看到<code>XXX filtered out</code></p>
<p>如<code>cargo test add</code>只会运行 函数名中有<code>add</code>的测试方法</p>
<p>对于一些测试可能很耗时或其它原因你希望默认忽略,那么加上<code>#[ignore]</code>在 <code>#[test]</code>的下一行</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[test]</span></span><br><span class="line"><span class="meta">#[ignore]</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">expensive_test</span>() &#123;</span><br><span class="line">    <span class="comment">// code that takes an hour to run</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样默认<code>cargo test</code>它不会被运行</p>
<p>我们可以通过<code>cargo test -- --ignored</code>来调用这些被标注<code>#[ignore]</code>的函数</p>
<h2 id="Test-Organization"><a href="#Test-Organization" class="headerlink" title="Test Organization"></a>Test Organization</h2><p>把测试分为两个类型:单元测试和交互测试</p>
<h3 id="Unit-Tests"><a href="#Unit-Tests" class="headerlink" title="Unit Tests"></a>Unit Tests</h3><p>You’ll put unit tests in the src directory in each file with the code that they’re testing. The convention is to create a module named tests in each file to contain the test functions and to annotate the module with <code>cfg(test)</code>.</p>
<p>测试module</p>
<p><code>#[cfg(test)]</code>注解告诉 只有运行<code>cargo test</code>时才会编译和运行</p>
<p>也就是<code>cargo build</code>并不会理有这样注解的</p>
<p>测试私有的函数!<code>other languages make it difficult or impossible to test private functions</code></p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">internal_adder</span>(a: <span class="type">i32</span>, b: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">    a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[cfg(test)]</span></span><br><span class="line"><span class="keyword">mod</span> tests &#123;</span><br><span class="line">    <span class="keyword">use</span> super::*;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#[test]</span></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">internal</span>() &#123;</span><br><span class="line">        <span class="built_in">assert_eq!</span>(<span class="number">4</span>, <span class="title function_ invoke__">internal_adder</span>(<span class="number">2</span>, <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Integration-Tests"><a href="#Integration-Tests" class="headerlink" title="Integration Tests"></a>Integration Tests</h3><p>区别于单元测试，交互测试，会如同正常的代码调用去模拟</p>
<p>在我们项目的顶层 创建一个<code>tests</code>文件夹 和<code>src</code>同级别,<code>cargo</code>会在这个文件夹中 找交互测试的文件</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> adder; <span class="comment">// 我们在单元测试中不会需要这个, 而</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#[test]</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">it_adds_two</span>() &#123;</span><br><span class="line">    <span class="built_in">assert_eq!</span>(<span class="number">4</span>, adder::<span class="title function_ invoke__">add_two</span>(<span class="number">2</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们也不需要任何<code>#[cfg(test)]</code>,因为整个文件夹 都会被视作<code>cargo test</code>使用的</p>
<p>文件<code>src/lib.rs</code></p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">add_two</span>(a: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">internal_adder</span>(a, <span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">internal_adder</span>(a: <span class="type">i32</span>, b: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">    a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行<code>cargo test</code>全ok即可</p>
<p>指定测试<strong>文件名</strong><code>cargo test --test integration_test</code></p>
<p>如果你在tests下建立了一个 <code>common.rs</code>,即使你没有在里面写测试函数，你运行<code>cargo test</code>时，在输出中依然能看到它</p>
<p>我们 把<code>src/common.rs</code>改成 <code>src/common/mod.rs</code></p>
<p>这样的命名文件方式 告诉Rust 不要把<code>common</code> module 视作 交互测试文件,其它文件可以调用它</p>
<blockquote>
<p><code>tests/integration_test.rs</code></p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> adder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">mod</span> common;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[test]</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">it_adds_two</span>() &#123;</span><br><span class="line">    common::<span class="title function_ invoke__">setup</span>();</span><br><span class="line">    <span class="built_in">assert_eq!</span>(<span class="number">4</span>, adder::<span class="title function_ invoke__">add_two</span>(<span class="number">2</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>tests/common/mod.rs</code></p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">setup</span>() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如上的分解文件能实现</p>
<ol>
<li>不同的测试文件都可以调用<code>common/mod.rs</code>里的方法</li>
<li>但<code>cargo test</code>不会把 <code>common/mod.rs</code>直接视作 交互测试文件</li>
</ol>
<h4 id="Integration-Tests-for-Binary-Crates"><a href="#Integration-Tests-for-Binary-Crates" class="headerlink" title="Integration Tests for Binary Crates"></a>Integration Tests for Binary Crates</h4><p>如果，我是说如果，我们的工程是 binary crate，也就是没有<code>src/lib.rs</code>,只有<code>src/main.rs</code></p>
<p>那么我们不能 通过 上面tests文件夹 的 交互测试方法，来 bring <code>src/main.rs</code> 中定义的函数</p>
<p>原因是:Only library crates expose functions that other crates can use; binary crates are meant to be run on their own.</p>
<p>从 分化的哲学上说，如果复杂的功能(被分化到src&#x2F;lib.rs中的)测试都没问题，那么少量的<code>src/main.rs</code>正常工作不需要测试?</p>
<p>不太认可这种(少量代码 就不需要测试)的观点，但反过来看，这种设计能带来的结果会促使代码的分化，留更少的逻辑在main中,XD</p>
<h1 id="An-I-x2F-O-Project-Building-a-Command-Line-Program"><a href="#An-I-x2F-O-Project-Building-a-Command-Line-Program" class="headerlink" title="An I&#x2F;O Project: Building a Command Line Program"></a>An I&#x2F;O Project: Building a Command Line Program</h1><blockquote>
<p>英语小课堂</p>
</blockquote>
<p>have sth. under your belt,</p>
<p>你已经有经验的某事&#x2F; 已经掌握</p>
<ol>
<li>In one’s scope of experience.</li>
</ol>
<p>Once you get a few more major league games under your belt, you’ll feel more comfortable.</p>
<p>吸收或消化 </p>
<ol start="2">
<li>Ingested or consumed.</li>
</ol>
<p>He should be less cranky after he gets some food under his belt.</p>
<hr>
<p>本章 打算搞个grep(globally search a regular expression and print) , 经常在linux开发的应该是再熟不过的命令了</p>
<p>Rust 社区成员 <code>Andrew Gallant</code>已经完成了一个 完整版的<code>ripgrep</code></p>
<p>本章只会实现一些简单的功能，因为本章的目的还是</p>
<ol>
<li>回顾你所学的，</li>
<li>熟悉一些新的库函数</li>
</ol>
<p>本章包含内容</p>
<ul>
<li>组织代码(chapter 7)</li>
<li>使用Vec和String (chapter 8)</li>
<li>处理错误(chapter 9)</li>
<li>Using traits and lifetimes where appropriate(chapter 10)</li>
<li>编写测试(chapter 11)</li>
</ul>
<h2 id="接受命令行参数"><a href="#接受命令行参数" class="headerlink" title="接受命令行参数"></a>接受命令行参数</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cargo new minigrep &amp;&amp; <span class="built_in">cd</span> minigrep</span><br></pre></td></tr></table></figure>

<p><del>有写过py脚本 或者shell脚本的 应该经常用相应语言写过解析了</del></p>
<p>使用<code>std::env::args</code>来读取参数</p>
<p>如果你需要你的程序接受无效的Unicode,请尝试<code>std::env::args_os</code></p>
<blockquote>
<p><code>src/main.rs</code></p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::env;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">args</span>: <span class="type">Vec</span>&lt;<span class="type">String</span>&gt; = env::<span class="title function_ invoke__">args</span>().<span class="title function_ invoke__">collect</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">query</span> = &amp;args[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">filename</span> = &amp;args[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Searching for &#123;&#125;&quot;</span>, query);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;In file &#123;&#125;&quot;</span>, filename);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试 <code>cargo run par1 par2</code></p>
<h2 id="Reading-a-File"><a href="#Reading-a-File" class="headerlink" title="Reading a File"></a>Reading a File</h2><p>先建一个文件 让我们读</p>
<blockquote>
<p><code>poem.txt</code></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">I&#x27;m nobody! Who are you?</span><br><span class="line">Are you nobody, too?</span><br><span class="line">Then there&#x27;s a pair of us - don&#x27;t tell!</span><br><span class="line">They&#x27;d banish us, you know.</span><br><span class="line"></span><br><span class="line">How dreary to be somebody!</span><br><span class="line">How public, like a frog</span><br><span class="line">To tell your name the livelong day</span><br><span class="line">To an admiring bog!</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>src/main.rs</code></p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::env;</span><br><span class="line"><span class="keyword">use</span> std::fs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">args</span>: <span class="type">Vec</span>&lt;<span class="type">String</span>&gt; = env::<span class="title function_ invoke__">args</span>().<span class="title function_ invoke__">collect</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">query</span> = &amp;args[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">filename</span> = &amp;args[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Searching for &#123;&#125;&quot;</span>, query);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;In file &#123;&#125;&quot;</span>, filename);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">contents</span> = fs::<span class="title function_ invoke__">read_to_string</span>(filename)</span><br><span class="line">        .<span class="title function_ invoke__">expect</span>(<span class="string">&quot;Something went wrong reading the file&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;With text:\n&#123;&#125;&quot;</span>, contents);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试<code>cargo run the poem.txt</code></p>
<h2 id="Refactoring-to-Improve-Modularity-and-Error-Handling"><a href="#Refactoring-to-Improve-Modularity-and-Error-Handling" class="headerlink" title="Refactoring to Improve Modularity and Error Handling"></a>Refactoring to Improve Modularity and Error Handling</h2><p>拆分重构</p>
<p><code>main</code>中应该 只有</p>
<ul>
<li>Calling the command line parsing logic with the argument values</li>
<li>Setting up any other configuration</li>
<li>Calling a run function in lib.rs</li>
<li>Handling the error if run returns an error</li>
</ul>
<p><strong>官方tutorial的重构 步骤比我这里记录的更细致！包括先换成tuple，再换成struct，再设计new等等</strong></p>
<p>文件目录<code>src</code>结构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">src/</span><br><span class="line">├── lib.rs</span><br><span class="line">└── main.rs</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>src/lib.rs</code></p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::error::Error;</span><br><span class="line"><span class="keyword">use</span> std::fs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">Config</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> query: <span class="type">String</span>,</span><br><span class="line">    <span class="keyword">pub</span> filename: <span class="type">String</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Config</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">new</span>(args: &amp;[<span class="type">String</span>]) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;Config, &amp;<span class="symbol">&#x27;static</span> <span class="type">str</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> args.<span class="title function_ invoke__">len</span>() &lt; <span class="number">3</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">Err</span>(<span class="string">&quot;not enough arguments&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">query</span> = args[<span class="number">1</span>].<span class="title function_ invoke__">clone</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">filename</span> = args[<span class="number">2</span>].<span class="title function_ invoke__">clone</span>(); <span class="comment">// There’s a tendency among many Rustaceans to avoid using clone to fix ownership problems because of its runtime cost. In Chapter 13, you’ll learn how to use more efficient methods in this type of situation. But for now, it’s okay to copy a few strings to continue making progress because you’ll make these copies only once and your filename and query string are very small. It’s better to have a working program that’s a bit inefficient than to try to hyperoptimize code on your first pass. As you become more experienced with Rust, it’ll be easier to start with the most efficient solution, but for now, it’s perfectly acceptable to call clone.</span></span><br><span class="line"></span><br><span class="line">        <span class="title function_ invoke__">Ok</span>(Config &#123; query, filename &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">run</span>(config: Config) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;(), <span class="type">Box</span>&lt;<span class="keyword">dyn</span> Error&gt;&gt; &#123; <span class="comment">// Box&lt;dyn Error&gt; means the function will return a type that implements the Error trait, but we don’t have to specify what particular type the return value will be</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">contents</span> = fs::<span class="title function_ invoke__">read_to_string</span>(config.filename)?;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;With text:\n&#123;&#125;&quot;</span>, contents);</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">Ok</span>(())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>src/main.rs</code></p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::env;</span><br><span class="line"><span class="keyword">use</span> std::process;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> minigrep::Config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">args</span>: <span class="type">Vec</span>&lt;<span class="type">String</span>&gt; = env::<span class="title function_ invoke__">args</span>().<span class="title function_ invoke__">collect</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">config</span> = Config::<span class="title function_ invoke__">new</span>(&amp;args).<span class="title function_ invoke__">unwrap_or_else</span>(|err| &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;Problem parsing arguments: &#123;&#125;&quot;</span>, err);</span><br><span class="line">        process::<span class="title function_ invoke__">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Searching for &#123;&#125;&quot;</span>, config.query);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;In file &#123;&#125;&quot;</span>, config.filename);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Err</span>(e) = minigrep::<span class="title function_ invoke__">run</span>(config) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;Application error: &#123;&#125;&quot;</span>, e);</span><br><span class="line"></span><br><span class="line">        process::<span class="title function_ invoke__">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Developing-the-Library’s-Functionality-with-Test-Driven-Development"><a href="#Developing-the-Library’s-Functionality-with-Test-Driven-Development" class="headerlink" title="Developing the Library’s Functionality with Test-Driven Development"></a>Developing the Library’s Functionality with Test-Driven Development</h2><p>TDD !!!! 以前写python时尝试过，始终没有一个很好的实践</p>
<ol>
<li>Write a test that fails and run it to make sure it fails for the reason you expect.</li>
<li>Write or modify <code>just enough code</code> to make the new test pass.</li>
<li>Refactor the code you <code>just added or changed</code> and make sure the tests continue to pass.</li>
<li>Repeat from step 1!</li>
</ol>
<p>This process is just one of many ways to write software, but TDD can help drive code design as well. </p>
<p>看上去这种过程比我之前的会好很多</p>
<p>我之前TDD的过程，有以下问题</p>
<ol>
<li>在尝试在一开始，就想把所有 必要不必要，主流程，辅流程考虑完，实际根本无法完成</li>
<li>尝试在一开始就写足量的测试，但实际上，很难一开始就足量</li>
<li>进行过程中，一边改代码，一边改测试，没有编码和写测试的分化逐渐模糊</li>
<li>没有循环的环，想是 想，1写完 测试，2写完代码</li>
</ol>
<p>相比之下，上面的过程,意味着不要一步到位，每次测试编写只关注,“当前版本”期望解决的问题，然后，明确分化了 测试编写和代码编写。最后有迭代环。</p>
<p>先编写测试代码, 在<code>src/lib.rs</code>文件后加上</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[cfg(test)]</span></span><br><span class="line"><span class="keyword">mod</span> tests &#123;</span><br><span class="line">    <span class="keyword">use</span> super::*;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#[test]</span></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">one_result</span>() &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">query</span> = <span class="string">&quot;duct&quot;</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">contents</span> = <span class="string">&quot;\</span></span><br><span class="line"><span class="string">Rust:</span></span><br><span class="line"><span class="string">safe, fast, productive.</span></span><br><span class="line"><span class="string">Pick three.&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">assert_eq!</span>(</span><br><span class="line">            <span class="built_in">vec!</span>[<span class="string">&quot;safe, fast, productive.&quot;</span>],</span><br><span class="line">            <span class="title function_ invoke__">search</span>(query, contents)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最终 成果</p>
<blockquote>
<p><code>src/lib.rs</code></p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::error::Error;</span><br><span class="line"><span class="keyword">use</span> std::fs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">Config</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> query: <span class="type">String</span>,</span><br><span class="line">    <span class="keyword">pub</span> filename: <span class="type">String</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Config</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">new</span>(args: &amp;[<span class="type">String</span>]) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;Config, &amp;<span class="symbol">&#x27;static</span> <span class="type">str</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> args.<span class="title function_ invoke__">len</span>() &lt; <span class="number">3</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">Err</span>(<span class="string">&quot;not enough arguments&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">query</span> = args[<span class="number">1</span>].<span class="title function_ invoke__">clone</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">filename</span> = args[<span class="number">2</span>].<span class="title function_ invoke__">clone</span>(); <span class="comment">// There’s a tendency among many Rustaceans to avoid using clone to fix ownership problems because of its runtime cost. In Chapter 13, you’ll learn how to use more efficient methods in this type of situation. But for now, it’s okay to copy a few strings to continue making progress because you’ll make these copies only once and your filename and query string are very small. It’s better to have a working program that’s a bit inefficient than to try to hyperoptimize code on your first pass. As you become more experienced with Rust, it’ll be easier to start with the most efficient solution, but for now, it’s perfectly acceptable to call clone.</span></span><br><span class="line"></span><br><span class="line">        <span class="title function_ invoke__">Ok</span>(Config &#123; query, filename &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">run</span>(config: Config) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;(), <span class="type">Box</span>&lt;<span class="keyword">dyn</span> Error&gt;&gt; &#123; <span class="comment">// Box&lt;dyn Error&gt; means the function will return a type that implements the Error trait, but we don’t have to specify what particular type the return value will be</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">contents</span> = fs::<span class="title function_ invoke__">read_to_string</span>(config.filename)?;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="variable">line</span> <span class="keyword">in</span> <span class="title function_ invoke__">search</span>(&amp;config.query, &amp;contents) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, line);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">Ok</span>(())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果没有加 &#x27;a (lifetime specifier) :this function&#x27;s return type contains a borrowed value, but the signature does not say whether it is borrowed from `query` or `contents`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">search</span>&lt;<span class="symbol">&#x27;a</span>&gt;(query: &amp;<span class="type">str</span>, contents: &amp;<span class="symbol">&#x27;a</span> <span class="type">str</span>) <span class="punctuation">-&gt;</span> <span class="type">Vec</span>&lt;&amp;<span class="symbol">&#x27;a</span> <span class="type">str</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">results</span> = <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">    <span class="keyword">for</span> <span class="variable">line</span> <span class="keyword">in</span> contents.<span class="title function_ invoke__">lines</span>() &#123;</span><br><span class="line">        <span class="keyword">if</span> line.<span class="title function_ invoke__">contains</span>(query) &#123;</span><br><span class="line">            results.<span class="title function_ invoke__">push</span>(line);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    results</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下是上面的测试代码</span></span><br><span class="line"><span class="comment">// ....</span></span><br></pre></td></tr></table></figure>

<h2 id="Working-with-Environment-Variables"><a href="#Working-with-Environment-Variables" class="headerlink" title="Working with Environment Variables"></a>Working with Environment Variables</h2><p>增加功能，用户可以配置环境变量，设置 大小写不敏感</p>
<p>在刚刚的测试代码中增加 新的测试</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">//... 和另一个 #[test]同层级</span></span><br><span class="line">    <span class="meta">#[test]</span></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">case_insensitive</span>() &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">query</span> = <span class="string">&quot;rUsT&quot;</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">contents</span> = <span class="string">&quot;\</span></span><br><span class="line"><span class="string">Rust:</span></span><br><span class="line"><span class="string">safe, fast, productive.</span></span><br><span class="line"><span class="string">Pick three.</span></span><br><span class="line"><span class="string">Trust me.&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">assert_eq!</span>(</span><br><span class="line">            <span class="built_in">vec!</span>[<span class="string">&quot;Rust:&quot;</span>, <span class="string">&quot;Trust me.&quot;</span>],</span><br><span class="line">            <span class="title function_ invoke__">search_case_insensitive</span>(query, contents)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure>

<p>大小写敏感搜索实现代码</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">search_case_insensitive</span>&lt;<span class="symbol">&#x27;a</span>&gt;(query: &amp;<span class="type">str</span>, contents: &amp;<span class="symbol">&#x27;a</span> <span class="type">str</span>) <span class="punctuation">-&gt;</span> <span class="type">Vec</span>&lt;&amp;<span class="symbol">&#x27;a</span> <span class="type">str</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">query</span> = query.<span class="title function_ invoke__">to_lowercase</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">results</span> = <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="variable">line</span> <span class="keyword">in</span> contents.<span class="title function_ invoke__">lines</span>() &#123;</span><br><span class="line">        <span class="keyword">if</span> line.<span class="title function_ invoke__">to_lowercase</span>().<span class="title function_ invoke__">contains</span>(&amp;query) &#123;</span><br><span class="line">            results.<span class="title function_ invoke__">push</span>(line);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    results</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>算法实现了，下面要做的是 用户可以 通过 环境变量来决定是否是否使用大小写敏感</p>
<p>通过<code>env::vars</code> 来读取环境变量</p>
<p>最终实现</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::error::Error;</span><br><span class="line"><span class="keyword">use</span> std::fs;</span><br><span class="line"><span class="keyword">use</span> std::env;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">Config</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> query: <span class="type">String</span>,</span><br><span class="line">    <span class="keyword">pub</span> filename: <span class="type">String</span>,</span><br><span class="line">    <span class="keyword">pub</span> case_insensitive: <span class="type">bool</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Config</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">new</span>(args: &amp;[<span class="type">String</span>]) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;Config, &amp;<span class="symbol">&#x27;static</span> <span class="type">str</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> args.<span class="title function_ invoke__">len</span>() &lt; <span class="number">3</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">Err</span>(<span class="string">&quot;not enough arguments&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">query</span> = args[<span class="number">1</span>].<span class="title function_ invoke__">clone</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">filename</span> = args[<span class="number">2</span>].<span class="title function_ invoke__">clone</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> <span class="variable">case_insensitive</span> = env::<span class="title function_ invoke__">var</span>(<span class="string">&quot;CASE_INSENSITIVE&quot;</span>).<span class="title function_ invoke__">is_err</span>(); <span class="comment">// 读取环境变量</span></span><br><span class="line"></span><br><span class="line">        <span class="title function_ invoke__">Ok</span>(Config &#123; query, filename, case_insensitive &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">run</span>(config: Config) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;(), <span class="type">Box</span>&lt;<span class="keyword">dyn</span> Error&gt;&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">contents</span> = fs::<span class="title function_ invoke__">read_to_string</span>(config.filename)?;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">results</span> = <span class="keyword">if</span> config.case_insensitive &#123;</span><br><span class="line">        <span class="title function_ invoke__">search</span>(&amp;config.query, &amp;contents)</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">search_case_insensitive</span>(&amp;config.query,&amp;contents)</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="variable">line</span> <span class="keyword">in</span> results &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, line);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">Ok</span>(())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">search</span>&lt;<span class="symbol">&#x27;a</span>&gt;(query: &amp;<span class="type">str</span>, contents: &amp;<span class="symbol">&#x27;a</span> <span class="type">str</span>) <span class="punctuation">-&gt;</span> <span class="type">Vec</span>&lt;&amp;<span class="symbol">&#x27;a</span> <span class="type">str</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">results</span> = <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">    <span class="keyword">for</span> <span class="variable">line</span> <span class="keyword">in</span> contents.<span class="title function_ invoke__">lines</span>() &#123;</span><br><span class="line">        <span class="keyword">if</span> line.<span class="title function_ invoke__">contains</span>(query) &#123;</span><br><span class="line">            results.<span class="title function_ invoke__">push</span>(line);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    results</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">search_case_insensitive</span>&lt;<span class="symbol">&#x27;a</span>&gt;(query: &amp;<span class="type">str</span>, contents: &amp;<span class="symbol">&#x27;a</span> <span class="type">str</span>) <span class="punctuation">-&gt;</span> <span class="type">Vec</span>&lt;&amp;<span class="symbol">&#x27;a</span> <span class="type">str</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">query</span> = query.<span class="title function_ invoke__">to_lowercase</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">results</span> = <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="variable">line</span> <span class="keyword">in</span> contents.<span class="title function_ invoke__">lines</span>() &#123;</span><br><span class="line">        <span class="keyword">if</span> line.<span class="title function_ invoke__">to_lowercase</span>().<span class="title function_ invoke__">contains</span>(&amp;query) &#123;</span><br><span class="line">            results.<span class="title function_ invoke__">push</span>(line);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    results</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[cfg(test)]</span></span><br><span class="line"><span class="keyword">mod</span> tests &#123;</span><br><span class="line">    <span class="keyword">use</span> super::*;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#[test]</span></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">one_result</span>() &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">query</span> = <span class="string">&quot;duct&quot;</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">contents</span> = <span class="string">&quot;\</span></span><br><span class="line"><span class="string">Rust:</span></span><br><span class="line"><span class="string">safe, fast, productive.</span></span><br><span class="line"><span class="string">Pick three.&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">assert_eq!</span>(</span><br><span class="line">            <span class="built_in">vec!</span>[<span class="string">&quot;safe, fast, productive.&quot;</span>],</span><br><span class="line">            <span class="title function_ invoke__">search</span>(query, contents)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#[test]</span></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">case_insensitive</span>() &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">query</span> = <span class="string">&quot;rUsT&quot;</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">contents</span> = <span class="string">&quot;\</span></span><br><span class="line"><span class="string">Rust:</span></span><br><span class="line"><span class="string">safe, fast, productive.</span></span><br><span class="line"><span class="string">Pick three.</span></span><br><span class="line"><span class="string">Trust me.&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">assert_eq!</span>(</span><br><span class="line">            <span class="built_in">vec!</span>[<span class="string">&quot;Rust:&quot;</span>, <span class="string">&quot;Trust me.&quot;</span>],</span><br><span class="line">            <span class="title function_ invoke__">search_case_insensitive</span>(query, contents)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分别运行以下命令，观察输出的差异</p>
<p><code>cargo run to poem.txt</code></p>
<p><code>CASE_INSENSITIVE=1 cargo run to poem.txt</code></p>
<h2 id="Writing-Error-Messages-to-Standard-Error-Instead-of-Standard-Output"><a href="#Writing-Error-Messages-to-Standard-Error-Instead-of-Standard-Output" class="headerlink" title="Writing Error Messages to Standard Error Instead of Standard Output"></a>Writing Error Messages to Standard Error Instead of Standard Output</h2><p>有经常用linux命令的 都知道 输出有 <a href="https://en.wikipedia.org/wiki/Standard_streams">标准输出和错误输出</a></p>
<p>把 错误输出的<code>println!</code> 换成 <code>eprintln!</code> 即可</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::env;</span><br><span class="line"><span class="keyword">use</span> std::process;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> minigrep::Config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">args</span>: <span class="type">Vec</span>&lt;<span class="type">String</span>&gt; = env::<span class="title function_ invoke__">args</span>().<span class="title function_ invoke__">collect</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">config</span> = Config::<span class="title function_ invoke__">new</span>(&amp;args).<span class="title function_ invoke__">unwrap_or_else</span>(|err| &#123;</span><br><span class="line">        eprintln!(<span class="string">&quot;Problem parsing arguments: &#123;&#125;&quot;</span>, err);</span><br><span class="line">        process::<span class="title function_ invoke__">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Err</span>(e) = minigrep::<span class="title function_ invoke__">run</span>(config) &#123;</span><br><span class="line">        eprintln!(<span class="string">&quot;Application error: &#123;&#125;&quot;</span>, e);</span><br><span class="line">        process::<span class="title function_ invoke__">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>好了 下面你可以用 重定向输出发现，我们 把 错误信息输出到stderr了</p>
<h2 id="回顾TDD"><a href="#回顾TDD" class="headerlink" title="回顾TDD"></a>回顾TDD</h2><p>我们上面的步骤为</p>
<ol>
<li>首先编写最外的框架，分离main和lib</li>
<li>编写初代的测试代码，针对我们的关键运算函数</li>
<li>实现函数 通过测试</li>
<li>完成其它功能，比如调用这个运算函数，增加输入输出提示</li>
<li>完成，为新的功能编写测试代码，跳到第3步</li>
</ol>
<h1 id="Functional-Language-Features-Iterators-and-Closures"><a href="#Functional-Language-Features-Iterators-and-Closures" class="headerlink" title="Functional Language Features: Iterators and Closures"></a>Functional Language Features: Iterators and Closures</h1><ul>
<li>Closures, a function-like construct you can store in a variable</li>
<li>Iterators, a way of processing a series of elements</li>
<li>How to use these two features to improve the I&#x2F;O project in Chapter 12</li>
<li>The performance of these two features (Spoiler alert: they’re faster than you might think!)</li>
</ul>
<h2 id="Closures-Anonymous-Functions-that-Can-Capture-Their-Environment"><a href="#Closures-Anonymous-Functions-that-Can-Capture-Their-Environment" class="headerlink" title="Closures: Anonymous Functions that Can Capture Their Environment"></a>Closures: Anonymous Functions that Can Capture Their Environment</h2><p>闭包</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> 函数名字(...)&#123;</span><br><span class="line">  <span class="keyword">let</span> 值 = 某个耗时运算</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ... &#123;</span><br><span class="line">    使用 值</span><br><span class="line">    使用 值</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="title function_ invoke__">if</span>(...) &#123;</span><br><span class="line">    使用 值</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    不使用 值</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们希望只有需要运算结果，才会执行. 这有一个闭包的应用场景。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">expensive_closure</span> = |num| &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;calculating slowly...&quot;</span>);</span><br><span class="line">    thread::<span class="title function_ invoke__">sleep</span>(Duration::<span class="title function_ invoke__">from_secs</span>(<span class="number">2</span>));</span><br><span class="line">    num</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>定义一个闭包，把它存在<code>expensive_closure</code>变量中</p>
<p>我们用的单个参数<code>|num|</code>如果要多个，用逗号隔开,<code>|param1,param2|</code></p>
<p>注意，let statement意味着<code>expensive_closure</code> 包含一个匿名函数的定义，不是包含一个匿名函数调用的返回值</p>
<p>改成如下</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">generate_workout</span>(intensity: <span class="type">u32</span>, random_number: <span class="type">u32</span>) &#123;</span><br><span class="line">    <span class="comment">// 闭包</span></span><br><span class="line">    <span class="comment">// 通常 因为有上下文 和 可推断 不需要注解,但是 如果使用时，用不同类型调用则会报错</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">expensive_closure</span> = |num| &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;calculating slowly...&quot;</span>);</span><br><span class="line">        thread::<span class="title function_ invoke__">sleep</span>(Duration::<span class="title function_ invoke__">from_secs</span>(<span class="number">2</span>));</span><br><span class="line">        num</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> intensity &lt; <span class="number">25</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(</span><br><span class="line">            <span class="string">&quot;Today, do &#123;&#125; pushups!&quot;</span>,</span><br><span class="line">            <span class="title function_ invoke__">expensive_closure</span>(intensity) <span class="comment">// 闭包调用</span></span><br><span class="line">        );</span><br><span class="line">        <span class="built_in">println!</span>(</span><br><span class="line">            <span class="string">&quot;Next, do &#123;&#125; situps!&quot;</span>,</span><br><span class="line">            <span class="title function_ invoke__">expensive_closure</span>(intensity)</span><br><span class="line">        );</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> random_number == <span class="number">3</span> &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;Take a break today! Remember to stay hydrated!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">println!</span>(</span><br><span class="line">                <span class="string">&quot;Today, run for &#123;&#125; minutes!&quot;</span>,</span><br><span class="line">                <span class="title function_ invoke__">expensive_closure</span>(intensity)</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其它书写方法</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span>  <span class="title function_">add_one_v1</span>   (x: <span class="type">u32</span>) <span class="punctuation">-&gt;</span> <span class="type">u32</span> &#123; x + <span class="number">1</span> &#125;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">add_one_v2</span> = |x: <span class="type">u32</span>| <span class="punctuation">-&gt;</span> <span class="type">u32</span> &#123; x + <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">add_one_v3</span> = |x|             &#123; x + <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">add_one_v4</span> = |x|               x + <span class="number">1</span>  ;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Storing Closures Using Generic Parameters and the <code>Fn</code> Traits</p>
</blockquote>
<p><code>memoization</code> or <code>lazy evaluation.</code></p>
<p>有三种闭包实现，要么是<code>Fn</code>, <code>FnMut</code>, or <code>FnOnce</code></p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Cacher</span>&lt;T&gt;</span><br><span class="line">    <span class="keyword">where</span> T: <span class="title function_ invoke__">Fn</span>(<span class="type">u32</span>) <span class="punctuation">-&gt;</span> <span class="type">u32</span></span><br><span class="line">&#123;</span><br><span class="line">    calculation: T,</span><br><span class="line">    value: <span class="type">Option</span>&lt;<span class="type">u32</span>&gt;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">impl</span>&lt;T&gt; Cacher&lt;T&gt;</span><br><span class="line">    <span class="keyword">where</span> T: <span class="title function_ invoke__">Fn</span>(<span class="type">u32</span>) <span class="punctuation">-&gt;</span> <span class="type">u32</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">new</span>(calculation: T) <span class="punctuation">-&gt;</span> Cacher&lt;T&gt; &#123;</span><br><span class="line">        Cacher &#123;</span><br><span class="line">            calculation,</span><br><span class="line">            value: <span class="literal">None</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 当需要拿值的时候调用</span></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">value</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, arg: <span class="type">u32</span>) <span class="punctuation">-&gt;</span> <span class="type">u32</span> &#123;</span><br><span class="line">        <span class="keyword">match</span> <span class="keyword">self</span>.value &#123;</span><br><span class="line">            <span class="title function_ invoke__">Some</span>(v) =&gt; v,</span><br><span class="line">            <span class="literal">None</span> =&gt; &#123;</span><br><span class="line">                <span class="keyword">let</span> <span class="variable">v</span> = (<span class="keyword">self</span>.calculation)(arg);</span><br><span class="line">                <span class="keyword">self</span>.value = <span class="title function_ invoke__">Some</span>(v);</span><br><span class="line">                v</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面可改为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  // 初始化值</span><br><span class="line">  let mut expensive_result = Cacher::new(|num| &#123;</span><br><span class="line">        println!(&quot;calculating slowly...&quot;);</span><br><span class="line">        thread::sleep(Duration::from_secs(2));</span><br><span class="line">        num</span><br><span class="line">    &#125;);</span><br><span class="line">  // 获取值</span><br><span class="line">  expensive_result.value(intensity)</span><br><span class="line">``</span><br><span class="line"></span><br><span class="line">在目前实现上，只有首次调用value的intensity会有效，其它的暂时没有区别</span><br><span class="line"></span><br><span class="line">第二个问题是 目前只支持u32,尝试让它支持更多类型</span><br><span class="line"></span><br><span class="line">&gt; Capturing the Environment with Closures</span><br><span class="line"></span><br><span class="line">闭包能读取它所在环境中的变量</span><br><span class="line"></span><br><span class="line">```rust</span><br><span class="line">fn main() &#123;</span><br><span class="line">    let x = 4;</span><br><span class="line"></span><br><span class="line">    let equal_to_x = |z| z == x;// taking ownership, borrowing mutably, and borrowing immutably</span><br><span class="line">    // 注意 不能换成 fn equal_to_x(z: i32) -&gt; bool &#123; z == x &#125; 这样函数写法而不是闭包写法 无法读取外部x</span><br><span class="line"></span><br><span class="line">    let y = 4;</span><br><span class="line"></span><br><span class="line">    assert!(equal_to_x(y));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>FnOnce</code> consumes the variables it captures from its enclosing scope, known as the closure’s environment. To consume the captured variables, the closure must take ownership of these variables and move them into the closure when it is defined. The Once part of the name represents the fact that the closure can’t take ownership of the same variables more than once, so it can be called only once.</li>
<li>FnMut 可以改变环境里的变量，</li>
<li>Fn borrows values from the environment immutably.</li>
</ul>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">equal_to_x</span> = <span class="keyword">move</span> |z| z == x;</span><br><span class="line"><span class="comment">// 对于非基础类型来说 -------- value moved (into closure) here</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;can&#x27;t use x here: &#123;:?&#125;&quot;</span>, x);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">y</span> = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">assert!</span>(<span class="title function_ invoke__">equal_to_x</span>(y));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为我们加了<code>move</code>关键字，当闭包被定义时， 值就被移动到闭包内</p>
<h2 id="Processing-a-Series-of-Items-with-Iterators"><a href="#Processing-a-Series-of-Items-with-Iterators" class="headerlink" title="Processing a Series of Items with Iterators"></a>Processing a Series of Items with Iterators</h2><p>iterators are <code>lazy</code> 创建时，不会消耗iterator</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let v1 = vec![1, 2, 3];</span><br><span class="line"></span><br><span class="line">// 创建</span><br><span class="line">let v1_iter = v1.iter();</span><br><span class="line"></span><br><span class="line">// 遍历</span><br><span class="line">for val in v1_iter &#123; // We didn’t need to make v1_iter mutable when we used a for loop because the loop took ownership of v1_iter and made it mutable behind the scenes.</span><br><span class="line">    println!(&quot;Got: &#123;&#125;&quot;, val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现自己的可iterable:只要实现 Iterator的trait</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pub trait Iterator &#123;</span><br><span class="line">    type Item;</span><br><span class="line">    // 新的语法: type Item and Self::Item, which are defining an associated type with this trait.</span><br><span class="line"></span><br><span class="line">    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt;;</span><br><span class="line"></span><br><span class="line">    // methods with default implementations elided</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过next遍历</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">v1</span> = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">v1_iter</span> = v1.<span class="title function_ invoke__">iter</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">assert_eq!</span>(v1_iter.<span class="title function_ invoke__">next</span>(), <span class="title function_ invoke__">Some</span>(&amp;<span class="number">1</span>));</span><br><span class="line"><span class="built_in">assert_eq!</span>(v1_iter.<span class="title function_ invoke__">next</span>(), <span class="title function_ invoke__">Some</span>(&amp;<span class="number">2</span>));</span><br><span class="line"><span class="built_in">assert_eq!</span>(v1_iter.<span class="title function_ invoke__">next</span>(), <span class="title function_ invoke__">Some</span>(&amp;<span class="number">3</span>));</span><br><span class="line"><span class="built_in">assert_eq!</span>(v1_iter.<span class="title function_ invoke__">next</span>(), <span class="literal">None</span>);</span><br></pre></td></tr></table></figure>

<p>如果我们想 创建一个会拿ownership的 并能返回owned values的,调用<code>into_iter</code> 取代 <code>iter</code>. 类似如果我们想遍历，mutable references,我们调用<code>iter_mut</code>来替代<code>iter</code>,这谁设计的名字?怎么一个加前缀一个后缀</p>
<p>Methods that call <code>next</code> are called <code>consuming adaptors</code>,例如 <code>sum</code> 方法</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[test]</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">iterator_sum</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">v1</span> = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">v1_iter</span> = v1.<span class="title function_ invoke__">iter</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">total</span>: <span class="type">i32</span> = v1_iter.<span class="title function_ invoke__">sum</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里意味着 v1_iter 不再可用，因为sum 拿取了ownership</span></span><br><span class="line">    <span class="built_in">assert_eq!</span>(total, <span class="number">6</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Other methods defined on the <code>Iterator</code> trait, known as <code>iterator adaptors</code></p>
<p>比如 <code>v1.iter().map(...)</code> 的<code>map</code>，iterator adaptors are lazy, and we need to consume the iterator here.</p>
<p>直接<code>v1.iter().map(|x| x+1)</code>会报错，因为没有消耗iterator</p>
<p>解决方案是<code>collect</code>一个会消耗<code>iterator</code>的方法,它收集返回值到一个新的 collection data type</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">v1</span>: <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt; = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">v2</span>: <span class="type">Vec</span>&lt;_&gt; = v1.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">map</span>(|x| x + <span class="number">1</span>).<span class="title function_ invoke__">collect</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">assert_eq!</span>(v2, <span class="built_in">vec!</span>[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]);</span><br></pre></td></tr></table></figure>

<p><code>filter</code>方法 是 iterator adaptor, 如果函数返回真 则是要的</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[derive(PartialEq, Debug)]</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Shoe</span> &#123;</span><br><span class="line">    size: <span class="type">u32</span>,</span><br><span class="line">    style: <span class="type">String</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">shoes_in_my_size</span>(shoes: <span class="type">Vec</span>&lt;Shoe&gt;, shoe_size: <span class="type">u32</span>) <span class="punctuation">-&gt;</span> <span class="type">Vec</span>&lt;Shoe&gt; &#123;</span><br><span class="line">    shoes.<span class="title function_ invoke__">into_iter</span>() <span class="comment">// 拿取 ownership</span></span><br><span class="line">        .<span class="title function_ invoke__">filter</span>(|s| s.size == shoe_size)</span><br><span class="line">        .<span class="title function_ invoke__">collect</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[test]</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">filters_by_size</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">shoes</span> = <span class="built_in">vec!</span>[</span><br><span class="line">        Shoe &#123; size: <span class="number">10</span>, style: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;sneaker&quot;</span>) &#125;,</span><br><span class="line">        Shoe &#123; size: <span class="number">13</span>, style: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;sandal&quot;</span>) &#125;,</span><br><span class="line">        Shoe &#123; size: <span class="number">10</span>, style: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;boot&quot;</span>) &#125;,</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">in_my_size</span> = <span class="title function_ invoke__">shoes_in_my_size</span>(shoes, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">assert_eq!</span>(</span><br><span class="line">        in_my_size,</span><br><span class="line">        <span class="built_in">vec!</span>[</span><br><span class="line">            Shoe &#123; size: <span class="number">10</span>, style: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;sneaker&quot;</span>) &#125;,</span><br><span class="line">            Shoe &#123; size: <span class="number">10</span>, style: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;boot&quot;</span>) &#125;,</span><br><span class="line">        ]</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>自定义一个 iterable</p>
</blockquote>
<p><code>src/lib.rs</code></p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Counter</span> &#123;</span><br><span class="line">    count: <span class="type">u32</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Counter</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">new</span>() <span class="punctuation">-&gt;</span> Counter &#123;</span><br><span class="line">        Counter &#123; count: <span class="number">0</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Iterator</span> <span class="keyword">for</span> <span class="title class_">Counter</span> &#123;</span><br><span class="line">    <span class="keyword">type</span> <span class="title class_">Item</span> = <span class="type">u32</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">next</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;<span class="keyword">Self</span>::Item&gt; &#123;</span><br><span class="line">        <span class="keyword">self</span>.count += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">self</span>.count &lt; <span class="number">6</span> &#123;</span><br><span class="line">            <span class="title function_ invoke__">Some</span>(<span class="keyword">self</span>.count)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="literal">None</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[test]</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">calling_next_directly</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">counter</span> = Counter::<span class="title function_ invoke__">new</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">assert_eq!</span>(counter.<span class="title function_ invoke__">next</span>(), <span class="title function_ invoke__">Some</span>(<span class="number">1</span>));</span><br><span class="line">    <span class="built_in">assert_eq!</span>(counter.<span class="title function_ invoke__">next</span>(), <span class="title function_ invoke__">Some</span>(<span class="number">2</span>));</span><br><span class="line">    <span class="built_in">assert_eq!</span>(counter.<span class="title function_ invoke__">next</span>(), <span class="title function_ invoke__">Some</span>(<span class="number">3</span>));</span><br><span class="line">    <span class="built_in">assert_eq!</span>(counter.<span class="title function_ invoke__">next</span>(), <span class="title function_ invoke__">Some</span>(<span class="number">4</span>));</span><br><span class="line">    <span class="built_in">assert_eq!</span>(counter.<span class="title function_ invoke__">next</span>(), <span class="title function_ invoke__">Some</span>(<span class="number">5</span>));</span><br><span class="line">    <span class="built_in">assert_eq!</span>(counter.<span class="title function_ invoke__">next</span>(), <span class="literal">None</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[test]</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">using_other_iterator_trait_methods</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">sum</span>: <span class="type">u32</span> = Counter::<span class="title function_ invoke__">new</span>().<span class="title function_ invoke__">zip</span>(Counter::<span class="title function_ invoke__">new</span>().<span class="title function_ invoke__">skip</span>(<span class="number">1</span>))</span><br><span class="line">                                 .<span class="title function_ invoke__">map</span>(|(a, b)| a * b)</span><br><span class="line">                                 .<span class="title function_ invoke__">filter</span>(|x| x % <span class="number">3</span> == <span class="number">0</span>)</span><br><span class="line">                                 .<span class="title function_ invoke__">sum</span>();</span><br><span class="line">    <span class="built_in">assert_eq!</span>(<span class="number">18</span>, sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>zip</code> 只处理4个pair,因为任何pair中有None的话，zip会返回None</p>
<p>上面都会调用next()</p>
<h2 id="Improving-Our-I-x2F-O-Project"><a href="#Improving-Our-I-x2F-O-Project" class="headerlink" title="Improving Our I&#x2F;O Project"></a>Improving Our I&#x2F;O Project</h2><p>看上面IO那一章的<code>Config::new</code>函数</p>
<p>我们使用clone,因为我们没有args的 ownership</p>
<p>修改上面那章的<code>main.rs</code></p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="comment">--- a/src/main.rs</span></span><br><span class="line"><span class="comment">+++ b/src/main.rs</span></span><br><span class="line"><span class="meta">@@ -4,9 +4,7 @@</span> use std::process;</span><br><span class="line"> use minigrep::Config;</span><br><span class="line"> </span><br><span class="line"> fn main() &#123;</span><br><span class="line"><span class="deletion">-    let args: Vec&lt;String&gt; = env::args().collect();</span></span><br><span class="line"><span class="deletion">-</span></span><br><span class="line"><span class="deletion">-    let config = Config::new(&amp;args).unwrap_or_else(|err| &#123;</span></span><br><span class="line"><span class="addition">+    let config = Config::new(env::args()).unwrap_or_else(|err| &#123;</span></span><br><span class="line">         eprintln!(&quot;Problem parsing arguments: &#123;&#125;&quot;, err);</span><br><span class="line">         process::exit(1);</span><br><span class="line">     &#125;);</span><br></pre></td></tr></table></figure>

<p>这里的<code>env::args</code>我们传递的是<code>iterator</code>的<code>ownership</code></p>
<p>对应 把之前的代码改简洁</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="comment">--- a/src/lib.rs</span></span><br><span class="line"><span class="comment">+++ b/src/lib.rs</span></span><br><span class="line"><span class="meta">@@ -9,12 +9,18 @@</span> pub struct Config &#123;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> impl Config &#123;</span><br><span class="line"><span class="deletion">-    pub fn new(args: &amp;[String]) -&gt; Result&lt;Config, &amp;&#x27;static str&gt; &#123;</span></span><br><span class="line"><span class="deletion">-        if args.len() &lt; 3 &#123;</span></span><br><span class="line"><span class="deletion">-            return Err(&quot;not enough arguments&quot;);</span></span><br><span class="line"><span class="deletion">-        &#125;</span></span><br><span class="line"><span class="deletion">-        let query = args[1].clone();</span></span><br><span class="line"><span class="deletion">-        let filename = args[2].clone();</span></span><br><span class="line"><span class="addition">+    pub fn new(mut args: std::env::Args) -&gt; Result&lt;Config, &amp;&#x27;static str&gt; &#123;</span></span><br><span class="line"><span class="addition">+        args.next(); //第一个是 这个程序名字 忽略它</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+        let query = match args.next() &#123;</span></span><br><span class="line"><span class="addition">+            Some(arg) =&gt; arg,</span></span><br><span class="line"><span class="addition">+            None =&gt; return Err(&quot;Didn&#x27;t get a query string&quot;),</span></span><br><span class="line"><span class="addition">+        &#125;;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+        let filename = match args.next() &#123;</span></span><br><span class="line"><span class="addition">+            Some(arg) =&gt; arg,</span></span><br><span class="line"><span class="addition">+            None =&gt; return Err(&quot;Didn&#x27;t get a file name&quot;),</span></span><br><span class="line"><span class="addition">+        &#125;;</span></span><br><span class="line"> </span><br><span class="line">         let case_insensitive = env::var(&quot;CASE_INSENSITIVE&quot;).is_err();</span><br><span class="line"> </span><br><span class="line"><span class="meta">@@ -40,13 +46,9 @@</span> pub fn run(config: Config) -&gt; Result&lt;(), Box&lt;dyn Error&gt;&gt; &#123;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> pub fn search&lt;&#x27;a&gt;(query: &amp;str, contents: &amp;&#x27;a str) -&gt; Vec&lt;&amp;&#x27;a str&gt; &#123;</span><br><span class="line"><span class="deletion">-    let mut results = Vec::new();</span></span><br><span class="line"><span class="deletion">-    for line in contents.lines() &#123;</span></span><br><span class="line"><span class="deletion">-        if line.contains(query) &#123;</span></span><br><span class="line"><span class="deletion">-            results.push(line);</span></span><br><span class="line"><span class="deletion">-        &#125;</span></span><br><span class="line"><span class="deletion">-    &#125;</span></span><br><span class="line"><span class="deletion">-    results</span></span><br><span class="line"><span class="addition">+    contents.lines()</span></span><br><span class="line"><span class="addition">+        .filter(|line| line.contains(query))</span></span><br><span class="line"><span class="addition">+        .collect()</span></span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> pub fn search_case_insensitive&lt;&#x27;a&gt;(query: &amp;str, contents: &amp;&#x27;a str) -&gt; Vec&lt;&amp;&#x27;a str&gt; &#123;</span><br></pre></td></tr></table></figure>

<p>新的<code>search</code>代码 把老生长谈的方法变成函数</p>
<h2 id="Comparing-Performance-Loops-vs-Iterators"><a href="#Comparing-Performance-Loops-vs-Iterators" class="headerlink" title="Comparing Performance: Loops vs. Iterators"></a>Comparing Performance: Loops vs. Iterators</h2><p>竟然还有性能比较，大概</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">test bench_search_for  ... bench:  19,620,300 ns/iter (+/- 915,700)</span><br><span class="line">test bench_search_iter ... bench:  19,234,900 ns/iter (+/- 657,200)</span><br></pre></td></tr></table></figure>

<p>这就意味着 iterators, although a high-level abstraction, get compiled down to roughly the same code as if you’d written the lower-level code yourself. 牛逼了</p>
<p>Iterators are one of Rust’s zero-cost abstractions, by which we mean using the abstraction imposes no additional runtime overhead</p>
<blockquote>
<p>In general, C++ implementations obey the zero-overhead principle: What you don’t use, you don’t pay for. And further: What you do use, you couldn’t hand code any better.</p>
</blockquote>
<p>下面是一个音频处理代码的部分</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">buffer</span>: &amp;<span class="keyword">mut</span> [<span class="type">i32</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="variable">coefficients</span>: [<span class="type">i64</span>; <span class="number">12</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="variable">qlp_shift</span>: <span class="type">i16</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">12</span>..buffer.<span class="title function_ invoke__">len</span>() &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">prediction</span> = coefficients.<span class="title function_ invoke__">iter</span>()</span><br><span class="line">                               .<span class="title function_ invoke__">zip</span>(&amp;buffer[i - <span class="number">12</span>..i])</span><br><span class="line">                               .<span class="title function_ invoke__">map</span>(|(&amp;c, &amp;s)| c * s <span class="keyword">as</span> <span class="type">i64</span>)</span><br><span class="line">                               .sum::&lt;<span class="type">i64</span>&gt;() &gt;&gt; qlp_shift;</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">delta</span> = buffer[i];</span><br><span class="line">  buffer[i] = prediction <span class="keyword">as</span> <span class="type">i32</span> + delta;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为了计算<code>prediction</code>的值，遍历<code>coefficients</code>的12个值,和buffer的每个值构成<code>(一个coefficients,一个buffer)</code>然后两两相乘，求和，最后位移一下。</p>
<p>Rust编译器会把它们编译成 和手写实现 相类似的 <code>汇编代码</code>，这里甚至把循环12次进行<code>循环展开</code></p>
<h1 id="More-About-Cargo-and-Crates-io"><a href="#More-About-Cargo-and-Crates-io" class="headerlink" title="More About Cargo and Crates.io"></a>More About Cargo and Crates.io</h1><ul>
<li>Customize your build through release profiles</li>
<li>Publish libraries on <a href="https://crates.io/">crates.io</a></li>
<li>Organize large projects with workspaces</li>
<li>Install binaries from crates.io</li>
<li>Extend Cargo using custom commands</li>
</ul>
<p>更多文档 请看 <a href="https://doc.rust-lang.org/cargo/">这里</a></p>
<h2 id="Customizing-Builds-with-Release-Profiles"><a href="#Customizing-Builds-with-Release-Profiles" class="headerlink" title="Customizing Builds with Release Profiles"></a>Customizing Builds with Release Profiles</h2><p><code>release profiles</code>是预定义，可定制</p>
<p><code>Cargo</code>有两个主要的配置</p>
<p><code>dev</code>:<code>cargo build</code></p>
<p><code>release</code>:<code>cargo build --release</code></p>
<p>如果<code>Cargo.toml</code>没有任何<code>[profile.*]</code> 则采用默认配置</p>
<p>如果在<code>Cargo.toml</code>中配置，则是写了多少就覆盖多少默认的</p>
<p>如</p>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="section">[profile.dev]</span></span><br><span class="line"><span class="attr">opt-level</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="section">[profile.release]</span></span><br><span class="line"><span class="attr">opt-level</span> = <span class="number">3</span></span><br></pre></td></tr></table></figure>

<h2 id="Publishing-a-Crate-to-Crates-io"><a href="#Publishing-a-Crate-to-Crates-io" class="headerlink" title="Publishing a Crate to Crates.io"></a>Publishing a Crate to Crates.io</h2><p><code>crates.io</code> 可以用github账号登陆</p>
<p>这是一个可以上传也可以下载别人共享的</p>
<ul>
<li>准确的文档描述你的packages</li>
</ul>
<p>Rust 如果用<code>///</code>来写注释，可以自动生成HTML文档 例如</p>
<blockquote>
<p><code>src/lib.rs</code></p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// Adds one to the number given.</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// # Examples</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// &lt;三个` hexo next 的解析不支持...会和上面的配对&gt;</span></span><br><span class="line"><span class="comment">/// let arg = 5;</span></span><br><span class="line"><span class="comment">/// let answer = &lt;这里写你的包名&gt;::add_one(arg);</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// assert_eq!(6, answer);</span></span><br><span class="line"><span class="comment">/// &lt;三个` hexo next 的解析不支持...会和上面的配对&gt;</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">add_one</span>(x: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">    x + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>你可以在本地<code>cargo doc --open</code>来查看</p>
<p>所以这是markdown语法!?</p>
<p>标题 有</p>
<p><code># Examples</code></p>
<p><code># Panics</code>:提示用户什么时候可能触发</p>
<p><code># Errors</code>:例如返回的Result，那么有错误类型的描述</p>
<p><code># safety</code>: 解释为什么这个方法是<code>unsafe</code>的 &#x2F;&#x2F;19章节</p>
<p>running <code>cargo test</code> will run the code examples in your documentation as tests!!!!!!!!!!!!!!!!!??????????????</p>
<p>试了一下有点意思啊，这么溜吗,这解决了,有可能只改了代码和测试，但忘记改文档的问题</p>
<p>We typically use these doc comments inside the crate root file, 用<code>//!</code> 做根描述</p>
<p>你在实现模块的层级架构和用户使用期望的层级架构是有差异的，你编写可能更考虑分化，可迭代性等等多层级，而用户可能只希望好用。</p>
<p>如果你直接<code>cargo doc</code> 对于你层级内的东西，用户需要反复点击才能找到</p>
<p>要解决这个问题，你可以在 <code>src/lib.rs</code>上 加</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">use</span> 层级::层级::要<span class="keyword">pub</span>的;</span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">use</span> 层级::层级::要<span class="keyword">pub</span>的;</span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">use</span> 层级::层级::要<span class="keyword">pub</span>的;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<blockquote>
<p>账号</p>
</blockquote>
<p>github登陆</p>
<p><code>https://crates.io/me</code>创建<code>token</code>,然后根据它的提示，就可以在命令行登陆了,注意保密！</p>
<blockquote>
<p>发布准备</p>
</blockquote>
<p><code>Cargo.toml</code>配置名称等，注意<code>crates.io</code>上是先到先得 &#x2F;&#x2F;个人感觉这样设计并不够好，还是<code>用户/仓库名</code>的那种体验更好，复议</p>
<p>license 也可以用OR 连接,一个完整的大概像这样</p>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="section">[package]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;guessing_game&quot;</span></span><br><span class="line"><span class="attr">version</span> = <span class="string">&quot;0.1.0&quot;</span></span><br><span class="line"><span class="attr">authors</span> = [<span class="string">&quot;Your Name &lt;you@example.com&gt;&quot;</span>]</span><br><span class="line"><span class="attr">description</span> = <span class="string">&quot;A fun game where you guess what number the computer has chosen.&quot;</span></span><br><span class="line"><span class="attr">license</span> = <span class="string">&quot;MIT OR Apache-2.0&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意！！！一旦发布不能被删除，是永久的，只能有版本更新</strong>: 使用<code>cargo publish</code>来发布</p>
<blockquote>
<p>关于版本号 <a href="https://semver.org/">https://semver.org/</a></p>
</blockquote>
<p>Given a version number MAJOR.MINOR.PATCH, increment the:</p>
<ul>
<li>MAJOR version when you make incompatible API changes,</li>
<li>MINOR version when you add functionality in a backwards-compatible manner, and</li>
<li>PATCH version when you make backwards-compatible bug fixes.</li>
</ul>
<p>Additional labels for pre-release and build metadata are available as extensions to the MAJOR.MINOR.PATCH format.</p>
<p>撤回版本<code>cargo yank --vers 1.0.1</code>:意义 并没有删除，但是新的没有指定该版本的不会依赖该版本，但别人已经指定lock该版本的，依然可以下载。</p>
<p><code>cargo yank --vers 1.0.1 --undo</code> 撤销 撤回</p>
<h2 id="Cargo-Workspaces"><a href="#Cargo-Workspaces" class="headerlink" title="Cargo Workspaces"></a>Cargo Workspaces</h2><p>cargo提供一个Workspaces,来管理多个相互关联的开发包</p>
<p><code>workspace = package*</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir workspacedemo &amp;&amp; cd workspacedemo</span><br></pre></td></tr></table></figure>

<p>建立文件<code>Cargo.toml</code>并写入</p>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="section">[workspace]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">members</span> = [</span><br><span class="line">    <span class="string">&quot;adder&quot;</span>,</span><br><span class="line">    <span class="string">&quot;add-one&quot;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>执行命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cargo new adder</span><br><span class="line">cargo new add-one --lib</span><br></pre></td></tr></table></figure>

<p>目录结构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── adder</span><br><span class="line">│   ├── Cargo.toml</span><br><span class="line">│   └── src</span><br><span class="line">│       └── main.rs</span><br><span class="line">├── add-one</span><br><span class="line">│   ├── Cargo.toml</span><br><span class="line">│   └── src</span><br><span class="line">│       └── lib.rs</span><br><span class="line">├── Cargo.lock</span><br><span class="line">├── Cargo.toml</span><br><span class="line">└── target</span><br></pre></td></tr></table></figure>

<blockquote>
<p>文件<code>add-one/src/lib.rs</code></p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">add_one</span>(x: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">    x + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>文件<code>adder/Cargo.toml</code>的<code>[dependencies]</code>字段</p>
</blockquote>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="section">[dependencies]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">add-one</span> = &#123; path = <span class="string">&quot;../add-one&quot;</span> &#125;</span><br></pre></td></tr></table></figure>

<p><code>adder/src/main.rs</code></p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> add_one;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">num</span> = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Hello, world! &#123;&#125; plus one is &#123;&#125;!&quot;</span>, num, add_one::<span class="title function_ invoke__">add_one</span>(num));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行</p>
<p><code>cargo build</code></p>
<p><code>cargo run -p adder</code></p>
<p>你会发现，只有workspace根地方才有lock，保证了哥哥package之间用的相同的依赖版本</p>
<p>对于外部包来说，例如rand</p>
<p>我们在<code>add-one/Cargo.toml</code>中加上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[dependencies]</span><br><span class="line"></span><br><span class="line">rand = &quot;0.3.14&quot;</span><br></pre></td></tr></table></figure>

<p>但是在adder中并不能使用，如果要使用，需要在<code>adder</code>的<code>Cargo.toml</code>中也加上 rand的依赖</p>
<p>单元测试和之前一样，区别是，我们可以 用<code>cargo test -p add-one</code>这样来指定具体的packages</p>
<p>workspace发布，你需要进入每个package目录单独<code>cargo publish</code>发布，没有<code>--all</code>或<code>-p</code>参数</p>
<h2 id="Installing-Binaries-from-Crates-io-with-cargo-install"><a href="#Installing-Binaries-from-Crates-io-with-cargo-install" class="headerlink" title="Installing Binaries from Crates.io with cargo install"></a>Installing Binaries from Crates.io with cargo install</h2><p>你只能install 有 二进制targets的 也就是<code>src/main.rs</code>的</p>
<p>一般来说README文件中会说清 是lib还是bin</p>
<p>所有<code>cargo install</code>的二进制默认放在<code>$HOME/.cargo/bin</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">ls</span> ~/.cargo/bin/</span></span><br><span class="line">cargo         cargo-fmt   clippy-driver  rustc    rustfmt   rustlings  rustup</span><br><span class="line">cargo-clippy  cargo-miri  rls            rustdoc  rust-gdb  rust-lldb</span><br></pre></td></tr></table></figure>

<p>我们用<code>ripgrep</code>举例</p>
<p>首先<code>cargo install ripgrep</code></p>
<p>然后就可以<code>rg --help</code>使用了</p>
<h2 id="Extending-Cargo-with-Custom-Commands"><a href="#Extending-Cargo-with-Custom-Commands" class="headerlink" title="Extending Cargo with Custom Commands"></a>Extending Cargo with Custom Commands</h2><p>如果，你的<code>$PATH</code>中存在某个<code>cargo-something</code>那么你可以用<code>cargo something</code> 命令</p>
<p>你甚至可以用<code>cargo ---list</code>查看</p>
<h1 id="Smart-Pointers"><a href="#Smart-Pointers" class="headerlink" title="Smart Pointers"></a>Smart Pointers</h1><p>好熟悉的名字，玩过C++的都知道 c++一组 smart pointer,以前用的时候觉得还是很香的</p>
<p><a href="https://docs.microsoft.com/en-us/cpp/cpp/smart-pointers-modern-cpp?view=vs-2019">https://docs.microsoft.com/en-us/cpp/cpp/smart-pointers-modern-cpp?view=vs-2019</a></p>
<p><a href="https://en.cppreference.com/book/intro/smart_pointers">https://en.cppreference.com/book/intro/smart_pointers</a></p>
<hr>
<p>references are pointers that only borrow data; </p>
<p>作为对比大多数情况下, smart pointers own the data they point to.</p>
<p>我们已经讲过的<code>String</code>和<code>Vec&lt;T&gt;</code>就是 smart pointers,因为它们有用一些内存，并且允许你 操作它,</p>
<p>除此外它们也有metadata,以及一些额外的功能，如String 会保证始终是一个有效的 <code>UTF-8</code>;</p>
<p>职能指针通常用结构体实现，和普通 struct相比，它们实现了<code>Deref</code>和<code>Drop</code> traits</p>
<p><code>Deref</code> trait 允许一个 smart pointer 结构体 像一个 reference一样使用</p>
<p><code>Drop</code> trait 允许你自己设计当一个该smart pointers 的 instance 除了scope时的行为</p>
<p>本章 只会 讲解 部分 常用的 标准库里的 智能指针:</p>
<ul>
<li><code>Box&lt;T&gt;</code>: 在 堆上 allocating values</li>
<li><code>Rc&lt;T&gt;</code>, 一个引用计数，允许 多个ownership</li>
<li><code>Ref&lt;T&gt;</code> and <code>RefMut&lt;T&gt;</code>, accessed through <code>RefCell&lt;T&gt;,</code> a type that enforces the borrowing rules 在运行时 而不是 编译时</li>
</ul>
<p>此外，本章还会有 <code>interior mutability</code></p>
<p>也会讨论<code>reference cycles</code> 是如何 内存泄漏 和 如何防止</p>
<h2 id="Using-Box-to-Point-to-Data-on-the-Heap"><a href="#Using-Box-to-Point-to-Data-on-the-Heap" class="headerlink" title="Using Box to Point to Data on the Heap"></a>Using Box to Point to Data on the Heap</h2><p>用<code>Box&lt;T&gt;</code></p>
<p>最直接的 smart pointer,让你可以在堆上保存值，而不是栈上</p>
<p>较常使用场景:</p>
<ul>
<li>编译时 不知道大小，比如递归类型</li>
<li>想transfer ownership大量的数据，但要确保数据不会被拷贝,比如为了性能</li>
<li>当你 own a value 且你只关心这个value的type实现了一个特定的trait 而不在意 是一个特定的 type， 看作trait object</li>
</ul>
<p>香不香</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">b</span> = <span class="type">Box</span>::<span class="title function_ invoke__">new</span>(<span class="number">5</span>); <span class="comment">// 虽然一般不会这样写没啥意义，但这样可以示例</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;b = &#123;&#125;&quot;</span>, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>A <code>cons list</code> is a data structure that comes from the <code>Lisp</code> programming language and its dialects</p>
<p>cons &#x3D; ‘construct’</p>
<p><code>to cons x onto y</code> 意味着形成? (x,y)</p>
<p>以下代码无 ,但是 尝试一个递归的定义效</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">List</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">Cons</span>(<span class="type">i32</span>, List),</span><br><span class="line">    Nil,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用<code>List</code> 类型来存储<code>1,2,3</code></p>
<p>src&#x2F;main.rs</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> crate::List::&#123;Cons, Nil&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">list</span> = <span class="title function_ invoke__">Cons</span>(<span class="number">1</span>, <span class="title function_ invoke__">Cons</span>(<span class="number">2</span>, <span class="title function_ invoke__">Cons</span>(<span class="number">3</span>, Nil)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为我们还没有解决上面递归定义的问题，会报错<code>recursive type has infinite size</code></p>
<p>…c玩得熟的话，这大概就是<code>struct里放同一个struct</code>和<code>struct里放 同一个struct指针</code>的区别</p>
<p><img data-src="https://doc.rust-lang.org/book/img/trpl15-01.svg" alt="Cons list Cons"></p>
<p><code>Box&lt;T&gt;</code> needs: a pointer’s size, 不会因为指向不同的数据改变所需要的空间大小</p>
<p>以下是可以运行的</p>
<blockquote>
<p><code>src/main.rs</code></p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">List</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">Cons</span>(<span class="type">i32</span>, <span class="type">Box</span>&lt;List&gt;),</span><br><span class="line">    Nil,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> crate::List::&#123;Cons, Nil&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">list</span> = <span class="title function_ invoke__">Cons</span>(<span class="number">1</span>,</span><br><span class="line">        <span class="type">Box</span>::<span class="title function_ invoke__">new</span>(<span class="title function_ invoke__">Cons</span>(<span class="number">2</span>,</span><br><span class="line">            <span class="type">Box</span>::<span class="title function_ invoke__">new</span>(<span class="title function_ invoke__">Cons</span>(<span class="number">3</span>,</span><br><span class="line">                <span class="type">Box</span>::<span class="title function_ invoke__">new</span>(Nil))))));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://doc.rust-lang.org/book/img/trpl15-02.svg" alt="cons box list"></p>
<h2 id="Treating-Smart-Pointers-Like-Regular-References-with-the-Deref-Trait"><a href="#Treating-Smart-Pointers-Like-Regular-References-with-the-Deref-Trait" class="headerlink" title="Treating Smart Pointers Like Regular References with the Deref Trait"></a>Treating Smart Pointers Like Regular References with the Deref Trait</h2><p>实现了<code>Deref</code>trait 可以让你自定义 <code>dereference operator</code>的行为</p>
<p>然后你就可以像使用引用一样使用 相应结构体</p>
<p>先看<code>deref coercion</code> feature</p>
<p><strong>注意</strong>以下示例 只关注了 <code>Deref</code>trait的实现，</p>
<blockquote>
<p><code>src/main.rs</code></p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">MyBox</span>&lt;T&gt;(T);</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span>&lt;T&gt; MyBox&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">new</span>(x: T) <span class="punctuation">-&gt;</span> MyBox&lt;T&gt; &#123;</span><br><span class="line">        <span class="title function_ invoke__">MyBox</span>(x)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们期望下面代码能运行成功</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">y</span> = MyBox::<span class="title function_ invoke__">new</span>(x);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">assert_eq!</span>(<span class="number">5</span>, x);</span><br><span class="line">    <span class="built_in">assert_eq!</span>(<span class="number">5</span>, *y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::ops::Deref;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span>&lt;T&gt; Deref <span class="keyword">for</span> <span class="title class_">MyBox</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">type</span> <span class="title class_">Target</span> = T; <span class="comment">// 这里为了让`Deref`能使用 MyBox&lt;T&gt; -&gt; T</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">deref</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> &amp;T &#123;</span><br><span class="line">        &amp;<span class="keyword">self</span>.<span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Rust 会把上面<code>*y</code>实际看作<code>*(y.deref())</code></p>
<h3 id="Implicit-Deref-Coercions-with-Functions-and-Methods"><a href="#Implicit-Deref-Coercions-with-Functions-and-Methods" class="headerlink" title="Implicit Deref Coercions with Functions and Methods"></a>Implicit Deref Coercions with Functions and Methods</h3><p>像上面的 我们可以这样使用</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">hello</span>(name: &amp;<span class="type">str</span>) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Hello, &#123;&#125;!&quot;</span>, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">m</span> = MyBox::<span class="title function_ invoke__">new</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Rust&quot;</span>));</span><br><span class="line">    <span class="title function_ invoke__">hello</span>(&amp;m); <span class="comment">// 通过Deref, &amp;MyBox&lt;String&gt; -&gt; &amp;String -&gt; &amp;str</span></span><br><span class="line">    <span class="comment">// 如果没有 Rust的这个帮助，我们要`&amp;(*m)[..]`这样写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有三种情况会转化</p>
<ul>
<li>From <code>&amp;T</code> to <code>&amp;U</code> when <code>T: Deref&lt;Target=U&gt;</code></li>
<li>From <code>&amp;mut T</code> to <code>&amp;mut U</code> when <code>T: DerefMut&lt;Target=U&gt;</code></li>
<li>From <code>&amp;mut T</code> to <code>&amp;U</code> when <code>T: Deref&lt;Target=U&gt;</code></li>
</ul>
<p>类似如果你希望 <code>*</code>操作 是 <code>immutable references</code>,那么用<code>DerefMut</code>替代<code>Deref</code></p>
<p>第三种 是一个trick，吧 mutable 转换成 immutable, （但反过来不行）</p>
<h2 id="Running-Code-on-Cleanup-with-the-Drop-Trait"><a href="#Running-Code-on-Cleanup-with-the-Drop-Trait" class="headerlink" title="Running Code on Cleanup with the Drop Trait"></a>Running Code on Cleanup with the Drop Trait</h2><p><code>Drop</code> trait : lets you customize what happens when a value is about to go out of scope.</p>
<p>例如，<code>Box&lt;T&gt;</code>自定义的<code>Drop</code>行为是 deallcate box 指向的堆上的space</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct CustomSmartPointer &#123;</span><br><span class="line">    data: String,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">impl Drop for CustomSmartPointer &#123;</span><br><span class="line">    fn drop(&amp;mut self) &#123;</span><br><span class="line">        println!(&quot;Dropping CustomSmartPointer with data `&#123;&#125;`!&quot;, self.data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn main() &#123;</span><br><span class="line">    let c = CustomSmartPointer &#123; data: String::from(&quot;my stuff&quot;) &#125;;</span><br><span class="line">    let d = CustomSmartPointer &#123; data: String::from(&quot;other stuff&quot;) &#125;;</span><br><span class="line">    println!(&quot;CustomSmartPointers created.&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>会输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CustomSmartPointers created.</span><br><span class="line">Dropping CustomSmartPointer with data `other stuff`!</span><br><span class="line">Dropping CustomSmartPointer with data `my stuff`!</span><br></pre></td></tr></table></figure>

<p>Variables are dropped in the reverse order of their creation.</p>
<p>如果我们希望 早一些 释放，我们并不能直接调用<code>.drop()</code>explicit destructor calls not allowed，因为这样Rust依然会 自动调用<code>drop</code>，可能<code>double free</code></p>
<p>我们只能调用<code>std::mem::drop</code>来早些释放，如(锁的控制)</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">c</span> = CustomSmartPointer &#123; data: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;some data&quot;</span>) &#125;;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;CustomSmartPointer created.&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">drop</span>(c);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;CustomSmartPointer dropped before the end of main.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这说明了 内存你依然管不了？只能说 影响影响 释放时机</p>
<h2 id="Rc-the-Reference-Counted-Smart-Pointer"><a href="#Rc-the-Reference-Counted-Smart-Pointer" class="headerlink" title="Rc, the Reference Counted Smart Pointer"></a>Rc, the Reference Counted Smart Pointer</h2><p>计数智能指针</p>
<p>比如图，一个点可能被很多指向边拥有</p>
<p>注意！ 在单线程中使用<code>Rc&lt;T&gt;</code>如果要多线程的 请看下一章节</p>
<p><img data-src="https://doc.rust-lang.org/book/img/trpl15-03.svg" alt="rc"></p>
<p>首先 Box+Cons会挂掉</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">enum List &#123;</span><br><span class="line">    Cons(i32, Box&lt;List&gt;),</span><br><span class="line">    Nil,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">use crate::List::&#123;Cons, Nil&#125;;</span><br><span class="line"></span><br><span class="line">fn main() &#123;</span><br><span class="line">    let a = Cons(5,</span><br><span class="line">        Box::new(Cons(10,</span><br><span class="line">            Box::new(Nil))));</span><br><span class="line">    let b = Cons(3, Box::new(a)); // 这里move了a 而不是Copy</span><br><span class="line">    let c = Cons(4, Box::new(a)); // 这里便不可用了</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 Rc</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">List</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">Cons</span>(<span class="type">i32</span>, Rc&lt;List&gt;),</span><br><span class="line">    Nil,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> crate::List::&#123;Cons, Nil&#125;;</span><br><span class="line"><span class="keyword">use</span> std::rc::Rc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span> = Rc::<span class="title function_ invoke__">new</span>(<span class="title function_ invoke__">Cons</span>(<span class="number">5</span>, Rc::<span class="title function_ invoke__">new</span>(<span class="title function_ invoke__">Cons</span>(<span class="number">10</span>, Rc::<span class="title function_ invoke__">new</span>(Nil)))));</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">b</span> = <span class="title function_ invoke__">Cons</span>(<span class="number">3</span>, Rc::<span class="title function_ invoke__">clone</span>(&amp;a)); <span class="comment">// 计数+1 而不是深拷贝 a.clone()</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">c</span> = <span class="title function_ invoke__">Cons</span>(<span class="number">4</span>, Rc::<span class="title function_ invoke__">clone</span>(&amp;a)); <span class="comment">// 计数+1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过<code>Rc::strong_count</code>查看Rc计数的变化</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span> = Rc::<span class="title function_ invoke__">new</span>(<span class="title function_ invoke__">Cons</span>(<span class="number">5</span>, Rc::<span class="title function_ invoke__">new</span>(<span class="title function_ invoke__">Cons</span>(<span class="number">10</span>, Rc::<span class="title function_ invoke__">new</span>(Nil)))));</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;count after creating a = &#123;&#125;&quot;</span>, Rc::<span class="title function_ invoke__">strong_count</span>(&amp;a)); <span class="comment">// 1</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">b</span> = <span class="title function_ invoke__">Cons</span>(<span class="number">3</span>, Rc::<span class="title function_ invoke__">clone</span>(&amp;a));</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;count after creating b = &#123;&#125;&quot;</span>, Rc::<span class="title function_ invoke__">strong_count</span>(&amp;a)); <span class="comment">// 2</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">c</span> = <span class="title function_ invoke__">Cons</span>(<span class="number">4</span>, Rc::<span class="title function_ invoke__">clone</span>(&amp;a));</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;count after creating c = &#123;&#125;&quot;</span>, Rc::<span class="title function_ invoke__">strong_count</span>(&amp;a)); <span class="comment">// 3</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;count after c goes out of scope = &#123;&#125;&quot;</span>, Rc::<span class="title function_ invoke__">strong_count</span>(&amp;a)); <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在的遗憾就是，还没能 让多个都是mutable，但有时，多个拥有者都能mutable也是很有用的。将在下一节提到</p>
<h2 id="RefCell-and-the-Interior-Mutability-Pattern"><a href="#RefCell-and-the-Interior-Mutability-Pattern" class="headerlink" title="RefCell and the Interior Mutability Pattern"></a>RefCell and the Interior Mutability Pattern</h2><p><code>RefCell&lt;T&gt;</code> 和 <code>interior Mutability Pattern</code></p>
<p><code>Interior mutability</code>的实际模式，是为了让你能改变引用不可变的内部数据</p>
<p>用的是<code>unsafe</code>代码来 bend 一些Rust 规则,达到 外部 不可变，内部可变</p>
<p>represents single ownership over the data it holds</p>
<p>回顾第4章 的ownership</p>
<ul>
<li>At any given time, you can have either (but not both of) one mutable reference or any number of immutable references.</li>
<li>References must always be valid.</li>
</ul>
<p>然后，我们上面的 Box 会在 编译时 检查borrowing规则, &#x2F;&#x2F; 因为这种 会有更小的运行时消耗，因此 Rust默认大多是这样</p>
<p>然后，我们上面的 RefCell 会在 运行时 检查borrowing规则 &#x2F;&#x2F; 例如停机问题咯，并不是所有都能，</p>
<ul>
<li><code>Rc&lt;T&gt;</code> enables multiple owners of the same data; <code>Box&lt;T&gt;</code> and <code>RefCell&lt;T&gt;</code> have single owners.</li>
<li><code>Box&lt;T&gt;</code> allows immutable or mutable borrows checked at compile time; <code>Rc&lt;T&gt;</code> allows only immutable borrows checked at compile time; <code>RefCell&lt;T&gt;</code> allows immutable or mutable borrows checked at runtime.</li>
<li>Because <code>RefCell&lt;T&gt;</code> allows mutable borrows checked at runtime, you can mutate the value inside the <code>RefCell&lt;T&gt;</code> even when the <code>RefCell&lt;T&gt;</code> is immutable.</li>
</ul>
<p>Interior  Mutability的一个使用场景: Mock Objects</p>
<p><code>test double</code></p>
<p>如下<code>cargo test</code>会报错</p>
<blockquote>
<p><code>src/lib.rs</code></p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">trait</span> <span class="title class_">Messenger</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">send</span>(&amp;<span class="keyword">self</span>, msg: &amp;<span class="type">str</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">LimitTracker</span>&lt;<span class="symbol">&#x27;a</span>, T: Messenger&gt; &#123;</span><br><span class="line">    messenger: &amp;<span class="symbol">&#x27;a</span> T,</span><br><span class="line">    value: <span class="type">usize</span>,</span><br><span class="line">    max: <span class="type">usize</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span>&lt;<span class="symbol">&#x27;a</span>, T&gt; LimitTracker&lt;<span class="symbol">&#x27;a</span>, T&gt;</span><br><span class="line">    <span class="keyword">where</span> T: Messenger &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">new</span>(messenger: &amp;T, max: <span class="type">usize</span>) <span class="punctuation">-&gt;</span> LimitTracker&lt;T&gt; &#123;</span><br><span class="line">        LimitTracker &#123;</span><br><span class="line">            messenger,</span><br><span class="line">            value: <span class="number">0</span>,</span><br><span class="line">            max,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">set_value</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, value: <span class="type">usize</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.value = value;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> <span class="variable">percentage_of_max</span> = <span class="keyword">self</span>.value <span class="keyword">as</span> <span class="type">f64</span> / <span class="keyword">self</span>.max <span class="keyword">as</span> <span class="type">f64</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> percentage_of_max &gt;= <span class="number">1.0</span> &#123;</span><br><span class="line">            <span class="keyword">self</span>.messenger.<span class="title function_ invoke__">send</span>(<span class="string">&quot;Error: You are over your quota!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> percentage_of_max &gt;= <span class="number">0.9</span> &#123;</span><br><span class="line">             <span class="keyword">self</span>.messenger.<span class="title function_ invoke__">send</span>(<span class="string">&quot;Urgent warning: You&#x27;ve used up over 90% of your quota!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> percentage_of_max &gt;= <span class="number">0.75</span> &#123;</span><br><span class="line">            <span class="keyword">self</span>.messenger.<span class="title function_ invoke__">send</span>(<span class="string">&quot;Warning: You&#x27;ve used up over 75% of your quota!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[cfg(test)]</span></span><br><span class="line"><span class="keyword">mod</span> tests &#123;</span><br><span class="line">    <span class="keyword">use</span> super::*;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">MockMessenger</span> &#123;</span><br><span class="line">        sent_messages: <span class="type">Vec</span>&lt;<span class="type">String</span>&gt;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">impl</span> <span class="title class_">MockMessenger</span> &#123;</span><br><span class="line">        <span class="keyword">fn</span> <span class="title function_">new</span>() <span class="punctuation">-&gt;</span> MockMessenger &#123;</span><br><span class="line">            MockMessenger &#123; sent_messages: <span class="built_in">vec!</span>[] &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">impl</span> <span class="title class_">Messenger</span> <span class="keyword">for</span> <span class="title class_">MockMessenger</span> &#123;</span><br><span class="line">        <span class="keyword">fn</span> <span class="title function_">send</span>(&amp;<span class="keyword">self</span>, message: &amp;<span class="type">str</span>) &#123;</span><br><span class="line">            <span class="keyword">self</span>.sent_messages.<span class="title function_ invoke__">push</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(message));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#[test]</span></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">it_sends_an_over_75_percent_warning_message</span>() &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">mock_messenger</span> = MockMessenger::<span class="title function_ invoke__">new</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">limit_tracker</span> = LimitTracker::<span class="title function_ invoke__">new</span>(&amp;mock_messenger, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        limit_tracker.<span class="title function_ invoke__">set_value</span>(<span class="number">80</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">assert_eq!</span>(mock_messenger.sent_messages.<span class="title function_ invoke__">len</span>(), <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一个方案是 加一堆mut</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="comment">--- a/src/lib.rs</span></span><br><span class="line"><span class="comment">+++ b/src/lib.rs</span></span><br><span class="line"><span class="meta">@@ -1,16 +1,16 @@</span></span><br><span class="line"> pub trait Messenger &#123;</span><br><span class="line"><span class="deletion">-    fn send(&amp;self, msg: &amp;str);</span></span><br><span class="line"><span class="addition">+    fn send(&amp;mut self, msg: &amp;str);</span></span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> pub struct LimitTracker&lt;&#x27;a, T: Messenger&gt; &#123;</span><br><span class="line"><span class="deletion">-    messenger: &amp;&#x27;a T,</span></span><br><span class="line"><span class="addition">+    messenger: &amp;&#x27;a mut T,</span></span><br><span class="line">     value: usize,</span><br><span class="line">     max: usize,</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> impl&lt;&#x27;a, T&gt; LimitTracker&lt;&#x27;a, T&gt;</span><br><span class="line">     where T: Messenger &#123;</span><br><span class="line"><span class="deletion">-    pub fn new(messenger: &amp;T, max: usize) -&gt; LimitTracker&lt;T&gt; &#123;</span></span><br><span class="line"><span class="addition">+    pub fn new(messenger: &amp;mut T, max: usize) -&gt; LimitTracker&lt;T&gt; &#123;</span></span><br><span class="line">         LimitTracker &#123;</span><br><span class="line">             messenger,</span><br><span class="line">             value: 0,</span><br><span class="line"><span class="meta">@@ -48,15 +48,15 @@</span> mod tests &#123;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     impl Messenger for MockMessenger &#123;</span><br><span class="line"><span class="deletion">-        fn send(&amp;self, message: &amp;str) &#123;</span></span><br><span class="line"><span class="addition">+        fn send(&amp;mut self, message: &amp;str) &#123;</span></span><br><span class="line">             self.sent_messages.push(String::from(message));</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     #[test]</span><br><span class="line">     fn it_sends_an_over_75_percent_warning_message() &#123;</span><br><span class="line"><span class="deletion">-        let mock_messenger = MockMessenger::new();</span></span><br><span class="line"><span class="deletion">-        let mut limit_tracker = LimitTracker::new(&amp;mock_messenger, 100);</span></span><br><span class="line"><span class="addition">+        let mut mock_messenger = MockMessenger::new();</span></span><br><span class="line"><span class="addition">+        let mut limit_tracker = LimitTracker::new(&amp;mut mock_messenger, 100);</span></span><br><span class="line"> </span><br><span class="line">         limit_tracker.set_value(80);</span><br></pre></td></tr></table></figure>

<p>而我们实际 只是希望self中的某一个子部分是可变的，我们用<code>RefCell&lt;T&gt;</code>来搞,改动如下</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="comment">--- a/src/lib.rs</span></span><br><span class="line"><span class="comment">+++ b/src/lib.rs</span></span><br><span class="line"><span class="meta">@@ -36,20 +36,21 @@</span> impl&lt;&#x27;a, T&gt; LimitTracker&lt;&#x27;a, T&gt;</span><br><span class="line"> #[cfg(test)]</span><br><span class="line"> mod tests &#123;</span><br><span class="line">     use super::*;</span><br><span class="line"><span class="addition">+    use std::cell::RefCell;</span></span><br><span class="line"> </span><br><span class="line">     struct MockMessenger &#123;</span><br><span class="line"><span class="deletion">-        sent_messages: Vec&lt;String&gt;,</span></span><br><span class="line"><span class="addition">+        sent_messages: RefCell&lt;Vec&lt;String&gt;&gt;,</span></span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     impl MockMessenger &#123;</span><br><span class="line">         fn new() -&gt; MockMessenger &#123;</span><br><span class="line"><span class="deletion">-            MockMessenger &#123; sent_messages: vec![] &#125;</span></span><br><span class="line"><span class="addition">+            MockMessenger &#123; sent_messages: RefCell::new(vec![]) &#125;</span></span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     impl Messenger for MockMessenger &#123;</span><br><span class="line">         fn send(&amp;self, message: &amp;str) &#123;</span><br><span class="line"><span class="deletion">-            self.sent_messages.push(String::from(message));</span></span><br><span class="line"><span class="addition">+            self.sent_messages.borrow_mut().push(String::from(message));</span></span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@@ -60,6 +61,6 @@</span> mod tests &#123;</span><br><span class="line"> </span><br><span class="line">         limit_tracker.set_value(80);</span><br><span class="line"> </span><br><span class="line"><span class="deletion">-        assert_eq!(mock_messenger.sent_messages.len(), 1);</span></span><br><span class="line"><span class="addition">+        assert_eq!(mock_messenger.sent_messages.borrow().len(), 1);</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>相对于 我们 之前的 <code>&amp;</code>和<code>&amp;mut</code>,<code>RefCell&lt;T&gt;</code>的对应的方法是</p>
<p><code>borrow</code> 和 <code>borrow_mut</code> 调用时 会引起 计数变化</p>
<p>分别返回<code>Ref&lt;T&gt;</code>和<code>RefMut&lt;T&gt;</code>类型</p>
<p>同理 基本的borrow标准还是不能违反， 如下面这样就会挂掉</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Messenger</span> <span class="keyword">for</span> <span class="title class_">MockMessenger</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">send</span>(&amp;<span class="keyword">self</span>, message: &amp;<span class="type">str</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">one_borrow</span> = <span class="keyword">self</span>.sent_messages.<span class="title function_ invoke__">borrow_mut</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">two_borrow</span> = <span class="keyword">self</span>.sent_messages.<span class="title function_ invoke__">borrow_mut</span>();</span><br><span class="line"></span><br><span class="line">        one_borrow.<span class="title function_ invoke__">push</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(message));</span><br><span class="line">        two_borrow.<span class="title function_ invoke__">push</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(message));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但不太棒的是 这个错误因为是RefCell给出的，它是运行时，所以你可能不一定检测到发生了这个问题，</p>
<p>一个推荐的方法是 <code>Rc&lt;T&gt;</code> + <code>RefCell&lt;T&gt;</code>同时使用</p>
<blockquote>
<p><code>src/main.rs</code></p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">List</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">Cons</span>(Rc&lt;RefCell&lt;<span class="type">i32</span>&gt;&gt;, Rc&lt;List&gt;), <span class="comment">// 这里 同时使用</span></span><br><span class="line">    Nil,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> crate::List::&#123;Cons, Nil&#125;;</span><br><span class="line"><span class="keyword">use</span> std::rc::Rc;</span><br><span class="line"><span class="keyword">use</span> std::cell::RefCell;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">value</span> = Rc::<span class="title function_ invoke__">new</span>(RefCell::<span class="title function_ invoke__">new</span>(<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span> = Rc::<span class="title function_ invoke__">new</span>(<span class="title function_ invoke__">Cons</span>(Rc::<span class="title function_ invoke__">clone</span>(&amp;value), Rc::<span class="title function_ invoke__">new</span>(Nil)));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">b</span> = <span class="title function_ invoke__">Cons</span>(Rc::<span class="title function_ invoke__">new</span>(RefCell::<span class="title function_ invoke__">new</span>(<span class="number">6</span>)), Rc::<span class="title function_ invoke__">clone</span>(&amp;a));</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">c</span> = <span class="title function_ invoke__">Cons</span>(Rc::<span class="title function_ invoke__">new</span>(RefCell::<span class="title function_ invoke__">new</span>(<span class="number">10</span>)), Rc::<span class="title function_ invoke__">clone</span>(&amp;a));</span><br><span class="line"></span><br><span class="line">    *value.<span class="title function_ invoke__">borrow_mut</span>() += <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;a after = &#123;:?&#125;&quot;</span>, a);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;b after = &#123;:?&#125;&quot;</span>, b);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;c after = &#123;:?&#125;&quot;</span>, c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a after = Cons(RefCell &#123; value: 15 &#125;, Nil)</span><br><span class="line">b after = Cons(RefCell &#123; value: 6 &#125;, Cons(RefCell &#123; value: 15 &#125;, Nil))</span><br><span class="line">c after = Cons(RefCell &#123; value: 10 &#125;, Cons(RefCell &#123; value: 15 &#125;, Nil))</span><br></pre></td></tr></table></figure>

<p>标准库里还有<code>Cell&lt;T&gt;</code>,<code>Mutex&lt;T&gt;</code></p>
<h2 id="Reference-Cycles-Can-Leak-Memory"><a href="#Reference-Cycles-Can-Leak-Memory" class="headerlink" title="Reference Cycles Can Leak Memory"></a>Reference Cycles Can Leak Memory</h2><p>循环 引用，比如图</p>
<blockquote>
<p><code>src/main.rs</code></p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> crate::List::&#123;Cons, Nil&#125;;</span><br><span class="line"><span class="keyword">use</span> std::rc::Rc;</span><br><span class="line"><span class="keyword">use</span> std::cell::RefCell;</span><br><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">List</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">Cons</span>(<span class="type">i32</span>, RefCell&lt;Rc&lt;List&gt;&gt;),</span><br><span class="line">    Nil,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">List</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">tail</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;&amp;RefCell&lt;Rc&lt;List&gt;&gt;&gt; &#123;</span><br><span class="line">        <span class="keyword">match</span> <span class="keyword">self</span> &#123;</span><br><span class="line">            <span class="title function_ invoke__">Cons</span>(_, item) =&gt; <span class="title function_ invoke__">Some</span>(item),</span><br><span class="line">            Nil =&gt; <span class="literal">None</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span> = Rc::<span class="title function_ invoke__">new</span>(<span class="title function_ invoke__">Cons</span>(<span class="number">5</span>, RefCell::<span class="title function_ invoke__">new</span>(Rc::<span class="title function_ invoke__">new</span>(Nil))));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;a initial rc count = &#123;&#125;&quot;</span>, Rc::<span class="title function_ invoke__">strong_count</span>(&amp;a));</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;a next item = &#123;:?&#125;&quot;</span>, a.<span class="title function_ invoke__">tail</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">b</span> = Rc::<span class="title function_ invoke__">new</span>(<span class="title function_ invoke__">Cons</span>(<span class="number">10</span>, RefCell::<span class="title function_ invoke__">new</span>(Rc::<span class="title function_ invoke__">clone</span>(&amp;a))));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;a rc count after b creation = &#123;&#125;&quot;</span>, Rc::<span class="title function_ invoke__">strong_count</span>(&amp;a));</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;b initial rc count = &#123;&#125;&quot;</span>, Rc::<span class="title function_ invoke__">strong_count</span>(&amp;b));</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;b next item = &#123;:?&#125;&quot;</span>, b.<span class="title function_ invoke__">tail</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(link) = a.<span class="title function_ invoke__">tail</span>() &#123;</span><br><span class="line">        *link.<span class="title function_ invoke__">borrow_mut</span>() = Rc::<span class="title function_ invoke__">clone</span>(&amp;b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;b rc count after changing a = &#123;&#125;&quot;</span>, Rc::<span class="title function_ invoke__">strong_count</span>(&amp;b));</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;a rc count after changing a = &#123;&#125;&quot;</span>, Rc::<span class="title function_ invoke__">strong_count</span>(&amp;a));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Uncomment the next line to see that we have a cycle;</span></span><br><span class="line">    <span class="comment">// it will overflow the stack</span></span><br><span class="line">    <span class="comment">// println!(&quot;a next item = &#123;:?&#125;&quot;, a.tail());</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>a和b的<code>strong_count</code>计数都是2</p>
<p><img data-src="https://doc.rust-lang.org/book/img/trpl15-04.svg" alt="cycle"></p>
<p><code>Creating a reference cycle would be a logic bug</code>???之前有实践过用index来代替指针，实现可以数据库保存读取,但是 我在实现如一些图论算法的时候，感觉用指针来写会体验更好?虽然感觉这种手工index能对 内存泄露解决，但是感觉是把本来指针就能提供的功能弃用了</p>
<p>应该automated tests, code reviews, and other software development practices to minimize.尽量减少循环引用</p>
<p>Another solution for avoiding reference cycles is reorganizing your data structures so that some references express ownership and some references don’t. As a result, you can have cycles made up of some ownership relationships and some non-ownership relationships, and only the ownership relationships affect whether or not a value can be dropped. In Listing 15-25, we always want Cons variants to own their list, so reorganizing the data structure isn’t possible. Let’s look at an example using graphs made up of parent nodes and child nodes to see when non-ownership relationships are an appropriate way to prevent reference cycles.</p>
<p>把 <code>Rc&lt;T&gt;</code>改成<code>Weak&lt;T&gt;</code></p>
<p>之前是调用<code>Rc::clone</code>，会增加<code>strong_count</code></p>
<p>现在<code>Rc::downgrade</code>会创建一个<code>Weak&lt;T&gt;</code>会使得<code>weak_count</code>的计数加1,并不表示一个<code>ownership relationship</code></p>
<p>只有在<code>strong_count</code>变为0时就会clean up了，不会在意<code>weak_count</code></p>
<p>所以 你在操作一个<code>weak_count</code>指向的时候，应该检查它指向的是否还存在，通过<code>upgrade</code>在一个<code>Weak&lt;T&gt;</code>实例上调用，返回<code>Option&lt;T&gt;</code>，如果没有被Drop它会返回一个<code>Some</code>，否则是个None</p>
<blockquote>
<p>样例代码 建立一个树</p>
</blockquote>
<blockquote>
<p><code>src/main.rs</code></p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::rc::&#123;Rc, Weak&#125;;</span><br><span class="line"><span class="keyword">use</span> std::cell::RefCell;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    value: <span class="type">i32</span>,</span><br><span class="line">    parent: RefCell&lt;Weak&lt;Node&gt;&gt;,</span><br><span class="line">    children: RefCell&lt;<span class="type">Vec</span>&lt;Rc&lt;Node&gt;&gt;&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">leaf</span> = Rc::<span class="title function_ invoke__">new</span>(Node &#123;</span><br><span class="line">        value: <span class="number">3</span>,</span><br><span class="line">        parent: RefCell::<span class="title function_ invoke__">new</span>(Weak::<span class="title function_ invoke__">new</span>()),</span><br><span class="line">        children: RefCell::<span class="title function_ invoke__">new</span>(<span class="built_in">vec!</span>[]),</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;leaf parent = &#123;:?&#125;&quot;</span>, leaf.parent.<span class="title function_ invoke__">borrow</span>().<span class="title function_ invoke__">upgrade</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">branch</span> = Rc::<span class="title function_ invoke__">new</span>(Node &#123;</span><br><span class="line">        value: <span class="number">5</span>,</span><br><span class="line">        parent: RefCell::<span class="title function_ invoke__">new</span>(Weak::<span class="title function_ invoke__">new</span>()),</span><br><span class="line">        children: RefCell::<span class="title function_ invoke__">new</span>(<span class="built_in">vec!</span>[Rc::<span class="title function_ invoke__">clone</span>(&amp;leaf)]),</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    *leaf.parent.<span class="title function_ invoke__">borrow_mut</span>() = Rc::<span class="title function_ invoke__">downgrade</span>(&amp;branch);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;leaf parent = &#123;:?&#125;&quot;</span>, leaf.parent.<span class="title function_ invoke__">borrow</span>().<span class="title function_ invoke__">upgrade</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>想法类似的话，感觉文件系统里的 软链接和硬链接 很相似</p>
<h1 id="Fearless-Concurrency"><a href="#Fearless-Concurrency" class="headerlink" title="Fearless Concurrency"></a>Fearless Concurrency</h1><p>让并行程序安全和高效是Rust的另一个主要goals</p>
<p>rust通过手段让很多错误变成 编译时错误而不是运行时错误</p>
<p>We’ve nicknamed this aspect of Rust fearless concurrency</p>
<ul>
<li>How to create threads to run multiple pieces of code at the same time 如何写并行</li>
<li>Message-passing concurrency, where channels send messages between threads 消息传递</li>
<li>Shared-state concurrency, where multiple threads have access to some piece of data 共享数据</li>
<li>The Sync and Send traits, which extend Rust’s concurrency guarantees to user-defined types as well as types provided by the standard library 两个 trait 保证 用户定义的types</li>
</ul>
<h2 id="Using-Threads-to-Run-Code-Simultaneously"><a href="#Using-Threads-to-Run-Code-Simultaneously" class="headerlink" title="Using Threads to Run Code Simultaneously"></a>Using Threads to Run Code Simultaneously</h2><p>有些语言是 调用OS的thread ，1 operating system thread : 1 language thread.</p>
<p>有的语言是 M:N 的线程模型</p>
<p>Rust needs to have nearly no runtime and cannot compromise on being able to call into C to maintain performance.</p>
<p>有的语言会用运行代价来换取更多feature，但Rust定位是<code>low-level</code>的 只提供1：1的线程实现</p>
<p>我们调用<code>thread::spawn</code>并且传递一个 闭包</p>
<blockquote>
<p><code>src/main.rs</code></p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::thread;</span><br><span class="line"><span class="keyword">use</span> std::time::Duration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    thread::<span class="title function_ invoke__">spawn</span>(|| &#123;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">1</span>..<span class="number">10</span> &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;hi number &#123;&#125; from the spawned thread!&quot;</span>, i);</span><br><span class="line">            thread::<span class="title function_ invoke__">sleep</span>(Duration::<span class="title function_ invoke__">from_millis</span>(<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">1</span>..<span class="number">5</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;hi number &#123;&#125; from the main thread!&quot;</span>, i);</span><br><span class="line">        thread::<span class="title function_ invoke__">sleep</span>(Duration::<span class="title function_ invoke__">from_millis</span>(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>thread::sleep</code>允许 线程 让出一小段时间不执行,其它线程可能紧接着这个时候开始执行，也可能不 </p>
<blockquote>
<p>Waiting for All Threads to Finish Using <code>join</code> Handles</p>
</blockquote>
<p>c++也是有thread::join，重名大法好，不用记多个</p>
<blockquote>
<p><code>src/main.rs</code></p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::thread;</span><br><span class="line"><span class="keyword">use</span> std::time::Duration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">handle</span> = thread::<span class="title function_ invoke__">spawn</span>(|| &#123;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">1</span>..<span class="number">10</span> &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;hi number &#123;&#125; from the spawned thread!&quot;</span>, i);</span><br><span class="line">            thread::<span class="title function_ invoke__">sleep</span>(Duration::<span class="title function_ invoke__">from_millis</span>(<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">1</span>..<span class="number">5</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;hi number &#123;&#125; from the main thread!&quot;</span>, i);</span><br><span class="line">        thread::<span class="title function_ invoke__">sleep</span>(Duration::<span class="title function_ invoke__">from_millis</span>(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handle.<span class="title function_ invoke__">join</span>().<span class="title function_ invoke__">unwrap</span>(); <span class="comment">// 会等待线程结束</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <code>move</code> closure 经常伴随 thread::spawn 因为它允许 在不同的线程之间使用数据</p>
<blockquote>
<p><code>src/main.rs</code></p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">v</span> = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">handle</span> = thread::<span class="title function_ invoke__">spawn</span>(<span class="keyword">move</span> || &#123; <span class="comment">// 被move到线程里了</span></span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;Here&#x27;s a vector: &#123;:?&#125;&quot;</span>, v);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 主线程 不再有v</span></span><br><span class="line">    handle.<span class="title function_ invoke__">join</span>().<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Using-Message-Passing-to-Transfer-Data-Between-Threads"><a href="#Using-Message-Passing-to-Transfer-Data-Between-Threads" class="headerlink" title="Using Message Passing to Transfer Data Between Threads"></a>Using Message Passing to Transfer Data Between Threads</h2><p>奶了一口 Golang</p>
<p>Here’s the idea in a slogan from <a href="http://golang.org/doc/effective_go.html">the Go language documentation</a>: “Do not communicate by sharing memory; instead, share memory by communicating.”</p>
<p><code>mpsc</code> stands for <code>multiple producer, single consumer</code></p>
<p><code>mpsc::channel</code>返回<code>tuple = (sending end, receiving end)</code></p>
<blockquote>
<p><code>src/main.rs</code></p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::thread;</span><br><span class="line"><span class="keyword">use</span> std::sync::mpsc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> (tx, rx) = mpsc::<span class="title function_ invoke__">channel</span>();</span><br><span class="line"></span><br><span class="line">    thread::<span class="title function_ invoke__">spawn</span>(<span class="keyword">move</span> || &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">val</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">        tx.<span class="title function_ invoke__">send</span>(val).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">received</span> = rx.<span class="title function_ invoke__">recv</span>().<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Got: &#123;&#125;&quot;</span>, received);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接受端 方法有<code>recv</code>和<code>try_recv</code></p>
<p><code>recv</code>会阻塞 返回<code>Result&lt;T,E&gt;</code> 当这个channel发送端关闭，recv会收到一个 error</p>
<p><code>recv_block</code>不会阻塞 会根据是否有 返回<code>Result&lt;T,E&gt;</code> </p>
<p>ownership 在channel间 交接:-) ,send 会 获取参数所有权，并移动这个值 归 接受者所有</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::thread;</span><br><span class="line"><span class="keyword">use</span> std::sync::mpsc;</span><br><span class="line"><span class="keyword">use</span> std::time::Duration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> (tx, rx) = mpsc::<span class="title function_ invoke__">channel</span>();</span><br><span class="line"></span><br><span class="line">    thread::<span class="title function_ invoke__">spawn</span>(<span class="keyword">move</span> || &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">vals</span> = <span class="built_in">vec!</span>[</span><br><span class="line">            <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hi&quot;</span>),</span><br><span class="line">            <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;from&quot;</span>),</span><br><span class="line">            <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;the&quot;</span>),</span><br><span class="line">            <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;thread&quot;</span>),</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> <span class="variable">val</span> <span class="keyword">in</span> vals &#123;</span><br><span class="line">            tx.<span class="title function_ invoke__">send</span>(val).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">            thread::<span class="title function_ invoke__">sleep</span>(Duration::<span class="title function_ invoke__">from_secs</span>(<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="variable">received</span> <span class="keyword">in</span> rx &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;Got: &#123;&#125;&quot;</span>, received);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>多个发送者</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">tx1</span> = mpsc::Sender::<span class="title function_ invoke__">clone</span>(&amp;tx); <span class="comment">// &lt;--------------</span></span><br><span class="line">thread::<span class="title function_ invoke__">spawn</span>(<span class="keyword">move</span> || &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">vals</span> = <span class="built_in">vec!</span>[</span><br><span class="line">        <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;tx1:hi&quot;</span>),</span><br><span class="line">        <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;tx1:from&quot;</span>),</span><br><span class="line">        <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;tx1:the&quot;</span>),</span><br><span class="line">        <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;tx1:thread&quot;</span>),</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="variable">val</span> <span class="keyword">in</span> vals &#123;</span><br><span class="line">        tx1.<span class="title function_ invoke__">send</span>(val).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">        thread::<span class="title function_ invoke__">sleep</span>(Duration::<span class="title function_ invoke__">from_secs</span>(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="Shared-State-Concurrency"><a href="#Shared-State-Concurrency" class="headerlink" title="Shared-State Concurrency"></a>Shared-State Concurrency</h2><p>Consider this part of the slogan from the Go language documentation again: “communicate by sharing memory.”</p>
<blockquote>
<p>Using Mutexes(mutual exclusion) to Allow Access to Data from One Thread at a Time</p>
</blockquote>
<p>锁嘛&#x3D;.&#x3D;</p>
<ul>
<li>You must attempt to acquire the lock before using the data.</li>
<li>When you’re done with the data that the mutex guards, you must unlock the data so other threads can acquire the lock.</li>
</ul>
<p>However, thanks to Rust’s type system and ownership rules, you can’t get locking and unlocking wrong.</p>
<blockquote>
<p>The API of <code>Mutex&lt;T&gt;</code></p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::sync::Mutex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">m</span> = Mutex::<span class="title function_ invoke__">new</span>(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">num</span> = m.<span class="title function_ invoke__">lock</span>().<span class="title function_ invoke__">unwrap</span>(); <span class="comment">// 申请锁 , 返回的是mutable reference to the data value</span></span><br><span class="line">        *num = <span class="number">6</span>;</span><br><span class="line">        <span class="comment">// 智能指针自动释放 lock也会自动释放</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;m = &#123;:?&#125;&quot;</span>, m); <span class="comment">// 释放以后可读</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>.lock()</code>返回一个 <code>MutexGuard</code>的智能指针，wrapped in a <code>LockResult</code></p>
<blockquote>
<p>在线程间 使用 mutex Multiple Ownership with Multiple Threads</p>
</blockquote>
<p><code>Rc&lt;T&gt;</code> is not safe to share across threads,改变reference 计数，它不是一个线程安全的</p>
<p>Atomic Reference Counting with <code>Arc&lt;T&gt;</code></p>
<p>因为 原子实现有性能代价，所以不是所有库和方法都是原子的</p>
<p><code>Arc&lt;T&gt;</code>和<code>Rc&lt;T&gt;</code>有相同的API</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::sync::&#123;Mutex, Arc&#125;;</span><br><span class="line"><span class="keyword">use</span> std::thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">  <span class="comment">// immutable 但我们 可以获得一个它内部的 mutable</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">counter</span> = Arc::<span class="title function_ invoke__">new</span>(Mutex::<span class="title function_ invoke__">new</span>(<span class="number">0</span>)); <span class="comment">// 相对于Rc 这是原子的,如果用Rc 编译器会提示你不安全</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">handles</span> = <span class="built_in">vec!</span>[];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="variable">_</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">10</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">counter</span> = Arc::<span class="title function_ invoke__">clone</span>(&amp;counter);</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">handle</span> = thread::<span class="title function_ invoke__">spawn</span>(<span class="keyword">move</span> || &#123; <span class="comment">// move 语义 只移动了 Arc 的</span></span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">num</span> = counter.<span class="title function_ invoke__">lock</span>().<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line"></span><br><span class="line">            *num += <span class="number">1</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        handles.<span class="title function_ invoke__">push</span>(handle);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="variable">handle</span> <span class="keyword">in</span> handles &#123;</span><br><span class="line">        handle.<span class="title function_ invoke__">join</span>().<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Result: &#123;&#125;&quot;</span>, *counter.<span class="title function_ invoke__">lock</span>().<span class="title function_ invoke__">unwrap</span>()); <span class="comment">// 主线程 还能访问counter 因为没有被 move</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>RefCell&lt;T&gt;</code>&#x2F;<code>Rc&lt;T&gt;</code> and <code>Mutex&lt;T&gt;</code>&#x2F;<code>Arc&lt;T&gt;</code>的相似之处</p>
<p><code>Mutex&lt;T&gt;</code> provides interior mutability, as the <code>Cell</code> family does</p>
<p>之前 我们用 Rc+RefCell来 完成 interior mutablility，现在可以用Mutex+Arc来实现多线程的</p>
<p>但比如死锁 并没有办法完美检测, 不过Rust 用了其它语言用的减轻 deadlock 的策略 来 进行有效的信息提醒</p>
<h2 id="Extensible-Concurrency-with-the-Sync-and-Send-Traits"><a href="#Extensible-Concurrency-with-the-Sync-and-Send-Traits" class="headerlink" title="Extensible Concurrency with the Sync and Send Traits"></a>Extensible Concurrency with the Sync and Send Traits</h2><p>语言中 内嵌了两个 并行概念: the <code>std::marker</code> traits <code>Sync</code> and <code>Send</code></p>
<p><code>Send</code>允许 thread之间 传递Ownership</p>
<p><code>Send</code> marker trait,基本上每个Rust都实现了Send，但有一些例外，包括<code>Rc&lt;T&gt;</code></p>
<p>会报错<code>the trait Send is not implemented for Rc&lt;Mutex&lt;i32&gt;&gt;</code></p>
<p>Any type composed entirely of <code>Send</code> types is automatically marked as <code>Send</code> as well. !!!!</p>
<p>这就有意思了，自动 mark为<code>Send</code></p>
<p>有<code>Sync</code> marker trait，意味着这个类型 被多线程引用是安全的</p>
<p>any type <code>T</code> is <code>Sync</code> if <code>&amp;T</code> (a reference to <code>T</code>) is <code>Send</code>,意味这它的引用被发送到另一个 线程是安全的</p>
<p>类似上面 也有基础类型是<code>Sync</code>，以及由<code>Sync</code>组成的依然是<code>Sync</code></p>
<p>the family of related <code>Cell&lt;T&gt;</code> types are not <code>Sync</code></p>
<h3 id="Implementing-Send-and-Sync-Manually-Is-Unsafe"><a href="#Implementing-Send-and-Sync-Manually-Is-Unsafe" class="headerlink" title="Implementing Send and Sync Manually Is Unsafe"></a>Implementing Send and Sync Manually Is Unsafe</h3><p><strong>不要</strong>自己实现，应该遵循 基础类型是，然后 符合类型如果所有子类型是，那么即是的 规则</p>
<h1 id="Object-Oriented-Programming-Features-of-Rust"><a href="#Object-Oriented-Programming-Features-of-Rust" class="headerlink" title="Object Oriented Programming Features of Rust"></a>Object Oriented Programming Features of Rust</h1><p>该来的 总是会来了 OOP还是来了</p>
<h2 id="Characteristics-of-Object-Oriented-Languages"><a href="#Characteristics-of-Object-Oriented-Languages" class="headerlink" title="Characteristics of Object-Oriented Languages"></a>Characteristics of Object-Oriented Languages</h2><p>OOP languages share certain common characteristics, namely objects, encapsulation, and inheritance.</p>
<blockquote>
<p>Encapsulation that Hides Implementation Details</p>
</blockquote>
<p>之前章节就讲过，rust通过pub来对是否可被外部访问进行控制,并且是对任意的子field可以进行控制</p>
<p>If encapsulation is a required aspect for a language to be considered object oriented, then Rust meets that requirement</p>
<blockquote>
<p>Inheritance as a Type System and as Code Sharing</p>
</blockquote>
<p>If a language must have inheritance to be an object-oriented language, then Rust is <strong>not</strong> one</p>
<p>没有办法定义一个 能够继承父struct 字段和方法实现的 struct</p>
<p>如果你希望实现继承，那么你可以根据你的需求来进行选择，要使用 inheritance 有两个主要的原因</p>
<ol>
<li>重用代码: 你可以用default trait method implementations instead,比如某trait有默认实现的方法</li>
<li>子类可以用父类trait 多态:</li>
</ol>
<blockquote>
<p>多态</p>
</blockquote>
<ul>
<li><p>To many people, polymorphism is synonymous with inheritance. But it’s actually a more general concept that refers to code that can work with data of multiple types. For inheritance, those types are generally subclasses.</p>
</li>
<li><p>Rust instead uses generics to abstract over different possible types and trait bounds to impose constraints on what those types must provide. This is sometimes called <code>bounded parametric polymorphism</code>.</p>
</li>
</ul>
<p>最近 inheritance 开始 在很多语言的设计方案中，不再受到欢迎，因为它有共享的多余真实需要的代码的风险，甚至让子类中一些方法是无效的</p>
<p>Rust采用了 trait objects instead of inheritance</p>
<h2 id="Using-Trait-Objects-That-Allow-for-Values-of-Different-Types"><a href="#Using-Trait-Objects-That-Allow-for-Values-of-Different-Types" class="headerlink" title="Using Trait Objects That Allow for Values of Different Types"></a>Using Trait Objects That Allow for Values of Different Types</h2><p>定义 通用行为的trait</p>
<p><code>src/lib.rs</code></p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">trait</span> <span class="title class_">Draw</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">draw</span>(&amp;<span class="keyword">self</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">Screen</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> components: <span class="type">Vec</span>&lt;<span class="type">Box</span>&lt;<span class="keyword">dyn</span> Draw&gt;&gt;, </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Screen</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">run</span>(&amp;<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">component</span> <span class="keyword">in</span> <span class="keyword">self</span>.components.<span class="title function_ invoke__">iter</span>() &#123;</span><br><span class="line">            component.<span class="title function_ invoke__">draw</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>和 用泛型 相比, 下面一次只能 替代一个具体类型，而trait对象 允许 运行时 多种类型</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">Screen</span>&lt;T: Draw&gt; &#123;</span><br><span class="line">    <span class="keyword">pub</span> components: <span class="type">Vec</span>&lt;T&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span>&lt;T&gt; Screen&lt;T&gt;</span><br><span class="line">    <span class="keyword">where</span> T: Draw &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">run</span>(&amp;<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">component</span> <span class="keyword">in</span> <span class="keyword">self</span>.components.<span class="title function_ invoke__">iter</span>() &#123;</span><br><span class="line">            component.<span class="title function_ invoke__">draw</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Button&#x2F;SelectBox的实现</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">Button</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> width: <span class="type">u32</span>,</span><br><span class="line">    <span class="keyword">pub</span> height: <span class="type">u32</span>,</span><br><span class="line">    <span class="keyword">pub</span> label: <span class="type">String</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Draw</span> <span class="keyword">for</span> <span class="title class_">Button</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">draw</span>(&amp;<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="comment">// code to actually draw a button</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> gui::Draw;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SelectBox</span> &#123;</span><br><span class="line">    width: <span class="type">u32</span>,</span><br><span class="line">    height: <span class="type">u32</span>,</span><br><span class="line">    options: <span class="type">Vec</span>&lt;<span class="type">String</span>&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Draw</span> <span class="keyword">for</span> <span class="title class_">SelectBox</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">draw</span>(&amp;<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="comment">// code to actually draw a select box</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ----</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> gui::&#123;Screen, Button&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">screen</span> = Screen &#123;</span><br><span class="line">        components: <span class="built_in">vec!</span>[</span><br><span class="line">            <span class="type">Box</span>::<span class="title function_ invoke__">new</span>(SelectBox &#123; <span class="comment">// 在这个位置检查 类型是否符合Trait</span></span><br><span class="line">                width: <span class="number">75</span>,</span><br><span class="line">                height: <span class="number">10</span>,</span><br><span class="line">                options: <span class="built_in">vec!</span>[</span><br><span class="line">                    <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Yes&quot;</span>),</span><br><span class="line">                    <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Maybe&quot;</span>),</span><br><span class="line">                    <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;No&quot;</span>)</span><br><span class="line">                ],</span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="type">Box</span>::<span class="title function_ invoke__">new</span>(Button &#123;</span><br><span class="line">                width: <span class="number">50</span>,</span><br><span class="line">                height: <span class="number">10</span>,</span><br><span class="line">                label: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;OK&quot;</span>),</span><br><span class="line">            &#125;),</span><br><span class="line">        ],</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    screen.<span class="title function_ invoke__">run</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最终 我们的两个文件</p>
<blockquote>
<p><code>src/lib.rs</code></p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">trait</span> <span class="title class_">Draw</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">draw</span>(&amp;<span class="keyword">self</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">Screen</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> components: <span class="type">Vec</span>&lt;<span class="type">Box</span>&lt;<span class="keyword">dyn</span> Draw&gt;&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Screen</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">run</span>(&amp;<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">component</span> <span class="keyword">in</span> <span class="keyword">self</span>.components.<span class="title function_ invoke__">iter</span>() &#123;</span><br><span class="line">            component.<span class="title function_ invoke__">draw</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">Button</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> width: <span class="type">u32</span>,</span><br><span class="line">    <span class="keyword">pub</span> height: <span class="type">u32</span>,</span><br><span class="line">    <span class="keyword">pub</span> label: <span class="type">String</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Draw</span> <span class="keyword">for</span> <span class="title class_">Button</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">draw</span>(&amp;<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="comment">// code to actually draw a button</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>src/main.rs</code></p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> gui::&#123;Draw, Screen, Button&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SelectBox</span> &#123;</span><br><span class="line">    width: <span class="type">u32</span>,</span><br><span class="line">    height: <span class="type">u32</span>,</span><br><span class="line">    options: <span class="type">Vec</span>&lt;<span class="type">String</span>&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Draw</span> <span class="keyword">for</span> <span class="title class_">SelectBox</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">draw</span>(&amp;<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="comment">// code to actually draw a select box</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">screen</span> = Screen &#123;</span><br><span class="line">        components: <span class="built_in">vec!</span>[</span><br><span class="line">            <span class="type">Box</span>::<span class="title function_ invoke__">new</span>(SelectBox &#123;</span><br><span class="line">                width: <span class="number">75</span>,</span><br><span class="line">                height: <span class="number">10</span>,</span><br><span class="line">                options: <span class="built_in">vec!</span>[</span><br><span class="line">                    <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Yes&quot;</span>),</span><br><span class="line">                    <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Maybe&quot;</span>),</span><br><span class="line">                    <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;No&quot;</span>)</span><br><span class="line">                ],</span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="type">Box</span>::<span class="title function_ invoke__">new</span>(Button &#123;</span><br><span class="line">                width: <span class="number">50</span>,</span><br><span class="line">                height: <span class="number">10</span>,</span><br><span class="line">                label: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;OK&quot;</span>),</span><br><span class="line">            &#125;),</span><br><span class="line">        ],</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    screen.<span class="title function_ invoke__">run</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>cargo run</code>运行不报错</p>
<p>下面 我们把<code>lib.rs</code>中的 实现换成 trait bound ,会报错</p>
<p><code>expected struct </code>SelectBox<code>, found struct </code>gui::Button&#96;&#96;</p>
<p>说明了 <code>trait bound</code> 只能一种类型,而 <code>trait objects</code>只会</p>
<p>trait动态分发,运行时确定要调用 什么方法,因为编译器并不知道 具体哪个 类型的实例会调用</p>
<p>at runtime, Rust uses the pointers inside the trait object to know which method to call</p>
<p>代价 是 运行时分析，以及 不能编译时优化,得到的是flexibility</p>
<p> A trait is <code>object safe</code> if all the methods defined in the trait have the following properties:</p>
<ul>
<li>The return type isn’t <code>Self</code>.</li>
<li>There are no generic type parameters</li>
</ul>
<p>但你不能像上面<code>dyn Draw</code>那样来<code>dyn Clone</code>, 因为标准库中的Clone 不是<code>object safe</code>的</p>
<p><code>the trait </code>std::clone::Clone<code>  cannot be made into an object</code></p>
<h2 id="Implementing-an-Object-Oriented-Design-Pattern"><a href="#Implementing-an-Object-Oriented-Design-Pattern" class="headerlink" title="Implementing an Object-Oriented Design Pattern"></a>Implementing an Object-Oriented Design Pattern</h2><p>??????….</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">trait</span> <span class="title class_">State</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">request_review</span>(<span class="keyword">self</span>: <span class="type">Box</span>&lt;<span class="keyword">Self</span>&gt;) <span class="punctuation">-&gt;</span> <span class="type">Box</span>&lt;<span class="keyword">dyn</span> State&gt;;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">approve</span>(<span class="keyword">self</span>: <span class="type">Box</span>&lt;<span class="keyword">Self</span>&gt;) <span class="punctuation">-&gt;</span> <span class="type">Box</span>&lt;<span class="keyword">dyn</span> State&gt;;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">content</span>&lt;<span class="symbol">&#x27;a</span>&gt;(&amp;<span class="keyword">self</span>, post: &amp;<span class="symbol">&#x27;a</span> Post) <span class="punctuation">-&gt;</span> &amp;<span class="symbol">&#x27;a</span> <span class="type">str</span> &#123;</span><br><span class="line">        <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 然后对Draft分别</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">XXX</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">State</span> <span class="keyword">for</span> <span class="title class_">XXX</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="comment">/*或者其它方法*/</span> <span class="title function_ invoke__">approve</span>(<span class="keyword">self</span>: <span class="type">Box</span>&lt;<span class="keyword">Self</span>&gt;) <span class="punctuation">-&gt;</span> <span class="type">Box</span>&lt;<span class="keyword">dyn</span> State&gt; &#123;</span><br><span class="line">        <span class="keyword">self</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>完整代码</p>
<blockquote>
<p><code>src/lib.rs</code></p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">Post</span> &#123;</span><br><span class="line">    content: <span class="type">String</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">DraftPost</span> &#123;</span><br><span class="line">    content: <span class="type">String</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Post</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">new</span>() <span class="punctuation">-&gt;</span> DraftPost &#123;</span><br><span class="line">        DraftPost &#123;</span><br><span class="line">            content: <span class="type">String</span>::<span class="title function_ invoke__">new</span>(),</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">content</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> &amp;<span class="type">str</span> &#123;</span><br><span class="line">        &amp;<span class="keyword">self</span>.content</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">DraftPost</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">add_text</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, text: &amp;<span class="type">str</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.content.<span class="title function_ invoke__">push_str</span>(text);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">request_review</span>(<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> PendingReviewPost &#123;</span><br><span class="line">        PendingReviewPost &#123;</span><br><span class="line">            content: <span class="keyword">self</span>.content,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">PendingReviewPost</span> &#123;</span><br><span class="line">    content: <span class="type">String</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">PendingReviewPost</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">approve</span>(<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> Post &#123;</span><br><span class="line">        Post &#123;</span><br><span class="line">            content: <span class="keyword">self</span>.content,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">trait</span> <span class="title class_">State</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">request_review</span>(<span class="keyword">self</span>: <span class="type">Box</span>&lt;<span class="keyword">Self</span>&gt;) <span class="punctuation">-&gt;</span> <span class="type">Box</span>&lt;<span class="keyword">dyn</span> State&gt;;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">approve</span>(<span class="keyword">self</span>: <span class="type">Box</span>&lt;<span class="keyword">Self</span>&gt;) <span class="punctuation">-&gt;</span> <span class="type">Box</span>&lt;<span class="keyword">dyn</span> State&gt;;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">content</span>&lt;<span class="symbol">&#x27;a</span>&gt;(&amp;<span class="keyword">self</span>, post: &amp;<span class="symbol">&#x27;a</span> Post) <span class="punctuation">-&gt;</span> &amp;<span class="symbol">&#x27;a</span> <span class="type">str</span> &#123;</span><br><span class="line">        <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Draft</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">State</span> <span class="keyword">for</span> <span class="title class_">Draft</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">request_review</span>(<span class="keyword">self</span>: <span class="type">Box</span>&lt;<span class="keyword">Self</span>&gt;) <span class="punctuation">-&gt;</span> <span class="type">Box</span>&lt;<span class="keyword">dyn</span> State&gt; &#123;</span><br><span class="line">        <span class="type">Box</span>::<span class="title function_ invoke__">new</span>(PendingReview &#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">approve</span>(<span class="keyword">self</span>: <span class="type">Box</span>&lt;<span class="keyword">Self</span>&gt;) <span class="punctuation">-&gt;</span> <span class="type">Box</span>&lt;<span class="keyword">dyn</span> State&gt; &#123;</span><br><span class="line">        <span class="keyword">self</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">PendingReview</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">State</span> <span class="keyword">for</span> <span class="title class_">PendingReview</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">request_review</span>(<span class="keyword">self</span>: <span class="type">Box</span>&lt;<span class="keyword">Self</span>&gt;) <span class="punctuation">-&gt;</span> <span class="type">Box</span>&lt;<span class="keyword">dyn</span> State&gt; &#123;</span><br><span class="line">        <span class="keyword">self</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">approve</span>(<span class="keyword">self</span>: <span class="type">Box</span>&lt;<span class="keyword">Self</span>&gt;) <span class="punctuation">-&gt;</span> <span class="type">Box</span>&lt;<span class="keyword">dyn</span> State&gt; &#123;</span><br><span class="line">        <span class="type">Box</span>::<span class="title function_ invoke__">new</span>(Published &#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Published</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">State</span> <span class="keyword">for</span> <span class="title class_">Published</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">request_review</span>(<span class="keyword">self</span>: <span class="type">Box</span>&lt;<span class="keyword">Self</span>&gt;) <span class="punctuation">-&gt;</span> <span class="type">Box</span>&lt;<span class="keyword">dyn</span> State&gt; &#123;</span><br><span class="line">        <span class="keyword">self</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">approve</span>(<span class="keyword">self</span>: <span class="type">Box</span>&lt;<span class="keyword">Self</span>&gt;) <span class="punctuation">-&gt;</span> <span class="type">Box</span>&lt;<span class="keyword">dyn</span> State&gt; &#123;</span><br><span class="line">        <span class="keyword">self</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">content</span>&lt;<span class="symbol">&#x27;a</span>&gt;(&amp;<span class="keyword">self</span>, post: &amp;<span class="symbol">&#x27;a</span> Post) <span class="punctuation">-&gt;</span> &amp;<span class="symbol">&#x27;a</span> <span class="type">str</span> &#123;</span><br><span class="line">        &amp;post.content</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>src/main.rs</code></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use blog::Post;</span><br><span class="line"></span><br><span class="line">fn main() &#123;</span><br><span class="line">    let mut post = Post::new();</span><br><span class="line"></span><br><span class="line">    post.add_text(&quot;I ate a salad for lunch today&quot;);</span><br><span class="line"></span><br><span class="line">    let post = post.request_review();</span><br><span class="line"></span><br><span class="line">    let post = post.approve();</span><br><span class="line"></span><br><span class="line">    assert_eq!(&quot;I ate a salad for lunch today&quot;, post.content());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Patterns-and-Matching"><a href="#Patterns-and-Matching" class="headerlink" title="Patterns and Matching"></a>Patterns and Matching</h1><p>A pattern consists of some combination of the following:</p>
<ul>
<li>Literals</li>
<li>Destructured arrays, enums, structs, or tuples</li>
<li>Variables</li>
<li>Wildcards</li>
<li>Placeholders</li>
</ul>
<h2 id="All-the-Places-Patterns-Can-Be-Used"><a href="#All-the-Places-Patterns-Can-Be-Used" class="headerlink" title="All the Places Patterns Can Be Used"></a>All the Places Patterns Can Be Used</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">match</span> VALUE &#123;</span><br><span class="line">    PATTERN =&gt; EXPRESSION,</span><br><span class="line">    PATTERN =&gt; EXPRESSION,</span><br><span class="line">    PATTERN =&gt; EXPRESSION,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>特殊的pattern <code>_</code>可以匹配任何的，但它不会binds to a variable</p>
<p><code>if let</code>一般只关心一个具体情况的,不能<code>&amp;&amp;</code>条件组合,需要条件组合，则把 组合的条件放到括号内</p>
<p><code>while let</code>可以用来循环</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">stack</span> = <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line"></span><br><span class="line">stack.<span class="title function_ invoke__">push</span>(<span class="number">1</span>);</span><br><span class="line">stack.<span class="title function_ invoke__">push</span>(<span class="number">2</span>);</span><br><span class="line">stack.<span class="title function_ invoke__">push</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">let</span> <span class="variable">Some</span>(top) = stack.<span class="title function_ invoke__">pop</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, top);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&#x2F;&#x2F; …</p>
<h2 id="Refutability-Whether-a-Pattern-Might-Fail-to-Match"><a href="#Refutability-Whether-a-Pattern-Might-Fail-to-Match" class="headerlink" title="Refutability: Whether a Pattern Might Fail to Match"></a>Refutability: Whether a Pattern Might Fail to Match</h2><p>分化为 refutable(只能接受一部分可能的值) 和 irrefutable(可以接受任何可能的传递值).</p>
<p>如<code>let x = 5;</code> irrefutable</p>
<p>如<code>Some(x) = a_value</code> 可能因为 传入是None而fail</p>
<p>在需要irrefutable的地方 用</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">some_option_value</span>: <span class="type">Option</span>&lt;<span class="type">i32</span>&gt; = <span class="literal">None</span>;</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(x) = some_option_value &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果本来就是irrefutable,Rust会error</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">error[E0162]: irrefutable <span class="keyword">if</span>-<span class="keyword">let</span> <span class="variable">pattern</span></span><br><span class="line"> -<span class="punctuation">-&gt;</span> &lt;anon&gt;:<span class="number">2</span>:<span class="number">8</span></span><br><span class="line">  |</span><br><span class="line"><span class="number">2</span> | <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span> &#123;</span><br><span class="line">  |        ^ irrefutable pattern</span><br></pre></td></tr></table></figure>

<h2 id="Pattern-Syntax"><a href="#Pattern-Syntax" class="headerlink" title="Pattern Syntax"></a>Pattern Syntax</h2><p>所有 syntax和 使用场景建议</p>
<p>字面量:</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">match</span> x &#123;</span><br><span class="line">    <span class="number">1</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;one&quot;</span>),</span><br><span class="line">    <span class="number">2</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;two&quot;</span>),</span><br><span class="line">    <span class="number">3</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;three&quot;</span>),</span><br><span class="line">    _ =&gt; <span class="built_in">println!</span>(<span class="string">&quot;anything&quot;</span>),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>命名变量</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="title function_ invoke__">Some</span>(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">y</span> = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">match</span> x &#123;</span><br><span class="line">        <span class="title function_ invoke__">Some</span>(<span class="number">50</span>) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Got 50&quot;</span>),</span><br><span class="line">        <span class="comment">// 这个y不是上面的y=10,而是引入的新变量y</span></span><br><span class="line">        <span class="title function_ invoke__">Some</span>(y) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Matched, y = &#123;:?&#125;&quot;</span>, y),</span><br><span class="line">        <span class="comment">// 如果None则上面的不会匹配</span></span><br><span class="line">        _ =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Default case, x = &#123;:?&#125;&quot;</span>, x),</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;at the end: x = &#123;:?&#125;, y = &#123;:?&#125;&quot;</span>, x, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>匹配多个 pattern &#x2F; 匹配值范围</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 匹配多个</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">match</span> x &#123;</span><br><span class="line">    <span class="number">1</span> | <span class="number">2</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;one or two&quot;</span>),</span><br><span class="line">    <span class="number">3</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;three&quot;</span>),</span><br><span class="line">    _ =&gt; <span class="built_in">println!</span>(<span class="string">&quot;anything&quot;</span>),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配范围</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">match</span> x &#123;</span><br><span class="line">    <span class="comment">// 1 | 2 | 3 | 4 | 5</span></span><br><span class="line">    <span class="number">1</span> ... <span class="number">5</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;one through five&quot;</span>),</span><br><span class="line">    _ =&gt; <span class="built_in">println!</span>(<span class="string">&quot;something else&quot;</span>),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">match</span> x &#123;</span><br><span class="line">    <span class="string">&#x27;a&#x27;</span>...<span class="string">&#x27;j&#x27;</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;early ASCII letter&quot;</span>),</span><br><span class="line">    <span class="string">&#x27;k&#x27;</span>...<span class="string">&#x27;z&#x27;</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;late ASCII letter&quot;</span>),</span><br><span class="line">    _ =&gt; <span class="built_in">println!</span>(<span class="string">&quot;something else&quot;</span>),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>结构体解构</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    x: <span class="type">i32</span>,</span><br><span class="line">    y: <span class="type">i32</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">p</span> = Point &#123; x: <span class="number">0</span>, y: <span class="number">7</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// a , b 被分配</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">Point</span> &#123; x: a, y: b &#125; = p;</span><br><span class="line">    <span class="built_in">assert_eq!</span>(<span class="number">0</span>, a);</span><br><span class="line">    <span class="built_in">assert_eq!</span>(<span class="number">7</span>, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    x: <span class="type">i32</span>,</span><br><span class="line">    y: <span class="type">i32</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">p</span> = Point &#123; x: <span class="number">0</span>, y: <span class="number">7</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">match</span> p &#123;</span><br><span class="line">        <span class="comment">// x 是 匹配出的临时， y:0是限制</span></span><br><span class="line">        Point &#123; x, y: <span class="number">0</span> &#125; =&gt; <span class="built_in">println!</span>(<span class="string">&quot;On the x axis at &#123;&#125;&quot;</span>, x),</span><br><span class="line">        <span class="comment">// x:0 是限制 y是匹配出的临时变量</span></span><br><span class="line">        Point &#123; x: <span class="number">0</span>, y &#125; =&gt; <span class="built_in">println!</span>(<span class="string">&quot;On the y axis at &#123;&#125;&quot;</span>, y),</span><br><span class="line">        <span class="comment">// 都是临时变量</span></span><br><span class="line">        Point &#123; x, y &#125; =&gt; <span class="built_in">println!</span>(<span class="string">&quot;On neither axis: (&#123;&#125;, &#123;&#125;)&quot;</span>, x, y),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>枚举类型 解构</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Message</span> &#123;</span><br><span class="line">    Quit,</span><br><span class="line">    Move &#123; x: <span class="type">i32</span>, y: <span class="type">i32</span> &#125;,</span><br><span class="line">    <span class="title function_ invoke__">Write</span>(<span class="type">String</span>),</span><br><span class="line">    <span class="title function_ invoke__">ChangeColor</span>(<span class="type">i32</span>, <span class="type">i32</span>, <span class="type">i32</span>),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">msg</span> = Message::<span class="title function_ invoke__">ChangeColor</span>(<span class="number">0</span>, <span class="number">160</span>, <span class="number">255</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">match</span> msg &#123;</span><br><span class="line">        Message::Quit =&gt; &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;The Quit variant has no data to destructure.&quot;</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 不同类型匹配 并 解构</span></span><br><span class="line">        Message::Move &#123; x, y &#125; =&gt; &#123;</span><br><span class="line">            <span class="built_in">println!</span>(</span><br><span class="line">                <span class="string">&quot;Move in the x direction &#123;&#125; and in the y direction &#123;&#125;&quot;</span>,</span><br><span class="line">                x,</span><br><span class="line">                y</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">        Message::<span class="title function_ invoke__">Write</span>(text) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Text message: &#123;&#125;&quot;</span>, text),</span><br><span class="line">        Message::<span class="title function_ invoke__">ChangeColor</span>(r, g, b) =&gt; &#123;</span><br><span class="line">            <span class="built_in">println!</span>(</span><br><span class="line">                <span class="string">&quot;Change the color to red &#123;&#125;, green &#123;&#125;, and blue &#123;&#125;&quot;</span>,</span><br><span class="line">                r,</span><br><span class="line">                g,</span><br><span class="line">                b</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>nested Structs and Enums 解构</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">   <span class="title function_ invoke__">Rgb</span>(<span class="type">i32</span>, <span class="type">i32</span>, <span class="type">i32</span>),</span><br><span class="line">   <span class="title function_ invoke__">Hsv</span>(<span class="type">i32</span>, <span class="type">i32</span>, <span class="type">i32</span>),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Message</span> &#123;</span><br><span class="line">    Quit,</span><br><span class="line">    Move &#123; x: <span class="type">i32</span>, y: <span class="type">i32</span> &#125;,</span><br><span class="line">    <span class="title function_ invoke__">Write</span>(<span class="type">String</span>),</span><br><span class="line">    <span class="title function_ invoke__">ChangeColor</span>(Color),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">msg</span> = Message::<span class="title function_ invoke__">ChangeColor</span>(Color::<span class="title function_ invoke__">Hsv</span>(<span class="number">0</span>, <span class="number">160</span>, <span class="number">255</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">match</span> msg &#123;</span><br><span class="line">        <span class="comment">// 内嵌结构体和枚举类型 解构</span></span><br><span class="line">        Message::<span class="title function_ invoke__">ChangeColor</span>(Color::<span class="title function_ invoke__">Rgb</span>(r, g, b)) =&gt; &#123;</span><br><span class="line">            <span class="built_in">println!</span>(</span><br><span class="line">                <span class="string">&quot;Change the color to red &#123;&#125;, green &#123;&#125;, and blue &#123;&#125;&quot;</span>,</span><br><span class="line">                r,</span><br><span class="line">                g,</span><br><span class="line">                b</span><br><span class="line">            )</span><br><span class="line">        &#125;,</span><br><span class="line">        Message::<span class="title function_ invoke__">ChangeColor</span>(Color::<span class="title function_ invoke__">Hsv</span>(h, s, v)) =&gt; &#123;</span><br><span class="line">            <span class="built_in">println!</span>(</span><br><span class="line">                <span class="string">&quot;Change the color to hue &#123;&#125;, saturation &#123;&#125;, and value &#123;&#125;&quot;</span>,</span><br><span class="line">                h,</span><br><span class="line">                s,</span><br><span class="line">                v</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">        _ =&gt; ()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>合一 :<code>let ((feet, inches), Point &#123;x, y&#125;) = ((3, 10), Point &#123; x: 3, y: -10 &#125;);</code></p>
<p><code>_</code>忽略，例如 <code>fn foo( _ : i32,y : i32)</code></p>
<p>匹配时 忽略部分值</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">setting_value</span> = <span class="title function_ invoke__">Some</span>(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">new_setting_value</span> = <span class="title function_ invoke__">Some</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">match</span> (setting_value, new_setting_value) &#123;</span><br><span class="line">    (<span class="title function_ invoke__">Some</span>(_), <span class="title function_ invoke__">Some</span>(_)) =&gt; &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;Can&#x27;t overwrite an existing customized value&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    _ =&gt; &#123;</span><br><span class="line">        setting_value = new_setting_value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;setting is &#123;:?&#125;&quot;</span>, setting_value);</span><br></pre></td></tr></table></figure>

<p><code>_</code>前缀 常见for里</p>
<p><strong>注意</strong>,<code>_</code>整个都是忽略掉的，所以不会有move，而<code>_</code>作为前缀，只是忽略掉使用，依然有move。如下列代码</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 运行报错</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">s</span> = <span class="title function_ invoke__">Some</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Hello!&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(_s) = s &#123; <span class="comment">// 被move</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;found a string&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>, s);</span><br><span class="line"><span class="comment">// 正常运行</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">s</span> = <span class="title function_ invoke__">Some</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Hello!&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(_) = s &#123; <span class="comment">// 没有move</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;found a string&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>, s);</span><br></pre></td></tr></table></figure>

<p>忽略多个<code>..</code></p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    x: <span class="type">i32</span>,</span><br><span class="line">    y: <span class="type">i32</span>,</span><br><span class="line">    z: <span class="type">i32</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">origin</span> = Point &#123; x: <span class="number">0</span>, y: <span class="number">0</span>, z: <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">match</span> origin &#123;</span><br><span class="line">    Point &#123; x, .. &#125; =&gt; <span class="built_in">println!</span>(<span class="string">&quot;x is &#123;&#125;&quot;</span>, x),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意的是<code>..</code>的使用需要无 <code>歧义</code></p>
<p><code>match guard</code>:</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">num</span> = <span class="title function_ invoke__">Some</span>(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">match</span> num &#123;</span><br><span class="line">    <span class="comment">// if x &lt; 5 是 match guard ...emmm  相当于 &amp;&amp; 条件?</span></span><br><span class="line">    <span class="title function_ invoke__">Some</span>(x) <span class="keyword">if</span> x &lt; <span class="number">5</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;less than five: &#123;&#125;&quot;</span>, x),</span><br><span class="line">    <span class="title function_ invoke__">Some</span>(x) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, x),</span><br><span class="line">    <span class="literal">None</span> =&gt; (),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Bindings: <code>@</code></p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Message</span> &#123;</span><br><span class="line">    Hello &#123; id: <span class="type">i32</span> &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">msg</span> = Message::Hello &#123; id: <span class="number">5</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">match</span> msg &#123;</span><br><span class="line">    <span class="comment">// 解构 匹配变量 同时 测试 范围 </span></span><br><span class="line">    Message::Hello &#123; id: id_variable @ <span class="number">3</span>...<span class="number">7</span> &#125; =&gt; &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;Found an id in range: &#123;&#125;&quot;</span>, id_variable)</span><br><span class="line">    &#125;,</span><br><span class="line">    Message::Hello &#123; id: <span class="number">10</span>...<span class="number">12</span> &#125; =&gt; &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;Found an id in another range&quot;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    Message::Hello &#123; id &#125; =&gt; &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;Found some other id: &#123;&#125;&quot;</span>, id)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Advanced-Features"><a href="#Advanced-Features" class="headerlink" title="Advanced Features"></a>Advanced Features</h1><p>下一章是个具体项目，这章讲也许有一天 你会遇到的rust内容</p>
<h2 id="Unsafe-Rust"><a href="#Unsafe-Rust" class="headerlink" title="Unsafe Rust"></a>Unsafe Rust</h2><p>以前为了 效率 有在golang里用 unsafe来写，但是 你这样做，需要的前提是你确定知道你在干什么</p>
<p>也就是 这部分的使用，rust不会再 保护，一旦你出错了，那rust也无法提醒你</p>
<ul>
<li>Dereference a raw pointer</li>
<li>Call an unsafe function or method</li>
<li>Access or modify a mutable static variable</li>
<li>Implement an unsafe trait</li>
</ul>
<p>注意的是<code>borrow checker 和其它的Rust&#39;s safety checks</code> 依然工作,你能用的unsafe只有上面4种</p>
<p>Keep <code>unsafe</code> blocks small</p>
<p>以及 建议上是把 unsafe的代码，封装成safe的安全抽象，例如一些标准库的内部实现是有unsafe</p>
<h3 id="Dereferencing-a-Raw-Pointer"><a href="#Dereferencing-a-Raw-Pointer" class="headerlink" title="Dereferencing a Raw Pointer"></a>Dereferencing a Raw Pointer</h3><p><code>raw pointers</code> in Rust</p>
<p><code>*const T</code> 和<code>*mut T</code> : 不可变<code>raw pointers</code> 和 可变<code>raw pointers</code></p>
<p>在<code>raw pointers</code>上下文中 <code>immutable</code> 意味着 不能直接被 assigned to after being dereferenced.</p>
<p>与 引用 和 smart pointers的不同</p>
<ul>
<li>可以突破之前4章的 同时多个immutable和mutable指针的限制 Are allowed to ignore the borrowing rules by having both immutable and mutable pointers or multiple mutable pointers to the same location</li>
<li>不保证指向有效内存, Aren’t guaranteed to point to valid memory</li>
<li>可以null, Are allowed to be null</li>
<li>没有任何 自动清理 Don’t implement any automatic cleanup</li>
</ul>
<p>指针类型强转</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">num</span> = <span class="number">5</span>;</span><br><span class="line"><span class="comment">// 可以写在 safe中</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">r1</span> = &amp;num <span class="keyword">as</span> *<span class="keyword">const</span> <span class="type">i32</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">r2</span> = &amp;<span class="keyword">mut</span> num <span class="keyword">as</span> *<span class="keyword">mut</span> <span class="type">i32</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsafe</span> &#123;</span><br><span class="line">    <span class="comment">// 需要unsafe包裹</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;r1 is: &#123;&#125;&quot;</span>, *r1);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;r2 is: &#123;&#125;&quot;</span>, *r2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>直接上地址</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">address</span> = <span class="number">0x012345usize</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">r</span> = address <span class="keyword">as</span> *<span class="keyword">const</span> <span class="type">i32</span>;</span><br></pre></td></tr></table></figure>

<h3 id="Calling-an-Unsafe-Function-or-Method"><a href="#Calling-an-Unsafe-Function-or-Method" class="headerlink" title="Calling an Unsafe Function or Method"></a>Calling an Unsafe Function or Method</h3><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">unsafe</span> <span class="keyword">fn</span> <span class="title function_">dangerous</span>() &#123;</span><br><span class="line">  <span class="comment">// 这里写不安全函数 不需要增加 unsafe块</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsafe</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">dangerous</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>把不安全的 操作，封装成 安全的方法</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">v</span> = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">r</span> = &amp;<span class="keyword">mut</span> v[..];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> (a, b) = r.<span class="title function_ invoke__">split_at_mut</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">assert_eq!</span>(a, &amp;<span class="keyword">mut</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="built_in">assert_eq!</span>(b, &amp;<span class="keyword">mut</span> [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]);</span><br></pre></td></tr></table></figure>

<p>如何实现<code>split_at_mut</code></p>
<p>Rust’s borrow checker can’t understand that we’re borrowing different parts of the slice; it only knows that we’re borrowing from the same slice twice.</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::slice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">split_at_mut</span>(slice: &amp;<span class="keyword">mut</span> [<span class="type">i32</span>], mid: <span class="type">usize</span>) <span class="punctuation">-&gt;</span> (&amp;<span class="keyword">mut</span> [<span class="type">i32</span>], &amp;<span class="keyword">mut</span> [<span class="type">i32</span>]) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">len</span> = slice.<span class="title function_ invoke__">len</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">ptr</span> = slice.<span class="title function_ invoke__">as_mut_ptr</span>(); <span class="comment">// 返回一个 *mut i32 类型</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">assert!</span>(mid &lt;= len);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsafe</span> &#123;</span><br><span class="line">        (slice::<span class="title function_ invoke__">from_raw_parts_mut</span>(ptr, mid), <span class="comment">// 这也是不安全的</span></span><br><span class="line">         slice::<span class="title function_ invoke__">from_raw_parts_mut</span>(ptr.<span class="title function_ invoke__">offset</span>(mid <span class="keyword">as</span> <span class="type">isize</span>), len - mid))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Using <code>extern</code> Functions to Call External Code</p>
</blockquote>
<p>调用C代码</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123; <span class="comment">// 遵循 &quot;C&quot;的 application binary interface，ABI</span></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">abs</span>(input: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">unsafe</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;Absolute value of -3 according to C: &#123;&#125;&quot;</span>, <span class="title function_ invoke__">abs</span>(-<span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建给其它语言用的方法</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过 no_mangle 告诉编译器不要mangle 以方便其它语言 安相同方法名调用</span></span><br><span class="line"><span class="meta">#[no_mangle]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="keyword">fn</span> <span class="title function_">call_from_c</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Just called a Rust function from C!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// This usage of extern does not require unsafe.</span></span><br></pre></td></tr></table></figure>

<h3 id="Accessing-or-Modifying-a-Mutable-Static-Variable"><a href="#Accessing-or-Modifying-a-Mutable-Static-Variable" class="headerlink" title="Accessing or Modifying a Mutable Static Variable"></a>Accessing or Modifying a Mutable Static Variable</h3><p>如果两个 线程 同时访问一个mutable 全局变量，可能引发data race</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局变量</span></span><br><span class="line"><span class="keyword">static</span> HELLO_WORLD: &amp;<span class="type">str</span> = <span class="string">&quot;Hello, world!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;name is: &#123;&#125;&quot;</span>, HELLO_WORLD);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>区别是，静态variables 运行时 有固定的内存地址，可以unsafe的修改</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">mut</span> COUNTER: <span class="type">u32</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">add_to_count</span>(inc: <span class="type">u32</span>) &#123;</span><br><span class="line">    <span class="keyword">unsafe</span> &#123;</span><br><span class="line">        COUNTER += inc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="title function_ invoke__">add_to_count</span>(<span class="number">3</span>); <span class="comment">// 单线程，多线程调用可能引发data races</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsafe</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;COUNTER: &#123;&#125;&quot;</span>, COUNTER);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Implementing-an-Unsafe-Trait"><a href="#Implementing-an-Unsafe-Trait" class="headerlink" title="Implementing an Unsafe Trait"></a>Implementing an Unsafe Trait</h3><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">unsafe</span> <span class="keyword">trait</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">    <span class="comment">// methods go here</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsafe</span> <span class="keyword">impl</span> <span class="title class_">Foo</span> <span class="keyword">for</span> <span class="title class_">i32</span> &#123;</span><br><span class="line">    <span class="comment">// method implementations go here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h3><p>当 你有需要时，且你能保证unsafe的代码是safe的时</p>
<h2 id="Advanced-Traits"><a href="#Advanced-Traits" class="headerlink" title="Advanced Traits"></a>Advanced Traits</h2><h3 id="Specifying-Placeholder-Types-in-Trait-Definitions-with-Associated-Types"><a href="#Specifying-Placeholder-Types-in-Trait-Definitions-with-Associated-Types" class="headerlink" title="Specifying Placeholder Types in Trait Definitions with Associated Types"></a>Specifying Placeholder Types in Trait Definitions with Associated Types</h3><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">trait</span> <span class="title class_">Iterator</span> &#123;</span><br><span class="line">    <span class="keyword">type</span> <span class="title class_">Item</span>; <span class="comment">// 占位</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">next</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;<span class="keyword">Self</span>::Item&gt;; <span class="comment">// 知道返回的是一个Item</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为什么不写成</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">trait</span> <span class="title class_">Iterator</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">next</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;T&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>With associated types, we don’t need to annotate types because we can’t implement a trait on a type multiple times.</p>
<h3 id="Default-Generic-Type-Parameters-and-Operator-Overloading"><a href="#Default-Generic-Type-Parameters-and-Operator-Overloading" class="headerlink" title="Default Generic Type Parameters and Operator Overloading"></a>Default Generic Type Parameters and Operator Overloading</h3><p>Point 重载 <code>Add</code></p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::ops::Add;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[derive(Debug, PartialEq)]</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    x: <span class="type">i32</span>,</span><br><span class="line">    y: <span class="type">i32</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Add</span> <span class="keyword">for</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    <span class="keyword">type</span> <span class="title class_">Output</span> = Point; <span class="comment">// 指定类型</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">add</span>(<span class="keyword">self</span>, other: Point) <span class="punctuation">-&gt;</span> Point &#123;</span><br><span class="line">        Point &#123;</span><br><span class="line">            x: <span class="keyword">self</span>.x + other.x,</span><br><span class="line">            y: <span class="keyword">self</span>.y + other.y,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="built_in">assert_eq!</span>(Point &#123; x: <span class="number">1</span>, y: <span class="number">0</span> &#125; + Point &#123; x: <span class="number">2</span>, y: <span class="number">3</span> &#125;,</span><br><span class="line">               Point &#123; x: <span class="number">3</span>, y: <span class="number">3</span> &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>默认参数</p>
<ul>
<li>扩展类型而不破坏现有代码。</li>
<li>在大部分用户都不需要的特定情况进行自定义。</li>
</ul>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">trait</span> <span class="title class_">Add</span>&lt;RHS=<span class="keyword">Self</span>&gt; &#123; <span class="comment">// 这里RHS=self 是 default type parameters ，默认的参数，不指定则是它本身</span></span><br><span class="line">    <span class="keyword">type</span> <span class="title class_">Output</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">add</span>(<span class="keyword">self</span>, rhs: RHS) <span class="punctuation">-&gt;</span> <span class="keyword">Self</span>::Output; <span class="comment">// rhs 是 right hand side的缩写，</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>指定 RHS</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use std::ops::Add;</span><br><span class="line"></span><br><span class="line">struct Millimeters(u32);</span><br><span class="line">struct Meters(u32);</span><br><span class="line"></span><br><span class="line">impl Add&lt;Meters&gt; for Millimeters &#123; // 指定 和 本身Millimeters不同的Meters</span><br><span class="line">    type Output = Millimeters;</span><br><span class="line"></span><br><span class="line">    fn add(self, other: Meters) -&gt; Millimeters &#123;</span><br><span class="line">        Millimeters(self.0 + (other.0 * 1000))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Fully-Qualified-Syntax-for-Disambiguation-Calling-Methods-with-the-Same-Name"><a href="#Fully-Qualified-Syntax-for-Disambiguation-Calling-Methods-with-the-Same-Name" class="headerlink" title="Fully Qualified Syntax for Disambiguation: Calling Methods with the Same Name"></a>Fully Qualified Syntax for Disambiguation: Calling Methods with the Same Name</h3><p>如何指定 同名字方法中的一个具体方法</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">trait</span> <span class="title class_">Pilot</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">fly</span>(&amp;<span class="keyword">self</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">trait</span> <span class="title class_">Wizard</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">fly</span>(&amp;<span class="keyword">self</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Human</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Pilot</span> <span class="keyword">for</span> <span class="title class_">Human</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">fly</span>(&amp;<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;This is your captain speaking.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Wizard</span> <span class="keyword">for</span> <span class="title class_">Human</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">fly</span>(&amp;<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;Up!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Human</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">fly</span>(&amp;<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;*waving arms furiously*&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">person</span> = Human;</span><br><span class="line">    person.<span class="title function_ invoke__">fly</span>(); <span class="comment">// 如何指定 默认会调用输出  `*waving arms furiously*`</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 按trait方法</span></span><br><span class="line">    Pilot::<span class="title function_ invoke__">fly</span>(&amp;person);</span><br><span class="line">    Wizard::<span class="title function_ invoke__">fly</span>(&amp;person);</span><br><span class="line">    person.<span class="title function_ invoke__">fly</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>fully qualified syntax</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">trait</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">baby_name</span>() <span class="punctuation">-&gt;</span> <span class="type">String</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Dog</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">baby_name</span>() <span class="punctuation">-&gt;</span> <span class="type">String</span> &#123;</span><br><span class="line">        <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Spot&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Animal</span> <span class="keyword">for</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">baby_name</span>() <span class="punctuation">-&gt;</span> <span class="type">String</span> &#123;</span><br><span class="line">        <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;puppy&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="comment">// 我们希望 puppy</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;A baby dog is called a &#123;&#125;&quot;</span>, Dog::<span class="title function_ invoke__">baby_name</span>()); <span class="comment">// Spot</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;A baby dog is called a &#123;&#125;&quot;</span>, Animal::<span class="title function_ invoke__">baby_name</span>()); <span class="comment">// 没有self 无法推断是哪一个 报错</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;A baby dog is called a &#123;&#125;&quot;</span>, &lt;Dog <span class="keyword">as</span> Animal&gt;::<span class="title function_ invoke__">baby_name</span>()); <span class="comment">// puppy</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Implementing the <code>OutlinePrint</code> trait that requires the functionality from <code>Display</code></p>
<blockquote>
<p><code>src/main.rs</code></p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fmt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">trait</span> <span class="title class_">OutlinePrint</span>: fmt::Display &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">outline_print</span>(&amp;<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">output</span> = <span class="keyword">self</span>.<span class="title function_ invoke__">to_string</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">len</span> = output.<span class="title function_ invoke__">len</span>();</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, <span class="string">&quot;*&quot;</span>.<span class="title function_ invoke__">repeat</span>(len + <span class="number">4</span>));</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;*&#123;&#125;*&quot;</span>, <span class="string">&quot; &quot;</span>.<span class="title function_ invoke__">repeat</span>(len + <span class="number">2</span>));</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;* &#123;&#125; *&quot;</span>, output);</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;*&#123;&#125;*&quot;</span>, <span class="string">&quot; &quot;</span>.<span class="title function_ invoke__">repeat</span>(len + <span class="number">2</span>));</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, <span class="string">&quot;*&quot;</span>.<span class="title function_ invoke__">repeat</span>(len + <span class="number">4</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    x: <span class="type">i32</span>,</span><br><span class="line">    y: <span class="type">i32</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">OutlinePrint</span> <span class="keyword">for</span> <span class="title class_">Point</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 会报错 没有实现 std::fmt::Display</span></span><br></pre></td></tr></table></figure>

<p>修复</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fmt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">fmt</span>::Display <span class="keyword">for</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">fmt</span>(&amp;<span class="keyword">self</span>, f: &amp;<span class="keyword">mut</span> fmt::Formatter) <span class="punctuation">-&gt;</span> fmt::<span class="type">Result</span> &#123;</span><br><span class="line">        <span class="built_in">write!</span>(f, <span class="string">&quot;(&#123;&#125;, &#123;&#125;)&quot;</span>, <span class="keyword">self</span>.x, <span class="keyword">self</span>.y)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Using-the-Newtype-Pattern-to-Implement-External-Traits-on-External-Types"><a href="#Using-the-Newtype-Pattern-to-Implement-External-Traits-on-External-Types" class="headerlink" title="Using the Newtype Pattern to Implement External Traits on External Types"></a>Using the Newtype Pattern to Implement External Traits on External Types</h3><p>用<code>newtype pattern</code>来摆脱<code>orphan rule that states we’re allowed to implement a trait on a type as long as either the trait or the type are local to our crate</code>的限制</p>
<p>newtype源于 Haskell</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fmt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Wrapper</span>(<span class="type">Vec</span>&lt;<span class="type">String</span>&gt;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">fmt</span>::Display <span class="keyword">for</span> <span class="title class_">Wrapper</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">fmt</span>(&amp;<span class="keyword">self</span>, f: &amp;<span class="keyword">mut</span> fmt::Formatter) <span class="punctuation">-&gt;</span> fmt::<span class="type">Result</span> &#123;</span><br><span class="line">        <span class="built_in">write!</span>(f, <span class="string">&quot;[&#123;&#125;]&quot;</span>, <span class="keyword">self</span>.<span class="number">0</span>.<span class="title function_ invoke__">join</span>(<span class="string">&quot;, &quot;</span>)) <span class="comment">// 通过 self.0访问 内部的 Vec&lt;T&gt;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">w</span> = <span class="title function_ invoke__">Wrapper</span>(<span class="built_in">vec!</span>[<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>), <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;world&quot;</span>)]);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;w = &#123;&#125;&quot;</span>, w);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果你希望<code>Wrapper</code>有所有inner的method，那么在Wrapper上实现<code>Deref</code>trait</p>
<h2 id="Advanced-Types"><a href="#Advanced-Types" class="headerlink" title="Advanced Types"></a>Advanced Types</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Kilometers</span> = <span class="type">i32</span>; <span class="comment">// 类型别名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">x</span>: <span class="type">i32</span> = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">y</span>: Kilometers = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;x + y = &#123;&#125;&quot;</span>, x + y);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用途2简化书写</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Thunk</span> = <span class="type">Box</span>&lt;<span class="keyword">dyn</span> <span class="title function_ invoke__">Fn</span>() + <span class="built_in">Send</span> + <span class="symbol">&#x27;static</span>&gt;; <span class="comment">// 类型别名简化书写 不过实际编码中不建议使用Thunk这样的模糊意义明明</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">f</span>: Thunk = <span class="type">Box</span>::<span class="title function_ invoke__">new</span>(|| <span class="built_in">println!</span>(<span class="string">&quot;hi&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">takes_long_type</span>(f: Thunk) &#123;</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">returns_long_type</span>() <span class="punctuation">-&gt;</span> Thunk &#123;</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例如<code>std::io</code></p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::io::Error;</span><br><span class="line"><span class="keyword">use</span> std::fmt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">trait</span> <span class="title class_">Write</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">write</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, buf: &amp;[<span class="type">u8</span>]) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;<span class="type">usize</span>, Error&gt;;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">flush</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;(), Error&gt;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">write_all</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, buf: &amp;[<span class="type">u8</span>]) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;(), Error&gt;;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">write_fmt</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, fmt: fmt::Arguments) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;(), Error&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&#x3D;</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Result</span>&lt;T&gt; = <span class="type">Result</span>&lt;T, std::io::Error&gt;;</span><br></pre></td></tr></table></figure>

<ul>
<li></li>
</ul>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">trait</span> <span class="title class_">Write</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">write</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, buf: &amp;[<span class="type">u8</span>]) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;<span class="type">usize</span>&gt;;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">flush</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;()&gt;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">write_all</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, buf: &amp;[<span class="type">u8</span>]) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;()&gt;;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">write_fmt</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, fmt: Arguments) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;()&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>The Never Type that Never Returns : <code>!</code></p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">bar</span>() <span class="punctuation">-&gt;</span> ! &#123;</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>continue</code> has a <code>!</code> value.</p>
<p>同样<code>panic!</code>视作返回值也是<code>!</code></p>
<blockquote>
<p>dynamically sized types.</p>
</blockquote>
<p>which <strong>does not</strong> work:</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s1</span>: <span class="type">str</span> = <span class="string">&quot;Hello there!&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">s2</span>: <span class="type">str</span> = <span class="string">&quot;How&#x27;s it going?&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>所以我们一般用的是<code>&amp;str</code>而不是<code>str</code>,有时也有<code>Box&lt;str&gt;</code>,<code>RC&lt;str&gt;</code></p>
<p>对于trait object</p>
<p><code>&amp;dyn Trait</code> or <code>Box&lt;dyn Trait&gt;</code>,<code>Rc&lt;dyn Trait&gt;</code></p>
<p>相对来说&#x2F;&#x2F;之前讲过</p>
<p><code>generic&lt;T&gt;</code>这种 需要在编译时知道大小,也就是以下代码</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">generic</span>&lt;T&gt;(t: T) &#123;</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>会被看做</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">generic</span>&lt;T: <span class="built_in">Sized</span>&gt;(t: T) &#123;</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>来处理</p>
<p>有特殊语法放宽限制</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">generic</span>&lt;T: ?<span class="built_in">Sized</span>&gt;(t: &amp;T) &#123; <span class="comment">//T may or may not be Sized ,This syntax is only available for Sized, not any other traits.</span></span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Advanced-Functions-and-Closures"><a href="#Advanced-Functions-and-Closures" class="headerlink" title="Advanced Functions and Closures"></a>Advanced Functions and Closures</h2><p>之前闭包<code>Fn</code></p>
<p>函数指针<code>fn</code>:函数指针实现了所有三个闭包 trait（<code>Fn</code>、<code>FnMut</code> 和 <code>FnOnce</code>）</p>
<p>所以可以在要传递闭包时传递函数指针</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">list_of_numbers</span> = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="variable">list_of_strings</span>: <span class="type">Vec</span>&lt;<span class="type">String</span>&gt; = list_of_numbers</span><br><span class="line">    .<span class="title function_ invoke__">iter</span>()</span><br><span class="line">    .<span class="title function_ invoke__">map</span>(|i| i.<span class="title function_ invoke__">to_string</span>())</span><br><span class="line">    .<span class="title function_ invoke__">collect</span>();</span><br></pre></td></tr></table></figure>

<p>可以写成</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">list_of_numbers</span> = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="variable">list_of_strings</span>: <span class="type">Vec</span>&lt;<span class="type">String</span>&gt; = list_of_numbers</span><br><span class="line">    .<span class="title function_ invoke__">iter</span>()</span><br><span class="line">    .<span class="title function_ invoke__">map</span>(<span class="built_in">ToString</span>::to_string)</span><br><span class="line">    .<span class="title function_ invoke__">collect</span>();</span><br></pre></td></tr></table></figure>

<p>一些结构体 默认有它的初始化函数，也就有默认实现闭包</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Status</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">Value</span>(<span class="type">u32</span>), <span class="comment">// 默认实现了构造函数初始化语法，对应 闭包</span></span><br><span class="line">    Stop,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">list_of_statuses</span>: <span class="type">Vec</span>&lt;Status&gt; =</span><br><span class="line">    (<span class="number">0u32</span>..<span class="number">20</span>)</span><br><span class="line">    .<span class="title function_ invoke__">map</span>(Status::Value)</span><br><span class="line">    .<span class="title function_ invoke__">collect</span>();</span><br></pre></td></tr></table></figure>

<p>如何返回闭包</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">returns_closure</span>() <span class="punctuation">-&gt;</span> <span class="title function_ invoke__">Fn</span>(<span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123; <span class="comment">// 会报错 没有一个可返回的具体类型</span></span><br><span class="line">    |x| x + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>会报错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">error[E0277]: the trait bound `std::ops::Fn(i32) -&gt; i32 + &#x27;static:</span><br><span class="line">std::marker::Sized` is not satisfied</span><br><span class="line"> --&gt;</span><br><span class="line">  |</span><br><span class="line">1 | fn returns_closure() -&gt; Fn(i32) -&gt; i32 &#123;</span><br><span class="line">  |                         ^^^^^^^^^^^^^^ `std::ops::Fn(i32) -&gt; i32 + &#x27;static`</span><br><span class="line">  does not have a constant size known at compile-time</span><br><span class="line">  |</span><br><span class="line">  = help: the trait `std::marker::Sized` is not implemented for</span><br><span class="line">  `std::ops::Fn(i32) -&gt; i32 + &#x27;static`</span><br><span class="line">  = note: the return type of a function must have a statical</span><br></pre></td></tr></table></figure>

<p>可行的方法</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">returns_closure</span>() <span class="punctuation">-&gt;</span> <span class="type">Box</span>&lt;<span class="keyword">dyn</span> <span class="title function_ invoke__">Fn</span>(<span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span>&gt; &#123;</span><br><span class="line">    <span class="type">Box</span>::<span class="title function_ invoke__">new</span>(|x| x + <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Macros"><a href="#Macros" class="headerlink" title="Macros"></a>Macros</h2><p>我们使用过<code>println!</code> </p>
<p>declarative macros with <code>macro_rules!</code></p>
<p>procedural macros:</p>
<ul>
<li>Custom #[derive] macros that specify code added with the derive attribute used on structs and enums</li>
<li>Attribute-like macros that define custom attributes usable on any item</li>
<li>Function-like macros that look like function calls but operate on the tokens specified as their argument</li>
</ul>
<p>宏可以在编译器翻译代码前展开,Due to this indirection, macro definitions are generally more difficult to read, understand, and maintain than function definitions.</p>
<p>简化<code>vec!</code>的定义 &#x2F;&#x2F; The actual definition of the vec! macro in the standard library includes code to preallocate the correct amount of memory up front. That code is an optimization that we don’t include here to make the example simpler.</p>
<p>&#x2F;&#x2F; 看不懂语法 这些 <code>$</code> <code>*</code>是个啥 &#x3D;.&#x3D; 语法<a href="https://doc.rust-lang.org/reference/macros.html">https://doc.rust-lang.org/reference/macros.html</a></p>
<blockquote>
<p><code>src/lib.rs</code></p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[macro_export]</span></span><br><span class="line"><span class="built_in">macro_rules!</span> vec &#123;</span><br><span class="line">    ( $( $x:expr ),* ) =&gt; &#123; <span class="comment">// vec![1,2,3]</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">temp_vec</span> = <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">            $(</span><br><span class="line">                temp_vec.<span class="title function_ invoke__">push</span>($x); <span class="comment">// 依次等于1,2,3</span></span><br><span class="line">            )*</span><br><span class="line">            temp_vec</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>#[macro_export]</code> 表明，当这个crate被带入scope，macro变得可用</p>
<p>宏模式所匹配的是 Rust 代码结构而不是值</p>
<blockquote>
<p>Procedural Macros for Generating Code from Attributes</p>
</blockquote>
<p>自定义你的<code>some_attribute</code></p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> proc_macro;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[some_attribute]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">some_name</span>(input: TokenStream) <span class="punctuation">-&gt;</span> TokenStream &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例如 我们自定义一个<code>derive</code> Macro, 目录结构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── hello_macro</span><br><span class="line">│   ├── Cargo.toml</span><br><span class="line">│   ├── hello_macro_derive</span><br><span class="line">│   │   ├── Cargo.toml</span><br><span class="line">│   │   └── src</span><br><span class="line">│   │       └── lib.rs</span><br><span class="line">│   └── src</span><br><span class="line">│       └── lib.rs</span><br><span class="line">└── pancakes</span><br><span class="line">    ├── Cargo.toml</span><br><span class="line">    └── src</span><br><span class="line">        └── main.rs</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>pancakes/Cargo.toml</code></p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">[dependencies]</span><br><span class="line">hello_macro = &#123; path = <span class="string">&quot;../hello_macro&quot;</span> &#125;</span><br><span class="line">hello_macro_derive = &#123; path = <span class="string">&quot;../hello_macro/hello_macro_derive&quot;</span> &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>pancakes/src/main.rs</code></p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> hello_macro::HelloMacro;</span><br><span class="line"><span class="keyword">use</span> hello_macro_derive::HelloMacro;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[derive(HelloMacro)]</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Pancakes</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 我们希望#[derive(HelloMacro)]宏实现的</span></span><br><span class="line"><span class="comment">impl HelloMacro for Pancakes &#123;</span></span><br><span class="line"><span class="comment">    fn hello_macro() &#123;</span></span><br><span class="line"><span class="comment">        println!(&quot;Hello, Macro! My name is Pancakes!&quot;);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    Pancakes::<span class="title function_ invoke__">hello_macro</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>hello_macro/src/lib.rs</code></p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">trait</span> <span class="title class_">HelloMacro</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">hello_macro</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>hello_macro/hello_macro_derive/Cargo.toml</code></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[lib]</span><br><span class="line">proc-macro = true</span><br><span class="line"></span><br><span class="line">[dependencies]</span><br><span class="line">syn = &quot;0.14.4&quot;</span><br><span class="line">quote = &quot;0.6.3&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>hello_macro/hello_macro_derive/src/lib.rs</code></p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> proc_macro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> crate::proc_macro::TokenStream;</span><br><span class="line"><span class="keyword">use</span> quote::quote; <span class="comment">// quote crate turns syn data structures back into Rust code. </span></span><br><span class="line"><span class="keyword">use</span> syn; <span class="comment">// syn crate 解析Rust 代码 为一个我们可以操作的数据结构</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 只要有#[derive(HelloMacro)]注解 就会调用下面的proc_macro_derive(HelloMacro)</span></span><br><span class="line"><span class="meta">#[proc_macro_derive(HelloMacro)]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">hello_macro_derive</span>(input: TokenStream) <span class="punctuation">-&gt;</span> TokenStream &#123;</span><br><span class="line">    <span class="comment">// Construct a representation of Rust code as a syntax tree</span></span><br><span class="line">    <span class="comment">// that we can manipulate</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">ast</span> = syn::<span class="title function_ invoke__">parse</span>(input).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Build the trait implementation</span></span><br><span class="line">    <span class="title function_ invoke__">impl_hello_macro</span>(&amp;ast)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">impl_hello_macro</span>(ast: &amp;syn::DeriveInput) <span class="punctuation">-&gt;</span> TokenStream &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">name</span> = &amp;ast.ident;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">gen</span> = quote! &#123;</span><br><span class="line">        <span class="keyword">impl</span> <span class="title class_">HelloMacro</span> <span class="keyword">for</span> #name &#123;</span><br><span class="line">            <span class="keyword">fn</span> <span class="title function_">hello_macro</span>() &#123;</span><br><span class="line">                <span class="built_in">println!</span>(<span class="string">&quot;Hello, Macro! My name is &#123;&#125;&quot;</span>, <span class="built_in">stringify!</span>(#name));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    gen.<span class="title function_ invoke__">into</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>总的来说流程:</p>
<ol>
<li>rust编译器检测到<code>derive(XXX)</code>的注解</li>
<li>rust编译器调用对应 <code>proc_macro_derive(XXX)</code>的代码，传入原本的代码</li>
<li>通过syn工具把 字符串代码变成 可以操作的数据结构</li>
<li>在数据结构上提取我们需要的 字段，实现我们希望实现的方法，如上面的<code>impl HelloMacro for #name</code></li>
<li>通过<code>quote!</code>写回宏产生的Rust代码</li>
<li>gen.into()</li>
</ol>
<p>我们最需要关注的就是 我们需要ast的哪些信息，以及我们要生成什么代码，而 提取解析和重新插入代码都一句嗯有现成的库了</p>
<p>最后使用一下</p>
<p><code>cd pancakes &amp;&amp; cargo run</code></p>
<p>正常输出说明我们的宏有作用了</p>
<h3 id="Attribute-like-macros"><a href="#Attribute-like-macros" class="headerlink" title="Attribute-like macros"></a>Attribute-like macros</h3><p>和上面类似</p>
<p>如我们希望实现宏</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[route(GET, <span class="string">&quot;/&quot;</span>)]</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">index</span>() &#123;</span><br></pre></td></tr></table></figure>

<p>那么需要</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[proc_macro_attribute]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">route</span>(attr: TokenStream, item: TokenStream) <span class="punctuation">-&gt;</span> TokenStream &#123;</span><br></pre></td></tr></table></figure>

<p>和上面比较是，上面是通过<code>derive</code> + <code>proc_macro_derive</code>来工作</p>
<p>现在是<code>自定义XXX</code> + <code>proc_macro_attribute</code>+<code>pub fn 自定义XXX</code>来工作</p>
<p>另一个区别是，现在的实现函数接受两个<code>TokenStream</code></p>
<p><code>attr</code>指 如上面<code>GET,&quot;/&quot;</code>这一部分 , 而<code>item</code>指<code>fn index() &#123;</code>等之后的部分</p>
<h3 id="Function-like-macros"><a href="#Function-like-macros" class="headerlink" title="Function-like macros"></a>Function-like macros</h3><p>感觉掌握derive macro的实现以后，后面都很类似了</p>
<p>举例<code>sql!</code></p>
<p>期望使用<code>let sql = sql!(SELECT * FROM posts WHERE id=1);</code></p>
<p>对应实现</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[proc_macro]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">sql</span>(input: TokenStream) <span class="punctuation">-&gt;</span> TokenStream &#123;</span><br></pre></td></tr></table></figure>

<h1 id="Final-Project-Building-a-Multithreaded-Web-Server"><a href="#Final-Project-Building-a-Multithreaded-Web-Server" class="headerlink" title="Final Project: Building a Multithreaded Web Server"></a>Final Project: Building a Multithreaded Web Server</h1><p>终于 终于 final project了,,,,,,</p>
<ul>
<li>Learn a bit about TCP and HTTP.</li>
<li>Listen for TCP connections on a socket.</li>
<li>Parse a small number of HTTP requests.</li>
<li>Create a proper HTTP response.</li>
<li>Improve the throughput of our server with a thread pool.</li>
</ul>
<p>本章仅仅是教学目的，如果真的要搞web server 以及thread pool，请左转<code>https://crates.io/</code></p>
<p>关于 http的知识 就略去了，因为有学过,</p>
<p>完整代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hello</span><br><span class="line">├── 404.html</span><br><span class="line">├── Cargo.toml</span><br><span class="line">├── hello.html</span><br><span class="line">└── src</span><br><span class="line">    ├── lib.rs</span><br><span class="line">    └── main.rs</span><br></pre></td></tr></table></figure>


<blockquote>
<p><code>src/main.rs</code> 具体业务 和 pool调用</p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::net::TcpListener;</span><br><span class="line"><span class="keyword">use</span> std::io::prelude::*;</span><br><span class="line"><span class="keyword">use</span> std::net::TcpStream;</span><br><span class="line"><span class="keyword">use</span> std::fs;</span><br><span class="line"><span class="keyword">use</span> std::thread;</span><br><span class="line"><span class="keyword">use</span> std::time::Duration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> hello::ThreadPool;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">listener</span> = TcpListener::<span class="title function_ invoke__">bind</span>(<span class="string">&quot;127.0.0.1:7878&quot;</span>).<span class="title function_ invoke__">unwrap</span>(); <span class="comment">// 监听端口</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">pool</span> = ThreadPool::<span class="title function_ invoke__">new</span>(<span class="number">4</span>).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="variable">stream</span> <span class="keyword">in</span> listener.<span class="title function_ invoke__">incoming</span>() &#123; <span class="comment">// try .take(2) 接受传入的流/网络访问</span></span><br><span class="line">        <span class="keyword">let</span> <span class="variable">stream</span> = stream.<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line"></span><br><span class="line">        pool.<span class="title function_ invoke__">execute</span>(|| &#123;</span><br><span class="line">            <span class="title function_ invoke__">handle_connection</span>(stream); <span class="comment">// 处理流内容</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">handle_connection</span>(<span class="keyword">mut</span> stream: TcpStream) &#123; <span class="comment">// 需要mut 关键字</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">buffer</span> = [<span class="number">0</span>; <span class="number">512</span>];</span><br><span class="line">    stream.<span class="title function_ invoke__">read</span>(&amp;<span class="keyword">mut</span> buffer).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">get</span> = <span class="string">b&quot;GET / HTTP/1.1\r\n&quot;</span>; <span class="comment">// 正常请求</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">sleep</span> = <span class="string">b&quot;GET /sleep HTTP/1.1\r\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> (status_line, filename) = <span class="keyword">if</span> buffer.<span class="title function_ invoke__">starts_with</span>(get) &#123;</span><br><span class="line">        (<span class="string">&quot;HTTP/1.1 200 OK\r\n\r\n&quot;</span>, <span class="string">&quot;hello.html&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> buffer.<span class="title function_ invoke__">starts_with</span>(sleep) &#123;</span><br><span class="line">        thread::<span class="title function_ invoke__">sleep</span>(Duration::<span class="title function_ invoke__">from_secs</span>(<span class="number">5</span>)); <span class="comment">// 模拟慢请求</span></span><br><span class="line">        (<span class="string">&quot;HTTP/1.1 200 OK\r\n\r\n&quot;</span>, <span class="string">&quot;hello.html&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        (<span class="string">&quot;HTTP/1.1 404 NOT FOUND\r\n\r\n&quot;</span>, <span class="string">&quot;404.html&quot;</span>)</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">contents</span> = fs::<span class="title function_ invoke__">read_to_string</span>(filename).<span class="title function_ invoke__">unwrap</span>(); <span class="comment">// 读取文件</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">response</span> = <span class="built_in">format!</span>(<span class="string">&quot;&#123;&#125;&#123;&#125;&quot;</span>, status_line, contents); <span class="comment">// 返回给浏览器</span></span><br><span class="line"></span><br><span class="line">    stream.<span class="title function_ invoke__">write</span>(response.<span class="title function_ invoke__">as_bytes</span>()).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">    stream.<span class="title function_ invoke__">flush</span>().<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>src/lib.rs</code></p>
</blockquote>
<p>作为教学目的实现的ThreadPool</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 下面代码的结构</span><br><span class="line">ThreadPool</span><br><span class="line">  Vec&lt; Worker&gt;</span><br><span class="line">      id : worker 在Vec的index，用来标识?</span><br><span class="line">      thread : 每个worker一个线程</span><br><span class="line">          接受到channel的值后 match 结构体是Job还是Terminate</span><br><span class="line">            Job执行方法 封了一个call_box,实际就是调用传递的闭包方法?</span><br><span class="line">      通过lock来</span><br><span class="line">  Sender</span><br><span class="line"></span><br><span class="line">  new():初始化 Workers 和 Sender</span><br><span class="line">  execute():让Sender通过channel发送人物给worker 要执行的闭包给Worker</span><br><span class="line">  </span><br><span class="line">  channel: 结构体 分化为 Job:Box&lt;FnBox + Send + &#x27;static&gt;或Terminate</span><br><span class="line">  drop trait:</span><br><span class="line">      要结束ThreadPool时，让sender发送workersize次 Terminate</span><br><span class="line">      通过 worker.thread.take() + .join()拿去并等待线程结束</span><br></pre></td></tr></table></figure>



<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::error;</span><br><span class="line"><span class="keyword">use</span> std::fmt;</span><br><span class="line"><span class="keyword">use</span> std::thread;</span><br><span class="line"><span class="keyword">use</span> std::sync::mpsc;</span><br><span class="line"><span class="keyword">use</span> std::sync::Arc;</span><br><span class="line"><span class="keyword">use</span> std::sync::Mutex;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[derive(Debug, Clone)]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">PoolCreationError</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">fmt</span>::Display <span class="keyword">for</span> <span class="title class_">PoolCreationError</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">fmt</span>(&amp;<span class="keyword">self</span>, f: &amp;<span class="keyword">mut</span> fmt::Formatter) <span class="punctuation">-&gt;</span> fmt::<span class="type">Result</span> &#123;</span><br><span class="line">        <span class="built_in">write!</span>(f, <span class="string">&quot;Thread pool creation failed!&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">error</span>::Error <span class="keyword">for</span> <span class="title class_">PoolCreationError</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">description</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> &amp;<span class="type">str</span> &#123;</span><br><span class="line">        <span class="string">&quot;Thread pool creation failed!&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">cause</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;&amp;error::Error&gt; &#123;</span><br><span class="line">        <span class="literal">None</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">ThreadPool</span> &#123;</span><br><span class="line">    workers: <span class="type">Vec</span>&lt;Worker&gt;,</span><br><span class="line">    sender: mpsc::Sender&lt;Message&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Message</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">NewJob</span>(Job),</span><br><span class="line">    Terminate,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Job</span> = <span class="type">Box</span>&lt;FnBox + <span class="built_in">Send</span> + <span class="symbol">&#x27;static</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">ThreadPool</span> &#123;</span><br><span class="line">    <span class="comment">/// Create a new ThreadPool.</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// The size is the number of threads in the pool.</span></span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">new</span>(size: <span class="type">usize</span>) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;ThreadPool, PoolCreationError&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> size == <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">Err</span>(PoolCreationError);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> (sender, receiver) = mpsc::<span class="title function_ invoke__">channel</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> <span class="variable">receiver</span> = Arc::<span class="title function_ invoke__">new</span>(Mutex::<span class="title function_ invoke__">new</span>(receiver));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">workers</span> = <span class="type">Vec</span>::<span class="title function_ invoke__">with_capacity</span>(size);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> <span class="variable">id</span> <span class="keyword">in</span> <span class="number">0</span>..size &#123;</span><br><span class="line">            workers.<span class="title function_ invoke__">push</span>(Worker::<span class="title function_ invoke__">new</span>(id, Arc::<span class="title function_ invoke__">clone</span>(&amp;receiver))); <span class="comment">// 启动多个worker</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title function_ invoke__">Ok</span>(ThreadPool &#123;</span><br><span class="line">            workers,</span><br><span class="line">            sender,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">execute</span>&lt;F&gt;(&amp;<span class="keyword">self</span>, f: F)</span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            F: <span class="title function_ invoke__">FnOnce</span>() + <span class="built_in">Send</span> + <span class="symbol">&#x27;static</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">job</span> = <span class="type">Box</span>::<span class="title function_ invoke__">new</span>(f);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.sender.<span class="title function_ invoke__">send</span>(Message::<span class="title function_ invoke__">NewJob</span>(job)).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Drop</span> <span class="keyword">for</span> <span class="title class_">ThreadPool</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">drop</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;Sending terminate message to all workers.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> <span class="variable">_</span> <span class="keyword">in</span> &amp;<span class="keyword">mut</span> <span class="keyword">self</span>.workers &#123;</span><br><span class="line">            <span class="keyword">self</span>.sender.<span class="title function_ invoke__">send</span>(Message::Terminate).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;Shutting down all workers.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> <span class="variable">worker</span> <span class="keyword">in</span> &amp;<span class="keyword">mut</span> <span class="keyword">self</span>.workers &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;Shutting down worker &#123;&#125;&quot;</span>, worker.id);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(thread) = worker.thread.<span class="title function_ invoke__">take</span>() &#123;</span><br><span class="line">                thread.<span class="title function_ invoke__">join</span>().<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Worker</span> &#123;</span><br><span class="line">    id: <span class="type">usize</span>,</span><br><span class="line">    thread: <span class="type">Option</span>&lt;thread::JoinHandle&lt;()&gt;&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">trait</span> <span class="title class_">FnBox</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">call_box</span>(<span class="keyword">self</span>: <span class="type">Box</span>&lt;<span class="keyword">Self</span>&gt;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span>&lt;F: <span class="title function_ invoke__">FnOnce</span>()&gt; FnBox <span class="keyword">for</span> <span class="title class_">F</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">call_box</span>(<span class="keyword">self</span>: <span class="type">Box</span>&lt;F&gt;) &#123;</span><br><span class="line">        (*<span class="keyword">self</span>)()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Worker</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">new</span>(id: <span class="type">usize</span>, receiver: Arc&lt;Mutex&lt;mpsc::Receiver&lt;Message&gt;&gt;&gt;) <span class="punctuation">-&gt;</span> Worker &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">thread</span> = thread::<span class="title function_ invoke__">spawn</span>(<span class="keyword">move</span> || &#123;</span><br><span class="line">            <span class="keyword">loop</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> <span class="variable">message</span> = receiver.<span class="title function_ invoke__">lock</span>().<span class="title function_ invoke__">unwrap</span>().<span class="title function_ invoke__">recv</span>().<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">match</span> message &#123;</span><br><span class="line">                    Message::<span class="title function_ invoke__">NewJob</span>(job) =&gt; &#123;</span><br><span class="line">                        <span class="built_in">println!</span>(<span class="string">&quot;Worker &#123;&#125; get a job; executing.&quot;</span>, id);</span><br><span class="line"></span><br><span class="line">                        job.<span class="title function_ invoke__">call_box</span>();</span><br><span class="line">                    &#125;,</span><br><span class="line"></span><br><span class="line">                    Message::Terminate =&gt; &#123;</span><br><span class="line">                        <span class="built_in">println!</span>(<span class="string">&quot;Worker &#123;&#125; was told to terminate.&quot;</span>, id);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Worker &#123;</span><br><span class="line">            id,</span><br><span class="line">            thread: <span class="title function_ invoke__">Some</span>(thread),</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后是两个静态html</p>
<blockquote>
<p><code>404.html</code></p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Oops!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Sorry, I don&#x27;t know what you&#x27;re asking for.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>hello.html</code></p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hi from Rust<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>最后<code>cargo run</code>然后用浏览器，或者<code>curl</code>&#x2F;<code>wget</code>就可以尝试访问了</p>
<h1 id="Appendix"><a href="#Appendix" class="headerlink" title="Appendix"></a>Appendix</h1><p>附录就不弄过来了 <a href="https://doc.rust-lang.org/book/appendix-00.html">https://doc.rust-lang.org/book/appendix-00.html</a></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.rust-lang.org/learn/get-started">https://www.rust-lang.org/learn/get-started</a></p>
<p>最后一章说but we’ve reached the end of the book,好吧 我最开始就想看个tutorial，最后看了一個book</p>
<h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1><p>重新整理这篇文章,把该加 <code>代码标签</code>的加上<code>代码标签</code></p>
]]></content>
      <categories>
        <category>backend</category>
        <category>rust</category>
      </categories>
      <tags>
        <tag>rust</tag>
      </tags>
  </entry>
  <entry>
    <title>黑天鹅：如何应对不可预知的未来 阅读笔记</title>
    <url>/Blog/19-08-21-the-black-swan/</url>
    <content><![CDATA[<blockquote>
<p>19-07-19  -&gt; 19-08-21</p>
</blockquote>
<h1 id="Main"><a href="#Main" class="headerlink" title="Main"></a>Main</h1><p><img data-src="/Blog/Blog/images/blackswan/190719_01.jpg" alt="190719_01"><br><img data-src="/Blog/Blog/images/blackswan/190719_02.jpg" alt="190719_02"><br><img data-src="/Blog/Blog/images/blackswan/190719_03.jpg" alt="190719_03"></p>
<p>稀有性 极大冲击 事后可预测</p>
<span id="more"></span>

<p><img data-src="/Blog/Blog/images/blackswan/190723_01.jpg" alt="190723_01"></p>
<p>最近自己都有点 让错误发生好了</p>
<p>反正我每次指正你们都感觉不过是个小问题，</p>
<p>那行啊，我说的没用那我不说。</p>
<p>这也感觉之前&lt;原则&gt;一书中提到的会议记录，和事后总结分析。除此我感觉如果对应产品有其它渠道可对比的产品，也可以用来做对比，对比出贡献 </p>
<p><img data-src="/Blog/Blog/images/blackswan/190723_02.jpg" alt="190723_02"></p>
<p>酒品即人品的 更详细的描述</p>
<p>进行中记录的历史和进行后记录的历史 </p>
<p>商业世界的细节中没有任何有趣的东西，它华而不实，贪婪，缺乏智慧，自私而且无聊 </p>
<p><img data-src="/Blog/Blog/images/blackswan/190724_01.jpg" alt="190724_01"></p>
<p>然而极端的清单 比平均值的清单长得多</p>
<p>恶作剧式的非预期行为 会让受到者经历黑天鹅事件？？？？？？？？ </p>
<p>火鸡 无法推断 食物还是感恩节 </p>
<p><img data-src="/Blog/Blog/images/blackswan/190724_02.jpg" alt="190724_02"></p>
<p><img data-src="/Blog/Blog/images/blackswan/190724_05.jpg" alt="190724_05"><br><img data-src="/Blog/Blog/images/blackswan/190724_04.jpg" alt="190724_04"><br><img data-src="/Blog/Blog/images/blackswan/190724_03.jpg" alt="190724_03"></p>
<p>1.对于1来说 我认为这种情况是 未有足够的经验，如果你是火鸡，你没有亲眼见到感恩节，你会相信感恩节吗。我想大多是不会，就像大多人类不信神话故事，认为那些仅仅是故事而不是历史</p>
<ol start="2">
<li></li>
</ol>
<p>3.关于对数学模型的怀疑，上一次有很强印象的数模竞赛，当时我们想做一个预测的功能，那时也接触了一些基本方法以及机器学习，但当时只是接触，理解上完全不到位只会套套套的用。在当时试了以后才知道傅立叶拿来“预测” 不如简单把 函数曲线周期拓延，而无论是灰度模型还是神经网络都只能说对大自的训练范内作出预测，一旦未来的输入未知，或者未来的输入超出这个边界，之前的一切模型都基本凉凉。一个最简单的例子是训练神经网络计算1&#x2F;x，丢给训练数据如果是0到1的随机生成点列，那么训练结果基本你输入0到1之间的值，都能近似的输出1&#x2F;x，而如果有一天你输入了个2，那么再见</p>
<p>前4章 – 不可预期事件普遍存在 </p>
<p><img data-src="/Blog/Blog/images/blackswan/190726_09.jpg" alt="190726_09"><br><img data-src="/Blog/Blog/images/blackswan/190726_08.jpg" alt="190726_08"><br><img data-src="/Blog/Blog/images/blackswan/190726_07.jpg" alt="190726_07"><br><img data-src="/Blog/Blog/images/blackswan/190726_06.jpg" alt="190726_06"><br><img data-src="/Blog/Blog/images/blackswan/190726_05.jpg" alt="190726_05"><br><img data-src="/Blog/Blog/images/blackswan/190726_04.jpg" alt="190726_04"><br><img data-src="/Blog/Blog/images/blackswan/190726_03.jpg" alt="190726_03"><br><img data-src="/Blog/Blog/images/blackswan/190726_02.jpg" alt="190726_02"><br><img data-src="/Blog/Blog/images/blackswan/190726_01.jpg" alt="190726_01"></p>
<p>5 6章 感觉讲来讲去，实际讲的有</p>
<ol>
<li>我们的感性系统工作时 经常会有  充要、充分、必要 条件之间的混淆推理论述</li>
<li>我不太认可把 发生黑天鹅事件前后 的概率估计看作情感的原因，如果让你抽两种颜色的球，那么在没有抽完之前，用程序来估计概率，也一定是会用相同的高估低估。而程序也无法做到和事实的概率相同，所以还是，无法对更大系统的信息认知导致的无法准确推断</li>
<li>一个是事后解释，感觉描述得效果就像是中小学语文课上的作者意图，毫无逻辑。却看似有理，然鹅现实生活中很多人相信于这种，不同解释看上去都有理的其中某些解释</li>
<li>小实验 非理性的真的在时刻运行，你无法阻止也无法时时警觉</li>
<li>你无法把大量数据塞入脑中，总有信息损失，但却能把模式塞入脑中再用于解释大量数据，大脑总会尝试自动去找所谓的规律，然后再感觉上那些是有规律的</li>
<li>我们习惯把知识当做一种疗法</li>
<li>同2 叙述谬误，因为我们对叙述所直接联想的认知，而对概率的错误估计</li>
<li>同2</li>
<li>同4 依然是</li>
</ol>
<p>依然在举例论述事实和一定的原因剖析，还没有到具体方案，</p>
<p>有点比较像的是我之前有想过一个人的一个时刻的认知和下一个时刻认知的变化，我当时觉得如果用平面上的区域来描述的话，目前感觉都是靠以获取的知识出发，也就是用图来说，就是从图扩展会变形收缩修正，感觉不会从一个原来没有认可的知识处凭空拥有一片区域</p>
<p>在一个就是具体感知了，一个详细的报道一个小孩的死的感知</p>
<p>和一个数字百万人死去的感知，</p>
<p>很可能第一个更能让手中觉得可怜</p>
<p>恐怖组织的杀人数和每年因为年龄，疾病死亡</p>
<p>给人的认知体验 也是差异</p>
<hr>
<p>但作者感觉很想把东西挂钩到情感，</p>
<p>而我觉得是有情感的部分，但问题根本还是没有数值化，也就是不足的信息，如果能直接知道一个大自精确的数字，我相信学过比大小的小学生也能区分</p>
<p>当然基于情感的问题最大还不是能否区分，因为如果真的有区分需求，那么理智会让我们去找数据，而情感的影响在于闹钟自动会有预警等反应，甚至有些因噎废食，但可能真的计算过并不会因噎废食</p>
<p><img data-src="/Blog/Blog/images/blackswan/190727_01.jpg" alt="190727_01"><br><img data-src="/Blog/Blog/images/blackswan/190727_02.jpg" alt="190727_02"><br><img data-src="/Blog/Blog/images/blackswan/190727_03.jpg" alt="190727_03"></p>
<p>chap7</p>
<p>作者这里把人分为 习惯每日激励和习惯等待黑天鹅事件的人，</p>
<p>这里提到的算是说作为黑天鹅事件的等待者如何面对和处理，你可能每天每月，在事件发生之前所接收到的负面影响。</p>
<p>希望</p>
<p>群体</p>
<p>眼不见</p>
<p>按照书中的描述，我对我自己评价是分类到习惯去等一个黑天鹅事件，也就和他书中描述的常有挫败甚至面临掉入底层感，却又握着不知道哪来的希望，毫无根据，甚至这概率要细算起来，比彩票还低，但我通过数学计算概率，不信自己会中彩票，却信这不知何处来的希望？</p>
<p><img data-src="/Blog/Blog/images/blackswan/190730_01.jpg" alt="190730_01"><br><img data-src="/Blog/Blog/images/blackswan/190730_05.jpg" alt="190730_05"><br><img data-src="/Blog/Blog/images/blackswan/190730_04.jpg" alt="190730_04"><br><img data-src="/Blog/Blog/images/blackswan/190730_03.jpg" alt="190730_03"><br><img data-src="/Blog/Blog/images/blackswan/190730_02.jpg" alt="190730_02"></p>
<p>8章 幸存者偏差</p>
<ol>
<li>作者认为有许多和我们历史中记载的歌者 作家 伟人 相同优秀的人，只是运气差异，而没有成功，关于作者歌手，我个人的看法是难以量化，不像是科学等，有就是有无就是无，能推动就能推动不行就鸽。所以作者和歌手更可能属于作者所说其实都差不多但运气不够。关于数学公式，我倒是有些微的不服，至少有不超过二十次，我在没学公式前，理论前，自己推演出来了，我曾一次次感觉是我生的时代晚了，不然都可以用我的名字命名。但另一方面，我认为可能因为在已有相关公式下才会有相关题目，才能激发我想出公式，又成了先有鸡还是先有蛋。</li>
</ol>
<p>图4 游泳运动员的身材，我不太认可，毕竟作为二级运动员，还见过铁三，车协的运动员，我真的不信他们肌肉体积与强度是和训练无关的</p>
<p>关于本章，之前我自己是有过想法是，我们想要复制成功者的过程其实很容易，但复制不了成功的结果。我们同样能复制失败的人的过程，却未必是失败。</p>
<p>在原则中有对决策的评价，是要注意避免事后诸葛亮。而原则中评价一个人对某类事物的掌控程度除了历史业绩，还包括逻辑分析是否合理</p>
<p><img data-src="/Blog/Blog/images/blackswan/190730_06.jpg" alt="190730_06"><br><img data-src="/Blog/Blog/images/blackswan/190730_07.jpg" alt="190730_07"><br><img data-src="/Blog/Blog/images/blackswan/190730_08.jpg" alt="190730_08"></p>
<p>第一部分 极端国度与黑天鹅现象结束</p>
<p>第九章 游戏谬误</p>
<p>图1 有趣的是 如果把50%看作客观事实，还是所猜测的 理论的条件。从人的角度 去说接受到的信息，那就有每条信息的可信度，如果全是100%可信，那我也是认为，最后一次50%。而这里明显模糊了事实和猜测的估计的。当你估计是50%而实验结果有大量偏差时，从一定程度上说明你估计错了，（如果你没有更多观测唯维度）。以这样逻辑举例仿佛说一个人能一次喝1000杯水，他尝试了100次，每次喝了3杯就喝不下了，请问下一次尝试，他能喝多少杯。</p>
<p>图2,3 自行扩大观测范围，以通利逻辑说，一个人吃饭会有50%概率被噎死，问他今天死亡概率。信息不全的扩大范围。</p>
<p>emmm，我感觉，我像是文中第二种人，喜欢精确和概率，同时这本书到目前的章节受益并不多，反而看到的是利用逻辑谬误和遗漏玩着文字游戏。但作为一本提醒，身边的非平均事件普遍存在还是略有一些价值</p>
<p>目前为止，对本书失望占多数。</p>
<p><img data-src="/Blog/Blog/images/blackswan/190802_06.jpg" alt="190802_06"><br><img data-src="/Blog/Blog/images/blackswan/190802_05.jpg" alt="190802_05"><br><img data-src="/Blog/Blog/images/blackswan/190802_04.jpg" alt="190802_04"><br><img data-src="/Blog/Blog/images/blackswan/190802_03.jpg" alt="190802_03"><br><img data-src="/Blog/Blog/images/blackswan/190802_02.jpg" alt="190802_02"><br><img data-src="/Blog/Blog/images/blackswan/190802_01.jpg" alt="190802_01"></p>
<p>因为已经获得的信息缺乏，很多我们日常会接触的但我们不够关心的事情，我们在对其估计上，可能有很大的 值&#x2F;概率偏差</p>
<p>我真的感觉这作者基本逻辑不通，长篇大论，举例片面，一堆屁话</p>
<p>如果你认为，专家的预测几乎差于随机，那么你只需要取负值即可 做到优于随机</p>
<p>如果你认为，专家的预测是另一种随机，那么你的理论应该简化为，专家并不具备有效模型或数据</p>
<p>作者所写存在可能的平均谬误，假设专家真的靠 模型预测，那么假设每日都有预测，那一年后对这些预测进行累积。同样我们用最简单的平移预测，即预测的值直接等于昨日的值，这样平移预测的累积就只和第一天和最后一天有关了。</p>
<p>那么很可能 专家得到的最终累积 相比于我们的平移预测 更远离实际。但是请问这样看似更小累积误差的，有更大的实用意义吗？总感觉作者喜欢用类似这种无意义的参数，对不同决策的优劣做评价，再反推，一个不具备知识的人能做到更优？？？？？</p>
<p>再看 关于预测我的一个大自分类</p>
<ol>
<li>不提供预测</li>
<li>凭感觉提供预测</li>
<li>随机提供预测</li>
<li>只对日常情况 提供预测，不保证极端情况</li>
<li>我们对任意情况都做预测</li>
<li>真实情况</li>
</ol>
<p>我认为目前 所谓专家都是 在不断尝试把第4做到更好，然后作者质疑为什么没有完成5？还自豪的说 我能做 1 2 3？？？？？？</p>
<p>复杂模型 不一定 比 简单模型 精确，这句描述准确。1是模型无效性，2是参数无关性。</p>
<p>对未来的预测，本就不可能百分百成功，自反性，然后作者就非要 没有百分百就看作0？？？</p>
<blockquote>
<p>19 08 03 正经历着 黑天鹅事件 </p>
</blockquote>
<p><img data-src="/Blog/Blog/images/blackswan/190807_01.jpg" alt="190807_01"><br><img data-src="/Blog/Blog/images/blackswan/190807_02.jpg" alt="190807_02"><br><img data-src="/Blog/Blog/images/blackswan/190807_03.jpg" alt="190807_03"></p>
<p>巧合和偶然 才是世界改变的来源</p>
<p>记得之前陈立杰的演讲，说他是怎样想到一个很多人都没想出的证明，是看到天空飞过一只白鸽。当然我和他差太多，但我也有的时候想问题，突然冒出一个很有用的想法，但回想不知道如何解释这想法是怎么来的。</p>
<p>这里又提到实验科学和概括科学</p>
<p>虽然书中不是这个例子，但我想举这个例，就是中医vs西医到底怎么样</p>
<p>中医如果真的加入统计，不需要说出所谓的病理，那我也是愿意相信的。而西医感觉更像是柏拉图式的医学，能讲出为什么。却可能有未知的原因无法发现</p>
<blockquote>
<p>19 08 09</p>
</blockquote>
<p>认知自大</p>
<p>我感觉这就和 原则中提到的 你自己没经验的部分，找有经验的人，而不是自己瞎搞</p>
<p>但这种 预测方案，感觉像是因噎废食 </p>
<p><img data-src="/Blog/Blog/images/blackswan/190814_01.jpg" alt="190814_01"><br><img data-src="/Blog/Blog/images/blackswan/190814_02.jpg" alt="190814_02"></p>
<p>观点1 强者越强 但是随机性很大</p>
<p>观点2 强者会被取代 合并 依然存在随机性风险</p>
<p>过度的合并 可能带来 更少的风险 但一旦发生 可能严重程度更大 </p>
<p><img data-src="/Blog/Blog/images/blackswan/190815_01.jpg" alt="190815_01"></p>
<p>卧槽 我想不到怎么解释 </p>
<p>跳出高斯模型又到分形，不还是数学模型？</p>
<p>总之 改变模型能把不少 黑天鹅事件转化为灰天鹅 但依然会有残余的黑天鹅事件 </p>
<p><img data-src="/Blog/Blog/images/blackswan/190819_01.jpg" alt="190819_01"><br><img data-src="/Blog/Blog/images/blackswan/190819_02.jpg" alt="190819_02"><br><img data-src="/Blog/Blog/images/blackswan/190819_03.jpg" alt="190819_03"><br><img data-src="/Blog/Blog/images/blackswan/190819_04.jpg" alt="190819_04"></p>
<p>作者写这部分文字时，应该是充满着傲气和怒气</p>
<p>之前我有想过的是，社会学，经济学真的能量化吗，</p>
<p>我先得到的答案是，大自能抽象出一个模型</p>
<p>而这书死死盯着经济学一顿爆锤，1是有极端情况，影响很大，预测不到。2是目前为止都是事后诸葛</p>
<p>我感觉我是图二说的那种人，认为 部分可解释预测是好于完全不，也认可极端的存在。</p>
<p>作者这本书都快结束了，除了警示我，模型不是全部，以及不符合后影响很大，没有看到什么建设性意见。现在把预测交给作者，作者更喜欢说不知道？？？</p>
<p>那照着这逻辑，这种想法，没有百分百，就否认过程中，进行中，那也不会有alpha go，也不会有任何创业尝试，因为都不是完美，也都有极端情况的危害。</p>
<p>快要看完了，感觉这周可以开新的书了。</p>
<p>虽然感觉和这书的核心观点有很大分歧，但不可否认，它的确把我之前零零星星想的一系列问题串起来了，有的给了好的概括，不算是回答，有的并没有一个好的方法。所以感觉算是推荐，但第一次感觉看一个书是在思维不断疑惑 抗拒 加 再思考的。 </p>
<p><img data-src="/Blog/Blog/images/blackswan/190820_06.jpg" alt="190820_06"><br><img data-src="/Blog/Blog/images/blackswan/190820_05.jpg" alt="190820_05"><br><img data-src="/Blog/Blog/images/blackswan/190820_04.jpg" alt="190820_04"><br><img data-src="/Blog/Blog/images/blackswan/190820_03.jpg" alt="190820_03"><br><img data-src="/Blog/Blog/images/blackswan/190820_02.jpg" alt="190820_02"><br><img data-src="/Blog/Blog/images/blackswan/190820_01.jpg" alt="190820_01"></p>
<p>repeat repeat again</p>
<p>图4🤔所以那些面对记者答非所问是故意的</p>
<p>没有多少新的有价值输入了。</p>
<p>还有30+页结束，明天有cf，应该周三游泳后能看完？ </p>
<p><img data-src="/Blog/Blog/images/blackswan/190821_04.jpg" alt="190821_04"><br><img data-src="/Blog/Blog/images/blackswan/190821_03.jpg" alt="190821_03"><br><img data-src="/Blog/Blog/images/blackswan/190821_02.jpg" alt="190821_02"><br><img data-src="/Blog/Blog/images/blackswan/190821_01.jpg" alt="190821_01"></p>
<p>over ，準備整理，然後開始下一本書 </p>
<h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>不可预测，影响极大</p>
<p>分类人为 平均国度 还是 极端国度</p>
<p>历史用来预测的低意义？</p>
<p>历史评价不公平，911救援和预防911的人，预防问题和等问题发生解决的人</p>
<p>更多的出现的是事后诸葛亮</p>
<p>人们预测失败的原因既有信息不足,或者说有大量的无效信息</p>
<p>也有因为描述差异导致心里理解的概率的夸大或缩小(从概率上看其实不然，但也有是完全凭感觉的估计)</p>
<p>甚至有充要关系描述错误的情况</p>
<p>大脑的自动简化分析作用，如文字阅读，能阅读有错误顺序，或重复字词的句子而不会发觉</p>
<p>成名作家与非成名作家差别可能只是运气 成功的人，并不具备超人的能力，而是很多人都有，只是他有运气？</p>
<p>大量小随机的期望是正态的，但实际世界，存在很多非正态的</p>
<p>生活中的知识，很多实际只能增加自信？</p>
<p>现在日常生活中的大多事物，的产生之初都不是其目的，而是碰巧</p>
<p>如果从事黑天鹅相关职业建议加入群体</p>
<p>整体我个人的看法是，的确提到了不少我之前没考虑到需要警示的问题，</p>
<p>但是因为有黑天鹅 而放弃平均的世界，我大部分反对，就我熟悉的领域，操作系统来说，每年都有新的漏洞发现和修补，甚至硬件上的。这些都是黑天鹅，否则早就解决了，但如果说担心这些的发生，就停止电脑使用，现在会是这样的世界吗？那同样作者认为一旦出了问题会是大问题，也的确，像前几年的windows漏洞，国内人因为“安全软件”建议关闭windows自动更新，再加上公私钥算法文件加密解密和比特币付款，一次漏洞发生，可以说是跨国家级别的大面积攻击。那么我们都得放弃电脑改为纸笔吗？</p>
<p>冗余当然认可，但是说冗余还要从大自然中学我觉得也是可笑的，计算机实践上，从网络，从存储，实践多少年了。</p>
<p>最后，总的说，我感觉《原则》比这本书好很多，这本书从警示作用上说很推荐，其中观点看大家探讨，比较不满意的是重复反复说，换着方式说没有什么新东西，感觉内容可以去掉3&#x2F;4。</p>
<p>总推荐 3&#x2F;5</p>
<p>值得一读 5&#x2F;5</p>
<p>内容&#x2F;阅读时间性价比 1&#x2F;5</p>
<p>内容实用价值 3&#x2F;5</p>
<h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><p><a href="https://en.wikipedia.org/wiki/The_Black_Swan:_The_Impact_of_the_Highly_Improbable">https://en.wikipedia.org/wiki/The_Black_Swan:_The_Impact_of_the_Highly_Improbable</a></p>
]]></content>
      <categories>
        <category>notes</category>
        <category>book</category>
      </categories>
      <tags>
        <tag>life</tag>
        <tag>future</tag>
        <tag>plan</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式 阅读笔记</title>
    <url>/Blog/19-08-26-design-pattern/</url>
    <content><![CDATA[<blockquote>
<p>19-08-26 -&gt; 19-</p>
</blockquote>
<p><a href="https://www.runoob.com/design-pattern/design-pattern-tutorial.html">https://www.runoob.com/design-pattern/design-pattern-tutorial.html</a></p>
<p><img data-src="https://www.runoob.com/wp-content/uploads/2014/08/the-relationship-between-design-patterns.jpg" alt="relation"></p>
<h1 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h1><p>这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。</p>
<p>1、开闭原则（Open Close Principle）</p>
<p>开闭原则的意思是：对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。</p>
<p>2、里氏代换原则（Liskov Substitution Principle）</p>
<p>里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。</p>
<p>3、依赖倒转原则（Dependence Inversion Principle）</p>
<p>这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。</p>
<p>4、接口隔离原则（Interface Segregation Principle）</p>
<p>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。</p>
<p>5、迪米特法则，又称最少知道原则（Demeter Principle）</p>
<p>最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。</p>
<p>6、合成复用原则（Composite Reuse Principle）</p>
<p>合成复用原则是指：尽量使用合成&#x2F;聚合的方式，而不是使用继承。</p>
<table>
<thead>
<tr>
<th>模式名称</th>
<th>简单概括</th>
</tr>
</thead>
<tbody><tr>
<td>工厂模式（Factory Pattern）</td>
<td>从new变为从工厂拿具体类</td>
</tr>
<tr>
<td>抽象工厂模式（Abstract Factory Pattern）</td>
<td>其它工厂的工厂</td>
</tr>
<tr>
<td>单例模式（Singleton Pattern）</td>
<td>某作用域唯一的，存在0或1个</td>
</tr>
<tr>
<td>建造者模式（Builder Pattern）</td>
<td>分离不变(基本元素)和易变模块(组合基本元素的方法)</td>
</tr>
<tr>
<td>原型模式（Prototype Pattern）</td>
<td>重写clone方法 控制重复对象克隆的代价</td>
</tr>
</tbody></table>
<h2 id="工厂模式（Factory-Pattern）"><a href="#工厂模式（Factory-Pattern）" class="headerlink" title="工厂模式（Factory Pattern）"></a>工厂模式（Factory Pattern）</h2><p>复杂对象适合使用工厂模式，而简单对象，特别是只需要通过 new 就可以完成创建的对象，无需使用工厂模式。如果使用工厂模式，就需要引入一个工厂类，会增加系统的复杂度。</p>
<p><img data-src="https://www.runoob.com/wp-content/uploads/2014/08/factory_pattern_uml_diagram.jpg" alt="factory pattern"></p>
<p>主程序 new 工厂</p>
<p>通过工厂方法获得有某些接口实现的实例</p>
<p>调用实例的接口方法</p>
<p>如上图，对于main来说左边框中除了 interface Shape以外 是未知的，通过调用Shape Factory来创建具体实现了Shape的实例</p>
<h2 id="抽象工厂模式（Abstract-Factory-Pattern）"><a href="#抽象工厂模式（Abstract-Factory-Pattern）" class="headerlink" title="抽象工厂模式（Abstract Factory Pattern）"></a>抽象工厂模式（Abstract Factory Pattern）</h2><p>其他工厂的工厂</p>
<p><img data-src="https://www.runoob.com/wp-content/uploads/2014/08/abstractfactory_pattern_uml_diagram.jpg" alt="Abstract Factory Pattern"></p>
<p>讲就是，通过其它工厂的工厂来创建工厂，再通过创建出的工厂来调用具体的对象创建</p>
<h2 id="单例模式（Singleton-Pattern）"><a href="#单例模式（Singleton-Pattern）" class="headerlink" title="单例模式（Singleton Pattern）"></a>单例模式（Singleton Pattern）</h2><ol>
<li>单例类只能有一个实例。</li>
<li>单例类必须自己创建自己的唯一实例。</li>
<li>单例类必须给所有其他对象提供这一实例。</li>
</ol>
<p><img data-src="https://www.runoob.com/wp-content/uploads/2014/08/singleton_pattern_uml_diagram.jpg" alt="singleton pattern"></p>
<h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><p>是否 Lazy 初始化：是</p>
<p>是否多线程安全：否</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;  </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;  </span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">Singleton</span> <span class="params">()</span>&#123;&#125;  </span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;  </span><br><span class="line">      instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> instance;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>是否 Lazy 初始化：是</p>
<p>是否多线程安全：是</p>
<p>这种方式具备很好的 lazy loading，能够在多线程中很好的工作，但是，效率很低，99% 情况下不需要同步<br>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;  </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;  </span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">Singleton</span> <span class="params">()</span>&#123;&#125;  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123; <span class="comment">// 相对来说 保证了多线程安全</span></span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;  </span><br><span class="line">      instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> instance;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>是否 Lazy 初始化：否</p>
<p>是否多线程安全：是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>(); <span class="comment">// 默认初始化单例实例 但可能不会用到</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span> <span class="params">()</span>&#123;&#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;  </span><br><span class="line">      <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>双检锁&#x2F;双重校验锁（DCL，即 double-checked locking）</p>
<p>JDK 版本：JDK1.5 起</p>
<p>是否 Lazy 初始化：是</p>
<p>是否多线程安全：是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;  </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton singleton;  </span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">Singleton</span> <span class="params">()</span>&#123;&#125;  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getSingleton</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="keyword">if</span> (singleton == <span class="literal">null</span>) &#123;   <span class="comment">// 因为最多0次或1此创建 而如果使用大多数都是 != null</span></span><br><span class="line">      <span class="keyword">synchronized</span> (Singleton.class) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="literal">null</span>) &#123;  </span><br><span class="line">          singleton = <span class="keyword">new</span> <span class="title class_">Singleton</span>();  </span><br><span class="line">        &#125;  </span><br><span class="line">      &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> singleton;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>登记式&#x2F;静态内部类</p>
<p>利用了 classloader 机制来保证初始化 instance 时只有一个线程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;  </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingletonHolder</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();  </span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">Singleton</span> <span class="params">()</span>&#123;&#125;  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="keyword">return</span> SingletonHolder.INSTANCE;  <span class="comment">// 只有通过显式调用 getInstance 方法时，才会显式装载 SingletonHolder 类，从而实例化 instance</span></span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>JDK 版本：JDK1.5 起</p>
<p>是否 Lazy 初始化：否</p>
<p>是否多线程安全：是</p>
<p>这种实现方式还没有被广泛采用，但这是实现单例模式的最佳方法。它更简洁，自动支持序列化机制，绝对防止多次实例化。</p>
<p>这种方式是 Effective Java 作者 Josh Bloch 提倡的方式，它不仅能避免多线程同步问题，而且还自动支持序列化机制，防止反序列化重新创建新的对象，绝对防止多次实例化。不过，由于 JDK1.5 之后才加入 enum 特性，用这种方式写不免让人感觉生疏，在实际工作中，也很少用。</p>
<p>不能通过 reflection attack 来调用私有构造方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Singleton</span> &#123;  </span><br><span class="line">    INSTANCE;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">whateverMethod</span><span class="params">()</span> &#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>经验之谈：一般情况下，不建议使用第 1 种和第 2 种懒汉方式，建议使用第 3 种饿汉方式。只有在要明确实现 lazy loading 效果时，才会使用第 5 种登记方式。如果涉及到反序列化创建对象时，可以尝试使用第 6 种枚举方式。如果有其他特殊的需求，可以考虑使用第 4 种双检锁方式。</p>
<h2 id="建造者模式（Builder-Pattern）"><a href="#建造者模式（Builder-Pattern）" class="headerlink" title="建造者模式（Builder Pattern）"></a>建造者模式（Builder Pattern）</h2><p>分离 常变和不变的</p>
<p><img data-src="https://www.runoob.com/wp-content/uploads/2014/08/builder_pattern_uml_diagram.jpg" alt="builder pattern"></p>
<p>如上，具体的食物 等是不变的，而 套餐组合是变化的&#x3D;.&#x3D;我暂时没有想到代码中的用例</p>
<p>使用场景： 1、需要生成的对象具有复杂的内部结构。 2、需要生成的对象内部属性本身相互依赖。</p>
<p>注意事项：与工厂模式的区别是：建造者模式更加关注与零件装配的顺序。</p>
<h2 id="原型模式（Prototype-Pattern）"><a href="#原型模式（Prototype-Pattern）" class="headerlink" title="原型模式（Prototype Pattern）"></a>原型模式（Prototype Pattern）</h2><p>原型模式（Prototype Pattern）是用于创建重复的对象，同时又能保证性能。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p>
<p>这种模式是实现了一个原型接口，该接口用于创建当前对象的克隆。当直接创建对象的代价比较大时，则采用这种模式。例如，一个对象需要在一个高代价的数据库操作之后被创建。我们可以缓存该对象，在下一个请求时返回它的克隆，在需要的时候更新数据库，以此来减少数据库调用。</p>
<p>关键代码： 1、实现克隆操作，在 JAVA 继承 Cloneable，重写 clone()，在 .NET 中可以使用 Object 类的 MemberwiseClone() 方法来实现对象的浅拷贝或通过序列化的方式来实现深拷贝。 2、原型模式同样用于隔离类对象的使用者和具体类型（易变类）之间的耦合关系，它同样要求这些”易变类”拥有稳定的接口。</p>
<p>在实际项目中，原型模式很少单独出现，一般是和工厂方法模式一起出现，通过 clone 的方法创建一个对象，然后由工厂方法提供给调用者。原型模式已经与 Java 融为浑然一体，大家可以随手拿来使用。</p>
<p><img data-src="https://www.runoob.com/wp-content/uploads/2014/08/prototype_pattern_uml_diagram.jpg" alt="Prototype Pattern"></p>
<h1 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h1><p>这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。</p>
<table>
<thead>
<tr>
<th>模式名称</th>
<th>简单概括</th>
</tr>
</thead>
<tbody><tr>
<td>适配器模式（Adapter Pattern）</td>
<td>解决 接口不兼容 如wine</td>
</tr>
<tr>
<td>桥接模式（Bridge Pattern）</td>
<td>抽象实体解耦</td>
</tr>
<tr>
<td>过滤器模式（Filter、Criteria Pattern）</td>
<td>抽象过滤方法 实现不同过滤器</td>
</tr>
<tr>
<td>组合模式（Composite Pattern）</td>
<td>树形结构</td>
</tr>
<tr>
<td>装饰器模式（Decorator Pattern）</td>
<td>不使用子类 包一层 增加方法</td>
</tr>
<tr>
<td>外观模式（Facade Pattern）</td>
<td>复杂化内部 简化对外接口</td>
</tr>
<tr>
<td>享元模式（Flyweight Pattern）</td>
<td>复用 大量细粒度对象</td>
</tr>
<tr>
<td>代理模式（Proxy Pattern）</td>
<td>中间商 抽象&#x2F;管理cache等 os里常见</td>
</tr>
</tbody></table>
<h2 id="适配器模式（Adapter-Pattern）"><a href="#适配器模式（Adapter-Pattern）" class="headerlink" title="适配器模式（Adapter Pattern）"></a>适配器模式（Adapter Pattern）</h2><p>不兼容借口之间的桥梁</p>
<p>1、美国电器 110V，中国 220V，就要有一个适配器将 110V 转化为 220V。 2、JAVA JDK 1.1 提供了 Enumeration 接口，而在 1.2 中提供了 Iterator 接口，想要使用 1.2 的 JDK，则要将以前系统的 Enumeration 接口转化为 Iterator 接口，这时就需要适配器模式。 3、在 LINUX 上运行 WINDOWS 程序。 4、JAVA 中的 jdbc。</p>
<p>这个自己有遇到过</p>
<ol>
<li>之前改写的oiTerminal,目的是同时兼容不同的oj 的页面访问请求 和解析</li>
<li>之前也有在wukong项目里看过 网路访问做的 adapter</li>
</ol>
<p>有动机地修改一个正常运行的系统的接口，这时应该考虑使用适配器模式。</p>
<p><img data-src="https://www.runoob.com/wp-content/uploads/2014/08/adapter_pattern_uml_diagram.jpg" alt="Adapter Pattern"></p>
<h2 id="桥接模式（Bridge-Pattern）"><a href="#桥接模式（Bridge-Pattern）" class="headerlink" title="桥接模式（Bridge Pattern）"></a>桥接模式（Bridge Pattern）</h2><p>用抽象解耦实现化</p>
<p>对于两个独立变化的维度，使用桥接模式再适合不过了。</p>
<p><img data-src="https://www.runoob.com/wp-content/uploads/2014/08/bridge_pattern_uml_diagram.jpg" alt="Bridge"></p>
<h2 id="过滤器模式（Filter、Criteria-Pattern）"><a href="#过滤器模式（Filter、Criteria-Pattern）" class="headerlink" title="过滤器模式（Filter、Criteria Pattern）"></a>过滤器模式（Filter、Criteria Pattern）</h2><p><img data-src="https://www.runoob.com/wp-content/uploads/2014/08/filter_pattern_uml_diagram.jpg" alt="Filter"></p>
<p>接口是 meetCriteria</p>
<p>不同的过滤器不同的实现方式</p>
<h2 id="组合模式（Composite-Pattern）"><a href="#组合模式（Composite-Pattern）" class="headerlink" title="组合模式（Composite Pattern）"></a>组合模式（Composite Pattern）</h2><p>整体部分模式，树形模式?</p>
<p><img data-src="https://www.runoob.com/wp-content/uploads/2014/08/composite_pattern_uml_diagram.jpg" alt="Composite Pattern"></p>
<h2 id="装饰器模式（Decorator-Pattern）"><a href="#装饰器模式（Decorator-Pattern）" class="headerlink" title="装饰器模式（Decorator Pattern）"></a>装饰器模式（Decorator Pattern）</h2><p>现有类的一个包装</p>
<p>动态的给一个对象添加额外的职责</p>
<p>比子类更灵活 比如rust的macro的 <a href="https://cromarmot.github.io/Blog/19-08-15-rust/#Macros">https://cromarmot.github.io/Blog/19-08-15-rust/#Macros</a></p>
<p><img data-src="https://www.runoob.com/wp-content/uploads/2014/08/decorator_pattern_uml_diagram.jpg" alt="Decorator Pattern"></p>
<h2 id="外观模式（Facade-Pattern）"><a href="#外观模式（Facade-Pattern）" class="headerlink" title="外观模式（Facade Pattern）"></a>外观模式（Facade Pattern）</h2><p>不符合开闭原则，如果要改东西很麻烦，继承重写都不合适。</p>
<p>使用场景： 1、为复杂的模块或子系统提供外界访问的模块。 2、子系统相对独立。 3、预防低水平人员带来的风险。</p>
<p><img data-src="https://www.runoob.com/wp-content/uploads/2014/08/facade_pattern_uml_diagram.jpg" alt="Facade Pattern"></p>
<h2 id="享元模式（Flyweight-Pattern）"><a href="#享元模式（Flyweight-Pattern）" class="headerlink" title="享元模式（Flyweight Pattern）"></a>享元模式（Flyweight Pattern）</h2><p>抽离出大量细力度对象复用</p>
<p>HashMap ,如下图的circleMap</p>
<p><img data-src="https://www.runoob.com/wp-content/uploads/2014/08/flyweight_pattern_uml_diagram-1.jpg" alt="Flyweight Pattern"></p>
<h2 id="代理模式（Proxy-Pattern）"><a href="#代理模式（Proxy-Pattern）" class="headerlink" title="代理模式（Proxy Pattern）"></a>代理模式（Proxy Pattern）</h2><p>按职责来划分，通常有以下使用场景： 1、远程代理。 2、虚拟代理。 3、Copy-on-Write 代理。 4、保护（Protect or Access）代理。 5、Cache代理。 6、防火墙（Firewall）代理。 7、同步化（Synchronization）代理。 8、智能引用（Smart Reference）代理。</p>
<p>写过操作系统lab代码的应该是 再熟悉不过了</p>
<p><img data-src="https://www.runoob.com/wp-content/uploads/2014/08/proxy_pattern_uml_diagram.jpg" alt="Proxy Pattern"></p>
<p>#行为型模式</p>
<p>这些设计模式特别关注对象之间的通信。</p>
<h2 id="责任链模式（Chain-of-Responsibility-Pattern）"><a href="#责任链模式（Chain-of-Responsibility-Pattern）" class="headerlink" title="责任链模式（Chain of Responsibility Pattern）"></a>责任链模式（Chain of Responsibility Pattern）</h2><p>1、不能保证请求一定被接收。 2、系统性能将受到一定影响，而且在进行代码调试时不太方便，可能会造成循环调用。 3、可能不容易观察运行时的特征，有碍于除错。</p>
<p>使用场景： 1、有多个对象可以处理同一个请求，具体哪个对象处理该请求由运行时刻自动确定。 2、在不明确指定接收者的情况下，向多个对象中的一个提交一个请求。 3、可动态指定一组对象处理请求。</p>
<p>我能想到的如nodejs中express的中间件?</p>
<p>自己能处理则处理否则传递给链上的下一个处理函数</p>
<p><img data-src="https://www.runoob.com/wp-content/uploads/2014/08/chain_pattern_uml_diagram.jpg" alt="Chain"></p>
<p>链上所有的类都需要实现抽象类,如上面的AbstractLogger</p>
<h2 id="命令模式（Command-Pattern）"><a href="#命令模式（Command-Pattern）" class="headerlink" title="命令模式（Command Pattern）"></a>命令模式（Command Pattern）</h2><p>关键代码：定义三个角色：1、received 真正的命令执行对象 2、Command 3、invoker 使用命令对象的入口</p>
<p><img data-src="https://www.runoob.com/wp-content/uploads/2014/08/command_pattern_uml_diagram.jpg" alt="command"></p>
<p>如上 Stock是实体用的类</p>
<p>Order的具体实现BuyStock 和 SellStock是要对一个具体Stock操作的方法</p>
<p>Broker是执行者</p>
<h2 id="解释器模式（Interpreter-Pattern）"><a href="#解释器模式（Interpreter-Pattern）" class="headerlink" title="解释器模式（Interpreter Pattern）"></a>解释器模式（Interpreter Pattern）</h2><p>如果一种特定类型的问题发生的频率足够高，那么可能就值得将该问题的各个实例表述为一个简单语言中的句子。这样就可以构建一个解释器，该解释器通过解释这些句子来解决该问题。</p>
<p>如之前写过的sparql解析器</p>
<p><img data-src="https://www.runoob.com/wp-content/uploads/2014/08/interpreter_pattern_uml_diagram.jpg" alt="Interpreter Pattern"></p>
<h2 id="迭代器模式（Iterator-Pattern）"><a href="#迭代器模式（Iterator-Pattern）" class="headerlink" title="迭代器模式（Iterator Pattern）"></a>迭代器模式（Iterator Pattern）</h2><p>聚合对象内部遍历方法，但是不暴露具体内部实现</p>
<p>比如rust已经说做到用iter能和 for index做当相同效率的迭代器了</p>
<p>C++里常见的stl里各种迭代器</p>
<p>&#x2F;&#x2F; 就我对迭代器使用理解来说，这里提出的缺点是个什么鬼</p>
<p><img data-src="https://www.runoob.com/wp-content/uploads/2014/08/iterator_pattern_uml_diagram.jpg" alt="iterator"></p>
<h2 id="中介者模式（Mediator-Pattern）"><a href="#中介者模式（Mediator-Pattern）" class="headerlink" title="中介者模式（Mediator Pattern）"></a>中介者模式（Mediator Pattern）</h2><p>何时使用：多个类相互耦合，形成了网状结构。</p>
<p>如何解决：将上述网状结构分离为星型结构。</p>
<p>2、机场调度系统。 3、MVC 框架，其中C（控制器）就是 M（模型）和 V（视图）的中介者。</p>
<p><img data-src="https://www.runoob.com/wp-content/uploads/2014/08/mediator_pattern_uml_diagram.jpg" alt="Mediator"></p>
<h2 id="备忘录模式（Memento-Pattern）"><a href="#备忘录模式（Memento-Pattern）" class="headerlink" title="备忘录模式（Memento Pattern）"></a>备忘录模式（Memento Pattern）</h2><p>存档，返回上一步，数据库事务管理</p>
<p>备忘录模式使用三个类 Memento、Originator 和 CareTaker。Memento 包含了要被恢复的对象的状态。Originator 创建并在 Memento 对象中存储状态。Caretaker 对象负责从 Memento 中恢复对象的状态。</p>
<p>MementoPatternDemo，我们的演示类使用 CareTaker 和 Originator 对象来显示对象的状态恢复。</p>
<p><img data-src="https://www.runoob.com/wp-content/uploads/2014/08/memento_pattern_uml_diagram.jpg" alt="Memento"></p>
<p>这个东西 感觉没有什么真实实践经验</p>
<p>以前做过一个很简单版本管理，用的是二进制备份和恢复</p>
<p>也做过基于数据库的备份和恢复,但实际还是靠的数据库</p>
<p>所以在实践中 如果对于一个 大的内容，感觉直接备份整体 消耗是巨大的。看vim的undo tree或者 git的版本管理，这些工程实践过的东西，都是交互式但都是记录的差异</p>
<p>那么问题又是，如何记录差异，如果一个系统的操作是具有连带操作的，那么所有连带影响都应该被记录，而在恢复时不应该触发任何连带反应，从而设计上 感觉就这里所举的例子远远不够</p>
<h2 id="观察者模式（Observer-Pattern）"><a href="#观察者模式（Observer-Pattern）" class="headerlink" title="观察者模式（Observer Pattern）"></a>观察者模式（Observer Pattern）</h2><p>定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。</p>
<p><img data-src="https://www.runoob.com/wp-content/uploads/2014/08/observer_pattern_uml_diagram.jpg" alt="Observer"></p>
<p>一个是 vue的 watch以及computed设计</p>
<p>另一个是RxJS里的 Observerable的设计</p>
<p>这种描述式的表述法直接代码阅读体验是会比命令式的好一些</p>
<p>比如 挖掘Vue的声明式的交互能力 <a href="https://www.bilibili.com/video/av37345007?from=search&amp;seid=18134472664073504003">https://www.bilibili.com/video/av37345007?from=search&amp;seid=18134472664073504003</a></p>
<h2 id="状态模式（State-Pattern）"><a href="#状态模式（State-Pattern）" class="headerlink" title="状态模式（State Pattern）"></a>状态模式（State Pattern）</h2><p>内部有状态，不同的状态下 不同的方法有不同的行为</p>
<p>使用场景： 1、行为随状态改变而改变的场景。 2、条件、分支语句的代替者。</p>
<p><img data-src="https://www.runoob.com/wp-content/uploads/2014/08/state_pattern_uml_diagram.png" alt="State Pattern"></p>
<p>对于if 比较多且复杂的时候会考虑</p>
<p>然后作为简单的练习有 很多算法上的，比如AC自动机等等</p>
<h2 id="空对象模式（Null-Object-Pattern）"><a href="#空对象模式（Null-Object-Pattern）" class="headerlink" title="空对象模式（Null Object Pattern）"></a>空对象模式（Null Object Pattern）</h2><p>一个空对象取代 NULL 对象实例的检查。Null 对象不是检查空值，而是反应一个不做任何动作的关系。这样的 Null 对象也可以在数据不可用的时候提供默认的行为。</p>
<p><img data-src="https://www.runoob.com/wp-content/uploads/2014/08/null_pattern_uml_diagram.jpg" alt="Null object"></p>
<p>个人感觉可以看作是一种 数据的兜底行为,这个感觉要看具体是希望 抛错出去还是说用兜底行为保护，看具体业务希望</p>
<h2 id="策略模式（Strategy-Pattern）"><a href="#策略模式（Strategy-Pattern）" class="headerlink" title="策略模式（Strategy Pattern）"></a>策略模式（Strategy Pattern）</h2><p><img data-src="https://www.runoob.com/wp-content/uploads/2014/08/strategy_pattern_uml_diagram.jpg" alt="Strategy"></p>
<p>多个封装起来可以“替换”的策略类</p>
<p>比如复杂的决策功能而不是简单的state</p>
<h2 id="模板模式（Template-Pattern）"><a href="#模板模式（Template-Pattern）" class="headerlink" title="模板模式（Template Pattern）"></a>模板模式（Template Pattern）</h2><p><img data-src="https://www.runoob.com/wp-content/uploads/2014/08/template_pattern_uml_diagram.jpg" alt="template"></p>
<p>这样看 之前的 基类模式写的oiTerminal 应该是属于模板模式的</p>
<h2 id="访问者模式（Visitor-Pattern）"><a href="#访问者模式（Visitor-Pattern）" class="headerlink" title="访问者模式（Visitor Pattern）"></a>访问者模式（Visitor Pattern）</h2><p><img data-src="https://www.runoob.com/wp-content/uploads/2014/08/visitor_pattern_uml_diagram.jpg" alt="visitor"></p>
<p>需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而需要避免让这些操作”污染”这些对象的类，使用访问者模式将这些封装到类中。</p>
<p>也就是　某一些方法　不应该直接放在　类和子类中时</p>
<p>优点： 1、符合单一职责原则。 2、优秀的扩展性。 3、灵活性。</p>
<p>缺点： 1、具体元素对访问者公布细节，违反了迪米特原则。 2、具体元素变更比较困难。 3、违反了依赖倒置原则，依赖了具体类，没有依赖抽象。</p>
<p>结构内很少改变　但需要在对象结构上定义新的操作</p>
<h1 id="J2EE-模式"><a href="#J2EE-模式" class="headerlink" title="J2EE 模式"></a>J2EE 模式</h1><p>这些设计模式特别关注表示层。这些模式是由 Sun Java Center 鉴定的。</p>
<h2 id="MVC-模式（MVC-Pattern）"><a href="#MVC-模式（MVC-Pattern）" class="headerlink" title="MVC 模式（MVC Pattern）"></a>MVC 模式（MVC Pattern）</h2><p><img data-src="https://www.runoob.com/wp-content/uploads/2014/08/1200px-ModelViewControllerDiagram2.svg_.png" alt="mvc"></p>
<p>Model（模型） - 模型代表一个存取数据的对象或 JAVA POJO。它也可以带有逻辑，在数据变化时更新控制器。</p>
<p>View（视图） - 视图代表模型包含的数据的可视化。</p>
<p>Controller（控制器） - 控制器作用于模型和视图上。它控制数据流向模型对象，并在数据变化时更新视图。它使视图与模型分离开。</p>
<p><img data-src="https://www.runoob.com/wp-content/uploads/2014/08/mvc_pattern_uml_diagram.jpg" alt="mvc pattern"></p>
<h2 id="业务代表模式（Business-Delegate-Pattern）"><a href="#业务代表模式（Business-Delegate-Pattern）" class="headerlink" title="业务代表模式（Business Delegate Pattern）"></a>业务代表模式（Business Delegate Pattern）</h2><p>客户端（Client） - 表示层代码可以是 JSP、servlet 或 UI java 代码。</p>
<p>业务代表（Business Delegate） - 一个为客户端实体提供的入口类，它提供了对业务服务方法的访问。</p>
<p>查询服务（LookUp Service） - 查找服务对象负责获取相关的业务实现，并提供业务对象对业务代表对象的访问。</p>
<p>业务服务（Business Service） - 业务服务接口。实现了该业务服务的实体类，提供了实际的业务实现逻辑。</p>
<p><img data-src="https://www.runoob.com/wp-content/uploads/2014/08/business_delegate_pattern_uml_diagram2.png" alt="Business delegate"></p>
<p>我个人里的理解是　比如　有前端和服务端的交互，那么服务端会开发一层扁平的　接口给前端使用，前端直接调用的这一层就是</p>
<p>隐藏了内部实现</p>
<h2 id="组合实体模式（Composite-Entity-Pattern）"><a href="#组合实体模式（Composite-Entity-Pattern）" class="headerlink" title="组合实体模式（Composite Entity Pattern）"></a>组合实体模式（Composite Entity Pattern）</h2><p><img data-src="https://www.runoob.com/wp-content/uploads/2014/08/compositeentity_pattern_uml_diagram.jpg" alt="Composite"></p>
<p>组合实体模式（Composite Entity Pattern）用在 EJB 持久化机制中。一个组合实体是一个 EJB 实体 bean，代表了对象的图解。当更新一个组合实体时，内部依赖对象 beans 会自动更新，因为它们是由 EJB 实体 bean 管理的。以下是组合实体 bean 的参与者。</p>
<ul>
<li><p>组合实体（Composite Entity） - 它是主要的实体 bean。它可以是粗粒的，或者可以包含一个粗粒度对象，用于持续生命周期。</p>
</li>
<li><p>粗粒度对象（Coarse-Grained Object） - 该对象包含依赖对象。它有自己的生命周期，也能管理依赖对象的生命周期。</p>
</li>
<li><p>依赖对象（Dependent Object） - 依赖对象是一个持续生命周期依赖于粗粒度对象的对象。</p>
</li>
<li><p>策略（Strategies） - 策略表示如何实现组合实体。</p>
</li>
</ul>
<p>没有理解到　具体的目的和解决的问题，查wikipedia有说，　消除实体之间关系 减少实体bean提高可管理性。</p>
<h2 id="数据访问对象模式（Data-Access-Object-Pattern）"><a href="#数据访问对象模式（Data-Access-Object-Pattern）" class="headerlink" title="数据访问对象模式（Data Access Object Pattern）"></a>数据访问对象模式（Data Access Object Pattern）</h2><p>数据访问对象模式（Data Access Object Pattern）或 DAO 模式用于把低级的数据访问 API 或操作从高级的业务服务中分离出来。以下是数据访问对象模式的参与者。</p>
<p>数据访问对象接口（Data Access Object Interface） - 该接口定义了在一个模型对象上要执行的标准操作。</p>
<p>数据访问对象实体类（Data Access Object concrete class） - 该类实现了上述的接口。该类负责从数据源获取数据，数据源可以是数据库，也可以是 xml，或者是其他的存储机制。</p>
<p>模型对象&#x2F;数值对象（Model Object&#x2F;Value Object） - 该对象是简单的 POJO，包含了 get&#x2F;set 方法来存储通过使用 DAO 类检索到的数据。</p>
<p><img data-src="https://www.runoob.com/wp-content/uploads/2014/08/dao_pattern_uml_diagram.jpg" alt="Data Access Object"></p>
<p>原来DAO的中文全称是这个</p>
<p>DAO在我的印象的java中是连接 数据库 和 java代码的</p>
<h2 id="前端控制器模式（Front-Controller-Pattern）"><a href="#前端控制器模式（Front-Controller-Pattern）" class="headerlink" title="前端控制器模式（Front Controller Pattern）"></a>前端控制器模式（Front Controller Pattern）</h2><p>前端控制器模式（Front Controller Pattern）是用来提供一个集中的请求处理机制，所有的请求都将由一个单一的处理程序处理。该处理程序可以做认证&#x2F;授权&#x2F;记录日志，或者跟踪请求，然后把请求传给相应的处理程序。以下是这种设计模式的实体。</p>
<p>前端控制器（Front Controller） - 处理应用程序所有类型请求的单个处理程序，应用程序可以是基于 web 的应用程序，也可以是基于桌面的应用程序。</p>
<p>调度器（Dispatcher） - 前端控制器可能使用一个调度器对象来调度请求到相应的具体处理程序。</p>
<p>视图（View） - 视图是为请求而创建的对象。</p>
<p><img data-src="https://www.runoob.com/wp-content/uploads/2014/08/frontcontroller_pattern_uml_diagram.jpg" alt="Front Controller"></p>
<p>这个不是很理解 这样划分出的模式</p>
<p>我感觉上面没有讲到单独的dispatcher模式 ，但是有提到 业务代表模式</p>
<p>然后就这个图上看，我感觉 像是 业务代表模式和dispatcher模式的融合</p>
<h2 id="拦截过滤器模式（Intercepting-Filter-Pattern）"><a href="#拦截过滤器模式（Intercepting-Filter-Pattern）" class="headerlink" title="拦截过滤器模式（Intercepting Filter Pattern）"></a>拦截过滤器模式（Intercepting Filter Pattern）</h2><p>拦截过滤器模式（Intercepting Filter Pattern）用于对应用程序的请求或响应做一些预处理&#x2F;后处理。定义过滤器，并在把请求传给实际目标应用程序之前应用在请求上。过滤器可以做认证&#x2F;授权&#x2F;记录日志，或者跟踪请求，然后把请求传给相应的处理程序。以下是这种设计模式的实体。</p>
<p>过滤器（Filter） - 过滤器在请求处理程序执行请求之前或之后，执行某些任务。</p>
<p>过滤器链（Filter Chain） - 过滤器链带有多个过滤器，并在 Target 上按照定义的顺序执行这些过滤器。</p>
<p>Target - Target 对象是请求处理程序。</p>
<p>过滤管理器（Filter Manager） - 过滤管理器管理过滤器和过滤器链。</p>
<p>客户端（Client） - Client 是向 Target 对象发送请求的对象。</p>
<p><img data-src="https://www.runoob.com/wp-content/uploads/2014/08/interceptingfilter_pattern_uml_diagram.jpg" alt="intercepting filter"></p>
<p>为什么看下面的实现代码 感觉是让每一个过滤管理器 都执行一边操作</p>
<p>而 过滤器链更像是一系列操作函数的数组。</p>
<p>执行过程是让数组中的一系列操作都 对输入数据执行一遍</p>
<h2 id="服务定位器模式（Service-Locator-Pattern）"><a href="#服务定位器模式（Service-Locator-Pattern）" class="headerlink" title="服务定位器模式（Service Locator Pattern）"></a>服务定位器模式（Service Locator Pattern）</h2><p>服务定位器模式（Service Locator Pattern）用在我们想使用 JNDI 查询定位各种服务的时候。考虑到为某个服务查找 JNDI 的代价很高，服务定位器模式充分利用了缓存技术。在首次请求某个服务时，服务定位器在 JNDI 中查找服务，并缓存该服务对象。当再次请求相同的服务时，服务定位器会在它的缓存中查找，这样可以在很大程度上提高应用程序的性能。以下是这种设计模式的实体。</p>
<ul>
<li><p>服务（Service） - 实际处理请求的服务。对这种服务的引用可以在 JNDI 服务器中查找到。</p>
</li>
<li><p>Context &#x2F; 初始的 Context - JNDI Context 带有对要查找的服务的引用。</p>
</li>
<li><p>服务定位器（Service Locator） - 服务定位器是通过 JNDI 查找和缓存服务来获取服务的单点接触。</p>
</li>
<li><p>缓存（Cache） - 缓存存储服务的引用，以便复用它们。</p>
</li>
<li><p>客户端（Client） - Client 是通过 ServiceLocator 调用服务的对象</p>
</li>
</ul>
<p><img data-src="https://www.runoob.com/wp-content/uploads/2014/08/servicelocator_pattern_uml_diagram.jpg" alt="Service Locator"></p>
<p>感觉算是上面 模式的合体了</p>
<h2 id="传输对象模式（Transfer-Object-Pattern）"><a href="#传输对象模式（Transfer-Object-Pattern）" class="headerlink" title="传输对象模式（Transfer Object Pattern）"></a>传输对象模式（Transfer Object Pattern）</h2><p><img data-src="https://www.runoob.com/wp-content/uploads/2014/08/transferobject_pattern_uml_diagram.jpg" alt="Transfer Object"></p>
<p>传输对象模式（Transfer Object Pattern）用于从客户端向服务器一次性传递带有多个属性的数据。传输对象也被称为数值对象。传输对象是一个具有 getter&#x2F;setter 方法的简单的 POJO 类，它是可序列化的，所以它可以通过网络传输。它没有任何的行为。服务器端的业务类通常从数据库读取数据，然后填充 POJO，并把它发送到客户端或按值传递它。对于客户端，传输对象是只读的。客户端可以创建自己的传输对象，并把它传递给服务器，以便一次性更新数据库中的数值。以下是这种设计模式的实体。</p>
<ul>
<li>业务对象（Business Object） - 为传输对象填充数据的业务服务。</li>
<li>传输对象（Transfer Object） - 简单的 POJO，只有设置&#x2F;获取属性的方法。</li>
<li>客户端（Client） - 客户端可以发送请求或者发送传输对象到业务对象。</li>
</ul>
<p>我们将创建一个作为业务对象的 StudentBO 和作为传输对象的 StudentVO，它们都代表了我们的实体。</p>
]]></content>
      <categories>
        <category>notes</category>
        <category>book</category>
      </categories>
      <tags>
        <tag>design pattern</tag>
      </tags>
  </entry>
  <entry>
    <title>vue router 源码阅读</title>
    <url>/Blog/19-08-30-vuerouter/</url>
    <content><![CDATA[<p>本文对应版本 <code>638278b334199f17e052a54a0837c97624940c0c</code></p>
<blockquote>
<p>获得代码</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git remote add origin https://github.com/vuejs/vue-router.git</span><br><span class="line">git fetch origin 638278b334199f17e052a54a0837c97624940c0c</span><br><span class="line">git reset --hard FETCH_HEAD</span><br></pre></td></tr></table></figure>

<h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><p><a href="https://cn.vuejs.org/v2/guide/mixins.html">https://cn.vuejs.org/v2/guide/mixins.html</a></p>
<p><a href="https://cn.vuejs.org/v2/guide/plugins.html">https://cn.vuejs.org/v2/guide/plugins.html</a></p>
<h1 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h1><table>
<thead>
<tr>
<th align="right">行数</th>
<th align="left">文件</th>
</tr>
</thead>
<tbody><tr>
<td align="right">262</td>
<td align="left"><a href="#install-js">index.js</a></td>
</tr>
<tr>
<td align="right">200</td>
<td align="left"><a href="#create-matcher-js">create-matcher.js</a></td>
</tr>
<tr>
<td align="right">353</td>
<td align="left"><a href="#base-js">history&#x2F;base.js</a></td>
</tr>
<tr>
<td align="right">22</td>
<td align="left"><a href="#errors-js">history&#x2F;errors.js</a></td>
</tr>
<tr>
<td align="right">69</td>
<td align="left"><a href="#abstract-js">history&#x2F;abstract.js</a></td>
</tr>
<tr>
<td align="right">80</td>
<td align="left"><a href="#html5-js">history&#x2F;html5.js</a></td>
</tr>
<tr>
<td align="right">157</td>
<td align="left"><a href="#hash-js">history&#x2F;hash.js</a></td>
</tr>
<tr>
<td align="right">190</td>
<td align="left"><a href="#link-js">components&#x2F;link.js</a></td>
</tr>
<tr>
<td align="right">124</td>
<td align="left"><a href="#view-js">components&#x2F;view.js</a></td>
</tr>
<tr>
<td align="right">52</td>
<td align="left"><a href="#install-js">install.js</a></td>
</tr>
<tr>
<td align="right">193</td>
<td align="left"><a href="#create-route-map-js">create-route-map.js</a></td>
</tr>
<tr>
<td align="right">6</td>
<td align="left"><a href="#misc-js">util&#x2F;misc.js</a></td>
</tr>
<tr>
<td align="right">95</td>
<td align="left"><a href="#query-js">util&#x2F;query.js</a></td>
</tr>
<tr>
<td align="right">3</td>
<td align="left"><a href="#dom-js">util&#x2F;dom.js</a></td>
</tr>
<tr>
<td align="right">25</td>
<td align="left"><a href="#warn-js">util&#x2F;warn.js</a></td>
</tr>
<tr>
<td align="right">152</td>
<td align="left"><a href="#scroll-js">util&#x2F;scroll.js</a></td>
</tr>
<tr>
<td align="right">35</td>
<td align="left"><a href="#params-js">util&#x2F;params.js</a></td>
</tr>
<tr>
<td align="right">132</td>
<td align="left"><a href="#route-js">util&#x2F;route.js</a></td>
</tr>
<tr>
<td align="right">64</td>
<td align="left"><a href="#location-js">util&#x2F;location.js</a></td>
</tr>
<tr>
<td align="right">22</td>
<td align="left"><a href="#state-key-js">util&#x2F;state-key.js</a></td>
</tr>
<tr>
<td align="right">18</td>
<td align="left"><a href="#async-js">util&#x2F;async.js</a></td>
</tr>
<tr>
<td align="right">42</td>
<td align="left"><a href="#push-state-js">util&#x2F;push-state.js</a></td>
</tr>
<tr>
<td align="right">74</td>
<td align="left"><a href="#path-js">util&#x2F;path.js</a></td>
</tr>
<tr>
<td align="right">108</td>
<td align="left"><a href="#resolve-components-js">util&#x2F;resolve-components.js</a></td>
</tr>
</tbody></table>
<p>总共2478行 </p>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">src/</span><br><span class="line">├── components</span><br><span class="line">│   ├── link.js 控制url显示</span><br><span class="line">│   └── view.js 控制页面渲染</span><br><span class="line">├── create-matcher.js 路由匹配</span><br><span class="line">├── create-route-map.js</span><br><span class="line">├── history</span><br><span class="line">│   ├── abstract.js</span><br><span class="line">│   ├── base.js</span><br><span class="line">│   ├── errors.js</span><br><span class="line">│   ├── hash.js</span><br><span class="line">│   └── html5.js</span><br><span class="line">├── index.js 包含 VueRouter 类</span><br><span class="line">├── install.js 日常mixin</span><br><span class="line">└── util</span><br><span class="line">    ├── async.js</span><br><span class="line">    ├── dom.js</span><br><span class="line">    ├── location.js</span><br><span class="line">    ├── misc.js</span><br><span class="line">    ├── params.js</span><br><span class="line">    ├── path.js</span><br><span class="line">    ├── push-state.js</span><br><span class="line">    ├── query.js</span><br><span class="line">    ├── resolve-components.js</span><br><span class="line">    ├── route.js</span><br><span class="line">    ├── scroll.js</span><br><span class="line">    ├── state-key.js</span><br><span class="line">    └── warn.js</span><br></pre></td></tr></table></figure>

<p>回顾那个只有1100行左右的vuex源码，你发现 除了两者都有<code>index.js</code>,其它目录结构大不相同了</p>
<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>首先我们看一段代码，最好先了解它的功能，所以没有用过vue-router的建议先照着tutorial知道它大概的功能</p>
<p>然后看看源码里的demo:</p>
<p>在<code>npm install</code>后 <code>PORT=8085 npm run dev</code>即可在<code>localhost:8085</code>上查看，把上面每个example都看一看</p>
<p>然后就可以看看flow文件夹里的，也不长,’类’的数量也不多，通过阅读flow的文件，你可以对 整个router有个印象</p>
<p>从代码使用上看</p>
<ul>
<li>实例类router</li>
<li>配置路径 和 对应component</li>
<li>页面<code>&lt;router-view&gt;</code>,<code>&lt;router-link&gt;</code> 以及 a标签等跳转</li>
<li>Vue.use(VueRouter) &#x2F;&#x2F; 注册插件</li>
<li>new Vue({router传入实例})</li>
</ul>
<p>this上会有<code>$route</code>和<code>$router</code></p>
<h1 id="src-x2F"><a href="#src-x2F" class="headerlink" title="src&#x2F;"></a>src&#x2F;</h1><h2 id="代码阅读"><a href="#代码阅读" class="headerlink" title="代码阅读"></a>代码阅读</h2><ol>
<li>先看<a href="#install-js">install.js</a>,调用<code>Vue.mixin</code> 注入</li>
<li>然后<a href="#index-js">index.js</a>, 看完这一部分基本 就大概看到了 主要是靠XXXHistory来 实现 <code>this.history</code>然后方法 不少只是对 <code>this.history</code>的方法转发</li>
<li>既然知道了主要是XXXHistory来实现，那么 反过来 先按照顺序看<a href="#util">util</a>文件夹,伴随着test里的测试用例看完util的代码,把大多代码看懂即可，少部分比较复杂也没有测试用例的大自看看</li>
<li>然后看<code>history</code>的代码,顺序就<a href="#errors-js">errors.js</a> ,<a href="#base-js">base.js</a>,最后 <code>abstract/hash/html5</code>这三个任意顺序</li>
<li>然后是两个<code>create-*.js</code>，工具人 工具函数</li>
<li>最后看两个<code>components</code></li>
</ol>
<p><strong>下面目录是按字典序排列的,不是按照阅读顺序</strong></p>
<h2 id="components"><a href="#components" class="headerlink" title="components"></a>components</h2><h3 id="link-js"><a href="#link-js" class="headerlink" title="link.js"></a>link.js</h3><p>emmm, <code>noop = ()=&gt;&#123;&#125;</code></p>
<p>所以 也就会想到说 ，是 函数内 增加一堆if来处理 有值 无值 空值，还是说 强行要求传入符合格式,这两种方式 如何选择</p>
<p>也就是 render函数</p>
<p>可以看到 有从 初始化的options中 读取 linkActiveClass&#x2F;linkExactActiveClass用什么 或者用默认的<code>router-link-active</code>&#x2F;<code>router-link-exact-active</code></p>
<p>这里实现了一个 <code>guardEvent(e)</code> 不会拦截 <code>metaKey,altKey,ctrlKey,shiftKey</code>等等</p>
<p>当拦截时，执行replace或者push</p>
<p>定义变量on配置了click和 传入的event或event数组里所有事件 调用 handler也就是 guardEvent</p>
<p>这里通过 <code>this.$scopedSlots.default(&#123;</code> 拿去默认slot</p>
<p>然后对它渲染， 这里又可以看到 如果有多个default slot,在production时会报warn</p>
<p>然后 props的tag默认是’a’标签，</p>
<p>如果是 <code>tag==&#39;a&#39;</code>那么 绑上<code>on</code>和<code>attrs</code></p>
<p>如果不是<code>tag==&#39;a&#39;</code> 则<code>// find the first &lt;a&gt; child and apply listener and href</code></p>
<p><code>const a = findAnchor(this.$slots.default)</code> 递归 找第一个 achild</p>
<p>如果没找到<code>data.on = on;</code></p>
<p>最后 调用 <code>h(this.tag, data包含了on class 等等, this.$slots.default)</code> </p>
<p>其中提供 的两个辅助函数 <code>guardEvent</code>和<code>findAnchor</code>分别时 用来 拦截默认 a标签事件和 深搜找到首个a标签的</p>
<h3 id="view-js"><a href="#view-js" class="headerlink" title="view.js"></a>view.js</h3><p>也就是 渲染html上的 <code>RouterView</code> 或者说<code>&lt;router-view&gt;</code></p>
<p>functional:true</p>
<p>意味着 没有响应式数据，没有this上下文</p>
<p><a href="https://cn.vuejs.org/v2/guide/render-function.html#%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BB%84%E4%BB%B6">https://cn.vuejs.org/v2/guide/render-function.html#%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BB%84%E4%BB%B6</a></p>
<p>接受一个props, </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">name</span>: &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">  <span class="attr">default</span>: <span class="string">&#x27;default&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到接受的render 也和 link的不一样,link的是 <code>render(h)</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">render (_, &#123; props, children, parent, data &#125;) &#123;</span><br></pre></td></tr></table></figure>

<p>给devtools用的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// used by devtools to display a router-view badge</span></span><br><span class="line">data.<span class="property">routerView</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>因为没有this,没有接受 h ，这里是通过 <code>h = parent.$createElement</code></p>
<p>此外 <code>$route</code>,<code>_routerViewCache</code>也是从 parent拿的 </p>
<p>通过 比较 <code>parent == parent._routerRoot</code> 来看parent是否为根节点,并递归向上找根节点</p>
<p>如果 某个祖先上有<code>parent.$vnode.data.routerView</code> 那么 <code>深度计数++</code></p>
<p>如果 某个祖先上有<code>parent.$vnode.data.keepAlive</code>且<code>parent._inactive</code> 那么 inactive标识为 true</p>
<p><code>data.routerViewDepth = 深度计数</code></p>
<p>如果非活跃</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (inactive) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">h</span>(cache[name], data, children)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过 <code>$route.matched[深度]</code> 当前的路由的matched数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> matched = route.<span class="property">matched</span>[depth]</span><br><span class="line"><span class="comment">// render empty node if no matched route</span></span><br><span class="line"><span class="keyword">if</span> (!matched) &#123;</span><br><span class="line">  cache[name] = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">h</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>更新cache指针</p>
<p><code>const component = cache[name] = matched.components[name]</code></p>
<p>也就是 我们在<code>src/install.js</code>中看到的 <code>registerRouteInstance</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// attach instance registration hook</span></span><br><span class="line"><span class="comment">// this will be called in the instance&#x27;s injected lifecycle hooks</span></span><br><span class="line">data.<span class="property">registerRouteInstance</span> = <span class="function">(<span class="params">vm, val</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// val could be undefined for unregistration</span></span><br><span class="line">  <span class="keyword">const</span> current = matched.<span class="property">instances</span>[name]</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    (val &amp;&amp; current !== vm) ||</span><br><span class="line">    (!val &amp;&amp; current === vm)</span><br><span class="line">  ) &#123;</span><br><span class="line">    matched.<span class="property">instances</span>[name] = val</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注册 prepatch 和 init的钩子,这个一个应该是 vue相关的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// also register instance in prepatch hook</span></span><br><span class="line"><span class="comment">// in case the same component instance is reused across different routes</span></span><br><span class="line">;(data.<span class="property">hook</span> || (data.<span class="property">hook</span> = &#123;&#125;)).<span class="property">prepatch</span> = <span class="function">(<span class="params">_, vnode</span>) =&gt;</span> &#123;</span><br><span class="line">  matched.<span class="property">instances</span>[name] = vnode.<span class="property">componentInstance</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// register instance in init hook</span></span><br><span class="line"><span class="comment">// in case kept-alive component be actived when routes changed</span></span><br><span class="line">data.<span class="property">hook</span>.<span class="property">init</span> = <span class="function">(<span class="params">vnode</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (vnode.<span class="property">data</span>.<span class="property">keepAlive</span> &amp;&amp;</span><br><span class="line">    vnode.<span class="property">componentInstance</span> &amp;&amp;</span><br><span class="line">    vnode.<span class="property">componentInstance</span> !== matched.<span class="property">instances</span>[name]</span><br><span class="line">  ) &#123;</span><br><span class="line">    matched.<span class="property">instances</span>[name] = vnode.<span class="property">componentInstance</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只搜到了 <code>https://github.com/vuejs/vue/issues/8657</code></p>
<p>最后是 传递<code>matched.props[name]</code>的内容</p>
<p>具体代码就是 把在data.props中,不在 components.props中的 key以及对应的值搬运到 data.attrs里</p>
<p>最后 <code>return h(component, data, children)</code></p>
<blockquote>
<p>层级<code>router-view</code>实现原理</p>
</blockquote>
<p><code>index.js -&gt; createMatcher-&gt; createRoute -&gt; .matched = record ? formatMatch(record) : []</code></p>
<p>其中record是 RouteRecord类型,formatMatch通过 递归 parent 来把 它变 数组</p>
<p>其中parent的来源 是<code>create-route-map</code>中 <code>addRouteRecord</code>递归计算的</p>
<p>然后 在 解析 元素时 可以通过当前 <code>$route.matched[depth]</code>直接获得实例</p>
<h2 id="create-matcher-js"><a href="#create-matcher-js" class="headerlink" title="create-matcher.js"></a>create-matcher.js</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createMatcher</span> (</span><br><span class="line">  <span class="attr">routes</span>: <span class="title class_">Array</span>&lt;<span class="title class_">RouteConfig</span>&gt;,</span><br><span class="line">  <span class="attr">router</span>: <span class="title class_">VueRouter</span></span><br><span class="line">): <span class="title class_">Matcher</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; pathList, pathMap, nameMap &#125; = <span class="title function_">createRouteMap</span>(routes)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">match</span> (</span><br><span class="line">  <span class="attr">raw</span>: <span class="title class_">RawLocation</span>,</span><br><span class="line">  currentRoute?: <span class="title class_">Route</span>,</span><br><span class="line">  redirectedFrom?: <span class="title class_">Location</span></span><br><span class="line">): <span class="title class_">Route</span> &#123;</span><br></pre></td></tr></table></figure>

<p><code>匹配name(nameMap找) -&gt; 匹配 location.path(pathList + pathMap) -&gt; create 一个新的Route</code></p>
<p>这里用list 也可以看出 这里期望的个数应该要小(?)，否则效率O(n)大了性能会较差?(不过O(n*操作)似乎1000个也不会很久? 反正这也不是频繁操作?所以不用在意?</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">redirect</span> (</span><br><span class="line">  <span class="attr">record</span>: <span class="title class_">RouteRecord</span>,</span><br><span class="line">  <span class="attr">location</span>: <span class="title class_">Location</span></span><br><span class="line">): <span class="title class_">Route</span> &#123;</span><br></pre></td></tr></table></figure>

<p>同样是<code>redirect（record.redirect）</code>中的 name匹配 path匹配</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">alias</span> (</span><br><span class="line">  <span class="attr">record</span>: <span class="title class_">RouteRecord</span>,</span><br><span class="line">  <span class="attr">location</span>: <span class="title class_">Location</span>,</span><br><span class="line">  <span class="attr">matchAs</span>: string</span><br><span class="line">): <span class="title class_">Route</span> &#123;</span><br></pre></td></tr></table></figure>

<p>通过匹配 <code>fillParams(matchAs, location.params,...)</code> 到path 同样返回Route</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">_createRoute</span> (</span><br><span class="line">  <span class="attr">record</span>: ?<span class="title class_">RouteRecord</span>,</span><br><span class="line">  <span class="attr">location</span>: <span class="title class_">Location</span>,</span><br><span class="line">  redirectedFrom?: <span class="title class_">Location</span></span><br><span class="line">): <span class="title class_">Route</span> &#123;</span><br></pre></td></tr></table></figure>

<p>再调用 <code>真的createRoute</code> 或者 调上面的 <code>redirect/alias</code> 只要 <code>record.redirect/matchAs</code>存在， 也就是 可能产生无限循环?的了 </p>
<h2 id="create-route-map-js"><a href="#create-route-map-js" class="headerlink" title="create-route-map.js"></a>create-route-map.js</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createRouteMap</span> (</span><br><span class="line">  <span class="attr">routes</span>: <span class="title class_">Array</span>&lt;<span class="title class_">RouteConfig</span>&gt;,</span><br><span class="line">  oldPathList?: <span class="title class_">Array</span>&lt;string&gt;,</span><br><span class="line">  oldPathMap?: <span class="title class_">Dictionary</span>&lt;<span class="title class_">RouteRecord</span>&gt;,</span><br><span class="line">  oldNameMap?: <span class="title class_">Dictionary</span>&lt;<span class="title class_">RouteRecord</span>&gt;</span><br><span class="line">): &#123;</span><br><span class="line">  <span class="attr">pathList</span>: <span class="title class_">Array</span>&lt;string&gt;,</span><br><span class="line">  <span class="attr">pathMap</span>: <span class="title class_">Dictionary</span>&lt;<span class="title class_">RouteRecord</span>&gt;,</span><br><span class="line">  <span class="attr">nameMap</span>: <span class="title class_">Dictionary</span>&lt;<span class="title class_">RouteRecord</span>&gt;</span><br><span class="line">&#125; &#123;</span><br></pre></td></tr></table></figure>

<p>还会自动把 <code>&#39;*&#39;</code> wildcard routes 放到最后</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">addRouteRecord</span> (</span><br><span class="line">  <span class="attr">pathList</span>: <span class="title class_">Array</span>&lt;string&gt;,</span><br><span class="line">  <span class="attr">pathMap</span>: <span class="title class_">Dictionary</span>&lt;<span class="title class_">RouteRecord</span>&gt;,</span><br><span class="line">  <span class="attr">nameMap</span>: <span class="title class_">Dictionary</span>&lt;<span class="title class_">RouteRecord</span>&gt;,</span><br><span class="line">  <span class="attr">route</span>: <span class="title class_">RouteConfig</span>,</span><br><span class="line">  parent?: <span class="title class_">RouteRecord</span>,</span><br><span class="line">  matchAs?: string</span><br><span class="line">) &#123;</span><br></pre></td></tr></table></figure>

<p>为什么 其他地方 都是直接 用true&#x2F;false,这边 <code>route.caseSensitive</code>要判断<code>typeof === &#39;boolean&#39;</code></p>
<p>递归对<code>.children</code>节点调用 addRouteRecord</p>
<p>这两个函数 主要是封装 对 传入的 pathList,pathMap,nameMap 这些 进行 添加</p>
<p>因为处理了没有传值的情况，所以也可以用于初始化</p>
<h2 id="history"><a href="#history" class="headerlink" title="history"></a>history</h2><h3 id="abstract-js"><a href="#abstract-js" class="headerlink" title="abstract.js"></a>abstract.js</h3><p>正如其名,所有浏览器上地址栏,url，scroll都没有了,取代的 是 实现了 <code>stack:Array&lt;Route&gt;</code>和<code>index:number</code></p>
<h3 id="base-js"><a href="#base-js" class="headerlink" title="base.js"></a>base.js</h3><p>是整个源码中最大的单个文件了, <code>hash/html5/abstract</code> 这三个 都是基于base实现的,反过来想在 index.js中我们有看到根据模式不同 把<code>this.history</code> 赋予了不同的值 也就会想要这三个有共同的基类</p>
<p>对外只提供一个History类</p>
<p>这些 加号 是干嘛的,我看flow的文档只看到 说 readonly,是我没有找到正确的位置吗</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// implemented by sub-classes</span></span><br><span class="line">+<span class="attr">go</span>: <span class="function">(<span class="params">n: number</span>) =&gt;</span> <span class="keyword">void</span></span><br><span class="line">+<span class="attr">push</span>: <span class="function">(<span class="params">loc: RawLocation</span>) =&gt;</span> <span class="keyword">void</span></span><br><span class="line">+<span class="attr">replace</span>: <span class="function">(<span class="params">loc: RawLocation</span>) =&gt;</span> <span class="keyword">void</span></span><br><span class="line">+<span class="attr">ensureURL</span>: <span class="function">(<span class="params">push?: boolean</span>) =&gt;</span> <span class="keyword">void</span></span><br><span class="line">+<span class="attr">getCurrentLocation</span>: <span class="function">() =&gt;</span> string</span><br></pre></td></tr></table></figure>

<p>初始化</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">constructor</span> (<span class="attr">router</span>: <span class="title class_">Router</span>, <span class="attr">base</span>: ?string) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">router</span> = router</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">base</span> = <span class="title function_">normalizeBase</span>(base)</span><br><span class="line">  <span class="comment">// start with a route object that stands for &quot;nowhere&quot;</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">current</span> = <span class="variable constant_">START</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">pending</span> = <span class="literal">null</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">ready</span> = <span class="literal">false</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">readyCbs</span> = []</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">readyErrorCbs</span> = []</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">errorCbs</span> = []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>listen(cb)</code> 简单粗暴 直接 <code>this.cb=cb</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">onReady (<span class="attr">cb</span>: <span class="title class_">Function</span>, <span class="attr">errorCb</span>: ?<span class="title class_">Function</span>) &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>如果当前ready同步执行cb,否则<code>readyCbs</code>数组push进cb,错误回调push进<code>readyErrorCbs</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">onError (<span class="attr">errorCb</span>: <span class="title class_">Function</span>) &#123;<span class="string">`</span></span><br></pre></td></tr></table></figure>

<p>push进<code>errorCbs</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">transitionTo (</span><br><span class="line">  <span class="attr">location</span>: <span class="title class_">RawLocation</span>,</span><br><span class="line">  onComplete?: <span class="title class_">Function</span>,</span><br><span class="line">  onAbort?: <span class="title class_">Function</span></span><br><span class="line">) &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>调用 <code>confirmTransition</code></p>
<p>成功执行<code>this.updateRoute(route)</code> &amp; <code>onComplete(route)</code> &amp; <code>this.ensureURL()</code>调用所有 <code>readyCbs</code> Once</p>
<p>失败<code>onAbort(err)</code> 所有<code>readyErrorCbs</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">confirmTransition (<span class="attr">route</span>: <span class="title class_">Route</span>, <span class="attr">onComplete</span>: <span class="title class_">Function</span>, onAbort?: <span class="title class_">Function</span>) &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>如果目标和当前Route一样, 触发 <code>NavigationDuplicated(route)</code>,调用<code>errorCbs</code>再 调用<code>onAbort(err)</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; updated, deactivated, activated &#125; = <span class="title function_">resolveQueue</span>(</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">current</span>.<span class="property">matched</span>,</span><br><span class="line">  route.<span class="property">matched</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">queue</span>: <span class="title class_">Array</span>&lt;?<span class="title class_">NavigationGuard</span>&gt; = [].<span class="title function_">concat</span>(</span><br><span class="line">  <span class="comment">// in-component leave guards</span></span><br><span class="line">  <span class="title function_">extractLeaveGuards</span>(deactivated),</span><br><span class="line">  <span class="comment">// global before hooks</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">router</span>.<span class="property">beforeHooks</span>,</span><br><span class="line">  <span class="comment">// in-component update hooks</span></span><br><span class="line">  <span class="title function_">extractUpdateHooks</span>(updated),</span><br><span class="line">  <span class="comment">// in-config enter guards</span></span><br><span class="line">  activated.<span class="title function_">map</span>(<span class="function"><span class="params">m</span> =&gt;</span> m.<span class="property">beforeEnter</span>),</span><br><span class="line">  <span class="comment">// async components</span></span><br><span class="line">  <span class="title function_">resolveAsyncComponents</span>(activated)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>设计了一个<code>iterator</code>函数,用<code>runQueue</code>对上面<code>queue</code>进行执行</p>
<p>真是艹了 就非要重复使用变量名吗？？ 这里queue</p>
<p>上面的每个如果都成功了，那么执行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">extractEnterGuards</span>(activated, postEnterCbs, <span class="function">()=&gt;</span> <span class="variable language_">this</span>.<span class="property">current</span> === route)</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">router</span>.<span class="property">resolveHooks</span></span><br></pre></td></tr></table></figure>

<p>这里 各种调用，也就意味着可能 不同步 吗? 反正这边是用 pending在 做 跳转前和跳转后的route一样保证</p>
<p>如果上面再成功则 回调<code>onComplete</code> 和 异步回调所有 <code>postEnterCbs</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">updateRoute (<span class="attr">route</span>: <span class="title class_">Route</span>) &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>更新<code>this.current</code> 回调<code>this.cb</code>,调用所有<code>afterHooks</code></p>
<blockquote>
<p>其它自产自用函数</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">normalizeBase</span> (<span class="attr">base</span>: ?string): string &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>&#x2F;&#x2F; 这里是不是漏处理了<code>file://</code>开头的 对应之前有个bugfix类型</p>
<p>传了base值就前面加个&#x2F;，否则有<code>&lt;base&gt;</code> tag就取 其中base的部分，否则就空</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">resolveQueue</span> (</span><br><span class="line">  <span class="attr">current</span>: <span class="title class_">Array</span>&lt;<span class="title class_">RouteRecord</span>&gt;,</span><br><span class="line">  <span class="attr">next</span>: <span class="title class_">Array</span>&lt;<span class="title class_">RouteRecord</span>&gt;</span><br><span class="line">): &#123;</span><br><span class="line">  <span class="attr">updated</span>: <span class="title class_">Array</span>&lt;<span class="title class_">RouteRecord</span>&gt;,</span><br><span class="line">  <span class="attr">activated</span>: <span class="title class_">Array</span>&lt;<span class="title class_">RouteRecord</span>&gt;,</span><br><span class="line">  <span class="attr">deactivated</span>: <span class="title class_">Array</span>&lt;<span class="title class_">RouteRecord</span>&gt;</span><br><span class="line">&#125; &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>找第一个current和next中不一样的，下标idx,返回 </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">updated</span>: next.<span class="title function_">slice</span>(<span class="number">0</span>, idx),</span><br><span class="line">  <span class="attr">activated</span>: next.<span class="title function_">slice</span>(idx),</span><br><span class="line">  <span class="attr">deactivated</span>: current.<span class="title function_">slice</span>(idx)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">extractGuards</span> (</span><br><span class="line">  <span class="attr">records</span>: <span class="title class_">Array</span>&lt;<span class="title class_">RouteRecord</span>&gt;,</span><br><span class="line">  <span class="attr">name</span>: string,</span><br><span class="line">  <span class="attr">bind</span>: <span class="title class_">Function</span>,</span><br><span class="line">  reverse?: boolean <span class="comment">// 控制是返回的数组的顺序</span></span><br><span class="line">): <span class="title class_">Array</span>&lt;?<span class="title class_">Function</span>&gt; &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">extractGuard</span> (</span><br><span class="line">  <span class="attr">def</span>: <span class="title class_">Object</span> | <span class="title class_">Function</span>,</span><br><span class="line">  <span class="attr">key</span>: string</span><br><span class="line">): <span class="title class_">NavigationGuard</span> | <span class="title class_">Array</span>&lt;<span class="title class_">NavigationGuard</span>&gt; &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>把records中所有 <code>_Vue.extend(具体元素).options[name]</code>处理，如果是数组 对每一个 bind，如果非数组单个bind,最后<code>flatten</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">extractLeaveGuards</span> (<span class="attr">deactivated</span>: <span class="title class_">Array</span>&lt;<span class="title class_">RouteRecord</span>&gt;): <span class="title class_">Array</span>&lt;?<span class="title class_">Function</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">extractGuards</span>(deactivated, <span class="string">&#x27;beforeRouteLeave&#x27;</span>, bindGuard, <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">extractUpdateHooks</span> (<span class="attr">updated</span>: <span class="title class_">Array</span>&lt;<span class="title class_">RouteRecord</span>&gt;): <span class="title class_">Array</span>&lt;?<span class="title class_">Function</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">extractGuards</span>(updated, <span class="string">&#x27;beforeRouteUpdate&#x27;</span>, bindGuard)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bindGuard</span> (<span class="attr">guard</span>: <span class="title class_">NavigationGuard</span>, <span class="attr">instance</span>: ?_Vue): ?<span class="title class_">NavigationGuard</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (instance) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">boundRouteGuard</span> () &#123;</span><br><span class="line">      <span class="keyword">return</span> guard.<span class="title function_">apply</span>(instance, <span class="variable language_">arguments</span>) <span class="comment">// 这里把参数`带`过去</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">extractEnterGuards</span> (</span><br><span class="line"><span class="comment">//  和上面同理绑定的是 &#x27;beforeRouteEnter&#x27; 和 &#x27;bindEnterGuard&#x27;</span></span><br><span class="line">) </span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bindEnterGuard</span> (</span><br><span class="line">  <span class="attr">guard</span>: <span class="title class_">NavigationGuard</span>,</span><br><span class="line">  <span class="attr">match</span>: <span class="title class_">RouteRecord</span>,</span><br><span class="line">  <span class="attr">key</span>: string,</span><br><span class="line">  <span class="attr">cbs</span>: <span class="title class_">Array</span>&lt;<span class="title class_">Function</span>&gt;,</span><br><span class="line">  <span class="attr">isValid</span>: <span class="function">() =&gt;</span> boolean</span><br><span class="line">): <span class="title class_">NavigationGuard</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>增加回调调用poll</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">poll</span> (</span><br><span class="line">  <span class="attr">cb</span>: any, <span class="comment">// somehow flow cannot infer this is a function</span></span><br><span class="line">  <span class="attr">instances</span>: <span class="title class_">Object</span>,</span><br><span class="line">  <span class="attr">key</span>: string,</span><br><span class="line">  <span class="attr">isValid</span>: <span class="function">() =&gt;</span> boolean</span><br><span class="line">) &#123;&#125;</span><br></pre></td></tr></table></figure>

<p><code>instances[key]._isBeingDestroyed</code>为false时 调用<code>cb(instances[key])</code> </p>
<p>这里 用<code>isValid()</code>也就是上面传入的<code>this.current === route</code>+ <code>setTimeout(16ms)</code>来判断要不要调用 poll</p>
<p>这是为了页面跳转了 但是 instances没有实例化完成 所以不停异步尝试?</p>
<h3 id="errors-js"><a href="#errors-js" class="headerlink" title="errors.js"></a>errors.js</h3><p>一个错误类 NavigationDuplicated</p>
<p><code>//support IE9</code> emmm</p>
<h3 id="hash-js"><a href="#hash-js" class="headerlink" title="hash.js"></a>hash.js</h3><p>和 html5,index 一样 都是继承于上面的 History</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// check history fallback deeplinking</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getHash</span> (): string &#123;</span><br><span class="line">  <span class="comment">// We can&#x27;t use window.location.hash here because it&#x27;s not</span></span><br><span class="line">  <span class="comment">// consistent across browsers - Firefox will pre-decode it!</span></span><br><span class="line">  <span class="keyword">let</span> href = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span></span><br><span class="line">  <span class="keyword">const</span> index = href.<span class="title function_">indexOf</span>(<span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">  <span class="comment">// empty path</span></span><br><span class="line">  <span class="keyword">if</span> (index &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">  href = href.<span class="title function_">slice</span>(index + <span class="number">1</span>)</span><br><span class="line">  <span class="comment">// decode the hash but not the search or hash</span></span><br><span class="line">  <span class="comment">// as search(query) is already decoded</span></span><br><span class="line">  <span class="comment">// https://github.com/vuejs/vue-router/issues/2708</span></span><br><span class="line">  <span class="keyword">const</span> searchIndex = href.<span class="title function_">indexOf</span>(<span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (searchIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> hashIndex = href.<span class="title function_">indexOf</span>(<span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (hashIndex &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">      href = <span class="built_in">decodeURI</span>(href.<span class="title function_">slice</span>(<span class="number">0</span>, hashIndex)) + href.<span class="title function_">slice</span>(hashIndex)</span><br><span class="line">    &#125; <span class="keyword">else</span> href = <span class="built_in">decodeURI</span>(href)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (searchIndex &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">      href = <span class="built_in">decodeURI</span>(href.<span class="title function_">slice</span>(<span class="number">0</span>, searchIndex)) + href.<span class="title function_">slice</span>(searchIndex)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> href</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>setupListeners()</code>调用 <code>setupScroll()</code></p>
<p>监听<code>popstate</code>或者<code>hashchange</code> 触发 <code>transitionTo()</code></p>
<p>push和replace也都是 调用 <code>transitionTo()</code> 回调的时候 <code>push/replace Hash()</code>然然后handleScroll, 和onComplete(route)</p>
<h3 id="html5-js"><a href="#html5-js" class="headerlink" title="html5.js"></a>html5.js</h3><p>和 hash不同的是， 在<code>constructor</code>里直接 初始化了 ，比如<code>setupScroll()</code>和 增加<code>popstate</code>事件触发,而不是让index.js调用</p>
<p>在 这里默认 pushState和replaceState都是可以用的</p>
<p>这里我在想 因为兼容而写的代码 值得吗，留多久，多久抛弃呢？</p>
<h2 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h2><p>import引入,不用细看，总之是引入依赖的</p>
<blockquote>
<p>VueRouter类实现</p>
</blockquote>
<p>想说 这种</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="attr">install</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="attr">version</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="attr">app</span>: <span class="built_in">any</span>;</span><br><span class="line"><span class="attr">apps</span>: <span class="title class_">Array</span>&lt;<span class="built_in">any</span>&gt;;</span><br><span class="line"><span class="attr">ready</span>: <span class="built_in">boolean</span>;</span><br><span class="line"><span class="attr">readyCbs</span>: <span class="title class_">Array</span>&lt;<span class="title class_">Function</span>&gt;;</span><br><span class="line"><span class="attr">options</span>: <span class="title class_">RouterOptions</span>;</span><br><span class="line"><span class="attr">mode</span>: <span class="built_in">string</span>;</span><br><span class="line"><span class="attr">history</span>: <span class="title class_">HashHistory</span> | <span class="title class_">HTML5History</span> | <span class="title class_">AbstractHistory</span>;</span><br><span class="line"><span class="attr">matcher</span>: <span class="title class_">Matcher</span>;</span><br><span class="line"><span class="attr">fallback</span>: <span class="built_in">boolean</span>;</span><br><span class="line"><span class="attr">beforeHooks</span>: <span class="title class_">Array</span>&lt;?<span class="title class_">NavigationGuard</span>&gt;;</span><br><span class="line"><span class="attr">resolveHooks</span>: <span class="title class_">Array</span>&lt;?<span class="title class_">NavigationGuard</span>&gt;;</span><br><span class="line"><span class="attr">afterHooks</span>: <span class="title class_">Array</span>&lt;?<span class="title class_">AfterNavigationHook</span>&gt;;</span><br></pre></td></tr></table></figure>

<p>写法对阅读来说真香，这是flow还是ts 来着</p>
<ul>
<li>this.matcher &#x3D; createMatcher(options.routes || [], this) &#x2F;&#x2F; 用户传入的routes</li>
</ul>
<p>三种 mode</p>
<p>‘hash’(默认 只识别井号后面的路径前面的忽略? window.location.hash),’history’,’abstract’(服务端node)</p>
<p>分别调用</p>
<ul>
<li>this.history &#x3D; new HTML5History(this, options.base)</li>
<li>this.history &#x3D; new HashHistory(this, options.base, this.fallback)</li>
<li>this.history &#x3D; new AbstractHistory(this, options.base)</li>
</ul>
<p>实例对外提供的方法 整理如下 </p>
<ul>
<li><p>match ( raw: RawLocation, current?: Route, redirectedFrom?: Location): Route<br> 转发了一下&#96;this.matcher.match(…)</p>
</li>
<li><p>get currentRoute (): ?Route 取的<code>this.history.current</code>的内容</p>
</li>
<li><p>init (app: any &#x2F;* Vue component instance *&#x2F;) TODO 暂时不知道这个怎么用</p>
</li>
<li><p>beforeEach (fn: Function): Function</p>
</li>
<li><p>beforeResolve (fn: Function): Function</p>
</li>
<li><p>afterEach (fn: Function): Function<br>这三个 都是i把函数注册通过registerHook注册到对应的XXXHooks数组中,返回的是从数组中移除他们的函数 </p>
</li>
<li><p>onReady (cb: Function, errorCb?: Function)</p>
</li>
<li><p>onError (errorCb: Function)<br> 转发了<code>this.history</code>上对应的方法</p>
</li>
<li><p>push (location: RawLocation, onComplete?: Function, onAbort?: Function)</p>
</li>
<li><p>replace (location: RawLocation, onComplete?: Function, onAbort?: Function)<br> !onComplete 且 !onAbort 且 Promise可用时，返回promise,否则同步执行，都是调用<code>this.history.push/replace(...)</code></p>
</li>
<li><p>go (n: number)</p>
</li>
<li><p>back ()</p>
</li>
<li><p>forward ()<br> 对<code>this.history.go(数值)</code>的转发</p>
</li>
<li><p>getMatchedComponents (to?: RawLocation | Route): Array<any><br> 通过对to解析成一个Route,获取其matched中的所有components</p>
</li>
<li><p>resolve (to: RawLocation,current?: Route,append?: boolean): { location: Location, route: Route, href: string, normalizedTo: Location, resolved: Route }<br> 这里 实际只有三个返回， 其中 location和normalizedTo一样,resolved 和route一样， 多最后两个 只是为了 向后兼容</p>
</li>
<li><p>addRoutes (routes: Array<RouteConfig>)</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">matcher</span>.<span class="title function_">addRoutes</span>(routes)</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">history</span>.<span class="property">current</span> !== <span class="variable constant_">START</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">history</span>.<span class="title function_">transitionTo</span>(<span class="variable language_">this</span>.<span class="property">history</span>.<span class="title function_">getCurrentLocation</span>())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后是两个工具函数</p>
<p>registerHook(list,fn),  注册一个函数fn到list, 返回它的移除函数,概念就是以c++角度看作函数指针可以搜，同时问题就是， 没有防止重复，也就是同一个函数可以 加到list两次，而移除 每次只会移除一个，所以整体还是基于函数指针，并没有完全的实现 返回移除自己的函数。不过只要正确调用就不会出问题</p>
<p>和</p>
<p>createHref 完整路径拼接</p>
<p>最后是 向Vue里注入的 window.Vue.use(VueRouter)</p>
<h2 id="install-js"><a href="#install-js" class="headerlink" title="install.js"></a>install.js</h2><p>防重install</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">beforeCreate</span>(<span class="params"></span>)&#123;</span><br><span class="line">  注入和调用 <span class="title function_">registerInstance</span>(<span class="variable language_">this</span>,<span class="variable language_">this</span>)</span><br><span class="line">  延伸到vm.<span class="property">$options</span>.<span class="property">_parentVnode</span>.<span class="property">data</span>.<span class="title function_">registerRouteInstance</span>(<span class="variable language_">this</span>,<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>mixin 渲染顺序  vue的组件 前序深搜, 子组件从父组件拿</p>
<p>属性定义 <code>$router</code>(实例),<code>$route</code>(当前状态),并且通过<code>Vue.util.defineReactive(this, &#39;_route&#39;, this._router.history.current)</code> 来保证改变时相应式触发</p>
<p>component定义 <code>RouterView</code>和<code>RouterLink</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> strats = <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">optionMergeStrategies</span></span><br><span class="line"><span class="comment">// use the same hook merging strategy for route hooks</span></span><br><span class="line">strats.<span class="property">beforeRouteEnter</span> = strats.<span class="property">beforeRouteLeave</span> = strats.<span class="property">beforeRouteUpdate</span> = strats.<span class="property">created</span></span><br></pre></td></tr></table></figure>

<h2 id="util"><a href="#util" class="headerlink" title="util"></a>util</h2><p>这一块的使用可以看<code>test/unit/specs</code>里的用例</p>
<h3 id="async-js"><a href="#async-js" class="headerlink" title="async.js"></a>async.js</h3><p><code>export function runQueue (queue: Array&lt;?NavigationGuard&gt;, fn: Function, cb: Function) &#123;</code></p>
<p>对数组中逐个调用 函数<code>fn(queue[index],回调)</code>,在上一个回调后调用下一个函数,最后触发<code>cb()</code> </p>
<p>用的 自定义<code>step</code>箭头函数 依次<code>step(index)</code></p>
<h3 id="dom-js"><a href="#dom-js" class="headerlink" title="dom.js"></a>dom.js</h3><p><code>export const inBrowser = typeof window !== &#39;undefined&#39;</code></p>
<h3 id="location-js"><a href="#location-js" class="headerlink" title="location.js"></a>location.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">normalizeLocation</span> (</span><br><span class="line">  <span class="attr">raw</span>: <span class="title class_">RawLocation</span>,</span><br><span class="line">  <span class="attr">current</span>: ?<span class="title class_">Route</span>,</span><br><span class="line">  <span class="attr">append</span>: ?boolean,</span><br><span class="line">  <span class="attr">router</span>: ?<span class="title class_">VueRouter</span></span><br><span class="line">): <span class="title class_">Location</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p><code>_normalized</code>来标记处理过</p>
<p>其它字段 <code>path</code>,<code>query:resolveQuery(...)</code>,<code>hash</code>,<code>name</code>,<code>params</code></p>
<h3 id="misc-js"><a href="#misc-js" class="headerlink" title="misc.js"></a>misc.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">extend</span> (a, b) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> b) &#123;</span><br><span class="line">    a[key] = b[key]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="params-js"><a href="#params-js" class="headerlink" title="params.js"></a>params.js</h3><p>用<code>regexpCompileCache</code> 缓存 编译后的正则</p>
<p>使用<code>path-to-regexp</code>来完成 路径正则匹配</p>
<p><a href="https://www.npmjs.com/package/path-to-regexp">https://www.npmjs.com/package/path-to-regexp</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">fillParams</span> (</span><br><span class="line">  <span class="attr">path</span>: string,</span><br><span class="line">  <span class="attr">params</span>: ?<span class="title class_">Object</span>,</span><br><span class="line">  <span class="attr">routeMsg</span>: string</span><br><span class="line">): string &#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="path-js"><a href="#path-js" class="headerlink" title="path.js"></a>path.js</h3><p>比如这个文件感觉 看测试 比看代码更能理解函数功能</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">resolvePath</span> (</span><br><span class="line">  <span class="attr">relative</span>: string,</span><br><span class="line">  <span class="attr">base</span>: string,</span><br><span class="line">  append?: boolean</span><br><span class="line">): string &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>路径解析咯 甚至还”解析”了 <code>.</code>和<code>..</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">parsePath</span> (<span class="attr">path</span>: string): &#123;</span><br><span class="line">  <span class="attr">path</span>: string; <span class="comment">// 去掉 query和 hash的部分</span></span><br><span class="line">  <span class="attr">query</span>: string; <span class="comment">// 问号以后  </span></span><br><span class="line">  <span class="attr">hash</span>: string; <span class="comment">// 井号及以后</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>cleanPath(path: string):string ,把路径里的连续两个斜杠变为一个斜杠</p>
<h3 id="push-state-js"><a href="#push-state-js" class="headerlink" title="push-state.js"></a>push-state.js</h3><ul>
<li>常量布尔 supportsPushState, 可以从这个源代码 看到特殊判断不支持的ua,剩余的 通过window.history是否有 pushState方法进行判断</li>
<li>function pushState (url?: string, replace?: boolean) { 依赖于 <code>window.history  .pushState/replaceState</code>这俩个那个方法，通过replace参数决定调用哪个,如果挂掉(..) 则改为调用<code>window.location.replace/assign(url)</code>的方法</li>
<li>function replaceState (url?: string) { 调用封装的pushState</li>
</ul>
<p>这里可能挂掉的注释是</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// try...catch the pushState call to get around Safari</span></span><br><span class="line"><span class="comment">// DOM Exception 18 where it limits to 100 pushState calls</span></span><br></pre></td></tr></table></figure>

<h3 id="query-js"><a href="#query-js" class="headerlink" title="query.js"></a>query.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">resolveQuery</span> (</span><br><span class="line">  <span class="attr">query</span>: ?string,</span><br><span class="line">  <span class="attr">extraQuery</span>: <span class="title class_">Dictionary</span>&lt;string&gt; = &#123;&#125;,</span><br><span class="line">  <span class="attr">_parseQuery</span>: ?<span class="title class_">Function</span></span><br><span class="line">): <span class="title class_">Dictionary</span>&lt;string&gt; &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>基本就是,把url里的请求参数query 和 字典里的extraQuery，转化为 Dictionary<string></p>
<p>如果有相同的让extraQuery覆盖query里的 这里明明是可以用<code>misc.js</code>的<code>extend</code> 为何没用&#x3D;。&#x3D; 是有什么考虑么</p>
<p>然后默认内部实现了如上所述的parseQuery函数，你也可以自己实现一个传进去，从测试样例上看，是没有测这个<code>_parseQuery</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">stringifyQuery</span> (<span class="attr">obj</span>: <span class="title class_">Dictionary</span>&lt;string&gt;): string &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>转化为url上的请求参数格式 记得encode</p>
<p>此外就是上面 使用了一些 url的编码解码 函数</p>
<h3 id="resolve-components-js"><a href="#resolve-components-js" class="headerlink" title="resolve-components.js"></a>resolve-components.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">flatMapComponents</span> (</span><br><span class="line">  <span class="attr">matched</span>: <span class="title class_">Array</span>&lt;<span class="title class_">RouteRecord</span>&gt;,</span><br><span class="line">  <span class="attr">fn</span>: <span class="title class_">Function</span></span><br><span class="line">): <span class="title class_">Array</span>&lt;?<span class="title class_">Function</span>&gt; &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>对matched的每个元素<code>m</code>,中<code>m.components</code>的每个<code>key</code> 调用<code>fn(m.components[key],m.instances[key],m,key)</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">resolveAsyncComponents</span> (<span class="attr">matched</span>: <span class="title class_">Array</span>&lt;<span class="title class_">RouteRecord</span>&gt;): <span class="title class_">Function</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>返回一个闭包函数 <code>(to,from,next)=&gt;&#123;&#125;</code></p>
<p>使用了上面的<code>flatMapComponents</code></p>
<p>通过内部 两个变量<code>hasAsync</code>和<code>pending</code>来控制 next()</p>
<p>这里没有使用<code>to</code>和<code>from</code>只有 <code>next()</code>和<code>matched</code> </p>
<p>没有很懂的是 这里<code>def = matched某个 的components[key]</code>,就是其某个<code>_Vue.extend()</code></p>
<p>但是这里<code>resolve,reject</code>都是<code>once</code></p>
<p>下面为什么 既有<code>res = def(resolve,reject)</code>又有 <code>res.then(resolve, reject)</code></p>
<p>emmmmmmmmm所以这里正向功能 是配置所有 <code>components[key]</code> 之后调用 <code>next()</code>?</p>
<p>然后似乎为了兼容不同语法，写了比较神奇的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">flatten</span> (<span class="attr">arr</span>: <span class="title class_">Array</span>&lt;any&gt;): <span class="title class_">Array</span>&lt;any&gt; &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>emmm名为flatten，实际 只是 <code>Array.prototype.concat.apply([],arr)</code>,所以最多flatten一层</p>
<p>比如<code>[1,[2,[3,[4]]]] -&gt; [1,2,[3,[4]]]</code></p>
<h3 id="route-js"><a href="#route-js" class="headerlink" title="route.js"></a>route.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createRoute</span> (</span><br><span class="line">  <span class="attr">record</span>: ?<span class="title class_">RouteRecord</span>,</span><br><span class="line">  <span class="attr">location</span>: <span class="title class_">Location</span>,</span><br><span class="line">  redirectedFrom?: ?<span class="title class_">Location</span>,</span><br><span class="line">  router?: <span class="title class_">VueRouter</span></span><br><span class="line">): <span class="title class_">Route</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>返回的是一个<code>Object.freeze(Route)</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// the starting route that represents the initial state</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">START</span> = <span class="title function_">createRoute</span>(<span class="literal">null</span>, &#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">isSameRoute</span> (<span class="attr">a</span>: <span class="title class_">Route</span>, <span class="attr">b</span>: ?<span class="title class_">Route</span>): boolean &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>如果<code>b=== START</code>,那么 <code>return a===START</code> 所以不会再生成<code>START</code>?</p>
<p>对 a和b的path,name,hash,query,params 这些 需要比较的进行深比较</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">isIncludedRoute</span> (<span class="attr">current</span>: <span class="title class_">Route</span>, <span class="attr">target</span>: <span class="title class_">Route</span>): boolean &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>目标path是当前path的前缀，目标hash为空或者和当前hash相等，目标query的key在当前key中都出现过 &#x3D;.&#x3D;这个规则 好迷啊</p>
<p>这里 有单独实现<code>clone</code>和<code>isObjectEqual</code>两个方法，都实现了深度处理，但是没有实现可能出现的循环引用。不过因为都是 Route中的 “可控制的”参数,认为是不会出现循环引用的。</p>
<h3 id="scroll-js"><a href="#scroll-js" class="headerlink" title="scroll.js"></a>scroll.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">setupScroll</span> () &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>看得出自闭的感受了 这里三个注释 <code>Fix #balabala</code></p>
<p><code>监听popstate =&gt;  export function saveScrollPosition () &#123; positionStore[当前 状态key] = 保存x,y偏移</code> </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">handleScroll</span> (</span><br><span class="line">  <span class="attr">router</span>: <span class="title class_">Router</span>,</span><br><span class="line">  <span class="attr">to</span>: <span class="title class_">Route</span>,</span><br><span class="line">  <span class="attr">from</span>: <span class="title class_">Route</span>,</span><br><span class="line">  <span class="attr">isPop</span>: boolean</span><br><span class="line">) &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>&#x2F;&#x2F; wait until re-render finishes before scrolling</p>
<p><code>router.app.$nextTick()</code>里执行 调用<code>router.options.scrollBehavior.call(router,to,from,isPop?position:null)</code> 来判断是否需要滚动，如果需要<br> 则调用 <code>scrollToPosition(...)</code></p>
<h3 id="state-key-js"><a href="#state-key-js" class="headerlink" title="state-key.js"></a>state-key.js</h3><p>上面文件会用到 <code>gen/get/set StateKey</code>,然后 值是直接取用的 <code>Time.now().toFixed(3)</code></p>
<p>至于<code>Time</code> 可能取 <code>window.performance</code>或者<code>Date</code></p>
<h3 id="warn-js"><a href="#warn-js" class="headerlink" title="warn.js"></a>warn.js</h3><p><code>assert/warn/isError/isExtendedError</code></p>
<p>如果grep代码 发现 都是说 <code>process.env.NODE_ENV !== &#39;production&#39;</code></p>
<p>那么问题来了 为什么 不写成 只在 函数内,外部直接调用</p>
<p>或者说</p>
<p>为什么不写成，传递参数增加一个env?</p>
<p>再或者</p>
<p>详细命名出一个函数 warnNonPro</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Onhashchange 的触发来源</p>
<ul>
<li>修改浏览器地址 增加改变#hash</li>
<li>修改location.href &#x2F; location.hash</li>
<li>点击锚点链接</li>
<li>浏览器前进后退变化</li>
</ul>
<p>hash</p>
<p>routeLink负责</p>
<ul>
<li>阻止默认行为 如click e.preventDefault()</li>
<li>设置 location.hash</li>
</ul>
<p>routeView负责</p>
<ul>
<li>window.addEventListener(‘hashchange’,e&#x3D;&gt;{具体工作 比如页面渲染});</li>
</ul>
<p>history(用的h5 api)</p>
<p>pushState 不触发页面刷新，只改变history对象，是同源策略保护限制的</p>
<p>popstate 页面组件刷新</p>
<p>routeLink负责</p>
<ul>
<li>阻止默认行为 如click e.preventDefault()</li>
<li>polyfill补丁，支持低版本浏览器。新版本的才有history.pushState()</li>
<li>window.history.pushState(对象,link,link);<br>routeView负责</li>
<li>window.addEventListener(‘popstate’,e&#x3D;&gt;{具体工作 比如页面渲染}); 由浏览器前进后退按钮 触发,或者history方法触发</li>
</ul>
<p>不支持pushState会降级到hash模式</p>
<h1 id="examples"><a href="#examples" class="headerlink" title="examples"></a>examples</h1><blockquote>
<p>对照 源码里的 example再来回顾实现</p>
</blockquote>
<p>在源码的<code>examples/</code>文件夹里</p>
<p>通过<code>npm run dev</code>来启动</p>
<h2 id="basic"><a href="#basic" class="headerlink" title="basic"></a>basic</h2><pre><code>mode: &#39;history&#39;,
base: __dirname,
</code></pre>
<p><code>grep -r &quot;base&quot; src/</code> 可以回顾一下 base相关的实现</p>
<pre><code>    &lt;router-link tag=&quot;li&quot; to=&quot;/bar&quot; :event=&quot;[&#39;mousedown&#39;, &#39;touchstart&#39;]&quot;&gt;
      &lt;a&gt;/bar&lt;/a&gt;
    &lt;/router-link&gt;
    
</code></pre>
<p>这一部分 回顾 link的实现 , tag不为a 则会 递归在this.$slots.default找第一个a元素,然后 绑上事件, 然后 event 是对应 在找到的标签a上的所有 on事件改为 阻止默认事件 调用<br><code>router.push/replace</code>,</p>
<p>所以这个<code>/bar</code>鼠标点击下 就会触发， 页面上另一个<code>/bar</code> 要释放才会触发</p>
<p>那么，跟觉源码的逻辑 这样 做后会触发两次 push ,两次 transitionTo，两次 confirmTransition，然后 通过 base.js中的isSameRoute中判读是否是同一个Route,如果是 则调用ensureURL,最后调用 abort,</p>
<p>而 abort中 如果是 NavigationDuplicated的 错误 则不会 warn,会调用 回调函数(如果传递了),</p>
<p>当然 如果你已经在一个路径下 那么你点击 一个指向当前的路由 也会 走上面的逻辑(不是两次),在<code>isSameRoute</code>后就不会再走动</p>
<p>其中的<code>to</code> 是通过<code>router.resolve(this.to,current,this.append)</code>解析出的目标地址</p>
<pre><code>navigateAndIncrement () &#123;
</code></pre>
<p>实现了直接去调用<code>$router.push</code>方法 ,你可以通过浏览器的返回看到push的效果</p>
<pre><code>    &lt;router-link to=&quot;/foo&quot; v-slot=&quot;props&quot;&gt;
      &lt;li :class=&quot;[props.isActive &amp;&amp; &#39;active&#39;, props.isExactActive &amp;&amp; &#39;exact-active&#39;]&quot;&gt;
        &lt;a :href=&quot;props.href&quot; @click=&quot;props.navigate&quot;&gt;&#123;&#123; props.route.path &#125;&#125; (with v-slot).&lt;/a&gt;
      &lt;/li&gt;
    &lt;/router-link&gt;
</code></pre>
<p>这一段 会对应link中的 scopedSlot, 注意到 它并没有 传递<code>activeClass</code> 和 <code>exactActiveClass</code>而是 自己组件里 动态计算class,然后这里 </p>
<p>这里也是把 源码中传递的所有参数都用到了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$scopedSlots</span>.<span class="title function_">default</span>(&#123;</span><br><span class="line">  href,</span><br><span class="line">  route,</span><br><span class="line">  <span class="attr">navigate</span>: handler,</span><br><span class="line">  <span class="attr">isActive</span>: classes[activeClass],</span><br><span class="line">  <span class="attr">isExactActive</span>: classes[exactActiveClass]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>html最下面 </p>
<pre><code>  &lt;pre id=&quot;query-t&quot;&gt;&#123;&#123; $route.query.t &#125;&#125;&lt;/pre&gt;
  &lt;pre id=&quot;hash&quot;&gt;&#123;&#123; $route.hash &#125;&#125;&lt;/pre&gt;
</code></pre>
<p>都是 过程中计算出来的当前 Route上的参数 query</p>
<p>同时可以发现 当 路由改变时 所有 RouterLink 的render函数 都被重新调用</p>
<h2 id="hash-mode"><a href="#hash-mode" class="headerlink" title="hash-mode"></a>hash-mode</h2><p>和basic vimdiff一下 </p>
<p>首先 最主要的变化是 <code>mode:&#39;hash&#39;</code></p>
<p>此外这里加入了 <code>/xxx/:yyy</code>这样的匹配</p>
<p>然后在<code>router-link</code>部分 就只使用了最基本的写法</p>
<p>mode也就是 直接文件<code>history/hash.js</code></p>
<p>然后 冒号路径 同样是 <code>link.js</code>中render里的 router.resolve, 源码反过去搜的话是 <code>index.js: resolve(to...) -&gt;  location.js: normalizeLocation(raw...), -&gt; index.js:match(raw...) -&gt; create-matcher.js:match </code></p>
<p>这里 有点问题! 虽然说<code>index.js::match</code> 和 <code>create-matcher.js</code>里都是有返回Route的,但是，在 match的一些情况下 传入的raw被更改了 比如加上了params，因为 在 normalizeLocation里 返回的location &#x3D;&#x3D; raw,就有了 后面 match中修改改location时修改了 raw,</p>
<p>也就是 说 在link中 这个返回的location可能是带上 params 也可能没有，所以这是不可靠的&#x3D;.&#x3D;</p>
<p>每当这时 就会怀念 c++中的 const引用参数 </p>
<p>然后 当点击时 是触发<code>hash.js::push -&gt; bash.js::transitionTo -&gt; router.match 匹配出Route -&gt; base.js updateRoute 跟心 current = route</code></p>
<p>其中处理冒号格式的是靠 <code>src/util/params.js</code> 中使用’path-to-regexp’,在 match函数中使用 </p>
<p>这样也就是 把 计算出的params 之类的 丢到了<code>$route</code>上</p>
<h2 id="nested-routes"><a href="#nested-routes" class="headerlink" title="nested-routes"></a>nested-routes</h2><ol>
<li>是<code>route</code>表中 有 <code>name&#39;</code> 这样写to就可以 不用写详细路径</li>
</ol>
<p>实现就是靠 <code>create-matcher.js</code>的<code>nameMap</code>来实现<code>名字-&gt; url/:xxx/yy</code> 以及 对应的正则</p>
<p>emmmmm 经过调试 都在 createRouteMap中把 nameMap做好了,在 下面 <code>record=nameMap[name]</code>始终 都有值</p>
<p>路径也在<code>create-matcher.js</code>中的<code>locatoin.path = fillParams</code>合并</p>
<p>例如</p>
<p><code>fillParams(&#39;/parent/qux/:quxId/quux&#39;,&#123;quxId: &quot;1&quot;, zapId: 2&#125;)</code></p>
<p>我们可以尝试添加 <code>fillParams /parent/qux/:quxId/quux &#123;quxId: &quot;1&quot;, zapId: 2&#125;</code></p>
<p>你会发现 点击会跳转到根(如果没有 quxId) 会报warn <code>[vue-router] missing param for named route &quot;quux&quot;: Expected &quot;quxId&quot; to be defined</code></p>
<p>在url上是根但是 在 router-view上 还是 按照 name的层次渲染的</p>
<p>这里一个问题就是 说 name 不能重复 会报错 <code>[vue-router] Duplicate named routes definition: &#123; name: &quot;quuy&quot;, path: &quot;/parent/qux/:quxId/quuy&quot; &#125;</code> 但如果不管的话, name根据不重复建立 只会保存第一个</p>
<p>第二个就是说 即使从<code>xxx/:quxId</code> 直接跳 <code>name:&#39;quux&#39;</code>也是会回到主页, 因为虽然原来 quxId有值,但树形解析 上并没有quxId的值</p>
<ol start="2">
<li>是嵌套的 路由表 和 嵌套的 router-view</li>
</ol>
<p>路由表嵌套 上面1.已经说了，然后 router-view 嵌套 靠的就是上面 源码阅读中讲的 matched 的计算,见<a href="router-view.js">view.js</a></p>
<p>即每一层<code>router-view</code>渲染是通过depth 去<code>$route.matched[depth]</code>取值</p>
<h2 id="named-routes"><a href="#named-routes" class="headerlink" title="named-routes"></a>named-routes</h2><p>基本就是 router配置的时候 带name，然后 router-link 的to时 配置 name,也可以配置 params</p>
<p>没啥新的东西 </p>
<p>上面nested-routes都展示了</p>
<h2 id="named-view"><a href="#named-view" class="headerlink" title="named-view"></a>named-view</h2><p><code>router-view</code> 上加上了 name</p>
<p>路由里配置</p>
<pre><code>  components: &#123;
    default: Baz,
    a: Bar,
    b: Foo
  &#125;
</code></pre>
<p>那么在 取的时候 根据props的name 去<code>matched.components[name]</code>中获得</p>
<h1 id="和vue实例生命周期顺序"><a href="#和vue实例生命周期顺序" class="headerlink" title="和vue实例生命周期顺序"></a>和vue实例生命周期顺序</h1><p>打开<code>codesandbox.io</code> 把<code>main.js</code>替换为下面,记得引入<code>vue-router</code>依赖</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Foo</span> = &#123;</span><br><span class="line">  <span class="attr">template</span>:</span><br><span class="line">    <span class="string">&#x27;&lt;div&gt;&lt;h1&gt;foo&lt;/h1&gt;&lt;router-link to=&quot;/bar&quot;&gt;Go to Bar&lt;/router-link&gt;&lt;/div&gt;&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="title function_">beforeRouteEnter</span>(<span class="params">to, <span class="keyword">from</span>, next</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;foo inner beforeRouteEnter&quot;</span>);</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">beforeRouteUpdate</span>(<span class="params">to, <span class="keyword">from</span>, next</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;foo inner beforeRouteUpdate&quot;</span>);</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">beforeRouteLeave</span>(<span class="params">to, <span class="keyword">from</span>, next</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;foo inner beforeRouteLeave&quot;</span>);</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="title function_">beforeCreated</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;foo beforeCreated&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;foo created&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">beforeMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;foo beforeMount&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;foo mounted&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">beforeDestroy</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;foo beforeDestroy&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">destroyed</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;foo destroyed&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Bar</span> = &#123;</span><br><span class="line">  <span class="attr">template</span>:</span><br><span class="line">    <span class="string">&#x27;&lt;div&gt;&lt;h1&gt;bar&lt;/h1&gt;&lt;router-link to=&quot;/foo&quot;&gt;Go to foo&lt;/router-link&gt;&lt;/div&gt;&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/foo&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Foo</span>,</span><br><span class="line">    <span class="attr">beforeEnter</span>: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Foo beforeEnter&quot;</span>);</span><br><span class="line">      <span class="title function_">next</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&quot;/bar&quot;</span>, <span class="attr">component</span>: <span class="title class_">Bar</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  routes</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;global beforeEach&quot;</span>);</span><br><span class="line">  <span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;global afterEach&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;div id=&quot;app&quot;&gt;&lt;router-view /&gt;&lt;/div&gt;&#x27;</span>,</span><br><span class="line">  router</span><br><span class="line">&#125;).$mount(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>查看<code>console</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">global beforeEach </span><br><span class="line">Foo beforeEnter </span><br><span class="line">foo inner beforeRouteEnter </span><br><span class="line">global afterEach </span><br><span class="line">foo created </span><br><span class="line">foo beforeMount </span><br><span class="line">foo mounted </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">foo inner beforeRouteLeave </span><br><span class="line">global beforeEach </span><br><span class="line">global afterEach </span><br><span class="line">foo beforeDestroy </span><br><span class="line">foo destroyed </span><br></pre></td></tr></table></figure>

<p>验证了我们上面阅读的源码，<code>router-view</code> 来管理了组件的渲染，虽然有的函数从代码视角写在组件内部，但实际上是<code>vuer-router</code>确定要渲染组件以后，才会调用<code>vue</code>提供的产生<code>VNode</code>的方法，因此，给<code>router</code>用的是由<code>router</code>来用，也就自然早于<code>vue</code>本身的生命周期了</p>
<h1 id="个人其它收获"><a href="#个人其它收获" class="headerlink" title="个人其它收获"></a>个人其它收获</h1><ol start="0">
<li>vuex,vue-router的example 都是 用express写的</li>
<li>vuex,vue-router的文档都是vuepress生成的</li>
<li>vuex的开发测试 目测没有flow，vue-router的测试有用到flow，两者似乎都用到了tsc</li>
<li>dev,测试,release 全部脚本化了</li>
<li>之前有不少地方建议用typeof &#x3D;&#x3D; ‘undefined’来比较undefined,这里源码写的依然是 !&#x3D;&#x3D; undefined来比较，感觉这些就算可有可无的建议吧(吗)</li>
<li>另外就是 之前有想过说 代码里尽量避免字符串 作为逻辑运算，用enum或者常量，或者常量意义的变量代替，这里看源码依然后很多case 字符串，或者字符串直接比较的。</li>
<li>又多了一点源码阅读经验，因为 很多源码现在都已经有自动测试了，所以在直接看 util &#x2F;helper之类的 代码时，先看对应的测试代码可以 快速知道这个代码是干啥用的，再阅读代码就会更容易理解</li>
<li>比如query里明明是可以用<code>misc.js</code>的<code>extend</code> 为何没用&#x3D;。&#x3D; 是有什么考虑么</li>
<li>Object.freeze，没有深入研究，但拉去属性可以看到writable都变成false</li>
<li>这里为了兼容多种语法，采用的是在具体的函数里接受+一堆if来处理，而不是提供单一标准参数让调用者控制参数。</li>
<li><code>this.$scopedSlots.default(&#123;</code>没有查到,但是 看源码中的ts 是 <code>$scopedSlots[slot名字]=(props:any)=&gt;ScopedSlotChildren;</code>)</li>
<li>看多了源码 你会发现很多<code>process.env.NODE_ENV !== &#39;production&#39;</code> 时会报warn,同时 也知道了如果你要负责构建打包，看似 一个字符串’production’其实是会参与逻辑</li>
<li><a href="https://vuejs.org/v2/guide/render-function.html#Functional-Components">functional 组件</a> </li>
<li>里面实现的函数有一些潜在side-effect的 比如 match,可能会修改到raw,这种时候就会怀念C++的const引用</li>
</ol>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/hashchange_event">hashchange 事件 mozilia文档</a></p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/popstate_event">popstate</a></p>
<p><a href="https://flow.org/en/docs/">flow</a></p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base">base tag</a></p>
<h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1><p>看一下 mixin文档了，不然有些方法看得不太理解</p>
<ul>
<li>install, beforeCreate, $options registerRouteInstance?,defineProperty</li>
</ul>
<p><a href="https://vuejs.org/v2/api/#optionMergeStrategies">https://vuejs.org/v2/api/#optionMergeStrategies</a></p>
<p>Vue.util.defineReactive(this, ‘_route’, this._router.history.current)</p>
<p>pwa</p>
<p>vue-ssr</p>
<p>ivew</p>
<p>单元测试</p>
<p>nuxtjs</p>
<p><a href="https://npmdoc.github.io/node-npmdoc-vue/build..beta..travis-ci.org/apidoc.html#apidoc.element.vue.util.defineReactive">https://npmdoc.github.io/node-npmdoc-vue/build..beta..travis-ci.org/apidoc.html#apidoc.element.vue.util.defineReactive</a></p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
        <tag>router</tag>
        <tag>source code</tag>
      </tags>
  </entry>
  <entry>
    <title>git subtree vs submodule</title>
    <url>/Blog/19-09-02-git_subtree_vs_submodule/</url>
    <content><![CDATA[<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><h2 id="submodule"><a href="#submodule" class="headerlink" title="submodule"></a>submodule</h2><p><code>git submodule add 仓库url</code></p>
<p><code>git diff --cached --submodule</code></p>
<p>clone后</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git submodule init</span><br><span class="line">git submodule update</span><br></pre></td></tr></table></figure>

<p>clone时自动 拉取<code>git clone --recurse-submodules</code></p>
<p><code>git log -p --submodule</code></p>
<h2 id="subtree"><a href="#subtree" class="headerlink" title="subtree"></a>subtree</h2><p><code>git subtree add --squash --prefix=文件夹名 仓库url 分支名</code></p>
<p>分割</p>
<p><code>git subtree split --prefix=文件夹名 -b 分支名</code></p>
<p>配合remote使用</p>
<h1 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h1><table>
<thead>
<tr>
<th>subtree</th>
<th>submodule</th>
</tr>
</thead>
<tbody><tr>
<td>相当于拷贝文件甚至commit到当前仓库</td>
<td>相当于只记录了另一个仓库的某个提交的指针</td>
</tr>
<tr>
<td>因此 pull容易push难</td>
<td>push容易pull难</td>
</tr>
</tbody></table>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://git-scm.com/book/en/v2/Git-Tools-Submodules">https://git-scm.com/book/en/v2/Git-Tools-Submodules</a></p>
<p><a href="https://git-scm.com/book/en/v1/Git-Tools-Subtree-Merging">https://git-scm.com/book/en/v1/Git-Tools-Subtree-Merging</a></p>
]]></content>
      <categories>
        <category>software</category>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>subtree</tag>
        <tag>submodule</tag>
      </tags>
  </entry>
  <entry>
    <title>eleme vue msgbox 简单看看实现原理</title>
    <url>/Blog/19-09-04-vuemsgbox/</url>
    <content><![CDATA[<h1 id="依赖版本"><a href="#依赖版本" class="headerlink" title="依赖版本"></a>依赖版本</h1><p>element-ui 版本 10592d12ea981912165542920160669fd8874bd9</p>
<p>文档 <a href="https://element.eleme.io/#/zh-CN/component/message-box">https://element.eleme.io/#/zh-CN/component/message-box</a></p>
<h1 id="要解决的问题"><a href="#要解决的问题" class="headerlink" title="要解决的问题"></a>要解决的问题</h1><p>像是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$msgbox(options)</span><br><span class="line">$alert(message, title, options) 或 $alert(message, options)</span><br><span class="line">$confirm(message, title, options) 或 $confirm(message, options)</span><br><span class="line">$prompt(message, title, options) 或 $prompt(message, options)</span><br></pre></td></tr></table></figure>

<p>这样的api是怎么实现的</p>
<h1 id="代码阅读"><a href="#代码阅读" class="headerlink" title="代码阅读"></a>代码阅读</h1><p>大概看一眼怎么搞的</p>
<p><code>src/index.js</code> 看 这些方法 ,都是来自 <code>import MessageBox from &#39;../packages/message-box/index.js&#39;;</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$msgbox</span> = <span class="title class_">MessageBox</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$alert</span> = <span class="title class_">MessageBox</span>.<span class="property">alert</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$confirm</span> = <span class="title class_">MessageBox</span>.<span class="property">confirm</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$prompt</span> = <span class="title class_">MessageBox</span>.<span class="property">prompt</span>;</span><br></pre></td></tr></table></figure>

<p>那么看 <code>packages/message-box/src</code>文件夹</p>
<p>两个文件 <code>main.js</code>和 <code>main.vue</code></p>
<p><code>main.vue</code>瞄一眼,都是我们常见的写法</p>
<p><code>main.js</code>，看这些方法 最后 都是 调用 <code>MessageBox(配置参数)</code>的形式调用</p>
<p>再看<code>const MessageBox = function(options, callback) &#123;</code>的实现</p>
<p>都是 先<code>msgQueue.push(配置参数) + showNextMsg()</code></p>
<p><code>msgQueue</code>和 <code>showNextMsg</code>,分别是个数组，和从数组中<code>shift()</code> 取出值 进行具体展示执行</p>
<p>然后 看 <code>showNextMsg()</code> </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (!instance) &#123;</span><br><span class="line">  initInstance();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const initInstance = () =&gt; &#123;</span><br><span class="line">  instance = new MessageBoxConstructor(&#123;</span><br><span class="line">    el: document.createElement(&#x27;div&#x27;)</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  instance.callback = defaultCallback;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>和</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const MessageBoxConstructor = Vue.extend(msgboxVue);</span><br></pre></td></tr></table></figure>

<p>说明了基本这就是 工厂模式+单例模式+<code>Vue.extend</code>来创建弹框单例,所以我们页面上不需要写什么,就能直接调用</p>
<p>然后这些<code>confirm</code>调用过程 也就是对这个单例的参数改动 比如控制样式 数据 显示之类的</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li>用户调用 <code>$msgbox</code></li>
<li>调用到<code>packages/message-box/src/main.js</code>的 <code>MessageBox(options,callback)</code></li>
<li><code>MessageBox(options,callback)</code>通过 数组 + 数组.shift,依次提取数据展示</li>
<li>对于展示的实例 是 通过 <code>Vue.extend(packages/message-box/src/main.vue)</code> + 工厂单例来产生的一个实例</li>
<li>他们 搞了一个<code>element/examples/components/demo-block.vue</code> 可以在<code>markdown</code>写示例代码,并且在网页上查看 可以运行 66666</li>
</ol>
<blockquote>
<p>那常见的问题可能有说，连续调用2此带有回调函数的<code>$msgbox</code>会怎样</p>
</blockquote>
<p>我们可以看<code>showNextMsg()</code>实现</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//得到 instance</span></span><br><span class="line">  <span class="keyword">if</span> (!instance.<span class="property">visible</span> || instance.<span class="property">closeTimer</span>) &#123;</span><br><span class="line"> <span class="comment">//...</span></span><br><span class="line">      <span class="keyword">let</span> oldCb = instance.<span class="property">callback</span>;</span><br><span class="line">      instance.<span class="property">callback</span> = <span class="function">(<span class="params">action, instance</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">oldCb</span>(action, instance);</span><br><span class="line">        <span class="title function_">showNextMsg</span>();</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="comment">//...</span></span><br><span class="line">      <span class="title class_">Vue</span>.<span class="title function_">nextTick</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        instance.<span class="property">visible</span> = <span class="literal">true</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">//...</span></span><br></pre></td></tr></table></figure>


<p>意思就是如果我们同步调用两个，</p>
<ul>
<li>因为我们visible设置为true是 异步里发生的,那么 这两个调用时 visible默认都是false,所以 只会最后一个生效</li>
<li>如果我们异步调用两次msgbox,那么 后一个调用 会在<code>!visible</code>的地方为false,不会直接触发，但是因为设计了msgQueue,因此 会放在数组中，然后看到 上面的callback,会在调用oldCb以后 再调用showNextMsg,所以会在对话框回调以后 再回调 那个时刻，msgQueue里首个 并从数组中移除</li>
</ul>
<h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>总流程实现</p>
</blockquote>
<p>也就是方法是<code>src/index.js</code>: <code>Vue.prototype.方法名 = 方法函数</code> 来让全局可用</p>
<p>通过 <code>document.createElement(&#39;div&#39;)</code> 和 全局变量, 创建绑定维护对应的单例实例.</p>
<p>这样就实现了 任何页面,不需要写组件,就能<code>this.方法名(参数)</code> 来弹窗</p>
<p>适用场景,不需要业务定UI,否则需要页面<code>v-slot</code>之类插入业务内容</p>
<blockquote>
<p>参数设计(核心参数与可选参数与回调)</p>
</blockquote>
<p>核心参数是函数的直接参数</p>
<p>可选参数组合成一个对象,提供默认值</p>
<p>回调既有成功也有失败,随是promise,总觉得用reject来做取消和关闭其实不太好, 可以全resolve走自定义状态</p>
<p>提供一定的重载实现</p>
<blockquote>
<p>内部具体</p>
</blockquote>
<p>队列, 同步异步, callback持有</p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
        <tag>msgbox</tag>
        <tag>element-ui</tag>
        <tag>alert</tag>
      </tags>
  </entry>
  <entry>
    <title>未来简史 阅读笔记</title>
    <url>/Blog/19-09-15-A_Brief_History_of_Tomorrow/</url>
    <content><![CDATA[<blockquote>
<p>19-08-22  -&gt; 19-09-15</p>
</blockquote>
<p>ISBN:9787508672069</p>
<h1 id="Main"><a href="#Main" class="headerlink" title="Main"></a>Main</h1><p>回顾历史，发现很多现在有的，都是由各种其它混杂原因的组合</p>
<p>历史解决了三大 饥荒 瘟疫 战争</p>
<p>将可能考虑新的问题 永生 快乐</p>
<p>历史的解决问题的贡献，很多也用于人类升级</p>
<span id="more"></span>

<p><img data-src="/Blog/Blog/images/historyoffuture/190822_01.jpg" alt="190822_01"></p>
<p><img data-src="/Blog/Blog/images/historyoffuture/190822_02.jpg" alt="190822_02"></p>
<p>人类世</p>
<p>进化论 自然选择，利用家畜本身欲望，人的生物本能几乎没变</p>
<p>人的农业发展，驯化 畜牧业，猫狗多，家畜多</p>
<p>力学 生物学 化学 等 的发展 让神话逐渐消失</p>
<p><img data-src="/Blog/Blog/images/historyoffuture/190827_01.jpg" alt="190827_01"></p>
<p><img data-src="/Blog/Blog/images/historyoffuture/190827_02.jpg" alt="190827_02"></p>
<p>人有什么不同</p>
<p>以现在了解认为情感上甚至一些社会合作上我们和动物并无不同</p>
<p>而对于意识究竟是什么，为什么需要依然在16年为止没有解释</p>
<p>那剩下智力</p>
<p>和作者认为的合作</p>
<p>这里的合作指能快速</p>
<p>与以前没有合作过的任何人很多以及社会信任下的分工</p>
<p>而对于 平等等一系列动物性存在的我们也存在，但当范围扩大一些属性会改变。</p>
<p>合作这里认为的是有人或有组织创造了某些也许有实体也许没有实体的。意义，也可以说共识，当两个没有合作过的人 他们有相同共识 会有同样认可的意义时，合作变得简单快速</p>
<p>以及为什么拍的时候还觉得很亮</p>
<p><img data-src="/Blog/Blog/images/historyoffuture/190829_01.jpg" alt="190829_01"></p>
<p><img data-src="/Blog/Blog/images/historyoffuture/190829_02.jpg" alt="190829_02"></p>
<p><img data-src="/Blog/Blog/images/historyoffuture/190829_03.jpg" alt="190829_03"></p>
<p>智人为世界赋予意义，虚构的力量。</p>
<p>人们相信共同一个虚构的实体，如法老，纸币</p>
<p>当众人相信时，具体法老怎么样，纸币是什么已经不重要，他们参与了多少也不重要。</p>
<p>以及文字，文书的力量，评价系统分数的力量，都是 虚构的。</p>
<p>不像战士这样的实体受伤会痛等等</p>
<p>然而如文字，如分数，如货币，当被信任时，人们甚至做出了让现实为虚构让步，追寻虚构</p>
<p>另外在复杂网络运作时，除了整体，从各个细小单位来看可能得到不同描述</p>
<p><img data-src="/Blog/Blog/images/historyoffuture/190830_01.jpg" alt="190830_01"></p>
<p><img data-src="/Blog/Blog/images/historyoffuture/190830_02.jpg" alt="190830_02"></p>
<p><img data-src="/Blog/Blog/images/historyoffuture/190830_03.jpg" alt="190830_03"></p>
<p><img data-src="/Blog/Blog/images/historyoffuture/190830_04.jpg" alt="190830_04"></p>
<p>第五章</p>
<p>把科学看作宗教并不合适</p>
<p>人们相信宗教一起做事得到成果 宗教有效<br>但如果不相信 便是无效</p>
<p>而科学不同，你不相信青霉素，并不会让青霉素失效</p>
<p>科学宗教都是追寻快乐，但快乐无法衡量比较</p>
<p>修建三峡大坝带来的好处和破坏的生灵如何评价</p>
<p>科学宗教的 不是完全对立也不是完全无关</p>
<p>可是看来 科学似乎会更支持同性恋，相对来说科学甚至能去计算谁编纂了圣经</p>
<p>所以冲突和融合都在发生（？）把他们都说为教条似乎是有理的</p>
<p><img data-src="/Blog/Blog/images/historyoffuture/190831_01.jpg" alt="190831_01"></p>
<p>现代人出生时就签署的契约，放弃意义换取力量。</p>
<p>人人都是追求经济增长（而且并不是100涨到101的增长），在人与人范畴内不再是零和游戏，而能有共赢，在这种势态下没有人能减缓经济发展，而更多催生的是，问题解决方案，如北京的空气净化器产业</p>
<p><img data-src="/Blog/Blog/images/historyoffuture/190901_01.jpg" alt="190901_01"></p>
<p><img data-src="/Blog/Blog/images/historyoffuture/190901_02.jpg" alt="190901_02"></p>
<p>7章 人文主义革命</p>
<p>自由主义的灭亡与复兴感受，自由主义被看作财富追求，真正的复活是自由主义➕苏联</p>
<p>世界各个地方的不同主义在发展，科学无法参与的艺术评价，无法评价意义。</p>
<p>战争的记录从 全局的画作，到个人的感受，</p>
<p>神的已经死了，只剩下人们自己。</p>
<p>人们考虑的只有自己和他人的感受</p>
<p>然而在科技孕育的同时，没有机械化，没有科技的其他国家里，宗教依旧上演，没有什么值得一提的贡献</p>
<p>最后展望了一下 第三部分</p>
<p><img data-src="/Blog/Blog/images/historyoffuture/190903_01.jpg" alt="190903_01"></p>
<p><img data-src="/Blog/Blog/images/historyoffuture/190903_02.jpg" alt="190903_02"></p>
<p><img data-src="/Blog/Blog/images/historyoffuture/190903_03.jpg" alt="190903_03"></p>
<p>8 实验室里的定时炸弹</p>
<p>生物科学的 大脑解剖和基因否认了 自由意志，但人们大多假装不知道</p>
<p>p264 🤔体验自我 和 叙事自我（终 峰 定律）</p>
<p>所以生命 究竟有什么意义</p>
<p><img data-src="/Blog/Blog/images/historyoffuture/190904_01.jpg" alt="190904_01"></p>
<p><img data-src="/Blog/Blog/images/historyoffuture/190904_02.jpg" alt="190904_02"></p>
<p><img data-src="/Blog/Blog/images/historyoffuture/190904_03.jpg" alt="190904_03"></p>
<p><img data-src="/Blog/Blog/images/historyoffuture/190904_04.jpg" alt="190904_04"></p>
<p><img data-src="/Blog/Blog/images/historyoffuture/190904_05.jpg" alt="190904_05"></p>
<p><img data-src="/Blog/Blog/images/historyoffuture/190904_06.jpg" alt="190904_06"></p>
<p>第九章 大分离</p>
<p>这一章和我之前有思考过的 契合度很高，感觉像是有人专门写书支持我观点一样2333👀</p>
<p>计算机量化，或者智能化，或者统计数据下的分析 让人的经验 感觉 想法 方案，逐渐被替代，也是大部分被替代</p>
<p>然后阻碍有</p>
<ol>
<li>人有隐私想法，不愿意公开，反对利用个人数据</li>
<li>在个别领域 暂时没有技术，或暂时没有投入资金进行 研发，如考古</li>
<li>不论医疗诊断 性爱体验 小说 下棋 自动驾驶 身体状况检测 战争等，明明都是能做出比较，但在一些领域，因为情感觉得，不愿意承认，或者装作看不见</li>
</ol>
<p>所以感觉自己有一点 通过数据了解自己</p>
<p>以及之前有过自己不是自己，从外部把自己当作一个机械装置看待，记录分析历史数据。</p>
<p>再就是终峰问题的处理，历史记录对比能够缓解</p>
<p>最后一张图 感觉我应该会被历史归类到绝大多数无用的普通人</p>
<p><img data-src="/Blog/Blog/images/historyoffuture/190905_01.jpg" alt="190905_01"></p>
<p><img data-src="/Blog/Blog/images/historyoffuture/190905_02.jpg" alt="190905_02"></p>
<p>第十章 意识的海洋</p>
<p>人类的感知并不是完整的，即使相对于原始人类</p>
<p>科技的发展是可能提供，情感控制和感知控制。</p>
<p>而决定权，内心的声音，科技控制，没有什么是真理，都是生化反应做决策，再交给科技控制</p>
<p><img data-src="/Blog/Blog/images/historyoffuture/190906_01.jpg" alt="190906_01"></p>
<p>数据主义的展望</p>
<p>毁灭和开端 不过是对不同物体而言罢了</p>
<p>隐私？是一个巨大的阻碍</p>
<p><img data-src="/Blog/Blog/images/historyoffuture/190907_01.jpg" alt="190907_01"></p>
<p><img data-src="/Blog/Blog/images/historyoffuture/190907_02.jpg" alt="190907_02"></p>
<p><img data-src="/Blog/Blog/images/historyoffuture/190907_03.jpg" alt="190907_03"></p>
<p><img data-src="/Blog/Blog/images/historyoffuture/190907_04.jpg" alt="190907_04"></p>
<h1 id="summary"><a href="#summary" class="headerlink" title="summary"></a>summary</h1><p>算是总结过去展望未来的一本书，但只是大的方向和目标的展望,并没有 brief的感觉</p>
<p>不过本书和我很多观点相契合，相对于上一本《黑天鹅》来说，这本书的阅读感觉就会很“顺”，也算是串起了一些想法。</p>
<p>最后最极端的和我之前想的也是很像，人类将失去大部分用处，甚至被完全取代</p>
<p>这一本书另一个点就是说，什么是有意义的:-)? 讨论的或者说总结的各方观点最后结论似乎是没有什么是有意义的。</p>
]]></content>
      <categories>
        <category>notes</category>
        <category>book</category>
      </categories>
      <tags>
        <tag>life</tag>
        <tag>future</tag>
        <tag>plan</tag>
      </tags>
  </entry>
  <entry>
    <title>git 在历史版本中 完全移除文件</title>
    <url>/Blog/19-09-20-gitbiguselessfile/</url>
    <content><![CDATA[<h1 id="How"><a href="#How" class="headerlink" title="How"></a>How</h1><p>参考</p>
<p><a href="https://www.cnblogs.com/amiezhang/p/11337095.html">https://www.cnblogs.com/amiezhang/p/11337095.html</a></p>
<p>上面链接都有讲</p>
<p>按照文件大小排序前100:</p>
<p><code>git rev-list --objects --all | grep &quot;$(git verify-pack -v .git/objects/pack/*.idx | sort -k 3 -n | tail -100 | awk &#39;&#123;print$1&#125;&#39;)&quot;</code></p>
<p><code>git filter-branch --force --index-filter &#39;git rm --cached --ignore-unmatch 文件名&#39; --prune-empty --tag-name-filter cat -- --all</code></p>
<p><code>git filter-branch --index-filter</code> 让每个提交的文件都复制到索引(<code>.git/index</code>)中</p>
<p>然后运行过滤器命令：<code>git rm --cached --ignore-unmatch</code> 文件名 ，让每个提交都删除掉“文件名”文件</p>
<p>然后<code>--prune-empty</code>把空的提交“修剪”掉</p>
<p>然后<code>--tag-name-filter cat</code>把每个tag保持原名字，指向修改后的对应提交</p>
<p>最后<code>-- --all</code>将所有ref（包括branch、tag）都执行上面的重写</p>
<p><code>git for-each-ref --format=&#39;delete %(refname)&#39; refs/original | git update-ref --stdin</code></p>
<p><code>git reflog expire --expire=now --all</code></p>
<p><code>git gc --prune=now</code></p>
<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><ol>
<li><p>上面的文件名可以写通配符号</p>
</li>
<li><p>众所周知只要我加到git中过的，即使把分支删了，也可以从reflog中找到，但这里 有 清除reflog所以 想要这样做的，要么 单独开文件夹搞，要么 确定 reflog都不会再用</p>
</li>
<li><p>什么时候使用? 使用频率不应高，因为 这种操作无疑是会对 分支重写，也就完全不同的commit hash,所以最后push都会带上–force, 目前能想到场景,比如 不必要的大文件,如不小心提交的下下来的打包后文件,大zip.也有场景 比如 很多分支前 不小心提交了一个涉密的文件。 当然push force以后 所有用仓库的人要想继续用只有去新的分支里搞了，已经被别人下的还会在别人硬盘里</p>
</li>
</ol>
]]></content>
      <categories>
        <category>software</category>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>redhat7 + gitlab-ce版本更新 11.6-&gt;12.2</title>
    <url>/Blog/19-09-23-redhat_gitlabserver_update/</url>
    <content><![CDATA[<h1 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h1><p>模拟生产环境 尝试 升级 gitlab-ce 从 11.6 到 12.2, 以及尝试模拟之前产生的错误</p>
<p>官方说 先要到<code>11.11.X</code>再到<code>12.X</code></p>
<p>物料准备</p>
<p>vmware on Ubuntu 18.04 LTS</p>
<p>gitlab-ce-11.6.5-ce.0.el6.x86_64.rpm</p>
<p>gitlab-ce-11.11.0-ce.0.el6.x86_64.rpm</p>
<p>gitlab-ce-12.2.5-ce.0.el7.x86_64.rpm</p>
<p>rhel-server-7.7-x86_64-dvd.iso</p>
<h1 id="Install-OS"><a href="#Install-OS" class="headerlink" title="Install OS"></a>Install OS</h1><p><a href="https://access.redhat.com/downloads/content/69/ver=/rhel---7/7.7/x86_64/product-software">https://access.redhat.com/downloads/content/69/ver=/rhel---7/7.7/x86_64/product-software</a></p>
<p>注册 下载 安装</p>
<p>需要注意的是 下4GB左右的 而不是boot.iso</p>
<blockquote>
<p>为什么是7 不是8(当前最新)</p>
</blockquote>
<p>因为想和某个生产环境保持一致 尝试 模拟某些操作</p>
<span id="more"></span>

<h1 id="Install-Software"><a href="#Install-Software" class="headerlink" title="Install Software"></a>Install Software</h1><p><a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/system_administrators_guide/installing-software">https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/system_administrators_guide/installing-software</a></p>
<p>401 还用不了 TODO</p>
<h1 id="authorized-keys"><a href="#authorized-keys" class="headerlink" title="authorized_keys"></a>authorized_keys</h1><p>印象来说<code>~/.ssh/authorized_keys</code>中把pub丢进去 就好了</p>
<p>然而并没有</p>
<p>尝试了一些 方案</p>
<p>最后是<code>/etc/ssh/sshd_config</code> 中配置<code>StrictModes no</code>再重启sshd 好的</p>
<p>这主要是为了方便 我直接 ssh进去 可以更方便的copypaste</p>
<h1 id="哇"><a href="#哇" class="headerlink" title="哇"></a>哇</h1><p>默认</p>
<p>alias rm&#x3D;’rm -i’<br>alias cp&#x3D;’cp -i’<br>alias mv&#x3D;’mv -i’</p>
<p>虽然 感觉要是按熟了 形成肌肉记忆 也阻止不了按y XD</p>
<h1 id="gitlab-ce-11-6-安装"><a href="#gitlab-ce-11-6-安装" class="headerlink" title="gitlab-ce 11.6 安装"></a>gitlab-ce 11.6 安装</h1><p>也是模拟全靠离线包安装 没有配yum</p>
<p>之前一直用的是Debian系列的Linux，对rpm并不熟 搜一搜 常用命令 <code>rpm -i</code> 或者 <code>rpm -ivh</code> 即可</p>
<p>root权限下</p>
<p><code>rpm -ivh gitlab-ce-11.6.5-ce.0.el6.x86_64.rpm</code></p>
<p><code>gitlab-ctl reconfigure</code></p>
<p>然后 我主机访问 一下 内部ip ??? 访问不了</p>
<p>内部wget一下 是可以下载index.html</p>
<p>外部ping能通，nmap加了<code>-Pn</code>都只能nmap到 22</p>
<p>开了另一个虚拟机 发现 随便搭 个apache2 或者 nginx都是能从主机访问,以为是nginx配置或者虚拟机配置问题</p>
<p>然后突然想到是不是防火墙</p>
<p>用 <code>systemctl status firewalld.service</code> 看了看  哇 这个防火墙是默认打开的</p>
<p>这里 直接<code>systemctl stop firewalld.service</code> 就可以了访问了</p>
<p>TODO 这里有点疑惑 之前尝试过程中 我也有用过iptables 允许过80的难道哪里输错了?还是iptables不起作用?</p>
<p>不过 这次主要目的是 gitlab的升级,这里 就没有详细去研究防火墙了</p>
<p>至此 gitlab-ce 能用,随便设置root密码 建立个账户，改一些配置，建一些组，建一些仓库等等 模拟一下大概有内容</p>
<h1 id="升级到11-11-0"><a href="#升级到11-11-0" class="headerlink" title="升级到11.11.0"></a>升级到11.11.0</h1><p><code>rpm -Uvh gitlab-ce-11.11.0-ce.0.el6.x86_64.rpm</code></p>
<p>也没有输命令停止什么 然后 竟然无错运行了?</p>
<h1 id="升级到12-2-5"><a href="#升级到12-2-5" class="headerlink" title="升级到12.2.5"></a>升级到12.2.5</h1><p><code>rpm -Uvh gitlab-ce-12.2.5-ce.0.el7.x86_64.rpm</code></p>
<p>哎 也无错升级了 &#x3D;.&#x3D;</p>
<p>好吧 重现不了 GG</p>
<h1 id="生产中尝试过的操作"><a href="#生产中尝试过的操作" class="headerlink" title="生产中尝试过的操作"></a>生产中尝试过的操作</h1><p>虽然是 “生产” 但 实际只有50-人使用,所以 简单 弄下来，让大家停止使用</p>
<p>然后 生产 也不是我操作的，过程中不知道哪个步骤挂了</p>
<p>大概 现象是 升级到12了 但是 报500,查log 是 某个提示，搜对应提示找到issues都是建议<code>gitlab-rake db:migrate</code>搞一搞</p>
<p>然而<code>gitlab-rake</code>报错 数据库太老要先升级到11.11, emmmm 也就是 之前 从11.6到11.11应该就挂了但没人发现,我也是服气的&#x3D;。&#x3D;?</p>
<p>然后 搜了半天downgrade 也没有搜到明确指示，他们不敢downgrade&#x3D;。&#x3D; ? 感觉downgrade 也比 重装 影响小啊</p>
<p>解决过程 就把内容先 全搞下来 &#x3D;。&#x3D;，然后 完全删除 gitlab-ce 大概</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gitlab-ctl stop</span><br><span class="line">rpm -e gitlab-ce</span><br><span class="line">ps aux | grep gitlab</span><br><span class="line">kill -9 &lt;上面一个runsvdir 带很长点的一个&gt;</span><br><span class="line">find / -name gitlab | xargs rm -rf</span><br></pre></td></tr></table></figure>

<p>对应服务器是专门开的一个没有其它服务,所以最后一句 执行 还好&#x3D;.&#x3D;</p>
<p>然后 安 12.2</p>
<p>一个是需要runit，下载+安装</p>
<p>一个是运行时卡住<code>] action run</code>, 某个东西 lock? 可能是他们之前熟练的使用kill -9 造成的? 然后google一下,启动一哈对应服务</p>
<p>一个是报错 三个配置 找不到,ls去看 是三个conf 软链接 指向空的, 删掉它们</p>
<p>然后就能用&#x3D;.&#x3D;</p>
<p>所以 最后生产还是重装的 2333,然后把各个仓库导入进去&#x3D;。&#x3D; 我不知道是谁做的备份，只备份了仓库 也没有各个用户关系之类的&#x3D;。&#x3D;，估计他是clone的而没有用rake，所以也没尝试用 rake 去恢复</p>
<p>最后 客户端 内容太大,需要 清除就到了<a href="/Blog/19-09-20-gitbiguselessfile/">这一篇</a></p>
<h1 id="使用到的工具等-可能有遗漏"><a href="#使用到的工具等-可能有遗漏" class="headerlink" title="使用到的工具等(可能有遗漏)"></a>使用到的工具等(可能有遗漏)</h1><p>ssh wget vim rpm htop netstat ifconfig grep nmap systemctl iptables ping</p>
<p><a href="https://docs.gitlab.com/omnibus/update/">https://docs.gitlab.com/omnibus/update/</a></p>
<p><a href="https://docs.gitlab.com/ce/update/#upgrading-without-downtime">https://docs.gitlab.com/ce/update/#upgrading-without-downtime</a></p>
<p><a href="https://linuxconfig.org/how-to-stop-start-and-disable-enable-firewall-on-redhat-7-linux-system">https://linuxconfig.org/how-to-stop-start-and-disable-enable-firewall-on-redhat-7-linux-system</a></p>
]]></content>
      <categories>
        <category>software</category>
        <category>git</category>
      </categories>
      <tags>
        <tag>gitlab</tag>
        <tag>redhat</tag>
        <tag>update</tag>
      </tags>
  </entry>
  <entry>
    <title>别遵循RxJS的最佳实践</title>
    <url>/Blog/19-09-27-Dont_follow_RxJS_Best_Practices/</url>
    <content><![CDATA[<h1 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h1><p><a href="https://dev.to/nikpoltoratsky/don-t-follow-rxjs-best-practices-4893#pass-streams-to-children">英文原文</a></p>
<p><a href="/Blog/19-06-27-rxjs/">rxjs入门</a></p>
<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>如今,越来越多开发者开始学 RxJs, 并跟随最佳实践正确使用它。但是完全不必要,那些所谓的最佳实践，需要学一些新的内容，并且在你的项目中增加额外的代码。</p>
<p>更多的是，使用最佳实践，是冒着创建好的代码库和让你的队友高兴的风险! 🌈</p>
<p>Stop being a gray mass! 打破常规，停止使用最佳实践</p>
<p>下面我将想你介绍，怎么改造那些所谓的最佳实践代码.</p>
<ul>
<li>不要unsubscribe</li>
<li>嵌套使用Subscribe</li>
<li>不要使用 纯函数</li>
<li>手动subscribe，不要使用 async pipe</li>
<li>向你的服务暴露subjects</li>
<li>始终对子组件传递流</li>
<li>宝石图? 并不适合你</li>
</ul>
<span id="more"></span>

<h1 id="不要unsubscribe"><a href="#不要unsubscribe" class="headerlink" title="不要unsubscribe"></a>不要unsubscribe</h1><p>所有人都说，我们始终需要取消订阅observables来防止内存泄漏</p>
<p>但，我觉得不行。认真的吗，谁决定你需要 取消订阅 observables? 没必要，我们来玩个游戏，下面哪个取消订阅的实现最好。</p>
<p>有<code>takeUntil</code>操作符的吗?</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">@<span class="title class_">Component</span>(&#123; ... &#125;)</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">MyComponent</span> implements <span class="title class_">OnInit</span>, <span class="title class_">OnDestroy</span> &#123;</span><br><span class="line"></span><br><span class="line">    private destroyed$ = <span class="keyword">new</span> <span class="title class_">Subject</span>();</span><br><span class="line"></span><br><span class="line">    <span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">      myInfiniteStream$</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">takeUntil</span>(<span class="variable language_">this</span>.<span class="property">destroyed$</span>))</span><br><span class="line">        .<span class="title function_">subscribe</span>(<span class="function">() =&gt;</span> ...);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">ngOnDestroy</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">destroyed$</span>.<span class="title function_">next</span>();</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">destroyed$</span>.<span class="title function_">complete</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>还是使用<code>takeWhile</code>操作符的?</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">@<span class="title class_">Component</span>(&#123; ... &#125;)</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">MyComponent</span> implements <span class="title class_">OnInit</span>, <span class="title class_">OnDestroy</span> &#123;</span><br><span class="line">    private alive = <span class="literal">true</span>;</span><br><span class="line">    <span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">      myInfiniteStream$</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">takeWhile</span>(<span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="property">alive</span>))</span><br><span class="line">        .<span class="title function_">subscribe</span>(<span class="function">() =&gt;</span> ...);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">ngOnDestroy</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">alive</span> = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>显然！都不是，<code>takeWhile</code>和<code>takeUntil</code>操作符有隐含意义，并且可能比较难以阅读 🤓 (sarcasm). 最好的解决方案，是用显示的方式用不同的变量分别保存每个subscription，在destroy中unsubscribe.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">@<span class="title class_">Component</span>(&#123; ... &#125;)</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">MyComponent</span> implements <span class="title class_">OnInit</span>, <span class="title class_">OnDestroy</span> &#123;</span><br><span class="line"></span><br><span class="line">    private subscription;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">subscription</span> = myInfiniteStream$</span><br><span class="line">        .<span class="title function_">subscribe</span>(<span class="function">() =&gt;</span> ...);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">ngOnDestroy</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">subscription</span>.<span class="title function_">unsubscribe</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>这个方案在有很多 subscriptions的时候工作得十分优秀</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Component</span>(&#123; ... &#125;)</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">MyComponent</span> implements <span class="title class_">OnInit</span>, <span class="title class_">OnDestroy</span> &#123;</span><br><span class="line"></span><br><span class="line">    private subscription1;</span><br><span class="line">    private subscription2;</span><br><span class="line">    private subscription3;</span><br><span class="line">    private subscription4;</span><br><span class="line">    private subscription5;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">subscription1</span> = myInfiniteStream1$</span><br><span class="line">        .<span class="title function_">subscribe</span>(<span class="function">() =&gt;</span> ...);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">subscription2</span> = myInfiniteStream2$</span><br><span class="line">        .<span class="title function_">subscribe</span>(<span class="function">() =&gt;</span> ...);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">subscription3</span> = myInfiniteStream3$</span><br><span class="line">        .<span class="title function_">subscribe</span>(<span class="function">() =&gt;</span> ...);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">subscription4</span> = myInfiniteStream4$</span><br><span class="line">        .<span class="title function_">subscribe</span>(<span class="function">() =&gt;</span> ...);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">subscription5</span> = myInfiniteStream5$</span><br><span class="line">        .<span class="title function_">subscribe</span>(<span class="function">() =&gt;</span> ...);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">ngOnDestroy</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">subscription1</span>.<span class="title function_">unsubscribe</span>();</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">subscription2</span>.<span class="title function_">unsubscribe</span>();</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">subscription3</span>.<span class="title function_">unsubscribe</span>();</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">subscription4</span>.<span class="title function_">unsubscribe</span>();</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">subscription5</span>.<span class="title function_">unsubscribe</span>(); </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>但方案还不完美。怎么样能做得更好呢? 你感觉呢? 怎么能让代码更加干净易读?</p>
<p>没错，我们给你的答案是，把那些丑陋的取消订阅删了呗</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">@<span class="title class_">Component</span>(&#123; ... &#125;)</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">MyComponent</span> implements <span class="title class_">OnInit</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">      myInfiniteStream$</span><br><span class="line">        .<span class="title function_">subscribe</span>(<span class="function">() =&gt;</span> ...);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>非常棒! 我们删除了冗余的代码，现在看起来清爽，并且节约了一些硬盘空间。 But what will happen with myInfiniteStream$ subscription?</p>
<p>别管他! 😅 让我们让垃圾回收器去做那些工作，不然它们有啥存在意义，对吧!</p>
<h1 id="嵌套使用Subscribe"><a href="#嵌套使用Subscribe" class="headerlink" title="嵌套使用Subscribe"></a>嵌套使用Subscribe</h1><p>其它人说我们应该用 <code>*Map</code> 操作符来链接observables 而不是层级订阅它来防止回调地狱。</p>
<p>但，我又觉得不行. 认真吗，为啥? 为啥我们都要用<code>switchMap/mergeMap</code>操作符号? 你觉得下面代码易读吗？你真的喜欢你的队友吗？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getUser</span>().<span class="title function_">pipe</span>(</span><br><span class="line">  <span class="title function_">switchMap</span>(<span class="function"><span class="params">user</span> =&gt;</span> <span class="title function_">getDetails</span>(user)),</span><br><span class="line">  <span class="title function_">switchMap</span>(<span class="function"><span class="params">details</span> =&gt;</span> <span class="title function_">getPosts</span>(details)),</span><br><span class="line">  <span class="title function_">switchMap</span>(<span class="function"><span class="params">posts</span> =&gt;</span> <span class="title function_">getComments</span>(posts)),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>你觉不觉得它过于整洁可爱，你有别的选择，看一看。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getUser</span>().<span class="title function_">subscribe</span>(<span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">getDetails</span>(user).<span class="title function_">subscribe</span>(<span class="function"><span class="params">details</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">getPosts</span>(details).<span class="title function_">subscribe</span>(<span class="function"><span class="params">posts</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">getComments</span>(posts).<span class="title function_">subscribe</span>(<span class="function"><span class="params">comments</span> =&gt;</span> &#123;  </span><br><span class="line">        <span class="comment">// handle all the data here</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>这样更好吧，如果你恨你的队友，而且不想学新的RxJS operators操作符号，就这么写代码吧.</p>
<p>做个聪明人! 让你的队友感受到一些回调地域的怀念之情。</p>
<h1 id="不要使用-纯函数"><a href="#不要使用-纯函数" class="headerlink" title="不要使用 纯函数"></a>不要使用 纯函数</h1><p>其它人说，纯函数让代码可预测，且易测试</p>
<p>我双觉得不行。为啥要用纯函数？ 测试友好的？ 组合友好的？ 麻烦了，影响global让编码更加简单,看个例子。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">calculateTax</span>(<span class="params">tax: number, productPrice: number</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (productPrice * (tax / <span class="number">100</span>)) + productPrice; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于实例，我们有一个计算tax的函数，一个纯函数，如果入参相同，返回始终相同，很容易测试和组合。但我们真的需要这些行为吗？我觉得大可不必，不带参数的函数更加易于使用:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">tax</span> = <span class="number">20</span>;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">productPrice</span> = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">calculateTax</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (productPrice * (tax / <span class="number">100</span>)) + productPrice; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>事实上，我们又能弄错什么呢？ 😉</p>
<h1 id="手动subscribe，不要使用-async-pipe"><a href="#手动subscribe，不要使用-async-pipe" class="headerlink" title="手动subscribe，不要使用 async pipe"></a>手动subscribe，不要使用 async pipe</h1><p>其它人说我们需要在angular 模板中使用 async pipe 来帮助在components中管理subscriptions</p>
<p>但我觉得不行，我们上面已经讨论了<code>takeUntil</code>和<code>takeWhile</code>,并一致认可这些操作符来自邪恶。因此为什么我们不用另一种方式来处理async pipe.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">@<span class="title class_">Component</span>(&#123;  </span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;span&gt;&#123;&#123; data$ | async &#125;&#125;&lt;/span&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">MyComponent</span> implements <span class="title class_">OnInit</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">data$</span>: <span class="title class_">Observable</span>&lt;<span class="title class_">Data</span>&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">data$</span> = myInfiniteStream$;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>你看到了吗，干净，可读，容易维护的代码。但它不被允许，对于我来说，放到本地变量再在template里用不是更好吗。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">@<span class="title class_">Component</span>(&#123;  </span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;span&gt;&#123;&#123; data &#125;&#125;&lt;/span&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">MyComponent</span> implements <span class="title class_">OnInit</span> &#123;</span><br><span class="line">  data;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    myInfiniteStream$</span><br><span class="line">      .<span class="title function_">subscribe</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">this</span>.<span class="property">data</span> = data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="向你的服务暴露subjects"><a href="#向你的服务暴露subjects" class="headerlink" title="向你的服务暴露subjects"></a>向你的服务暴露subjects</h1><p>在 Angular中使用 Observable Data Services 是非常常见的事件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">@<span class="title class_">Injectable</span>(&#123; <span class="attr">providedIn</span>: <span class="string">&#x27;root&#x27;</span> &#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">DataService</span> &#123;</span><br><span class="line"></span><br><span class="line">  private <span class="attr">data</span>: <span class="title class_">BehaviorSubject</span> = <span class="keyword">new</span> <span class="title class_">BehaviorSubject</span>(<span class="string">&#x27;bar&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  readonly <span class="attr">data$</span>: <span class="title class_">Observable</span> = <span class="variable language_">this</span>.<span class="property">data</span>.<span class="title function_">asObservable</span>();</span><br><span class="line"></span><br><span class="line">  <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">data$</span>.<span class="title function_">next</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">data$</span>.<span class="title function_">next</span>(<span class="string">&#x27;bar&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里我们以observable的形式暴露了一个数据流, 能保证只能通过 数据服务接口来修改它。但它令人困惑。</p>
<p>你想改变数据的时候，你必须真的改变数据。</p>
<p>为什么不增加一个方法能够就地改变数据呢？让我们重写这个服务让它更加易用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">@<span class="title class_">Injectable</span>(&#123; <span class="attr">providedIn</span>: <span class="string">&#x27;root&#x27;</span> &#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">DataService</span> &#123;</span><br><span class="line">  public <span class="attr">data$</span>: <span class="title class_">BehaviorSubject</span> = <span class="keyword">new</span> <span class="title class_">BehaviorSubject</span>(<span class="string">&#x27;bar&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Yeah!你看到了吗，我们的数据服务变得更加小且易读，现在我们可以任意的操作数据流了。完美！你也觉得是吧?🔥</p>
<h1 id="始终对子组件传递流"><a href="#始终对子组件传递流" class="headerlink" title="始终对子组件传递流"></a>始终对子组件传递流</h1><p>你有没有听说过 Smart&#x2F;Dump components pattern, 它能帮助, 解构组件之间? 同样的，这样的模式，能够阻止子组件触发父组件的行为。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">@<span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-parent&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;app-child [data]=&quot;data$ | async&quot;&gt;&lt;/app-child&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ParentComponent</span> implements <span class="title class_">OnInit</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">data$</span>: <span class="title class_">Observable</span>&lt;<span class="title class_">Data</span>&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">data$</span> = <span class="variable language_">this</span>.<span class="property">http</span>.<span class="title function_">get</span>(...);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-child&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChildComponent</span> &#123;</span><br><span class="line">  @<span class="title class_">Input</span>() <span class="attr">data</span>: <span class="title class_">Data</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>你喜欢这样写吗？你的队友也喜欢它。在这种情况下，你想报复他们，你需要这样重写你的代码。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">@<span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-parent&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;app-child [data$]=&quot;data$&quot;&gt;&lt;/app-child&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ParentComponent</span> &#123;</span><br><span class="line"></span><br><span class="line">  data$ = <span class="variable language_">this</span>.<span class="property">http</span>.<span class="title function_">get</span>(...);</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-child&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChildComponent</span> implements <span class="title class_">OnInit</span> &#123;</span><br><span class="line"></span><br><span class="line">  @<span class="title class_">Input</span>() <span class="attr">data$</span>: <span class="title class_">Observable</span>&lt;<span class="title class_">Data</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="attr">data</span>: <span class="title class_">Data</span>;</span><br><span class="line">  <span class="title function_">ngOnInit</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// Trigger data fetch only here</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">data$</span>.<span class="title function_">subscribe</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">this</span>.<span class="property">data</span> = data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看到了吗，我们不再在父组件中处理subscriptions. 我们直接把它丢给子组件去处理.</p>
<p>如果你这样写，你的队友保证可以debug到 哭到流血，信我。</p>
<h1 id="宝石图-并不适合你"><a href="#宝石图-并不适合你" class="headerlink" title="宝石图? 并不适合你"></a>宝石图? 并不适合你</h1><p>你知道宝石图吗？不，它不适合你。</p>
<p>让我们假设写了下面的函数，并且要测试。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">numTwoTimes</span>(<span class="params">obs: Observable&lt;number&gt;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> obs.<span class="title function_">pipe</span>(<span class="title function_">map</span>(<span class="function">(<span class="params">x: number</span>) =&gt;</span> x * <span class="number">2</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>很多人，会使用宝石图来测试这个函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;multiplies each number by 2&#x27;</span>, <span class="function">() =&gt;</span> &#123; </span><br><span class="line">  <span class="title function_">createScheduler</span>().<span class="title function_">run</span>(<span class="function">(<span class="params">&#123; cold, expectObservable &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> values = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">x</span>: <span class="number">2</span>, <span class="attr">y</span>: <span class="number">4</span>, <span class="attr">z</span>: <span class="number">6</span> &#125;</span><br><span class="line">    <span class="keyword">const</span> numbers$ = <span class="title function_">cold</span>(<span class="string">&#x27;a-b-c-|&#x27;</span>, values) <span class="keyword">as</span> <span class="title class_">Observable</span>&lt;number&gt;;</span><br><span class="line">    <span class="keyword">const</span> resultDiagram = <span class="string">&#x27;x-y-z-|&#x27;</span>;</span><br><span class="line">    <span class="title function_">expectObservable</span>(<span class="title function_">numTwoTimes</span>(numbers$)).<span class="title function_">toBe</span>(resultDiagram, values);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<p>但是，谁又会想学新的宝石图的部分呢。谁想写clean and laconic 的代码呢? 让我们用更常规的方式写测试代码。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;multiplies each number by 2&#x27;</span>, <span class="function"><span class="params">done</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> numbers$ = <span class="title function_">interval</span>(<span class="number">1000</span>).<span class="title function_">pipe</span>(</span><br><span class="line">      <span class="title function_">take</span>(<span class="number">3</span>),</span><br><span class="line">      <span class="title function_">map</span>(<span class="function"><span class="params">n</span> =&gt;</span> n + <span class="number">1</span>)</span><br><span class="line">  )</span><br><span class="line">  <span class="comment">// This emits: -1-2-3-|</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> numbersTwoTimes$ = <span class="title function_">numTwoTimes</span>(numbers$)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">results</span>: number[] = []</span><br><span class="line"></span><br><span class="line">  numbersTwoTimes$.<span class="title function_">subscribe</span>(</span><br><span class="line">      <span class="function"><span class="params">n</span> =&gt;</span> &#123;</span><br><span class="line">        results.<span class="title function_">push</span>(n)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">done</span>(err)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">expect</span>(results).<span class="title function_">toEqual</span>([ <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span> ])</span><br><span class="line">        <span class="title function_">done</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>Yeah! 现在看起来100倍好了。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>You’re a hero if you’ve read all the advice above. But. Well. If you recognized your train of thoughts, I have a piece of bad news for you. It was a joke.</p>
<p><img data-src="https://res.cloudinary.com/practicaldev/image/fetch/s--cuqyIqfO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/7zwMdyn/image.png" alt="it was a prank"></p>
<p>Please, never do what I said in that article. Never let your teammates cry and hate you. Always strive to be a decent and neat person. Save the world - use patterns and best practices!</p>
<p>I just decided to cheer you up and make your day a little bit better. Hopefully, you like it.</p>
<p>Stay tuned and let me know if you have any particular Angular topics you would like to hear about!</p>
<h1 id="读后补充"><a href="#读后补充" class="headerlink" title="读后补充"></a>读后补充</h1><p>看到第一个就满脸疑惑，然后看到pipe那里觉得很有问题，然后看到纯函数就觉得很不对,然后我把文章拉到了最后,XD 果然是prank</p>
<p>这个原作者是个大佬，每个内容反着看就是代码如何优化，举例的都是十分常见的场景。</p>
<p>下面说说每个对应的场景，和一些能想到的例子。</p>
<h2 id="页面与页面内异步的生命周期"><a href="#页面与页面内异步的生命周期" class="headerlink" title="页面与页面内异步的生命周期"></a>页面与页面内异步的生命周期</h2><p>常见的就是，页面内有异步事件，如后台调用等。这种情况如果回调会触发一些全局的事情，但是并不会因为页面销毁而中止。通过<code>takeUntil</code>和生命周期挂钩，就能简单的解决这类问题。想对于自己去做逻辑显然更少的逻辑需要管理，更不容易出错。</p>
<p>其二是页面上的一些无限observable。这类主要是内存泄漏相关的问题。</p>
<h2 id="回调地狱"><a href="#回调地狱" class="headerlink" title="回调地狱"></a>回调地狱</h2><p>在 promise里有  <code>promise.then(函数).then(函数).then(函数)</code> 的方式把地狱变为链式。</p>
<p>不过就我看来，有的人依然用了 promise.then, 依然在promise.then 里面去地狱函数。。。。。。。自闭</p>
<h2 id="纯函数"><a href="#纯函数" class="headerlink" title="纯函数"></a>纯函数</h2><p>其实和rxjs关系不大，毕竟不论任何一个提供全局的语言，总有滥用全局变量的。</p>
<p>有时觉得vue angular里面，很容易因为写页面写习惯了，毕竟本身页面之类的就是类&#x2F;结构体，很多会用this点去取值。</p>
<p>然后去做纯函数时就会看到“全局变量”，也是难受，不过有框架，基本上在window上定义变量的人少了。</p>
<h2 id="Async-Pipe"><a href="#Async-Pipe" class="headerlink" title="Async Pipe"></a>Async Pipe</h2><p>这个是angular 提供的，在上面例子只有一个可能还没多少感觉，当内容多了，每个尾部都会多出subscribe。这块，在说上第一部分讲的内存泄漏，也是可能因为没有取消订阅发生，而有了 async pipe，即少了代码，又不会泄漏？</p>
<h2 id="封装与暴露"><a href="#封装与暴露" class="headerlink" title="封装与暴露"></a>封装与暴露</h2><p>像vue之类的，关于这种数据，更多的是“同步写+开发时校验提醒”，但这一切，还是不够强制，毕竟仍然有不少的人，直接操作改变数据而不遵守流程。</p>
<p>我一直相信一句话，只要没有从工具上限制死，有多少内容，人始终会越界操作。</p>
<p>这里本质上，封装了具体的Subject，向外提供readonly的 observable。利用了typescript的修饰。</p>
<h2 id="父向子组件传递不应使用-ob"><a href="#父向子组件传递不应使用-ob" class="headerlink" title="父向子组件传递不应使用 ob"></a>父向子组件传递不应使用 ob</h2><p>对于一个组件的传递过程是 原始数据类型的更好？不是特别理解感受这一块。</p>
<h2 id="测试-observables处理函数"><a href="#测试-observables处理函数" class="headerlink" title="测试 observables处理函数"></a>测试 observables处理函数</h2><p>利用已有的测试封装工具，把测试代码做到易读，易维护</p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular2+</tag>
        <tag>rxjs</tag>
        <tag>observable</tag>
      </tags>
  </entry>
  <entry>
    <title>闪耀暖暖 耗材计算器 rxjs + angular2+</title>
    <url>/Blog/19-09-30-nikki4calc/</url>
    <content><![CDATA[<h1 id="What"><a href="#What" class="headerlink" title="What"></a>What</h1><p>闪耀暖暖的设计师 材料耗材计算器</p>
<p>基于一个已经有的原生js 进行改造</p>
<p>原来生 <a href="http://www.spongem.com/ajglz/tools/evalLevelUpCost.html">http://www.spongem.com/ajglz/tools/evalLevelUpCost.html</a></p>
<h1 id="重构内容"><a href="#重构内容" class="headerlink" title="重构内容"></a>重构内容</h1><ol start="0">
<li>首先把这个的源码 搞下来,比较无脑的操作</li>
<li>然后开个module 配一下routing</li>
<li>搞个component 然后把函数数据都搬进来</li>
<li>把相关全局变量 改为 <code>this.</code></li>
<li>修改原来的一些<code>$</code>方法 改为原生js,或者改为<code>[(ngModel)]</code>双向绑定，至此基本可以运行。</li>
<li>解构一下用户输入和计算输出分别叫做<code>Class: CardBasic/Card -&gt; html:Card/CardOut</code> &#x2F;&#x2F; 好吧 这里变量名有点乱 现在看来</li>
<li>引入<code>https://material.angular.io</code>的组件,稍微调整画风</li>
<li>尝试搞一个computed,移除计算按钮, 改为 <code>get XXX</code>的方法</li>
</ol>
<p>这里遇到问题, 根据调试，页面上的调用会反复调用get方法, 大量重复不必要计算</p>
<ol start="8">
<li>解决方案1: 引入Ramda，建立两个cache 分别是计算结果 和 用户输入，用 Ramda的深比较和深拷贝完成少的计算次数</li>
</ol>
<p>写着还好，行数不多，就能实现，性能也好，但是问题是，相当于你依然要去关心的是，输出值输入值直接的具体关系才能写。</p>
<ol start="9">
<li>解决方案2: 引入rxjs，用Observable搞</li>
</ol>
<p>这里实践上有些问题</p>
<ul>
<li>双向绑定如何和<code>BehaviorSubject</code>绑定,最后用<code>(ngModelChange)</code>来 单向到 具体字段</li>
<li>能否监听整个Class</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">of</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> a = &#123;<span class="attr">x</span>:<span class="number">1</span>,<span class="attr">y</span>:<span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> a$ = <span class="title function_">of</span>(a);</span><br><span class="line">a$.<span class="title function_">subscribe</span>(<span class="variable language_">console</span>.<span class="property">log</span>);</span><br><span class="line">a.<span class="property">x</span>=<span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<p>例如这样 并不会因为修改了a的子字段而自动发送next</p>
<p>搞了半天最后还是 感觉很 手工写依赖的输入</p>
<p>这一块的实现主要如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 相当于所有用户输入的部分 都会对应一个emitter</span></span><br><span class="line">private <span class="attr">textEmitter</span>: <span class="title class_">Map</span>&lt;string, <span class="title class_">BehaviorSubject</span>&lt;string&gt;&gt; = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"><span class="comment">// 在初始化时 初始化它们并监听</span></span><br><span class="line">  <span class="comment">// initial textEmitter</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> <span class="variable language_">this</span>.<span class="property">card</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">textEmitter</span>.<span class="title function_">set</span>(key, <span class="keyword">new</span> <span class="title class_">BehaviorSubject</span>(<span class="variable language_">this</span>.<span class="property">card</span>[key]));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">obAllKeys</span>(<span class="variable language_">this</span>.<span class="property">textEmitter</span>)</span><br><span class="line">    .<span class="title function_">pipe</span>(</span><br><span class="line">      <span class="title function_">map</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 细粒度触发 全体计算</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fire calc&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">cardOut</span>; <span class="comment">// 就是最开始写的get方法 触发过程中只 告诉说 &#x27;哎!我变了!&#x27; 即可</span></span><br><span class="line">      &#125;)</span><br><span class="line">    ).<span class="title function_">subscribe</span>(<span class="variable language_">this</span>.<span class="property">cardOut$</span>); <span class="comment">// 页面通过这个读取 是个 BehaviorSubject</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 做的个功能 监听一个类 的所有字段 对应的 textEmitter的Observable</span></span><br><span class="line"><span class="comment">// 做了一点防抖</span></span><br><span class="line"><span class="title function_">obAllKeys</span>(<span class="attr">emitter</span>: <span class="title class_">Map</span>&lt;string, <span class="title class_">BehaviorSubject</span>&lt;string&gt;&gt;): <span class="title class_">Observable</span>&lt;string&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">mergeOb</span>: <span class="title class_">Observable</span>&lt;string&gt; = <span class="keyword">new</span> <span class="title class_">BehaviorSubject</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  emitter.<span class="title function_">forEach</span>(<span class="function">(<span class="params">emitValue, emitKey</span>) =&gt;</span> &#123;</span><br><span class="line">    mergeOb = <span class="title function_">merge</span>(mergeOb, <span class="comment">// 关于merge的使用考虑 最开始想过使用combineLatest 但是 问题是 我明明可以直接通过 页面双向绑定拿到 用户输入,所以其实只需要一个变更通知即可，再另一个 combineLatest感觉要配上flat 才能 自动 绑定所有key,不然是手写的所有key,而对应的下标再反向生成 对象,表示 是不是有更好的方法 没学到没搜到</span></span><br><span class="line">      emitValue.<span class="title function_">pipe</span>(</span><br><span class="line">        <span class="title function_">debounceTime</span>(<span class="variable language_">this</span>.<span class="property">debounceInterval</span>),</span><br><span class="line">        <span class="title function_">distinctUntilChanged</span>(),</span><br><span class="line">        <span class="title function_">map</span>(<span class="function">(<span class="params">v</span>) =&gt;</span> emitKey + v) <span class="comment">// 这个是避免 在段时间内 上次状态a,  改b 改a 改回最初的a 这样就不会触发改变</span></span><br><span class="line">      ));</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> mergeOb.<span class="title function_">pipe</span>(<span class="title function_">debounceTime</span>(<span class="variable language_">this</span>.<span class="property">debounceInterval</span>)); <span class="comment">// 按理说一次只会改动一个  这个是初次进入时 会有多个 当然 combineLatest 不会有这个问题</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主要是和页面上的 输入绑定 具体就是 ngModelChange ,这一块的问题就是 写了 [(ngModel)] 又写了一遍这个绑定 光是key就要写两遍 还是字符串没法保证正确 靠的是下面的 调试强行保证部分</span></span><br><span class="line"><span class="title function_">onChange</span>(<span class="params">cardKey: string, value: string</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`onCardIdChange: <span class="subst">$&#123;cardKey&#125;</span> =&gt; <span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">textEmitter</span>.<span class="title function_">has</span>(cardKey)) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">textEmitter</span>.<span class="title function_">get</span>(cardKey).<span class="title function_">next</span>(value);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; <span class="comment">// 调试用</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;onChange&#x27;</span>, cardKey, value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="10">
<li>最后增加了一点 try catch,因为 不同的卡可选范围并不同，或者用户输入不合法会 爆红&#x3D;.&#x3D;只在 两个LevelVal里加了</li>
</ol>
<h1 id="最后结果"><a href="#最后结果" class="headerlink" title="最后结果"></a>最后结果</h1><p><a href="https://cromarmot.github.io/Debuq/#/nikki4/lvlup">https://cromarmot.github.io/Debuq/#/nikki4/lvlup</a></p>
<p>如果打开看到404，保持页面，等待一会儿再刷新即可。因为有worker service</p>
<h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1><p>比如搞成动态拉取</p>
<p>计算函数再向纯函数靠拢啊</p>
<p>怎么json 转换 Class 甚至 Map &#x2F;&#x2F; 搜了一会没搜到简洁的方案</p>
<p>更好的双向绑定+BehaviorSubject 绑定?</p>
<p>是否可能简化某部分代码</p>
<p>输入控制 比如 现在其实可以输入 小数 和 范围以外的数</p>
<p>比如因为还是有不少json 导致 typescript的 类型判断并不完整 虽然</p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular2+</tag>
        <tag>nikki4</tag>
      </tags>
  </entry>
  <entry>
    <title>adb</title>
    <url>/Blog/19-10-18-adb/</url>
    <content><![CDATA[<h1 id="What"><a href="#What" class="headerlink" title="What"></a>What</h1><p>想看一下 某个包的文件</p>
<p>查看 usb连接&#x2F;模拟器 的设备 <code>adb devices</code></p>
<p>连接一个具体的设备 <code>adb -s &lt;设备id&gt; shell</code></p>
<p>列出手机里的安装包<code>pm list packages</code> 当然 grep命令也可以用</p>
<p>比如你要查看的包为<code>com.xxx.yyy</code>那么 <code>run-as com.xxx.yyy</code></p>
<p><code>cd ls grep cat</code>这些命令是有的 并没有vi XD,不过有cat 基本能看文件了</p>
<p>&#x2F;&#x2F; 搜到了 单个文件 cat 出来的 但没搜到文件夹的</p>
<p>&#x2F;&#x2F; 也有间接先cat到sdcard再pull 再删sdcard</p>
<p>&#x2F;&#x2F; 还搜到了一个 用 adb backup 把整个app搞出来，再 转换成tar的 [见下面链接]</p>
<p>&#x2F;&#x2F; 当然 还有一堆说root的 emmm 告辞</p>
<p>&#x2F;&#x2F; Stetho?</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://stackoverflow.com/questions/53634246/android-get-all-installed-packages-using-adb">https://stackoverflow.com/questions/53634246/android-get-all-installed-packages-using-adb</a></p>
<p><a href="https://gist.github.com/davidnunez/1404789">https://gist.github.com/davidnunez/1404789</a></p>
<p><a href="https://stackoverflow.com/questions/1043322/why-do-i-get-access-denied-to-data-folder-when-using-adb?rq=1">https://stackoverflow.com/questions/1043322/why-do-i-get-access-denied-to-data-folder-when-using-adb?rq=1</a></p>
<p><a href="https://stackoverflow.com/questions/7399028/android-adb-permission-denied">https://stackoverflow.com/questions/7399028/android-adb-permission-denied</a></p>
<p><a href="https://stackoverflow.com/questions/15558353/how-can-one-pull-the-private-data-of-ones-own-android-app">https://stackoverflow.com/questions/15558353/how-can-one-pull-the-private-data-of-ones-own-android-app</a></p>
<p><a href="https://stackoverflow.com/questions/9017073/is-it-possible-to-see-application-data-from-adb-shell-the-same-way-i-see-it-moun/16461386">https://stackoverflow.com/questions/9017073/is-it-possible-to-see-application-data-from-adb-shell-the-same-way-i-see-it-moun/16461386</a></p>
<p><a href="https://stackoverflow.com/questions/15558353/how-can-one-pull-the-private-data-of-ones-own-android-app/31504263#31504263">https://stackoverflow.com/questions/15558353/how-can-one-pull-the-private-data-of-ones-own-android-app/31504263#31504263</a></p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>android</category>
      </categories>
      <tags>
        <tag>adb</tag>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>throttle vs debounce</title>
    <url>/Blog/19-10-21-throttle-debounce/</url>
    <content><![CDATA[<h1 id="What"><a href="#What" class="headerlink" title="What"></a>What</h1><p>基本讲就是 throttle(截流)和debounce(去抖)</p>
<p>功能都是为了避免快速反复触发</p>
<p>比如 用户快速点击按钮</p>
<p>假设设置为1s</p>
<p>throttle相当于，执行的最小间隔为1s</p>
<p>debounce也是执行最小间隔为1s，但是假设用户持续的一直快速点击，函数不会执行，需要等到最后一次点击后过1s才执行</p>
<h1 id="直接看lodash的"><a href="#直接看lodash的" class="headerlink" title="直接看lodash的"></a>直接看lodash的</h1><p>throttle:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">func, wait, options</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> leading = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">let</span> trailing = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> func !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;Expected a function&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isObject</span>(options)) &#123;</span><br><span class="line">    leading = <span class="string">&#x27;leading&#x27;</span> <span class="keyword">in</span> options ? !!options.<span class="property">leading</span> : leading</span><br><span class="line">    trailing = <span class="string">&#x27;trailing&#x27;</span> <span class="keyword">in</span> options ? !!options.<span class="property">trailing</span> : trailing</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">debounce</span>(func, wait, &#123;</span><br><span class="line">    leading,</span><br><span class="line">    trailing,</span><br><span class="line">    <span class="string">&#x27;maxWait&#x27;</span>: wait</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> throttle</span><br></pre></td></tr></table></figure>

<p>debounce:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func, wait, options</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> lastArgs,</span><br><span class="line">    lastThis,</span><br><span class="line">    maxWait,</span><br><span class="line">    result,</span><br><span class="line">    timerId,</span><br><span class="line">    lastCallTime</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> lastInvokeTime = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> leading = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">let</span> maxing = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">let</span> trailing = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Bypass `requestAnimationFrame` by explicitly setting `wait=0`.</span></span><br><span class="line">  <span class="keyword">const</span> useRAF = (!wait &amp;&amp; wait !== <span class="number">0</span> &amp;&amp; <span class="keyword">typeof</span> root.<span class="property">requestAnimationFrame</span> === <span class="string">&#x27;function&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> func !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;Expected a function&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  wait = +wait || <span class="number">0</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isObject</span>(options)) &#123;</span><br><span class="line">    leading = !!options.<span class="property">leading</span></span><br><span class="line">    maxing = <span class="string">&#x27;maxWait&#x27;</span> <span class="keyword">in</span> options</span><br><span class="line">    maxWait = maxing ? <span class="title class_">Math</span>.<span class="title function_">max</span>(+options.<span class="property">maxWait</span> || <span class="number">0</span>, wait) : maxWait</span><br><span class="line">    trailing = <span class="string">&#x27;trailing&#x27;</span> <span class="keyword">in</span> options ? !!options.<span class="property">trailing</span> : trailing</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">invokeFunc</span>(<span class="params">time</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> args = lastArgs</span><br><span class="line">    <span class="keyword">const</span> thisArg = lastThis</span><br><span class="line"></span><br><span class="line">    lastArgs = lastThis = <span class="literal">undefined</span></span><br><span class="line">    lastInvokeTime = time</span><br><span class="line">    result = func.<span class="title function_">apply</span>(thisArg, args)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">startTimer</span>(<span class="params">pendingFunc, wait</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (useRAF) &#123;</span><br><span class="line">      root.<span class="title function_">cancelAnimationFrame</span>(timerId)</span><br><span class="line">      <span class="keyword">return</span> root.<span class="title function_">requestAnimationFrame</span>(pendingFunc)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">setTimeout</span>(pendingFunc, wait)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">cancelTimer</span>(<span class="params">id</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (useRAF) &#123;</span><br><span class="line">      <span class="keyword">return</span> root.<span class="title function_">cancelAnimationFrame</span>(id)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(id)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">leadingEdge</span>(<span class="params">time</span>) &#123;</span><br><span class="line">    <span class="comment">// Reset any `maxWait` timer.</span></span><br><span class="line">    lastInvokeTime = time</span><br><span class="line">    <span class="comment">// Start the timer for the trailing edge.</span></span><br><span class="line">    timerId = <span class="title function_">startTimer</span>(timerExpired, wait)</span><br><span class="line">    <span class="comment">// Invoke the leading edge.</span></span><br><span class="line">    <span class="keyword">return</span> leading ? <span class="title function_">invokeFunc</span>(time) : result</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">remainingWait</span>(<span class="params">time</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> timeSinceLastCall = time - lastCallTime</span><br><span class="line">    <span class="keyword">const</span> timeSinceLastInvoke = time - lastInvokeTime</span><br><span class="line">    <span class="keyword">const</span> timeWaiting = wait - timeSinceLastCall</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> maxing</span><br><span class="line">      ? <span class="title class_">Math</span>.<span class="title function_">min</span>(timeWaiting, maxWait - timeSinceLastInvoke)</span><br><span class="line">      : timeWaiting</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">shouldInvoke</span>(<span class="params">time</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> timeSinceLastCall = time - lastCallTime</span><br><span class="line">    <span class="keyword">const</span> timeSinceLastInvoke = time - lastInvokeTime</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Either this is the first call, activity has stopped and we&#x27;re at the</span></span><br><span class="line">    <span class="comment">// trailing edge, the system time has gone backwards and we&#x27;re treating</span></span><br><span class="line">    <span class="comment">// it as the trailing edge, or we&#x27;ve hit the `maxWait` limit.</span></span><br><span class="line">    <span class="keyword">return</span> (lastCallTime === <span class="literal">undefined</span> || (timeSinceLastCall &gt;= wait) ||</span><br><span class="line">      (timeSinceLastCall &lt; <span class="number">0</span>) || (maxing &amp;&amp; timeSinceLastInvoke &gt;= maxWait))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">timerExpired</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> time = <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">shouldInvoke</span>(time)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">trailingEdge</span>(time)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Restart the timer.</span></span><br><span class="line">    timerId = <span class="title function_">startTimer</span>(timerExpired, <span class="title function_">remainingWait</span>(time))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">trailingEdge</span>(<span class="params">time</span>) &#123;</span><br><span class="line">    timerId = <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Only invoke if we have `lastArgs` which means `func` has been</span></span><br><span class="line">    <span class="comment">// debounced at least once.</span></span><br><span class="line">    <span class="keyword">if</span> (trailing &amp;&amp; lastArgs) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">invokeFunc</span>(time)</span><br><span class="line">    &#125;</span><br><span class="line">    lastArgs = lastThis = <span class="literal">undefined</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">cancel</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (timerId !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="title function_">cancelTimer</span>(timerId)</span><br><span class="line">    &#125;</span><br><span class="line">    lastInvokeTime = <span class="number">0</span></span><br><span class="line">    lastArgs = lastCallTime = lastThis = timerId = <span class="literal">undefined</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">flush</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> timerId === <span class="literal">undefined</span> ? result : <span class="title function_">trailingEdge</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>())</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">pending</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> timerId !== <span class="literal">undefined</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">debounced</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> time = <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">    <span class="keyword">const</span> isInvoking = <span class="title function_">shouldInvoke</span>(time)</span><br><span class="line"></span><br><span class="line">    lastArgs = args</span><br><span class="line">    lastThis = <span class="variable language_">this</span></span><br><span class="line">    lastCallTime = time</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isInvoking) &#123;</span><br><span class="line">      <span class="keyword">if</span> (timerId === <span class="literal">undefined</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">leadingEdge</span>(lastCallTime)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (maxing) &#123;</span><br><span class="line">        <span class="comment">// Handle invocations in a tight loop.</span></span><br><span class="line">        timerId = <span class="title function_">startTimer</span>(timerExpired, wait)</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">invokeFunc</span>(lastCallTime)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (timerId === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      timerId = <span class="title function_">startTimer</span>(timerExpired, wait)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">  debounced.<span class="property">cancel</span> = cancel</span><br><span class="line">  debounced.<span class="property">flush</span> = flush</span><br><span class="line">  debounced.<span class="property">pending</span> = pending</span><br><span class="line">  <span class="keyword">return</span> debounced</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> debounce</span><br></pre></td></tr></table></figure>

<p>直接的参数区别</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">throttle</span><br><span class="line"></span><br><span class="line">  let leading = true</span><br><span class="line">  let maxing = true &amp;&amp; maxWait</span><br><span class="line">  let trailing = true</span><br><span class="line"></span><br><span class="line">debounce</span><br><span class="line">  let leading = false</span><br><span class="line">  let maxing = false</span><br><span class="line">  let trailing = true</span><br></pre></td></tr></table></figure>

<h1 id="Vue-有一个官方教程中的使用方法如下"><a href="#Vue-有一个官方教程中的使用方法如下" class="headerlink" title="Vue 有一个官方教程中的使用方法如下"></a>Vue 有一个官方教程中的使用方法如下</h1><p><a href="https://cn.vuejs.org/v2/guide/computed.html#%E4%BE%A6%E5%90%AC%E5%99%A8">https://cn.vuejs.org/v2/guide/computed.html#%E4%BE%A6%E5%90%AC%E5%99%A8</a></p>
<p>之前我也写过一个 在methods中 计算出一个函数，但是那样的返回和计算不能使用箭头函数，因为运行函数和执行的this不同，ide也报错，XD 虽然可用</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://github.com/lodash/lodash/blob/master/throttle.js">https://github.com/lodash/lodash/blob/master/throttle.js</a></p>
<p><a href="https://github.com/lodash/lodash/blob/master/debounce.js">https://github.com/lodash/lodash/blob/master/debounce.js</a></p>
]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>lodash</tag>
        <tag>throttle</tag>
        <tag>debounce</tag>
      </tags>
  </entry>
  <entry>
    <title>nextCloud ! 真香</title>
    <url>/Blog/19-10-22-nextCloud/</url>
    <content><![CDATA[<h1 id="What"><a href="#What" class="headerlink" title="What"></a>What</h1><p>因为一些不可描述的原因，dropbox能用但是速度感人</p>
<p>现在需要一款能够 在 android+Linux+iPadOS三端做同步的</p>
<p>iPad上的Documents配上ssh可以完成Linux+iPadOS的同步, &#x2F;&#x2F; android似乎并不行</p>
<p>google drive就和dropbox是同样的问题</p>
<p>baiduYunPan ??? 如果你不怕你的个人资料有一天变成 “根据相关法律法规” 的话 &#x2F;&#x2F; 不过值得一提的是 这玩意支持linux了哦 虽然目测是个 浏览器壳 当然也就没有自动备份同步功能</p>
<p>然后搜了搜开源的 ownCloud 和 nextCloud ,看介绍基本是一家的</p>
<p>还有人说 用svn&#x2F;git来搞，你确定喜欢在手机和ipad上输命令?</p>
<h1 id="开干"><a href="#开干" class="headerlink" title="开干"></a>开干</h1><p>client就不说了,各个平台下下来安装就行,说说 server</p>
<p>我目前的电脑环境<code>Ubuntu18.04 x86_64 Linux 4.15.0-65-generic , bash 4.4.20 , 15925MiB</code></p>
<p><strong>警告第一条命令将会进入root,进入后你将有所有权限，请自重</strong></p>
<pre><code>sudo -s
apt install apache2
service apache2 start
apt install mariadb-server
mysql_secure_installation
apt install php libapache2-mod-php php-mysql php-gd php-json php-mysql php-curl php-mbstring php-intl php-imagick php-xml php-zip
apt install phpmyadmin
ln -s /etc/phpmyadmin/apache.conf /etc/apache2/conf-available/phpmyadmin.conf
a2enconf phpmyadmin
a2enmod ssl
a2ensite default-ssl
service apache2 reload
mariadb
MariaDB [(none)]&gt; CREATE DATABASE nextcloud;
MariaDB [(none)]&gt; CREATE USER nextcloud IDENTIFIED BY &#39;p@ssc0de&#39;;
MariaDB [(none)]&gt; grant usage on *.* TO nextcloud@localhost IDENTIFIED BY &#39;p@ssc0de&#39;;
MariaDB [(none)]&gt; GRANT ALL privileges ON nextcloud.* TO nextcloud@localhost;
MariaDB [(none)]&gt; FLUSH PRIVILEGES;
</code></pre>
<p>访问 <a href="https://localhost/phpmyadmin/">https://localhost/phpmyadmin/</a></p>
<p>(用户名,密码)&#x3D;(nextcloud,p@ssc0de)</p>
<p>去<code>https://download.nextcloud.com/server/releases/nextcloud-17.0.0.zip</code>下载最新的zip包 解压到 <code>/var/www/html/nextcloud</code>里</p>
<p>chown -R www-data:www-data nextcloud&#x2F;</p>
<p>通过<code>https://localhost/nextcloud</code>即可访问 设置admin 密码，填写刚刚的配置即可</p>
<p>手机连接会无权限，跟着提示修改&#x2F;var&#x2F;www&#x2F;html&#x2F;nextcloud&#x2F;config&#x2F;config.php的配置即可</p>
<h1 id="失败的尝试"><a href="#失败的尝试" class="headerlink" title="失败的尝试"></a>失败的尝试</h1><p>下载<code>wget https://raw.githubusercontent.com/nextcloud/vm/master/nextcloud_install_production.sh</code></p>
<p>然后<code>sudo bash nextcloud_install_production.sh</code></p>
<p><code>https://github.com/nextcloud/server</code> 下源码或者下releases</p>
<h1 id="nextCloud-额外的应用"><a href="#nextCloud-额外的应用" class="headerlink" title="nextCloud 额外的应用"></a>nextCloud 额外的应用</h1><p>把搜到的release包解压到<code>/var/www/html/nextcloud/apps</code></p>
<p>在<code>index.php/settings/apps</code>中启用</p>
<p>例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">calendar.tar.gz</span><br><span class="line">checksum.tar.gz</span><br><span class="line">files_readmemd.tar.gz</span><br><span class="line">richdocuments.tar.gz</span><br><span class="line">spreed-7.0.2.tar.gz</span><br></pre></td></tr></table></figure>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://docs.nextcloud.com/server/17/admin_manual/installation/source_installation.html#example-installation-on-ubuntu-18-04-lts-server">https://docs.nextcloud.com/server/17/admin_manual/installation/source_installation.html#example-installation-on-ubuntu-18-04-lts-server</a></p>
<p><a href="https://github.com/nextcloud/server.git">https://github.com/nextcloud/server.git</a></p>
<p><a href="https://nextcloud.com/install/#instructions-server">https://nextcloud.com/install/#instructions-server</a></p>
<p><a href="https://askubuntu.com/questions/387062/how-to-solve-the-phpmyadmin-not-found-issue-after-upgrading-php-and-apache">https://askubuntu.com/questions/387062/how-to-solve-the-phpmyadmin-not-found-issue-after-upgrading-php-and-apache</a></p>
<p><a href="https://www.youtube.com/watch?v=QXfsi0pwgYw">https://www.youtube.com/watch?v=QXfsi0pwgYw</a></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>现在看来主要问题在于 直接snap的 会和当前本地开得一堆服务或多或少冲突？？ 我查运行状态 都是在运行，查端口 没看到监听</p>
<p>另外一个就是 文件夹权限要搞成 www-data:www-data</p>
<p>在一个就是mysql的db和账户创建,只玩过CURD，很久没摸也忘了</p>
<p>客户端口没啥难度</p>
<p>emmmmmmmm 似乎也不能在ipados上搞… 只能网页勉强</p>
<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><ol>
<li>本地建立文件夹 <code>/data/nextcloudserver/</code> 给它存东西用</li>
<li>一条docker命令<code>docker run -d -p 8080:80 -v /data/nextcloudserver/:/var/www/html --name=nextcloudserver nextcloud</code> ，注意docker的习惯冒号左边是宿主机器的东西，右边是容器内的东西，这里映射了端口和磁盘</li>
</ol>
<p>这样就可以跑了，本地访问都是ui操作，没啥好说的</p>
<ol start="3">
<li>配置<code>config/config.php</code>中的<code>trusted_domains</code> (无脑的话root进，或者docker起个busybox连接一下)，注意这里的写法是星号来匹配应该<code>192.168.*.*</code>，而不是<code>192.168.0.0/24</code>, 保存就行</li>
</ol>
<h2 id="或者官方的仓库下"><a href="#或者官方的仓库下" class="headerlink" title="或者官方的仓库下"></a>或者官方的仓库下</h2><p><a href="https://github.com/nextcloud/docker/blob/master">https://github.com/nextcloud/docker/blob/master</a> 文件夹<code>.examples/docker-compose/insecure/mariadb/apache</code></p>
<p>执行<code>docker-compose up -d</code></p>
<h2 id="官方仓库自签https-证书"><a href="#官方仓库自签https-证书" class="headerlink" title="官方仓库自签https 证书"></a>官方仓库自签https 证书</h2><p>内网要用的话，可以考虑。毕竟没有CA中心，管内网的还是有办法搞你XD</p>
<p><code>.examples/docker-compose/with-nginx-proxy-self-signed-ssl/mariadb/fpm</code></p>
<p>sed玩得熟的可以sed替换哈</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="comment">diff --git a/.examples/docker-compose/with-nginx-proxy-self-signed-ssl/mariadb/fpm/db.env b/.examples/docker-compose/with-nginx-proxy-self-signed-ssl/mariadb/fpm/db.env</span></span><br><span class="line"><span class="comment">index a436605..e9872a4 100644</span></span><br><span class="line"><span class="comment">--- a/.examples/docker-compose/with-nginx-proxy-self-signed-ssl/mariadb/fpm/db.env</span></span><br><span class="line"><span class="comment">+++ b/.examples/docker-compose/with-nginx-proxy-self-signed-ssl/mariadb/fpm/db.env</span></span><br><span class="line"><span class="meta">@@ -1,3 +1,3 @@</span></span><br><span class="line"><span class="deletion">-MYSQL_PASSWORD=</span></span><br><span class="line"><span class="addition">+MYSQL_PASSWORD=123</span></span><br><span class="line"> MYSQL_DATABASE=nextcloud</span><br><span class="line"> MYSQL_USER=nextcloud</span><br><span class="line"><span class="comment">diff --git a/.examples/docker-compose/with-nginx-proxy-self-signed-ssl/mariadb/fpm/docker-compose.yml b/.examples/docker-compose/with-nginx-proxy-self-signed-ssl/mariadb/fpm/docker-compose.yml</span></span><br><span class="line"><span class="comment">index 3d60f7e..0d9fa81 100644</span></span><br><span class="line"><span class="comment">--- a/.examples/docker-compose/with-nginx-proxy-self-signed-ssl/mariadb/fpm/docker-compose.yml</span></span><br><span class="line"><span class="comment">+++ b/.examples/docker-compose/with-nginx-proxy-self-signed-ssl/mariadb/fpm/docker-compose.yml</span></span><br><span class="line"><span class="meta">@@ -8,7 +8,7 @@</span> services:</span><br><span class="line">     volumes:</span><br><span class="line">       - db:/var/lib/mysql</span><br><span class="line">     environment:</span><br><span class="line"><span class="deletion">-      - MYSQL_ROOT_PASSWORD=</span></span><br><span class="line"><span class="addition">+      - MYSQL_ROOT_PASSWORD=123</span></span><br><span class="line">     env_file:</span><br><span class="line">       - db.env</span><br><span class="line"> </span><br><span class="line"><span class="meta">@@ -30,7 +30,7 @@</span> services:</span><br><span class="line">     volumes:</span><br><span class="line">       - nextcloud:/var/www/html:ro</span><br><span class="line">     environment:</span><br><span class="line"><span class="deletion">-      - VIRTUAL_HOST=</span></span><br><span class="line"><span class="addition">+      - VIRTUAL_HOST=nextcloud.cromarmot.com</span></span><br><span class="line">     depends_on:</span><br><span class="line">       - app</span><br><span class="line">     networks:</span><br><span class="line"><span class="meta">@@ -59,11 +59,11 @@</span> services:</span><br><span class="line">     volumes:</span><br><span class="line">       - certs:/certs</span><br><span class="line">     environment:</span><br><span class="line"><span class="deletion">-      - SSL_SUBJECT=servhostname.local</span></span><br><span class="line"><span class="deletion">-      - CA_SUBJECT=my@example.com</span></span><br><span class="line"><span class="deletion">-      - SSL_KEY=/certs/servhostname.local.key</span></span><br><span class="line"><span class="deletion">-      - SSL_CSR=/certs/servhostname.local.csr</span></span><br><span class="line"><span class="deletion">-      - SSL_CERT=/certs/servhostname.local.crt</span></span><br><span class="line"><span class="addition">+      - SSL_SUBJECT=nextcloud.cromarmot.com</span></span><br><span class="line"><span class="addition">+      - CA_SUBJECT=cromarmot@example.com</span></span><br><span class="line"><span class="addition">+      - SSL_KEY=/certs/nextcloud.cromarmot.com.key</span></span><br><span class="line"><span class="addition">+      - SSL_CSR=/certs/nextcloud.cromarmot.com.csr</span></span><br><span class="line"><span class="addition">+      - SSL_CERT=/certs/nextcloud.cromarmot.com.crt</span></span><br><span class="line">     networks:</span><br><span class="line">       - proxy-tier</span><br></pre></td></tr></table></figure>

<p>然后你需要在要连接的电脑上把hosts文件增加 ip到<code>nextcloud.cromarmot.com</code> 的映射</p>
<p>执行<code>docker-compose up -d</code></p>
<h1 id="移除"><a href="#移除" class="headerlink" title="移除"></a>移除</h1><p>执行<code>docker-compose down</code></p>
<p>注意，只会移除container和network，不会移除volume, 如果要移除，要手动移除</p>
]]></content>
      <categories>
        <category>backend</category>
      </categories>
      <tags>
        <tag>dropbox</tag>
        <tag>nextCloud</tag>
        <tag>ownCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>single square brackets vs double square brackets in shell</title>
    <url>/Blog/19-10-24-shell/</url>
    <content><![CDATA[<h1 id="What"><a href="#What" class="headerlink" title="What"></a>What</h1><p><a href="https://stackoverflow.com/questions/669452/is-double-square-brackets-preferable-over-single-square-brackets-in-ba">https://stackoverflow.com/questions/669452/is-double-square-brackets-preferable-over-single-square-brackets-in-ba</a></p>
<p><a href="http://mywiki.wooledge.org/BashFAQ/031">http://mywiki.wooledge.org/BashFAQ/031</a></p>
<p><a href="https://scriptingosx.com/2018/02/single-brackets-vs-double-brackets/">https://scriptingosx.com/2018/02/single-brackets-vs-double-brackets/</a></p>
]]></content>
      <categories>
        <category>software</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>gulp 笔记</title>
    <url>/Blog/19-10-29-gulp/</url>
    <content><![CDATA[<h1 id="文档学习"><a href="#文档学习" class="headerlink" title="文档学习"></a>文档学习</h1><p>有中文看中文 :-)</p>
<h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p>先看 node等版本</p>
<pre><code>node --version
v11.8.0
npm --version
6.12.0
npx --version
10.2.0
</code></pre>
<p>安装</p>
<p><code>npm install --global gulp-cli</code></p>
<p><code>npx mkdirp my-project &amp;&amp; cd my-project</code></p>
<p><code>npm init &amp;&amp; npm install --save-dev gulp</code></p>
<p>检查版本</p>
<pre><code>gulp --version
CLI version: 2.2.0
Local version: 4.0.2
</code></pre>
<p>创建配置 <code>touch gulpfile.js</code></p>
<p>写入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">defaultTask</span>(<span class="params">cb</span>) &#123;</span><br><span class="line">  <span class="comment">// place code for your default task here</span></span><br><span class="line">  <span class="title function_">cb</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>exports.default &#x3D; defaultTask</p>
<p>执行 <code>gulp</code>完成</p>
<h2 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h2><p>查看任务<code>gulp --tasks</code></p>
<p>多个任务可以通过<code>series()</code> 和 <code>parallel()</code>来合并, 其中series是按顺序串行,parallel是并行,</p>
<p>例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; series &#125; = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// `clean` 函数并未被导出（export），因此被认为是私有任务（private task）。</span></span><br><span class="line"><span class="comment">// 它仍然可以被用在 `series()` 组合中。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">clean</span>(<span class="params">cb</span>) &#123;</span><br><span class="line">  <span class="comment">// body omitted</span></span><br><span class="line">  <span class="title function_">cb</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// `build` 函数被导出（export）了，因此它是一个公开任务（public task），并且可以被 `gulp` 命令直接调用。</span></span><br><span class="line"><span class="comment">// 它也仍然可以被用在 `series()` 组合中。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">build</span>(<span class="params">cb</span>) &#123;</span><br><span class="line">  <span class="comment">// body omitted</span></span><br><span class="line">  <span class="title function_">cb</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">build</span> = build;</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">default</span> = <span class="title function_">series</span>(clean, build);</span><br></pre></td></tr></table></figure>

<p>可以任意深度嵌套!</p>
<h2 id="异步执行"><a href="#异步执行" class="headerlink" title="异步执行"></a>异步执行</h2><p>可以返回 stream、promise、event emitter、child process 或 observable ，否则使用callback</p>
<p>stream</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; src, dest &#125; = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">streamTask</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">src</span>(<span class="string">&#x27;*.js&#x27;</span>)</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">dest</span>(<span class="string">&#x27;output&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">default</span> = streamTask;</span><br></pre></td></tr></table></figure>

<p>promise</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">promiseTask</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;the value is ignored&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">default</span> = promiseTask;</span><br></pre></td></tr></table></figure>

<p>event emitter</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">EventEmitter</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;events&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">eventEmitterTask</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> emitter = <span class="keyword">new</span> <span class="title class_">EventEmitter</span>();</span><br><span class="line">  <span class="comment">// Emit has to happen async otherwise gulp isn&#x27;t listening yet</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> emitter.<span class="title function_">emit</span>(<span class="string">&#x27;finish&#x27;</span>), <span class="number">250</span>);</span><br><span class="line">  <span class="keyword">return</span> emitter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">default</span> = eventEmitterTask;</span><br></pre></td></tr></table></figure>

<p>child process</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; exec &#125; = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">childProcessTask</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">exec</span>(<span class="string">&#x27;date&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">default</span> = childProcessTask;</span><br></pre></td></tr></table></figure>

<p>observable</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Observable</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;rxjs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">observableTask</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Observable</span>.<span class="title function_">of</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">default</span> = observableTask;</span><br></pre></td></tr></table></figure>

<p>callback</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">callbackError</span>(<span class="params">cb</span>) &#123;</span><br><span class="line">  <span class="comment">// `cb()` should be called by some async work</span></span><br><span class="line">  <span class="title function_">cb</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;kaboom&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">default</span> = callbackError;</span><br></pre></td></tr></table></figure>

<p><strong>gulp 不再支持同步任务（Synchronous tasks）了。因为同步任务常常会导致难以调试的细微错误，例如忘记从任务（task）中返回 stream。</strong></p>
<h2 id="流Stream"><a href="#流Stream" class="headerlink" title="流Stream"></a>流Stream</h2><p>常见流使用:<code>src,dest,pipe()</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; src, dest &#125; = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> babel = <span class="built_in">require</span>(<span class="string">&#x27;gulp-babel&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> uglify = <span class="built_in">require</span>(<span class="string">&#x27;gulp-uglify&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> rename = <span class="built_in">require</span>(<span class="string">&#x27;gulp-rename&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">default</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">src</span>(<span class="string">&#x27;src/*.js&#x27;</span>)</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">babel</span>())</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">src</span>(<span class="string">&#x27;vendor/*.js&#x27;</span>))</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">dest</span>(<span class="string">&#x27;output/&#x27;</span>))</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">uglify</span>())</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">rename</span>(&#123; <span class="attr">extname</span>: <span class="string">&#x27;.min.js&#x27;</span> &#125;))</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">dest</span>(<span class="string">&#x27;output/&#x27;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Glob-详解"><a href="#Glob-详解" class="headerlink" title="Glob 详解"></a>Glob 详解</h2><p>glob 是由普通字符和&#x2F;或通配字符组成的字符串，用于匹配文件路径。可以利用一个或多个 glob 在文件系统中定位文件。</p>
<p>至少一个匹配项目</p>
<p>分隔符永远是<code>/</code>不分系统</p>
<p><code>\\</code>用于转译，如 <code>\\*</code>表示普通的星号 不是通配符</p>
<p>避免使用<code>path</code>, <code>__dirname</code>,<code>__filename</code>来创建glob</p>
<blockquote>
<p>单个星号 不能匹配层级文件夹</p>
</blockquote>
<blockquote>
<p>两个星号 能匹配任意层级文件夹</p>
</blockquote>
<blockquote>
<p>取反<code>!</code></p>
</blockquote>
<p><code>[&#39;script/**/*.js&#39;, &#39;!scripts/vendor/&#39;, &#39;scripts/vendor/react.js&#39;]</code></p>
<p><code>[&#39;**/*.js&#39;, &#39;!node_modules/&#39;]</code></p>
<p><a href="https://www.gulpjs.com.cn/docs/getting-started/explaining-globs/#%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6-%E5%8F%96%E5%8F%8D">注意书写 会影响执行速度</a></p>
<h2 id="插件-plugins"><a href="#插件-plugins" class="headerlink" title="插件 plugins"></a>插件 plugins</h2><p><a href="https://gulpjs.com/plugins/">https://gulpjs.com/plugins/</a></p>
<p>实质是流转换器 插件应当总是用来转换文件的。其他操作都应该使用（非插件的） Node 模块或库来实现。</p>
<p>条件插件 gulp-if</p>
<h2 id="文件监控-watch"><a href="#文件监控-watch" class="headerlink" title="文件监控 watch"></a>文件监控 watch</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; watch, series &#125; = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">clean</span>(<span class="params">cb</span>) &#123;</span><br><span class="line">  <span class="comment">// body omitted</span></span><br><span class="line">  <span class="title function_">cb</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">javascript</span>(<span class="params">cb</span>) &#123;</span><br><span class="line">  <span class="comment">// body omitted</span></span><br><span class="line">  <span class="title function_">cb</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">css</span>(<span class="params">cb</span>) &#123;</span><br><span class="line">  <span class="comment">// body omitted</span></span><br><span class="line">  <span class="title function_">cb</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以只关联一个任务</span></span><br><span class="line"><span class="title function_">watch</span>(<span class="string">&#x27;src/*.css&#x27;</span>, css);</span><br><span class="line"><span class="comment">// 或者关联一个任务组合</span></span><br><span class="line"><span class="title function_">watch</span>(<span class="string">&#x27;src/*.js&#x27;</span>, <span class="title function_">series</span>(clean, javascript));</span><br></pre></td></tr></table></figure>

<p>指定监控的事件’add’、’addDir’、’change’、’unlink’、’unlinkDir’、’ready’、’error’。此外，还有一个 ‘all’ 事件，它表示除 ‘ready’ 和 ‘error’ 之外的所有事件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; watch &#125; = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 所有事件都将被监控</span></span><br><span class="line"><span class="title function_">watch</span>(<span class="string">&#x27;src/*.js&#x27;</span>, &#123; <span class="attr">events</span>: <span class="string">&#x27;all&#x27;</span> &#125;, <span class="keyword">function</span>(<span class="params">cb</span>) &#123;</span><br><span class="line">  <span class="comment">// body omitted</span></span><br><span class="line">  <span class="title function_">cb</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>如需在第一次文件修改之前执行，也就是调用 watch() 之后立即执行，请将 ignoreInitial 参数设置为 false。</p>
<p><code>watch(...,&#123;ignoreInitial:false&#125;,...)</code></p>
<p>延迟 <code>&#123; delay: 500 &#125;</code></p>
<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><h2 id="Vinyl"><a href="#Vinyl" class="headerlink" title="Vinyl"></a>Vinyl</h2><p><code>Vinyl 对象</code> (the virtual file objects)</p>
<p>文件元数据作为 Node 的 fs.Stats 实例提供。它是 Vinyl 实例的 stat 属性，并在内部用于确定 Vinyl 对象是否表示目录或符号链接（symbolic link）。当写入文件系统时，权限和时间值将从 Vinyl 对象的 stat 属性同步。</p>
<p>src()</p>
<p>dest()</p>
<p>symlink()</p>
<p>lastRun()</p>
<p>series()</p>
<p>parallel()</p>
<p>watch()</p>
<p>task()</p>
<p>registry()</p>
<p>tree()</p>
<p>Vinyl</p>
<p>Vinyl.isVinyl()</p>
<p>Vinyl.isCustomProp()</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.gulpjs.com.cn/docs/getting-started/quick-start/">https://www.gulpjs.com.cn/docs/getting-started/quick-start/</a></p>
]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>gulp</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-node-protobuf</title>
    <url>/Blog/19-11-25-vue-node-protobuf/</url>
    <content><![CDATA[<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><p><code>yarn add protobuf cors protobufjs</code></p>
<p>生成js</p>
<p><code>pbjs -t static-module -w es6 -o ./proto/msgProto.js ./proto/message.proto</code></p>
<p>运行server:<code>node index.js</code></p>
<h1 id="代码清单"><a href="#代码清单" class="headerlink" title="代码清单"></a>代码清单</h1><h2 id="proto-x2F-message-proto"><a href="#proto-x2F-message-proto" class="headerlink" title="proto&#x2F;message.proto"></a>proto&#x2F;message.proto</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">message Message &#123;</span><br><span class="line">    required string text = 1;</span><br><span class="line">    required string lang = 2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="server代码index-js"><a href="#server代码index-js" class="headerlink" title="server代码index.js"></a>server代码index.js</h2><p>注意修改<code>let protoFolderName = &#39;../&#39;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// https://protobufjs.github.io/protobuf.js/</span><br><span class="line"></span><br><span class="line">const path = require(&#x27;path&#x27;)</span><br><span class="line">const express = require(&#x27;express&#x27;)</span><br><span class="line">const cors = require(&#x27;cors&#x27;)</span><br><span class="line">const app = express()</span><br><span class="line">app.use(cors())</span><br><span class="line">const messages = [</span><br><span class="line">  &#123;text: &#x27;hey&#x27;, lang: &#x27;english&#x27;&#125;,</span><br><span class="line">  &#123;text: &#x27;isänme&#x27;, lang: &#x27;tatar&#x27;&#125;,</span><br><span class="line">  &#123;text: &#x27;hej&#x27;, lang: &#x27;swedish&#x27;&#125;</span><br><span class="line">];</span><br><span class="line">let protoFolderName = &#x27;../&#x27;</span><br><span class="line">app.use (function(req, res, next) &#123;</span><br><span class="line">  if (!req.is(&#x27;application/octet-stream&#x27;))&#123;</span><br><span class="line">    return next()</span><br><span class="line">  &#125;</span><br><span class="line">  var data = [] // List of Buffer objects</span><br><span class="line">  req.on(&#x27;data&#x27;, function(chunk) &#123;</span><br><span class="line">    data.push(chunk) // Append Buffer object</span><br><span class="line">  &#125;)</span><br><span class="line">  req.on(&#x27;end&#x27;, function() &#123;</span><br><span class="line">    if (data.length &lt;= 0 ) return next()</span><br><span class="line">    data = Buffer.concat(data) // Make one large Buffer of it</span><br><span class="line">    console.log(&#x27;Received buffer&#x27;, data)</span><br><span class="line">    req.raw = data</span><br><span class="line">    next()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">let ProtoBuf = require(&#x27;protobufjs&#x27;)</span><br><span class="line">let root = ProtoBuf.loadSync(</span><br><span class="line">  path.join(__dirname,</span><br><span class="line">    protoFolderName,</span><br><span class="line">    &#x27;message.proto&#x27;)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">let Message = root.lookupType(&quot;Message&quot;);</span><br><span class="line"></span><br><span class="line">app.get(&#x27;/api/messages&#x27;, (req, res, next)=&gt;&#123;</span><br><span class="line">  let msg = Message.create(messages[Math.round(Math.random()*2)])</span><br><span class="line">  console.log(&#x27;Encode and decode: &#x27;, Message.decode(Message.encode(msg).finish()))</span><br><span class="line">  console.log(&#x27;Buffer we are sending: &#x27;, Message.encode(msg).finish())</span><br><span class="line">  // res.send(msg.encode().toBuffer(), &#x27;binary&#x27;) // alternative</span><br><span class="line">  res.send(Message.encode(msg).finish())</span><br><span class="line">  // res.send(Buffer.from(msg.toArrayBuffer()), &#x27;binary&#x27;) // alternative</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.post(&#x27;/api/messages&#x27;, (req, res, next)=&gt;&#123;</span><br><span class="line">  if (req.raw) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">      // Decode the Message</span><br><span class="line">      let msg = Message.decode(req.raw)</span><br><span class="line">      console.log(&#x27;Received &quot;%s&quot; in %s&#x27;, msg.text, msg.lang)</span><br><span class="line">      console.log(&#x27;Received :&#x27;,msg);</span><br><span class="line"></span><br><span class="line">      msg = Message.create(messages[Math.round(Math.random()*2)])</span><br><span class="line">      console.log(&#x27;Encode and decode: &#x27;, Message.decode(Message.encode(msg).finish()))</span><br><span class="line">      console.log(&#x27;Buffer we are sending: &#x27;, Message.encode(msg).finish())</span><br><span class="line">      // res.send(msg.encode().toBuffer(), &#x27;binary&#x27;) // alternative</span><br><span class="line">      res.send(Message.encode(msg).finish())</span><br><span class="line">    &#125; catch (err) &#123;</span><br><span class="line">      console.log(&#x27;Processing failed:&#x27;, err)</span><br><span class="line">      next(err)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    console.log(&quot;Not binary data&quot;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.all(&#x27;*&#x27;, (req, res)=&gt;&#123;</span><br><span class="line">  res.status(400).send(&#x27;Not supported&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const PORT=3001;</span><br><span class="line">app.listen(PORT,()=&gt;&#123;</span><br><span class="line">  console.log(`app listening on port $&#123;PORT&#125;!`);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>


<h2 id="vue-代码"><a href="#vue-代码" class="headerlink" title="vue 代码"></a>vue 代码</h2><pre><code>&lt;template&gt;
  &lt;div class=&quot;container&quot;&gt;
    &#123;&#123; msg &#125;&#125;
    &lt;button @click=&quot;postProtobuf()&quot;&gt;
      post
    &lt;/button&gt;
    &lt;button @click=&quot;getProtobuf()&quot;&gt;
      get
    &lt;/button&gt;
    &lt;code&gt;
      proto生成js &quot;proto2js&quot;: &quot;pbjs -t static-module -w es6 -o ./proto/msgProto.js ./proto/message.proto&quot;,
    &lt;/code&gt;
    &lt;code&gt;
      proto生成ts &quot;js2ts&quot;: &quot;pbts -o ./proto/msgProto.d.ts ./proto/msgProto.js&quot;,
    &lt;/code&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
/* eslint-disable new-cap */
import * as msgProto from &#39;~/proto/msgProto.js&#39;

export default &#123;
  components: &#123;&#125;,
  data() &#123;
    return &#123;
      val: process.env.baseUrl,
      msg: &#123;&#125;
    &#125;
  &#125;,
  mounted() &#123;
  &#125;,
  methods: &#123;
    getProtobuf() &#123;
      this.$axios.get(
        &#39;http://127.0.0.1:3001/api/messages&#39;,
        &#123; responseType: &#39;arraybuffer&#39; &#125;
      ).then((response) =&gt; &#123;
        console.log(&#39;Response from the server: &#39;, response)
        const data = new Uint8Array(response.data) // important !
        const ret = msgProto.Message.decode(data)
        console.log(&#39;Decoded message&#39;, ret)
        this.msg = ret.toJSON()
      &#125;)
    &#125;,
    postProtobuf() &#123;
      const msg = new msgProto.Message(&#123; text: &#39;yx xr&#39;, lang: &#39;slang&#39; &#125;)
      const buffer = msgProto.Message.encode(msg).finish()
      console.log(&#39;de(en(msg))&#39;, msgProto.Message.decode(buffer))
      console.log(&#39;send:&#39;, msg)
      console.log(&#39;send buffer:&#39;, buffer)
      this.$axios.$post(
        &#39;http://127.0.0.1:3001/api/messages&#39;,
        buffer,
        &#123;
          headers: &#123; &#39;Content-Type&#39;: &#39;application/octet-stream&#39; &#125;,
          responseType: &#39;arraybuffer&#39;
        &#125;
      ).then((response) =&gt; &#123;
        console.log(&#39;Response from the server: &#39;, response)
        const data = new Uint8Array(response) // important !
        const ret = msgProto.Message.decode(data)
        console.log(&#39;Decoded message&#39;, ret)
        this.msg = ret.toJSON()
      &#125;).catch(function(response) &#123;
        console.log(response)
      &#125;)
    &#125;
  &#125;
&#125;
&lt;/script&gt;

&lt;style&gt;
.container &#123;
  margin: 0 auto;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  text-align: center;
&#125;

.title &#123;
  font-family: &#39;Quicksand&#39;, &#39;Source Sans Pro&#39;, -apple-system, BlinkMacSystemFont,
  &#39;Segoe UI&#39;, Roboto, &#39;Helvetica Neue&#39;, Arial, sans-serif;
  display: block;
  font-weight: 300;
  font-size: 100px;
  color: #35495e;
  letter-spacing: 1px;
&#125;

.subtitle &#123;
  font-weight: 300;
  font-size: 42px;
  color: #526488;
  word-spacing: 5px;
  padding-bottom: 15px;
&#125;

.links &#123;
  padding-top: 15px;
&#125;
&lt;/style&gt;
</code></pre>
]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>json</tag>
        <tag>protobuf</tag>
      </tags>
  </entry>
  <entry>
    <title>mpaas password</title>
    <url>/Blog/19-12-16-mpaas-password/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">JSEncrypt</span> = <span class="built_in">require</span>(<span class="string">&#x27;node-jsencrypt&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> encrypt;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">rsa</span>(<span class="params">pwd, publicKey</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!encrypt) &#123;</span><br><span class="line">        encrypt = <span class="keyword">new</span> <span class="title class_">JSEncrypt</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!pwd || <span class="keyword">typeof</span> pwd !== <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> newPwd = pwd;</span><br><span class="line">    <span class="keyword">if</span> (newPwd.<span class="property">length</span> &gt; <span class="number">230</span>) &#123;</span><br><span class="line">        newPwd = newPwd.<span class="title function_">substr</span>(<span class="number">0</span>, <span class="number">230</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    encrypt.<span class="title function_">setPublicKey</span>(publicKey);</span><br><span class="line">    <span class="keyword">let</span> result = encrypt.<span class="title function_">encrypt</span>(newPwd);</span><br><span class="line">    <span class="keyword">let</span> tryTimes = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (result.<span class="property">length</span> !== <span class="number">344</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果加密后的字符串长度不是344，后端必然解密失败</span></span><br><span class="line">        result = encrypt.<span class="title function_">encrypt</span>(newPwd);</span><br><span class="line">        <span class="keyword">if</span> (tryTimes &gt; <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="comment">// 最多重试十次</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        tryTimes += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> pk = <span class="string">&#x27;publicKey&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> pwd = <span class="string">&#x27;密码&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">rsa</span>(pwd,pk));</span><br></pre></td></tr></table></figure>

<p><code>tcpdump -S -e -vv -i wlo1 host xx.xx.xx.xx</code></p>
]]></content>
      <categories>
        <category>software</category>
        <category>encrypt</category>
      </categories>
      <tags>
        <tag>encrypt</tag>
      </tags>
  </entry>
  <entry>
    <title>net/ping/virus scan</title>
    <url>/Blog/19-12-20-netrelative/</url>
    <content><![CDATA[<h1 id="disable-ping"><a href="#disable-ping" class="headerlink" title="disable ping"></a>disable ping</h1><p><code>echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all</code></p>
<p><code>/etc/sysctl.conf</code> 追加</p>
<p><code>net.ipv4.icmp_echo_ignore_all = 1</code></p>
<h1 id="list-running-program"><a href="#list-running-program" class="headerlink" title="list running program"></a>list running program</h1><p><code>ps -ef  |  awk &#39;$8~/^\// &#123;for(i=8;i&lt;=NF;i++)printf $i&quot; &quot;; print &quot;&quot; &#125;&#39; | sort | uniq</code></p>
<h1 id="port-and-net"><a href="#port-and-net" class="headerlink" title="port and net"></a>port and net</h1><p><code>lsof -i</code></p>
<p><code>ifconfig</code> the value of <code>TX bytes</code></p>
<p><code>hethogs</code></p>
<h1 id="clamav"><a href="#clamav" class="headerlink" title="clamav"></a>clamav</h1><p><code>clamscan -r -i /home/ -l  /var/log/clamscan.log</code></p>
<p><code>freshclam</code> before use</p>
<p><code>clamtk</code> for ui</p>
<h1 id="relative"><a href="#relative" class="headerlink" title="relative"></a>relative</h1><p>awk</p>
<p>anti virus</p>
]]></content>
      <categories>
        <category>software</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>ping</tag>
        <tag>virus</tag>
      </tags>
  </entry>
  <entry>
    <title>select/poll/epoll</title>
    <url>/Blog/19-12-27-select-poll-epoll/</url>
    <content><![CDATA[<p>同步多路IO复用</p>
<h1 id="CODE"><a href="#CODE" class="headerlink" title="CODE"></a>CODE</h1><p>五个子进程 2000本地端口<code>SOCK_STREAM</code>的demo</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/select.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;poll.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/epoll.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXBUF 256</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHILD 5</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">child_process</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">sleep</span>(<span class="number">2</span>);</span><br><span class="line">  <span class="type">char</span> msg[MAXBUF];</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">sockaddr_in</span> addr = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">  <span class="type">int</span> sockfd,num=<span class="number">1</span>;</span><br><span class="line">  <span class="built_in">srandom</span>(<span class="built_in">getpid</span>());</span><br><span class="line">  <span class="comment">/* Create socket and connect to server */</span></span><br><span class="line">  sockfd = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">  addr.sin_family = AF_INET;</span><br><span class="line">  addr.sin_port = <span class="built_in">htons</span>(<span class="number">2000</span>);</span><br><span class="line">  addr.sin_addr.s_addr = <span class="built_in">inet_addr</span>(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">connect</span>(sockfd, (<span class="keyword">struct</span> sockaddr*)&amp;addr, <span class="built_in">sizeof</span>(addr));</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;child &#123;%d&#125; connected \n&quot;</span>, <span class="built_in">getpid</span>());</span><br><span class="line">  <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="type">int</span> sl = (<span class="built_in">random</span>() % <span class="number">10</span> ) +  <span class="number">1</span>;</span><br><span class="line">    num++;</span><br><span class="line">    <span class="built_in">sleep</span>(sl);</span><br><span class="line">    <span class="built_in">sprintf</span> (msg, <span class="string">&quot;Test message %d from client %d&quot;</span>, num, <span class="built_in">getpid</span>());</span><br><span class="line">    <span class="built_in">write</span>(sockfd, msg, <span class="built_in">strlen</span>(msg));	<span class="comment">/* Send message -&gt; 127.0.0.1:2000 */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">selectDemo</span><span class="params">(<span class="type">int</span> sockfd)</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> fds[CHILD];</span><br><span class="line">  fd_set rset;</span><br><span class="line">  <span class="type">socklen_t</span> maxfd=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;CHILD;i++) &#123;</span><br><span class="line">    fds[i] = <span class="built_in">accept</span>(sockfd,<span class="literal">NULL</span>,<span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;fds[%d]=%d\n&quot;</span>,i,fds[i]);</span><br><span class="line">    <span class="keyword">if</span>(fds[i] &gt; maxfd)</span><br><span class="line">      maxfd = fds[i];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="built_in">FD_ZERO</span>(&amp;rset);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i&lt; CHILD; i++ ) &#123;</span><br><span class="line">      <span class="built_in">FD_SET</span>(fds[i],&amp;rset);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;round again&quot;</span>);</span><br><span class="line">    <span class="built_in">select</span>(maxfd+<span class="number">1</span>, &amp;rset, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>); <span class="comment">// 返回值是 ready的个数 &gt;= 0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;CHILD;i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">FD_ISSET</span>(fds[i], &amp;rset))&#123;</span><br><span class="line">        <span class="type">char</span> buffer[MAXBUF];</span><br><span class="line">        <span class="type">int</span> n = <span class="built_in">read</span>(fds[i], buffer, MAXBUF);</span><br><span class="line">        buffer[n] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="built_in">puts</span>(buffer); <span class="comment">// 主进程把子进程的内容打印</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pollDemo</span><span class="params">(<span class="type">int</span> sockfd)</span></span>&#123;</span><br><span class="line">  pollfd pollfds[CHILD]; <span class="comment">// 这里变成了 数组，因此长度不再受到限制</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;CHILD;i++)&#123;</span><br><span class="line">    pollfds[i].fd = <span class="built_in">accept</span>(sockfd,<span class="literal">NULL</span>,<span class="literal">NULL</span>);</span><br><span class="line">    pollfds[i].events = POLLIN;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;round again&quot;</span>);</span><br><span class="line">    <span class="built_in">poll</span>(pollfds, CHILD, <span class="number">50000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;CHILD;i++) &#123; <span class="comment">// 但这里检查状态时 依然是 轮询</span></span><br><span class="line">      <span class="keyword">if</span> (pollfds[i].revents &amp; POLLIN)&#123;</span><br><span class="line">        pollfds[i].revents = <span class="number">0</span>; <span class="comment">// 不需要每次 把所有的重设置到set里，只需要把已经就绪的状态恢复掉</span></span><br><span class="line">        <span class="type">char</span> buffer[MAXBUF];</span><br><span class="line">        <span class="type">int</span> n = <span class="built_in">read</span>(pollfds[i].fd, buffer, MAXBUF);</span><br><span class="line">        buffer[n] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="built_in">puts</span>(buffer);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">epollDemo</span><span class="params">(<span class="type">int</span> sockfd)</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> epfd = <span class="built_in">epoll_create</span>(<span class="number">233</span>); <span class="comment">// create a context in the kernel 文档说 只要是正值就行 具体值被忽略了</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;CHILD;i++) &#123;</span><br><span class="line">    <span class="type">static</span> <span class="keyword">struct</span> <span class="title class_">epoll_event</span> ev; <span class="comment">// 注意这里是static</span></span><br><span class="line">    ev.data.fd = <span class="built_in">accept</span>(sockfd,<span class="literal">NULL</span>,<span class="literal">NULL</span>); <span class="comment">// 这也可以 自定义其它的data值</span></span><br><span class="line">    ev.events = EPOLLIN; <span class="comment">// 这里还可以设置 EPOLLET 的bit位 启用edge-triggered</span></span><br><span class="line">    <span class="built_in">epoll_ctl</span>(epfd, EPOLL_CTL_ADD, ev.data.fd, &amp;ev); <span class="comment">// add and remove file descriptors to/from the context using epoll_ctl</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;round again&quot;</span>);</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">epoll_event</span> events[CHILD];</span><br><span class="line">    <span class="type">int</span> nfds = <span class="built_in">epoll_wait</span>(epfd, events, CHILD, <span class="number">50000</span>); <span class="comment">// 把就绪的写入到events中 写了nfds个</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nfds;i++) &#123; <span class="comment">// 遍历的都是就绪的</span></span><br><span class="line">      <span class="type">char</span> buffer[MAXBUF];</span><br><span class="line">      <span class="type">int</span> n = <span class="built_in">read</span>(events[i].data.fd, buffer, MAXBUF);</span><br><span class="line">      buffer[n] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">      <span class="built_in">puts</span>(buffer);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> sockfd;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">sockaddr_in</span> addr;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;CHILD;i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(fork() == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">child_process</span>(); <span class="comment">// 子进程</span></span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 主进程</span></span><br><span class="line"></span><br><span class="line">  sockfd = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">memset</span>(&amp;addr, <span class="number">0</span>, <span class="built_in">sizeof</span> (addr));</span><br><span class="line">  addr.sin_family = AF_INET;</span><br><span class="line">  addr.sin_port = <span class="built_in">htons</span>(<span class="number">2000</span>);</span><br><span class="line">  addr.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line">  <span class="built_in">bind</span>(sockfd,(<span class="keyword">struct</span> sockaddr*)&amp;addr ,<span class="built_in">sizeof</span>(addr));</span><br><span class="line">  <span class="built_in">listen</span> (sockfd, CHILD);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 三种 demo 解除注释 使用</span></span><br><span class="line">  <span class="comment">// selectDemo(sockfd);</span></span><br><span class="line">  <span class="comment">// pollDemo(sockfd);</span></span><br><span class="line">  <span class="comment">// epollDemo(sockfd);</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="select"><a href="#select" class="headerlink" title="select"></a>select</h1><p><code>man 2 select</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">select</span><span class="params">(<span class="type">int</span> nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, <span class="keyword">struct</span> timeval *timeout)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">FD_CLR</span><span class="params">(<span class="type">int</span> fd, fd_set *set)</span></span>; <span class="comment">// 从set中移除fd</span></span><br><span class="line"><span class="function"><span class="type">int</span>  <span class="title">FD_ISSET</span><span class="params">(<span class="type">int</span> fd, fd_set *set)</span></span>; <span class="comment">// 测试set中是否设置fd</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">FD_SET</span><span class="params">(<span class="type">int</span> fd, fd_set *set)</span></span>; <span class="comment">// 在set中设置fd</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">FD_ZERO</span><span class="params">(fd_set *set)</span></span>; <span class="comment">// fd zero</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pselect</span><span class="params">(<span class="type">int</span> nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, <span class="type">const</span> <span class="keyword">struct</span> timespec *timeout, <span class="type">const</span> <span class="type">sigset_t</span> *sigmask)</span></span>;</span><br></pre></td></tr></table></figure>

<p><code>nfds</code> should be set to the highest-numbered file descriptor in any of the three  sets,  plus  1. The indicated file descriptors in each set are checked, up to this limit (but see BUGS).</p>
<p>Three independent sets of file descriptors are watched.</p>
<p>The file descriptors listed in <code>readfds</code> will be watched to see if characters become available for reading (more precisely, to see if  a read  will not block; in particular, a file descriptor is also ready on end-of-file).</p>
<p>The file descriptors in <code>writefds</code> will be watched to see if space is available for write (though a  large write may still block).</p>
<p>The file descriptors in <code>exceptfds</code> will be watched for exceptional conditions.  (For examples of some exceptional  conditions,  see  the  discussion  of  <code>POLLPRI</code>  in <code>poll(2)</code>.)</p>
<p>The time structures involved are defined in <code>&lt;sys/time.h&gt;</code> and look like</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">timeval</span> &#123;</span><br><span class="line">    <span class="type">long</span>    tv_sec;         <span class="comment">/* seconds */</span></span><br><span class="line">    <span class="type">long</span>    tv_usec;        <span class="comment">/* microseconds */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>and</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">timespec</span> &#123;</span><br><span class="line">    <span class="type">long</span>    tv_sec;         <span class="comment">/* seconds */</span></span><br><span class="line">    <span class="type">long</span>    tv_nsec;        <span class="comment">/* nanoseconds */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>我们可以看到有时 会多个fd同时 就绪，</p>
<p>并且每次select后需要 再走一边<code>FD_ZERO</code> -&gt; <code>FD_SET</code></p>
<p>当就绪(或者超时)的时候，需要for所有的fd用<code>FD_ISSET</code>来判断就绪状态</p>
<p>单个进程能够监视的文件描述符的数量存在最大限制，它由<code>FD_SETSIZE</code>设置通常为1024，最大数量可以通过修改宏定义甚至重新编译内核的方式来满足。</p>
<p><a href="https://sites.uclouvain.be/SystInfo/usr/include/sys/select.h.html">select.h</a></p>
<p>内核&#x2F;用户空间的拷贝问题，select需要维护一个用来存放大量fd的数据结构，这样会使得用户空间和内核空间在传递该结构时复制开销大。</p>
<p>轮询扫描: 也就是for+<code>FD_ISSET</code></p>
<p>水平触发:应用程序如果没有完成对一个已经就绪的文件描述符进行IO,那么之后再次select调用还是会将这些文件描述符通知进程。</p>
<h1 id="poll"><a href="#poll" class="headerlink" title="poll"></a>poll</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">poll</span><span class="params">(<span class="keyword">struct</span> pollfd *fds, <span class="type">nfds_t</span> nfds, <span class="type">int</span> timeout)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">pollfd</span> &#123;</span><br><span class="line">    <span class="type">int</span>   fd;         <span class="comment">/* file descriptor */</span></span><br><span class="line">    <span class="type">short</span> events;     <span class="comment">/* requested events */</span></span><br><span class="line">    <span class="type">short</span> revents;    <span class="comment">/* returned events */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>采用<code>数组指针</code>+<code>长度</code>的参数形式</p>
<p>返回值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">On success, a positive number is returned; this is the number of</span><br><span class="line">structures which have nonzero revents fields (in other words, those</span><br><span class="line">descriptors with events or errors reported).  A value of 0 indicates</span><br><span class="line">that the call timed out and no file descriptors were ready.  On</span><br><span class="line">error, -1 is returned, and errno is set appropriately.</span><br></pre></td></tr></table></figure>

<p>水平触发</p>
<p>其和select不同的地方：采用数组的方式替换原有<code>fd_set</code>数据结构,而使其没有连接数的限制。</p>
<p>虽然也是轮询，但是假设是单个fd,但fd的值很大的情况下，poll就会比select效率好</p>
<p>上面看到了只需要一次初始化，和恢复已经就绪的fd,不需要每次初始化</p>
<p>可移植性:<code>select( ) is more portable, as some Unix systems do not support poll( )</code></p>
<h1 id="epoll"><a href="#epoll" class="headerlink" title="epoll"></a>epoll</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">epoll_create</span><span class="params">(<span class="type">int</span> size)</span></span>; <span class="comment">// Since Linux 2.6.8, the size argument is ignored, but must be greater than zero;</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">epoll_ctl</span><span class="params">(<span class="type">int</span> epfd, <span class="type">int</span> op, <span class="type">int</span> fd, <span class="keyword">struct</span> epoll_event *event)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">epoll_wait</span><span class="params">(<span class="type">int</span> epfd, <span class="keyword">struct</span> epoll_event *events,<span class="type">int</span> maxevents, <span class="type">int</span> timeout)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">union</span> <span class="title class_">epoll_data</span> &#123;</span><br><span class="line">    <span class="type">void</span>        *ptr;</span><br><span class="line">    <span class="type">int</span>          fd;</span><br><span class="line">    <span class="type">uint32_t</span>     u32;</span><br><span class="line">    <span class="type">uint64_t</span>     u64;</span><br><span class="line">&#125; <span class="type">epoll_data_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">epoll_event</span> &#123;</span><br><span class="line">    <span class="type">uint32_t</span>     events;      <span class="comment">/* Epoll events */</span></span><br><span class="line">    <span class="type">epoll_data_t</span> data;        <span class="comment">/* User data variable */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>前面两种，都是 user space设置，要用时调用 select&#x2F;poll 进入 kernel 态</p>
<ul>
<li>create a context in the kernel using <code>epoll_create</code></li>
<li>add and remove file descriptors to&#x2F;from the context using <code>epoll_ctl</code></li>
<li>wait for events in the context using <code>epoll_wait</code> ,据说这里做了内存映射优化</li>
</ul>
<p><code>epoll_ctl</code>这里要有fd参数，<code>epoll_event</code>中也有<code>epoll_data</code> 中有<code>fd</code></p>
<p>然而 里面的<code>epoll_data</code>是个<code>union</code>也就是调用者自己喜欢放什么就放什么,不论是下面的fd还是</p>
<p>Level-triggered(默认) and edge-triggered</p>
<p>LT模式：若就绪的事件一次没有处理完要做的事件，就会一直去处理。即就会将没有处理完的事件继续放回到就绪队列之中（即那个内核中的链表），一直进行处理。 </p>
<p>ET模式：就绪的事件只能处理一次，若没有处理完会在下次的其它事件就绪时再进行处理。而若以后再也没有就绪的事件，那么剩余的那部分数据也会随之而丢失。 </p>
<p>由此可见：ET模式的效率比LT模式的效率要高很多。只是如果使用ET模式，就要保证每次进行数据处理时，要将其处理完，不能造成数据丢失，这样对编写代码的人要求就比较高。 <br>注意：ET模式只支持非阻塞的读写：为了保证数据的完整性。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>上面的函数都有一些保证<code>原子性</code>的操作函数，例如<code>pselect</code>,<code>epoll_pwait</code>等</p>
<p>例如<code>epoll_pwait()</code>等价于</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">sigset_t</span> origmask;</span><br><span class="line"></span><br><span class="line"><span class="built_in">pthread_sigmask</span>(SIG_SETMASK, &amp;sigmask, &amp;origmask);</span><br><span class="line">ready = <span class="built_in">epoll_wait</span>(epfd, &amp;events, maxevents, timeout);</span><br><span class="line"><span class="built_in">pthread_sigmask</span>(SIG_SETMASK, &amp;origmask, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>有的地方说</p>
</blockquote>
<p>表面上看epoll的性能最好，但是在连接数少并且连接都十分活跃的情况下，select和poll的性能可能比epoll好，毕竟epoll的通知机制需要很多函数回调</p>
<h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><p><a href="http://man7.org/linux/man-pages/man2/listen.2.html">man 2 listen</a></p>
<p><a href="http://www.man7.org/linux/man-pages/man2/read.2.html">man 2 read</a></p>
<p><a href="http://man7.org/linux/man-pages/man2/select.2.html">man 2 select</a></p>
<p><a href="http://man7.org/linux/man-pages/man2/poll.2.html">man 2 poll</a></p>
<p><a href="http://man7.org/linux/man-pages/man2/poll.2.html">man 7 epoll</a></p>
<p><a href="http://man7.org/linux/man-pages/man2/epoll_create.2.html">man 2 epoll_create</a></p>
<p><a href="http://man7.org/linux/man-pages/man2/epoll_ctl.2.html">man 2 epoll_ctl</a></p>
<p><a href="http://www.ulduzsoft.com/2014/01/select-poll-epoll-practical-difference-for-system-architects/">http://www.ulduzsoft.com/2014/01/select-poll-epoll-practical-difference-for-system-architects/</a></p>
<p><a href="https://devarea.com/linux-io-multiplexing-select-vs-poll-vs-epoll/">https://devarea.com/linux-io-multiplexing-select-vs-poll-vs-epoll/</a></p>
<p><a href="https://www.ibm.com/support/knowledgecenter/ssw_ibm_i_71/rzab6/poll.htm">Using poll() instead of select()</a></p>
<p><a href="https://www.ibm.com/support/knowledgecenter/ssw_ibm_i_71/rzab6/xasynchi0.htm">Example: Using asynchronous I&#x2F;O</a></p>
<p><a href="https://www.ibm.com/support/knowledgecenter/ssw_ibm_i_71/rzab6/xnonblock.htm">Example: Nonblocking I&#x2F;O and select()</a></p>
<p><a href="https://medium.com/@copyconstruct/the-method-to-epolls-madness-d9d2d6378642">The method to epoll’s madness</a></p>
]]></content>
      <categories>
        <category>software</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>system</tag>
        <tag>computer</tag>
        <tag>backend</tag>
        <tag>io</tag>
        <tag>select</tag>
        <tag>poll</tag>
        <tag>epoll</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode use out my file watchers</title>
    <url>/Blog/20-01-19-vsc-ENOSPC/</url>
    <content><![CDATA[<h1 id="ENOSPC"><a href="#ENOSPC" class="headerlink" title="ENOSPC"></a>ENOSPC</h1><p>启动其它项目报错 <code>ENOSPC: System limit for number of file watchers reached</code></p>
<p>也可能它自己报<code>Visual Studio Code is unable to watch for file changes in this large workspace&quot; (error ENOSPC)</code></p>
<p>多次尝试都是关掉vscode就好了，但之前一直没有更准确的定位问题,以及真的是它的锅吗</p>
<p>网上更多的说改改系统的最大限制吧。</p>
<p>先看看<code>cat /proc/sys/fs/inotify/max_user_watches</code>，大多都是8192，然后说改<code>/etc/sysctl.conf</code>改到<code>fs.inotify.max_user_watches=524288</code></p>
<p>作为一个网易云音乐不用sudo启动不了就拒绝使用网易云音乐的人，又怎么会轻易该系统的东西&#x2F;&#x2F;虽然linux是真的好改</p>
<p>我先是自己去看了 <code>ps -aux | grep code/code | awk &#39;&#123;print $2&#125;&#39; | xargs -I &#123;&#125; ls -1  /proc/&#123;&#125;/fd | wc</code> 占用不算多也不算少但是和8192还是差几个数量级(以2为基的数量级)</p>
<p>然后又搜了些资料，大概有<code>anon_inode</code>和<code>inotify</code>这两个关键字，但没具体说是怎么查看</p>
<p>最后是搜到了这个脚本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line"></span><br><span class="line"># Get the procs sorted by the number of inotify watchers</span><br><span class="line">#</span><br><span class="line"># From `man find`: </span><br><span class="line">#    %h     Leading directories of file&#x27;s name (all but the last element).  If the file name contains no slashes  (since  it</span><br><span class="line">#           is in the current directory) the %h specifier expands to `.&#x27;.</span><br><span class="line">#    %f     File&#x27;s name with any leading directories removed (only the last element).</span><br><span class="line">lines=$(</span><br><span class="line">    find /proc/*/fd \</span><br><span class="line">    -lname anon_inode:inotify \</span><br><span class="line">    -printf &#x27;%hinfo/%f\n&#x27; 2&gt;/dev/null \</span><br><span class="line">    \</span><br><span class="line">    | xargs grep -c &#x27;^inotify&#x27;  \</span><br><span class="line">    | sort -n -t: -k2 -r \</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">printf &quot;\n%10s\n&quot; &quot;INOTIFY&quot;</span><br><span class="line">printf &quot;%10s\n&quot; &quot;WATCHER&quot;</span><br><span class="line">printf &quot;%10s  %5s     %s\n&quot; &quot; COUNT &quot; &quot;PID&quot; &quot;CMD&quot;</span><br><span class="line">printf -- &quot;----------------------------------------\n&quot;</span><br><span class="line">for line in $lines; do</span><br><span class="line">    watcher_count=$(echo $line | sed -e &#x27;s/.*://&#x27;)</span><br><span class="line">    pid=$(echo $line | sed -e &#x27;s/\/proc\/\([0-9]*\)\/.*/\1/&#x27;)</span><br><span class="line">    cmdline=$(ps --columns 120 -o command -h -p $pid) </span><br><span class="line">    printf &quot;%8d  %7d  %s\n&quot; &quot;$watcher_count&quot; &quot;$pid&quot; &quot;$cmdline&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<p>也就是 <code>/proc/具体pid/fdinfo/具体文件</code> 的以inotify开头的</p>
<p>这个也可以通过<code>/proc/具体pid/fd/具体fd -&gt; anon_inode:inotify</code>查看有哪个<code>symbolic link</code>是指向<code>anon_inode:inotify</code></p>
<p>可以看到其它的程序都用很少，就<code>idea-IU-193.5662.53/bin/fsnotifier64</code>和<code>/usr/share/code/code</code>使用是在4000数量级的</p>
<p>然后启动一个node 又是1000+</p>
<p>所以最后还是<code>改系统配置</code>+<code>改vsc的排除文件</code></p>
<h1 id="inotify"><a href="#inotify" class="headerlink" title="inotify"></a>inotify</h1><p>TODO 记录的意义，和具体文件查看</p>
<p><code>1024	inotify wd:175 ino:a7cc6 sdev:800002 mask:fc6 ignored_mask:0 fhandle-bytes:8 fhandle-type:1 f_handle:c67c0a00f48cb089</code></p>
<p>TODO 我记得最开始跑脚本有看到vscode用8000+ 的难道我看错了？反正后来暂时没有重现</p>
<h1 id="vscode-的建议"><a href="#vscode-的建议" class="headerlink" title="vscode 的建议"></a>vscode 的建议</h1><p>一个也是改系统的</p>
<p>另一个是增加配置中<code>files.watcherExclude</code>的文件glob描述,增加以后 再启动似乎从8000+降低到1000+ (需要重启)</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://howchoo.com/g/m2uzodviywm/node-increase-file-watcher-system-limit">https://howchoo.com/g/m2uzodviywm/node-increase-file-watcher-system-limit</a></p>
<p><a href="https://unix.stackexchange.com/questions/15509/whos-consuming-my-inotify-resources/426001#426001">https://unix.stackexchange.com/questions/15509/whos-consuming-my-inotify-resources/426001#426001</a></p>
<p><a href="https://github.com/fatso83/dotfiles/blob/master/utils/scripts/inotify-consumers">https://github.com/fatso83/dotfiles/blob/master/utils/scripts/inotify-consumers</a></p>
<p><a href="https://code.visualstudio.com/docs/setup/linux#_visual-studio-code-is-unable-to-watch-for-file-changes-in-this-large-workspace-error-enospc">https://code.visualstudio.com/docs/setup/linux#_visual-studio-code-is-unable-to-watch-for-file-changes-in-this-large-workspace-error-enospc</a></p>
<p><a href="https://www.tldp.org/LDP/Linux-Filesystem-Hierarchy/html/proc.html">https://www.tldp.org/LDP/Linux-Filesystem-Hierarchy/html/proc.html</a></p>
<p><a href="http://man7.org/linux/man-pages/man7/inotify.7.html">http://man7.org/linux/man-pages/man7/inotify.7.html</a></p>
]]></content>
      <categories>
        <category>software</category>
        <category>ide</category>
      </categories>
      <tags>
        <tag>ide</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>console source url</title>
    <url>/Blog/20-02-19-console.logsourceurl/</url>
    <content><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>chrome里有命令行输出的时候，右侧会有<code>VM:xxx</code>或者<code>源文件名:行数</code>的一个跳转链接</p>
<p>然而如果封装了console函数或者例如用了vconsole之类的库，</p>
<p>它的错误输出，可能就不是你所期望的自己的代码</p>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>如果只是简单的封装log</p>
<p>搜到的大多方案都是形如<code>var newlogfunction = console.log.bind(window.console)</code></p>
<p>或者是原来的调用变成返回函数，然后再调用大概变成<code>newconsole()()</code>的写法</p>
<p>然而和我期望的需求有些不符，</p>
<p>目前期望的是一个通用的函数内，增加一点调试时的参数输出，希望能输出调用者的位置</p>
<p>也搜索了call stack相关，目前看来有些地方能用<code>console.trace()</code>,但在webpack里就不行了？</p>
<p>有搜到过用<code>new Error()</code>但它的stack字段是个string ，还真有人字符分割解析这个string</p>
<p>目前一个比较科学的方案是用chrome的blackbox文件功能，对webpack里的无效，但是可以对例如vconsole进行blackbox，这样就能展示到原来调用的位置。</p>
<p>同时根据这个思考，可以在调试的版本中对文件的分块进行指定，让公共文件和具体文件webpack打分开的chunk</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://gist.github.com/paulirish/c307a5a585ddbcc17242">https://gist.github.com/paulirish/c307a5a585ddbcc17242</a></p>
<p><a href="https://stackoverflow.com/questions/9559725/extending-console-log-without-affecting-log-line">https://stackoverflow.com/questions/9559725/extending-console-log-without-affecting-log-line</a></p>
<p><a href="https://stackoverflow.com/questions/13815640/a-proper-wrapper-for-console-log-with-correct-line-number/32928812">https://stackoverflow.com/questions/13815640/a-proper-wrapper-for-console-log-with-correct-line-number/32928812</a></p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Console/trace">https://developer.mozilla.org/en-US/docs/Web/API/Console/trace</a></p>
<p><a href="https://developers.google.com/web/tools/chrome-devtools/javascript/reference">https://developers.google.com/web/tools/chrome-devtools/javascript/reference</a></p>
<p><a href="https://developer.chrome.com/devtools/docs/blackboxing">https://developer.chrome.com/devtools/docs/blackboxing</a></p>
]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>chrome</tag>
        <tag>debug</tag>
        <tag>code</tag>
      </tags>
  </entry>
  <entry>
    <title>js yield</title>
    <url>/Blog/20-02-26-js-yield/</url>
    <content><![CDATA[<h1 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h1><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield">yield</a></p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield*">yield*</a></p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function*">function*</a></p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*">function*</a></p>
<h1 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h1><p>直接丢浏览器或者node里跑代码</p>
<p>函数的值产生和继续执行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">function</span>* countAppleSales () &#123;</span><br><span class="line">  <span class="keyword">let</span> saleList = [<span class="number">3</span>, <span class="number">7</span>, <span class="number">5</span>]</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; saleList.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;in func before yield&#x27;</span>);</span><br><span class="line">    <span class="keyword">yield</span> saleList[i];</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;in func after yield&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> appleStore = <span class="title function_">countAppleSales</span>()  <span class="comment">// Generator &#123; &#125;</span></span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(appleStore.<span class="title function_">next</span>());</span><br><span class="line">&#125;,<span class="number">2000</span>);</span><br></pre></td></tr></table></figure>

<p>嵌套</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">g1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">g2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span>* <span class="title function_">g1</span>(); <span class="comment">// here</span></span><br><span class="line">  <span class="keyword">yield</span> <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> iterator = <span class="title function_">g2</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// &#123;value: 1, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// &#123;value: 2, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// &#123;value: 3, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// &#123;value: 4, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// &#123;value: 5, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure>

<p>遍历输出</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> val <span class="keyword">of</span> <span class="title function_">foo</span>()) &#123; <span class="comment">// here</span></span><br><span class="line">  str = str + val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br></pre></td></tr></table></figure>

<p>在函数调用是可以传参数，同时，在next调用也是可以传参数</p>
]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>yield</tag>
      </tags>
  </entry>
  <entry>
    <title>c++ template</title>
    <url>/Blog/20-04-14-cplusplustemplate/</url>
    <content><![CDATA[<h1 id="通用函数可变参数模板"><a href="#通用函数可变参数模板" class="headerlink" title="通用函数可变参数模板"></a>通用函数可变参数模板</h1><p>&#x2F;&#x2F; 迷，不是有处理args的办法吗？)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">void showall() &#123; return; &#125;</span><br><span class="line"></span><br><span class="line">template &lt;typename R1 ,typename...  Args&gt;</span><br><span class="line">void showall(R1 var, Args...args) &#123;</span><br><span class="line">    std::cout &lt;&lt; var &lt;&lt; std::endl;</span><br><span class="line">    showall(args...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char * args[]) &#123;</span><br><span class="line">    showall(1, 2, 3, 4, 5);</span><br><span class="line">    showall(&quot;gxjun&quot;,&quot;dadw&quot;,&quot;dasds&quot;);</span><br><span class="line">    showall(1.0,2,&quot;3&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="仿函数"><a href="#仿函数" class="headerlink" title="仿函数"></a>仿函数</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;functional&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">using namespace std::placeholders;  </span><br><span class="line"></span><br><span class="line">template &lt;typename R1 , typename R2&gt;</span><br><span class="line">struct  Calc</span><br><span class="line">&#123;</span><br><span class="line">    void add(R1 a) &#123;</span><br><span class="line">        cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    &#125;;</span><br><span class="line">    void add_1(R1 a, R1 b) &#123;</span><br><span class="line">        cout &lt;&lt; a + b &lt;&lt; endl;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main(int argc, char * args[]) &#123;</span><br><span class="line"></span><br><span class="line">    //函数指针</span><br><span class="line">    void(Calc&lt;int, double&gt;::*fc)(int  a) = &amp;Calc&lt;int, double &gt;::add;</span><br><span class="line">    // fc(25);</span><br><span class="line">    //显然上面的式子比较的麻烦</span><br><span class="line">    </span><br><span class="line">    Calc &lt; int, int&gt; calc;</span><br><span class="line">    auto  fun = bind(&amp;Calc&lt;int, int &gt;::add, &amp;calc, _1);</span><br><span class="line">    auto  fun_2 = bind(&amp;Calc&lt;int, int &gt;::add_1, &amp;calc, _1,_2);</span><br><span class="line">    fun(123);</span><br><span class="line">    fun_2(12,24);</span><br><span class="line">   cin.get();</span><br><span class="line"> return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>backend</category>
        <category>cplusplus</category>
      </categories>
      <tags>
        <tag>cplusplus</tag>
        <tag>template</tag>
      </tags>
  </entry>
  <entry>
    <title>karma jasmine</title>
    <url>/Blog/20-04-14-karma-jasmine/</url>
    <content><![CDATA[<h1 id="Run"><a href="#Run" class="headerlink" title="Run"></a>Run</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn global add jasmine-core karma karma-chrome-launcher karma-jasmine karma-jasmine-html-reporter</span><br><span class="line">karma init <span class="comment"># 一路默认</span></span><br><span class="line">vim karma.conf.js</span><br></pre></td></tr></table></figure>

<p>一些改动</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="meta">@@ -21,8 +21,12 @@</span> module.exports = function (config) &#123;</span><br><span class="line"> </span><br><span class="line">     // list of files / patterns to load in the browser</span><br><span class="line">     files: [</span><br><span class="line"><span class="addition">+      &#x27;src/**/*.js&#x27;</span></span><br><span class="line">     ],</span><br><span class="line"> </span><br><span class="line"><span class="addition">+    client: &#123;</span></span><br><span class="line"><span class="addition">+      clearContext: false, // leave Jasmine Spec Runner output visible in browser</span></span><br><span class="line"><span class="addition">+    &#125;,</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">     // list of files / patterns to exclude</span><br><span class="line"><span class="meta">@@ -37,7 +41,7 @@</span> module.exports = function (config) &#123;</span><br><span class="line">     // test results reporter to use</span><br><span class="line">     // possible values: &#x27;dots&#x27;, &#x27;progress&#x27;</span><br><span class="line">     // available reporters: https://npmjs.org/browse/keyword/karma-reporter</span><br><span class="line"><span class="deletion">-    reporters: [&#x27;progress&#x27;],</span></span><br><span class="line"><span class="addition">+    reporters: [&#x27;progress&#x27;, &#x27;kjhtml&#x27;],</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     // web server port</span><br></pre></td></tr></table></figure>

<p>编写你的测试代码，语法见jasmine文档</p>
<p>启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">karma start</span><br></pre></td></tr></table></figure>

<p><code>karma-jasmine-html-reporter</code> 这个赞极少 却超高的周下载量 所以大多是连带下载的吧</p>
<h1 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h1><h2 id="版本兼容各种问题"><a href="#版本兼容各种问题" class="headerlink" title="版本兼容各种问题"></a>版本兼容各种问题</h2><p>目前一组能用的</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;jasmine-core&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.5.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;karma&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;karma-chrome-launcher&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;karma-jasmine&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.1.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;karma-jasmine-html-reporter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.5.3&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="cnpm"><a href="#cnpm" class="headerlink" title="cnpm"></a>cnpm</h2><p>不知道cnpm搞了什么私货，同样的命令 npm 能用 cnpm就是报错。目前采取全局yarn按加项目内karam.conf.js了 (感觉操作不科学啊</p>
<h2 id="import"><a href="#import" class="headerlink" title="import"></a>import</h2><p>报错 大概意思不在module内</p>
<p>搜到很多加plugins或者在预处理调用webpack的，暂时没有采用</p>
<p>可行的一种方案,目前把<code>files</code>的配置写成</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[&#123;<span class="attr">pattern</span>:<span class="string">&#x27;src/**/*.js&#x27;</span>,<span class="attr">type</span>:<span class="string">&#x27;module&#x27;</span>&#125;]</span><br></pre></td></tr></table></figure>

<h2 id="files"><a href="#files" class="headerlink" title="files"></a>files</h2><p>需要包括源代码 和 测试代码</p>
<h1 id="Repo"><a href="#Repo" class="headerlink" title="Repo"></a>Repo</h1><p><a href="https://github.com/CroMarmot/karma.jasmine.demo">https://github.com/CroMarmot/karma.jasmine.demo</a></p>
<h1 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h1><p><a href="http://karma-runner.github.io/4.0/config/files.html">http://karma-runner.github.io/4.0/config/files.html</a></p>
<p><a href="http://karma-runner.github.io/4.0/intro/how-it-works.html">http://karma-runner.github.io/4.0/intro/how-it-works.html</a></p>
]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>karma</tag>
        <tag>jasmine</tag>
      </tags>
  </entry>
  <entry>
    <title>vue2 vmodel 版本管理问题</title>
    <url>/Blog/20-05-18-vue-v-model/</url>
    <content><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>新做了个输入框，在三次封装时用 <code>$attrs</code>，本地一切正常，内部测试环境出现bug:输入不了值。</p>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>版本都查过，一样的代码，最后猜是不是vue的问题。</p>
<p>查了一下在线的vue版本是<code>2.6.11</code>而内部发布版本是<code>2.5.13</code>。</p>
<p>把调试的vue换成指定版本<code>2.5.13</code>重现了bug。</p>
<p>顺着官方<code>https://github.com/vuejs/vue/releases</code>看</p>
<p>看到<code>v2.6.1</code>修复了<code>v-model: add value to $attrs if not defined in props</code></p>
<p>看<code>pull requests 9331</code>和<code>9330</code>似乎很多人也都遇到了</p>
<p>果然<code>XD</code></p>
<p>内部测试发布的版本已经在生产使用，当然是锁版本不会改了，把开发用的vue调试版换回了<code>2.5.13</code>，然后对应组件增加<code>props</code>的<code>value</code>和 <code>value</code>的传递。&#x2F;&#x2F; 还好是新组建</p>
<p>虽然听说并且实践了无数次<code>锁版本</code>，但亲身是第一次遇到版本问题！（之前几次其它第三方资源有bug 都是最新的官方资源也没修复的，例如swiper有个重复emit的bug放了很久也不知道现在修复没</p>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p><strong>锁版本!!!!!</strong></p>
<p>官方vue虽然说是开发环境是<code>https://cdn.jsdelivr.net/npm/vue/dist/vue.js</code>，但实际因为生产的vue 是锁了版本，所以为了保持和生产一致，如果要使用在线资源可以使用<code>https://cdn.jsdelivr.net/npm/vue@版本号/dist/vue.js</code></p>
<h1 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h1><p><a href="https://github.com/vuejs/vue/releases?after=v2.6.2">vue releases</a></p>
<p><a href="https://github.com/vuejs/vue/pull/9331">vue pull requests 9331</a></p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
        <tag>js</tag>
        <tag>v-model</tag>
      </tags>
  </entry>
  <entry>
    <title>vue vmodel domprops</title>
    <url>/Blog/20-05-21-vue-v-model-domProps/</url>
    <content><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>在业务页面 希望对输入框进行额外操作，例如 当输入长度大于 10则截取到前10位</p>
<p>BUG产生，业务页面写了如下的代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data()&#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    someInputValue:&#x27;&#x27;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">watch:&#123;</span><br><span class="line">  someInputValue(newVal)&#123;</span><br><span class="line">    this.someInputValue = newVal.substr(0,10);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后 前技术经理写的输入框 却可以一直输入</p>
<p>我用render函数 写的没有问题</p>
<p>直接裸的input也没问题</p>
<h1 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h1><p>加了一堆console，基本确定bug的原理是</p>
<ol>
<li>内部输入更新</li>
<li>触发组件emit</li>
<li>业务页面得到超过长度的值</li>
<li>修改为只有长度为10的值</li>
<li>通过props传递给组件</li>
<li>触发组件内对value的watch (这次能成功</li>
<li>用户继续输入</li>
<li>触发组件emit</li>
<li>业务页面得到超过长度的值</li>
<li>修改为只有长度为10的值</li>
<li>通过props传递给组件</li>
<li>没有触发组件内对value的watch</li>
</ol>
<h1 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h1><p>官方直接<code>input</code>能用，但不知道是怎么封装的</p>
<p>我封装的是参考<code>https://cn.vuejs.org/v2/guide/render-function.html#v-model</code>的</p>
<p>然而,如果你直接尝试上面所写的你会发现并不如愿</p>
<p>没有使用watch，而是使用<code>domProps</code></p>
<p>我封装的是参考<code>https://cn.vuejs.org/v2/guide/render-function.html#v-model</code>的没有使用watch，而是使用<code>domProps</code></p>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>直接的话就是用<code>domProps</code> 但是有个问题，如果使用者</p>
<p>另外的话，我本来实现的是会提供一个接受过滤函数的props，业务层可以传递过滤函数而不是通过外部watch</p>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>目前看起来，双向绑定就应该做全，不要单向使用。</p>
<p>有些时候不设置默认值？</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;v-model&lt;/h1&gt;</span><br><span class="line">    &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">      &lt;div&gt; input(默认)&lt;input v-model=&quot;x1&quot;&gt; &#123;&#123; x1 &#125;&#125;&lt;/div&gt;</span><br><span class="line">      &lt;div&gt;Input2(官方文档)&lt;Input2 v-model=&quot;x2&quot; /&gt;  &#123;&#123; x2 &#125;&#125;&lt;/div&gt;</span><br><span class="line">      &lt;div&gt;Input3(我)&lt;Input3 v-model=&quot;x3&quot; /&gt;      &#123;&#123; x3 &#125;&#125;&lt;/div&gt;</span><br><span class="line">      &lt;div&gt;Input4(历史遗留代码)&lt;Input4 v-model=&quot;x4&quot; /&gt;      &#123;&#123; x4 &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;h1&gt;@input only&lt;/h1&gt;</span><br><span class="line">    &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">      &lt;div&gt;input(默认)&lt;input @input=&quot;(e)=&gt;&#123;input1 = e.target.value;&#125;&quot;&gt;    &#123;&#123; input1 &#125;&#125;&lt;/div&gt;</span><br><span class="line">      &lt;div&gt;Input2(官方)&lt;Input2 @input=&quot;(v)=&gt;&#123;input2=v;&#125;&quot; /&gt;    &#123;&#123; input2 &#125;&#125;&lt;/div&gt;</span><br><span class="line">      &lt;div&gt;Input3(我)&lt;Input3 @input=&quot;(v)=&gt;&#123;input3=v;&#125;&quot; /&gt;    &#123;&#123; input3 &#125;&#125;&lt;/div&gt;</span><br><span class="line">      &lt;div&gt;Input4(历史遗留代码)&lt;Input4 @input=&quot;(v)=&gt;&#123;input4=v;&#125;&quot; /&gt;    &#123;&#123; input4 &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    Input3: &#123;</span><br><span class="line">      name: &#x27;FormInputJsx&#x27;,</span><br><span class="line">      // inheritAttrs: false,</span><br><span class="line">      props: &#123;</span><br><span class="line">        inputFilter: &#123;</span><br><span class="line">          type: Function,</span><br><span class="line">          default: null</span><br><span class="line">        &#125;,</span><br><span class="line">        // 传入类型</span><br><span class="line">        value: String</span><br><span class="line">      &#125;,</span><br><span class="line">      data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          valueIn: this.value</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      methods: &#123;</span><br><span class="line">        updateValue(value) &#123;</span><br><span class="line">          let newVal = value</span><br><span class="line">          if (this.inputFilter) &#123;</span><br><span class="line">            newVal = this.inputFilter(newVal)</span><br><span class="line">          &#125;</span><br><span class="line">          // this.valueIn = newVal</span><br><span class="line">          // if (this.$refs.input.value !== this.valueIn) &#123;</span><br><span class="line">          //   this.$refs.input.value = this.valueIn</span><br><span class="line">          // &#125;</span><br><span class="line">          this.$emit(&#x27;input&#x27;, newVal)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      render(h) &#123;</span><br><span class="line">        const inputConfig = &#123;</span><br><span class="line">          ref: &#x27;input&#x27;,</span><br><span class="line">          // input 原始属性不改动 自动下发-</span><br><span class="line">          // attrs: Object.assign(&#123; ...this.$attrs &#125;),</span><br><span class="line">          on: Object.assign(&#123; ...this.$listeners &#125;, &#123;</span><br><span class="line">            input: event =&gt; this.updateValue(event.target.value) // 输入框改变</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        if (typeof this.value !== &#x27;undefined&#x27;) &#123;</span><br><span class="line">          inputConfig.domProps = &#123;</span><br><span class="line">            value: this.value</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return h(&#x27;input&#x27;, inputConfig)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    Input4: &#123;</span><br><span class="line">      render(h) &#123;</span><br><span class="line">        const self = this</span><br><span class="line">        return h(&#x27;input&#x27;, &#123;</span><br><span class="line">          domProps: &#123;</span><br><span class="line">            value: self.value</span><br><span class="line">          &#125;,</span><br><span class="line">          on: &#123;</span><br><span class="line">            input (event) &#123;</span><br><span class="line">              self.Amount = event.target.value</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      props: &#123;</span><br><span class="line">        value: &#123;</span><br><span class="line">          type: String,</span><br><span class="line">          default: &#x27;&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          Amount: &#x27;&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      watch: &#123;</span><br><span class="line">        value(newVal) &#123;</span><br><span class="line">          this.Amount = newVal</span><br><span class="line">        &#125;,</span><br><span class="line">        Amount(newVal) &#123;</span><br><span class="line">          // 从前截取 不带$</span><br><span class="line">          this.Amount = newVal.match(/^\d*(\.?\d&#123;0,2&#125;)/g)[0] || &#x27;&#x27;</span><br><span class="line">          if (isNaN(this.Amount)) &#123;</span><br><span class="line">            this.Amount = &#x27;&#x27;</span><br><span class="line">          &#125;</span><br><span class="line">          this.$emit(&#x27;input&#x27;, this.Amount)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    Input2: &#123;</span><br><span class="line">      props: [&#x27;value&#x27;],</span><br><span class="line">      render (createElement) &#123;</span><br><span class="line">        const self = this</span><br><span class="line">        return createElement(&#x27;input&#x27;, &#123;</span><br><span class="line">          domProps: &#123;</span><br><span class="line">            value: self.value</span><br><span class="line">          &#125;,</span><br><span class="line">          on: &#123;</span><br><span class="line">            input (event) &#123;</span><br><span class="line">              self.$emit(&#x27;input&#x27;, event.target.value)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      x1: &#x27;&#x27;,</span><br><span class="line">      x2: &#x27;&#x27;,</span><br><span class="line">      x3: &#x27;&#x27;,</span><br><span class="line">      x4: &#x27;&#x27;,</span><br><span class="line">      input1: &#x27;&#x27;,</span><br><span class="line">      input2: &#x27;&#x27;,</span><br><span class="line">      input3: &#x27;&#x27;,</span><br><span class="line">      input4: &#x27;&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    x1(nv) &#123;</span><br><span class="line">      this.x1 = nv.substr(0, 3)</span><br><span class="line">    &#125;,</span><br><span class="line">    x2(nv) &#123;</span><br><span class="line">      this.x2 = nv.substr(0, 3)</span><br><span class="line">    &#125;,</span><br><span class="line">    x3(nv) &#123;</span><br><span class="line">      this.x3 = nv.substr(0, 3)</span><br><span class="line">    &#125;,</span><br><span class="line">    x4(nv) &#123;</span><br><span class="line">      this.x4 = nv.substr(0, 3)</span><br><span class="line">    &#125;,</span><br><span class="line">    input1(nv) &#123;</span><br><span class="line">      this.input1 = nv.substr(0, 3)</span><br><span class="line">    &#125;,</span><br><span class="line">    input2(nv) &#123;</span><br><span class="line">      this.input2 = nv.substr(0, 3)</span><br><span class="line">    &#125;,</span><br><span class="line">    input3(nv) &#123;</span><br><span class="line">      this.input3 = nv.substr(0, 3)</span><br><span class="line">    &#125;,</span><br><span class="line">    input4(nv) &#123;</span><br><span class="line">      this.input4 = nv.substr(0, 3)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.row&#123;</span><br><span class="line">  display:flex;</span><br><span class="line">  flex-direction:column;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>


<h1 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h1><p><a href="https://cn.vuejs.org/v2/guide/render-function.html#v-model">vue render v-model</a></p>
<p><a href="https://github.com/vuejs/vue/pull/9331">vue pull requests 9331</a></p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>npm registry</title>
    <url>/Blog/20-05-25-npm-registry/</url>
    <content><![CDATA[<h1 id="npm发布仓库"><a href="#npm发布仓库" class="headerlink" title="npm发布仓库"></a>npm发布仓库</h1><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li>注册账户 <a href="https://www.npmjs.com/signup">https://www.npmjs.com/signup</a></li>
<li>命令行登录 <code>npm login</code></li>
<li>建立github仓库</li>
<li>初始化仓库 <code>npm init</code></li>
<li>编写代码</li>
<li>发布<code>npm publish</code> &amp; github仓库更新</li>
</ol>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>如果是之前用taobao的镜像，记得发布时 更改设置为官方地址</p>
<p>个人建议一些“没有建设意义”的仓库，就不要去抢名字了，带上自己的scope发布</p>
<p>发布前** 记得清理敏感信息**，似乎npm虽然可以unpublish但是,不能重置版本号 <a href="https://www.npmjs.com/policies/unpublish">https://www.npmjs.com/policies/unpublish</a></p>
<h3 id="生成类发布"><a href="#生成类发布" class="headerlink" title="生成类发布"></a>生成类发布</h3><p>例如源码是用typescript写的，发布要发布编译后的文件，但是git中不会跟踪。</p>
<p>不建议使用<code>.npmignore</code> (会使<code>.gitignore</code>在publish时无效)，建议的是在<code>package.json</code>中增加<code>&quot;files&quot;:[&quot;dist/**/*&quot;]</code>这样的白名单</p>
<h2 id="本地调试"><a href="#本地调试" class="headerlink" title="本地调试"></a>本地调试</h2><p>例如</p>
<p>在开发的库中构建后调用<code>yarn link</code> 会提示<code>success Registered &quot;@cromarmot/isNumberOne&quot;</code></p>
<p>在用来测试的文件夹中 调用 <code>yarn link &quot;@cromarmot/isNumberOne&quot;</code> 即可使用</p>
<p>取消link：把上面link替换为unlink,使用对应的<code>yarn unlink</code>命令即可</p>
<p>link以后，代码更新只需要编译原来的库代码，不需要重新link</p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>一个基于莫比乌丝反演的数字1判断</p>
<p><a href="https://www.npmjs.com/package/@cromarmot/is-number-one">https://www.npmjs.com/package/@cromarmot/is-number-one</a></p>
<h2 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h2><p><a href="https://docs.npmjs.com/">https://docs.npmjs.com/</a></p>
]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>rust真的快</title>
    <url>/Blog/20-06-03-rust-really-fast/</url>
    <content><![CDATA[<h1 id="ProjectEuler-74-题"><a href="#ProjectEuler-74-题" class="headerlink" title="ProjectEuler 74 题"></a>ProjectEuler 74 题</h1><p><a href="https://projecteuler.net/problem=74">https://projecteuler.net/problem=74</a></p>
<p>用rust写了一遍,觉得根据常识1e6数据量，应该1s内随便跑，结果5s+，</p>
<p>就换成C++写了一遍，发现是因为rust没开O2？开了以后还真就和C++差不多的时间</p>
<h2 id="rust-版本"><a href="#rust-版本" class="headerlink" title="rust 版本"></a>rust 版本</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashMap;</span><br><span class="line"><span class="keyword">const</span> N:<span class="type">usize</span> = <span class="number">1_000_000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">next_value</span>(<span class="keyword">mut</span> value:<span class="type">usize</span>,fac:&amp;[<span class="type">usize</span>]) <span class="punctuation">-&gt;</span> <span class="type">usize</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">sum</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> value != <span class="number">0</span> &#123;</span><br><span class="line">        sum += fac[value%<span class="number">10</span>];</span><br><span class="line">        value/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">dfs</span>(</span><br><span class="line">    fac:&amp;[<span class="type">usize</span>],</span><br><span class="line">    ans:&amp;<span class="keyword">mut</span> HashMap&lt;<span class="type">usize</span>,<span class="type">usize</span>&gt;,</span><br><span class="line">    dep:&amp;<span class="keyword">mut</span> HashMap&lt;<span class="type">usize</span>,<span class="type">usize</span>&gt;,</span><br><span class="line">    value:<span class="type">usize</span></span><br><span class="line">    ) <span class="punctuation">-&gt;</span> (<span class="type">usize</span>,<span class="type">usize</span>) &#123; <span class="comment">// dep, len</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">nv</span> = <span class="title function_ invoke__">next_value</span>(value,fac);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">next_dep</span> = dep.<span class="title function_ invoke__">get</span>(&amp;value).<span class="title function_ invoke__">unwrap</span>() + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">match</span> dep.<span class="title function_ invoke__">get</span>(&amp;nv) &#123;</span><br><span class="line">        <span class="title function_ invoke__">Some</span>(rs) =&gt; &#123;</span><br><span class="line">            <span class="comment">// println!(&quot;&#123;&#125; =&gt; &#123;&#125;&quot;,value,next_dep - rs);</span></span><br><span class="line">            ans.<span class="title function_ invoke__">insert</span>(value,next_dep - rs);</span><br><span class="line">            <span class="title function_ invoke__">return</span> (*rs,next_dep - rs);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="literal">None</span> =&gt; &#123;</span><br><span class="line">            <span class="keyword">match</span> ans.<span class="title function_ invoke__">get</span>(&amp;nv) &#123;</span><br><span class="line">                <span class="title function_ invoke__">Some</span>(res) =&gt; &#123;</span><br><span class="line">                    <span class="keyword">let</span> <span class="variable">newres</span>= (*res) + <span class="number">1</span>;</span><br><span class="line">                    <span class="comment">// println!(&quot;&#123;&#125; =&gt; &#123;&#125;&quot;,value,newres);</span></span><br><span class="line">                    ans.<span class="title function_ invoke__">insert</span>(value,newres);</span><br><span class="line">                    <span class="title function_ invoke__">return</span> (next_dep,newres);</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="literal">None</span> =&gt; &#123;</span><br><span class="line">                    dep.<span class="title function_ invoke__">insert</span>(nv,next_dep);</span><br><span class="line">                    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">ret</span> = <span class="title function_ invoke__">dfs</span>(fac,ans,dep,nv);</span><br><span class="line">                    <span class="keyword">if</span> next_dep &lt;= ret.<span class="number">0</span>  &#123;</span><br><span class="line">                        ret.<span class="number">1</span> += <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// println!(&quot;&#123;&#125; =&gt; &#123;&#125;&quot;,value,ret.1);</span></span><br><span class="line">                    ans.<span class="title function_ invoke__">insert</span>(value,ret.<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">return</span> ret;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">fac</span> = [<span class="number">0</span>;<span class="number">11</span>];</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">ans</span> = HashMap::<span class="title function_ invoke__">new</span>();</span><br><span class="line">    fac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">1</span>..<span class="number">11</span>&#123;</span><br><span class="line">        fac[i] = fac[i-<span class="number">1</span>]*i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">1</span>..N+<span class="number">1</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ans.<span class="title function_ invoke__">contains_key</span>(&amp;i) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">dep</span> = HashMap::<span class="title function_ invoke__">new</span>();</span><br><span class="line">        dep.<span class="title function_ invoke__">insert</span>(i,<span class="number">0</span>);</span><br><span class="line">        <span class="title function_ invoke__">dfs</span>(&amp;fac,&amp;<span class="keyword">mut</span> ans,&amp;<span class="keyword">mut</span> dep,i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">cnt</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="title function_ invoke__">for</span> (k, v) <span class="keyword">in</span> &amp;ans &#123;</span><br><span class="line">        <span class="keyword">if</span> *v &gt;= <span class="number">60</span> &amp;&amp; *k &lt;= N &#123;</span><br><span class="line">            cnt+=<span class="number">1</span>;</span><br><span class="line">            <span class="comment">// println!(&quot;&#123;&#125;: \&quot;&#123;&#125;\&quot;&quot;, k, v);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,cnt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="C-版本"><a href="#C-版本" class="headerlink" title="C++版本"></a>C++版本</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ten5 100000+10</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i,a,n) for (uint i=a;i&lt;n;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> iif(c,t,f) ((c)?(t):(f))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> per(i,a,n) for (int i=n-1;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> uint N = <span class="number">1&#x27;000&#x27;000</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">uint <span class="title">next_value</span><span class="params">(uint value,uint *fac)</span> </span>&#123;</span><br><span class="line">    uint sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(value != <span class="number">0</span>)&#123;</span><br><span class="line">        sum += fac[value%<span class="number">10</span>];</span><br><span class="line">        value/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">pair&lt;uint,uint&gt; <span class="title">dfs</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    uint *fac,</span></span></span><br><span class="line"><span class="params"><span class="function">    unordered_map&lt;uint,uint&gt; &amp;ans,</span></span></span><br><span class="line"><span class="params"><span class="function">    unordered_map&lt;uint,uint&gt; dep,</span></span></span><br><span class="line"><span class="params"><span class="function">    uint value</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span> </span>&#123; <span class="comment">// dep, len</span></span><br><span class="line">    uint nv = <span class="built_in">next_value</span>(value,fac);</span><br><span class="line">    uint next_dep = dep[value] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(dep.<span class="built_in">count</span>(nv))&#123;</span><br><span class="line">      <span class="keyword">auto</span> rs = dep[nv];</span><br><span class="line">      <span class="comment">// printf(&quot;%d =&gt; %d\n&quot;,value,next_dep - rs);</span></span><br><span class="line">      ans[value] = next_dep - rs;</span><br><span class="line">      <span class="keyword">return</span> &#123;rs,next_dep - rs&#125;;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(ans.<span class="built_in">count</span>(nv)) &#123;</span><br><span class="line">        <span class="keyword">auto</span> res = ans[nv];</span><br><span class="line">        <span class="keyword">auto</span> newres= res + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// printf(&quot;%d =&gt; %d\n&quot;,value,newres);</span></span><br><span class="line">        ans[value] = newres;</span><br><span class="line">        <span class="keyword">return</span> &#123;next_dep,newres&#125;;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        dep[nv] = next_dep;</span><br><span class="line">        <span class="keyword">auto</span> ret = <span class="built_in">dfs</span>(fac,ans,dep,nv);</span><br><span class="line">        <span class="keyword">if</span>(next_dep &lt;= ret.first)&#123;</span><br><span class="line">          ret.second += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// printf(&quot;%d =&gt; %d\n&quot;,value,ret.second);</span></span><br><span class="line">        ans[value] = ret.second;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    uint fac[<span class="number">11</span>];</span><br><span class="line">    unordered_map&lt;uint,uint&gt; ans;</span><br><span class="line">    fac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">rep</span>(i,<span class="number">1</span>,<span class="number">11</span>)&#123;</span><br><span class="line">        fac[i] = fac[i<span class="number">-1</span>]*i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">rep</span>(i,<span class="number">1</span>,N+<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ans.<span class="built_in">count</span>(i))&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        unordered_map&lt;uint,uint&gt; dep;</span><br><span class="line">        dep[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(fac,ans,dep,i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">auto</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> [k,v]: ans) &#123;</span><br><span class="line">        <span class="keyword">if</span>( v &gt;= <span class="number">60</span> &amp;&amp; k &lt;= N )&#123;</span><br><span class="line">            cnt+=<span class="number">1</span>;</span><br><span class="line">            <span class="comment">// println!(&quot;&#123;&#125;: \&quot;&#123;&#125;\&quot;&quot;, k, v);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,cnt);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>rust不带<code>-O2</code> 大概<code>5s+</code>,带了和<code>C++</code>相近都是<code>0.3s</code>左右, 真的快</p>
<h1 id="env"><a href="#env" class="headerlink" title="env"></a>env</h1><p>Intel Core i7-7700HQ @ 8x 3.8GHz</p>
<p><code>!clang++ -o &quot;%&lt;&quot; &quot;%&quot; -std=gnu++17 -O2 -g -Wall -Wcomma</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)</span><br><span class="line">Target: x86_64-pc-linux-gnu</span><br><span class="line">Thread model: posix</span><br></pre></td></tr></table></figure>

<p><code>!rustc &quot;%&quot; -O</code></p>
<p><code>rustc 1.43.1 (8d69840ab 2020-05-04)</code></p>
<h1 id="感受"><a href="#感受" class="headerlink" title="感受"></a>感受</h1><p>rust写好的代码转换成C++是真的轻松，C++转换成rust就会很累（除非各种 as，unwrap</p>
]]></content>
      <categories>
        <category>backend</category>
        <category>rust</category>
      </categories>
      <tags>
        <tag>rust</tag>
        <tag>cplusplus</tag>
      </tags>
  </entry>
  <entry>
    <title>karma</title>
    <url>/Blog/20-07-06-karma/</url>
    <content><![CDATA[<h1 id="About"><a href="#About" class="headerlink" title="About"></a>About</h1><p>目前看到angular2+ 官方的使用是 karma + jasmine</p>
<p>Can I use Karma with testing framework X?</p>
<p>Yes. There are plugins for most of the common testing frameworks (such as Jasmine, Mocha, QUnit). If there is no plugin for the testing framework you like, go ahead and write one. It is simple - you can start by looking into the source code of the existing ones.</p>
<p>karma创建一个web server。</p>
<p>浏览器通过手动方位 karma server 监听的地址(默认9876),或者自动让karma 知道运行哪个browsers，来让浏览器可以被捕获</p>
<p>可用的列表<a href="http://karma-runner.github.io/5.0/config/browsers.html">http://karma-runner.github.io/5.0/config/browsers.html</a></p>
<h1 id="karma-能力"><a href="#karma-能力" class="headerlink" title="karma 能力"></a>karma 能力</h1><p>见下面 paper的pdf内容</p>
<p>在真实环境中测试</p>
<p>支持远程控制</p>
<p>执行速度快</p>
<p>可以跟第三方 IDE 进行交互</p>
<p>支持 ci 服务</p>
<p>高扩展性，支持插件开发</p>
<p>支持调试</p>
<h1 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h1><p>paper 3.1的表</p>
<p><img data-src="http://gtms04.alicdn.com/tps/i4/TB1eweqLXXXXXbvaXXX0ucn3VXX-964-384.png#alt=tests_tools_comparison" alt="阿里云"></p>
<h1 id="主要目标"><a href="#主要目标" class="headerlink" title="主要目标"></a>主要目标</h1><p>paper 2.1</p>
<ol>
<li><p>真实设备上运行测试</p>
</li>
<li><p>远程控制</p>
</li>
<li><p>高效, 无缝隙使用流程</p>
</li>
<li><p>Integration with IDEs and text editors</p>
</li>
<li><p>Integration with CI Servers</p>
</li>
<li><p>扩展性</p>
</li>
<li><p>Debugging</p>
</li>
</ol>
<p>包含 client&#x2F;server,基于Http 通信</p>
<h1 id="设计和分析"><a href="#设计和分析" class="headerlink" title="设计和分析"></a>设计和分析</h1><p>Chapter 4</p>
<ul>
<li><p>速度</p>
</li>
<li><p>可靠性</p>
</li>
<li><p>在真实浏览器上测试 并</p>
</li>
<li><p>seamless workflow</p>
</li>
</ul>
<h1 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h1><p>paper 4.1</p>
<p>监听文件</p>
<p>与 client 进行通讯</p>
<p>向开发者输出测试结果</p>
<p>提供 client 端所需的资源文件</p>
<h2 id="Manager"><a href="#Manager" class="headerlink" title="Manager"></a>Manager</h2><p>跟client双向通讯，例如开始和结束测试，收集测试结果</p>
<h2 id="Web-Server"><a href="#Web-Server" class="headerlink" title="Web Server"></a>Web Server</h2><p>Web Server, 给客户端提供静态资源文件</p>
<h2 id="Reporter"><a href="#Reporter" class="headerlink" title="Reporter"></a>Reporter</h2><p>给开发者输出报告</p>
<h2 id="File-System-Watcher"><a href="#File-System-Watcher" class="headerlink" title="File System Watcher"></a>File System Watcher</h2><p>检测变化并通知client，类似 一些热更新之类的？</p>
<h1 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h1><p>可以 多client 对1个server</p>
<h2 id="Manager-1"><a href="#Manager-1" class="headerlink" title="Manager"></a>Manager</h2><p>和server双向通信</p>
<h2 id="Testing-Framework"><a href="#Testing-Framework" class="headerlink" title="Testing Framework"></a>Testing Framework</h2><p>框架内自己没有，可以用很多三方的framework，例如上面的jasmine</p>
<h2 id="Tests-and-Code-under-Test"><a href="#Tests-and-Code-under-Test" class="headerlink" title="Tests and Code under Test"></a>Tests and Code under Test</h2><p>这是开发者编写的内容了</p>
<p>…….我感觉阿里社区里面那个翻译也不错。。可以不用继续啃英文了</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>测试的代码 全部在客户端运行，这个客户端是真实的客户端，它可以是chrome,firefox等等</p>
<p>karma主要的工作是支撑测试的提供，例如静态文件服务，文件变化监听等，而具体代码测试内容是在karma启动的客户端(浏览器)中，依靠用户编写的测试代码和第三方测试框架完成的。</p>
<h1 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h1><p><a href="http://karma-runner.github.io/5.0/intro/how-it-works.html">http://karma-runner.github.io/5.0/intro/how-it-works.html</a></p>
<p><a href="https://raw.githubusercontent.com/karma-runner/karma/master/thesis.pdf">https://raw.githubusercontent.com/karma-runner/karma/master/thesis.pdf</a></p>
<p><a href="https://fed.taobao.org/blog/taofed/do71ct/karma-origin/">https://fed.taobao.org/blog/taofed/do71ct/karma-origin/</a></p>
<p><a href="https://medium.com/@me_37286/yoni-goldberg-javascript-nodejs-testing-best-practices-2b98924c9347">https://medium.com/@me_37286/yoni-goldberg-javascript-nodejs-testing-best-practices-2b98924c9347</a></p>
]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>Angular2+</tag>
        <tag>test</tag>
        <tag>karma</tag>
      </tags>
  </entry>
  <entry>
    <title>rsa</title>
    <url>/Blog/20-07-13-rsa/</url>
    <content><![CDATA[<h1 id="数论事实"><a href="#数论事实" class="headerlink" title="数论事实"></a>数论事实</h1><p>两个大质数相乘，只需要最多两个数字长度的乘积的复杂度，而把两个质数乘积进行拆分可能要 其中较小数字的时间复杂度。也就是易于验证，难于破解。</p>
<p>假设两个长度为2048(二进制下)的质数相乘，最多只需要 <code>2048 x 2048</code>的时间，而枚举拆分需要<code>2^2048</code>的时间, 目前最快的？gnfs算法的复杂度也是</p>
<p>$O(e^{\sqrt{\frac{64}{9}}(\log N)^{\frac 13}(\log\log N)^{\frac 23}})$</p>
<h1 id="加解密"><a href="#加解密" class="headerlink" title="加解密"></a>加解密</h1><h2 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h2><p>$C&#x3D;M^e \bmod n$</p>
<p>n&#x3D;pq,其中p和q为大质数</p>
<p>M 要加密的信息 (需要 和n互质也就是至少p,q其中一个互质,1&#x2F;pq 当质数足够大时碰撞概率极小，其实因为公钥信息里已经有n了，也不会碰撞)</p>
<p>e 和 (p-1)(q-1)互质，简单些 e直接取小于 (p-1)(q-1)的质数</p>
<p>公钥(e,n), 所有人都知道</p>
<h2 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h2><p>私钥匙$(e,p,q)$</p>
<p>$de &#x3D; 1 \bmod ((p-1)(q-1))$,计算d,d是e关于(p-1)(q-1)的乘法模逆元 log 级别复杂度</p>
<p>$ C^d &#x3D; (M^e)^d &#x3D; M^{ed} &#x3D; M^{1+k(p-1)(q-1)} (\bmod n)$</p>
<p>费马小定理:p质数,a和p互质,$a^{p-1} &#x3D; 1 (\bmod p)$ </p>
<p>如果 M 和p 互素, 有 $C^d &#x3D; M\cdot (M^{p-1})^{k(q-1)} &#x3D; M \cdot 1^{k(q-1)} &#x3D; M \cdot 1 &#x3D; M (mod p)$ 即是 $ C^d - M &#x3D; 0 (mod p) $</p>
<p>否则 $ M &#x3D; 0 \bmod p$, $ C^d &#x3D; (M^e \bmod n)^d &#x3D; (0^e)^d &#x3D; 0 (\bmod p) $,也有 $C^d - M &#x3D; 0(\bmod p)$</p>
<p>同理 有$C^d - M &#x3D; 0 (\bmod q)$</p>
<p>因此 $C^d - M &#x3D; 0 (\bmod (n&#x3D;pq))$即$C^d &#x3D; M (\bmod n)$</p>
<p>也就是 我们通过幂次直接拿到 M在$\bmod n$的意义下</p>
<h1 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h1><p>也就是公钥里只有(e,n), 计算不出p和q, 就意味着计算不出(p-1)(q-1),也就计算不出d，也就无法直接d的幂次。</p>
<p>另一个问题就是 模运算 是否有办法开e次根。</p>
<p>在就是历史信息，如果有人（机器）能拆解n，那么所有用到相应公私钥的信息都能被破解了。</p>
<p>所以据说 现在512位的似乎已经被认为不安全了。可以类似NFS, GNFS,SIQS, 和ECM 定向爆破。<a href="https://blog.csdn.net/tigerisland45/article/details/51348854">https://blog.csdn.net/tigerisland45/article/details/51348854</a></p>
<p>穷举自己可以按(10^10) 需要1台计算机一秒来估计，是不可能的。例如枚举需要 <code>2**512//(10**10)//60//60//24//365 = 42515880041674902015392012297710065092210064119077858250011293263957902175524946019792853558367907875729426237273230754863501657825807236</code> 台计算机 年</p>
<p>而好处是，如果始终拆解质数乘积是难的，那么只需要单纯的增加位数即可，这样在实现上的额外代价就是生成代价，对应的拆解代价是按照幂次增长。</p>
<p>而生成的代价,解密的代价较大，注定了它用在少量数据，而剩余的数据加密，还是要靠对称加密。</p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>产生3072 bits的私钥(不要分享)</p>
<p><code>openssl genrsa -out private.pem 3072</code></p>
<p>通过私钥产生公钥(可以给任何人)</p>
<p><code>openssl rsa -in private.pem -out public.pem -outform PEM -pubout</code></p>
<p>产生原始消息(模拟要给你发信息的人)</p>
<p><code>echo &#39;too many secrets&#39; &gt; file.txt</code></p>
<p>通过你提供的公钥加密(并把加密后的信息发给你)</p>
<p><code>openssl rsautl -encrypt -inkey public.pem -pubin -in file.txt -out file.ssl</code></p>
<p>你通过私钥解密</p>
<p><code>openssl rsautl -decrypt -inkey private.pem -in file.ssl -out decrypted.txt</code></p>
<p>查看消息</p>
<p><code>cat decrypted.txt</code></p>
<h1 id="如何使用ssh-keygen-生成的公私钥"><a href="#如何使用ssh-keygen-生成的公私钥" class="headerlink" title="如何使用ssh-keygen 生成的公私钥"></a>如何使用ssh-keygen 生成的公私钥</h1><p>众所周知，一般上个git之类都会用<code>openssh</code>提供的 <code>ssh-keygen</code>生成公私钥。但是公钥不能像上面那样直接用</p>
<p>方法是用<code>id_rsa.pub</code> 转换，生成一个openssl能使用的<code>PEM格式</code>再用</p>
<p><code>ssh-keygen -f ~/.ssh/id_rsa.pub -e -m PKCS8 &gt; id_rsa.pem.pub</code></p>
<p>剩余的操作和上面一样</p>
<h1 id="contact"><a href="#contact" class="headerlink" title="contact"></a>contact</h1><p>加密联系我</p>
<p><code>id_rsa.pub</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDgFNXLxLccaE5w6GBHwg+sqXXphmEDgxjTQj6UYgu1et0yIqY2NU6ouAp91SnQAsW6htF1g6X7SjVuW4cgN+3R4nCociNBwvzPIiUbInhn1J5oaI3wRktWLOlxqUO1ykvsCjoZty+wfMvy5zFnG6+bjkn3i0WfCNoEOiHuaOJd+dt0l0Kha6+QdIHj6zLPH65y/oW5WJWe4iZoOjmBKJ+Ps9oGVMJxOZDCTWCUJQV1DFZgo7WAkT2/Thfz390sNiuclDE6rpmLPAqCGjtOO4zhoUpwq35QmTNjlg5PutM6s+SQZMnX2ZKgkUV/QWNenC40yS/L0Sj57ZCHvbEenh8v4YC4YRcW2BrdSloaPmhne1tH5xpw/By7UKAG/S3liebb5B3tjLpvjI0EU8l6/I6JxAtYe19tKpDPC/J1Z1L1nQ//rjDiVayg0u4Ti1grngTcTogTU9ttvwGFgdBCBkI/4xQB8kkSXllMLf2AmocFjyU/TFa1fgw+PBv8Ydi+T48= yexiaorain@gmail.com</span><br></pre></td></tr></table></figure>

<h1 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h1><p><a href="https://en.wikipedia.org/wiki/RSA_numbers">https://en.wikipedia.org/wiki/RSA_numbers</a></p>
]]></content>
      <categories>
        <category>math</category>
      </categories>
      <tags>
        <tag>math</tag>
        <tag>rsa</tag>
      </tags>
  </entry>
  <entry>
    <title>md5</title>
    <url>/Blog/20-07-14-md5/</url>
    <content><![CDATA[<h1 id="数学事实"><a href="#数学事实" class="headerlink" title="数学事实"></a>数学事实</h1><p>反复线性和非线性交替计算</p>
<h1 id="代码js"><a href="#代码js" class="headerlink" title="代码js"></a>代码js</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">md5</span>(<span class="params">string</span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">RotateLeft</span>(<span class="params">lValue, iShiftBits</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> ((lValue &lt;&lt; iShiftBits) | (lValue &gt;&gt;&gt; (<span class="number">32</span> - iShiftBits))) &amp; <span class="number">0xFFFFFFFF</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">unsignAdd</span>(<span class="params">lX, lY</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> ((lX &amp; <span class="number">0xFFFFFFFF</span>) + (lY &amp; <span class="number">0xFFFFFFFF</span>) ) &amp; <span class="number">0xFFFFFFFF</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// (a,b,c,d) = (d, ((a+f(b,c,d) + data + Ki)&lt;&lt;&lt; s)+b, b, c)</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">a, b, c, d, x, s, ac, Fn</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">unsignAdd</span>(<span class="title class_">RotateLeft</span>(<span class="title function_">unsignAdd</span>(a, <span class="title function_">unsignAdd</span>(<span class="title function_">unsignAdd</span>(<span class="title class_">Fn</span>(b, c, d), x), ac)), s), b);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">ConvertToWordArray</span>(<span class="params">string</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> lWordCount;</span><br><span class="line">    <span class="keyword">let</span> lMessageLength = string.<span class="property">length</span>;</span><br><span class="line">    <span class="comment">// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER</span></span><br><span class="line">    <span class="keyword">let</span> lNumberOfWords_temp1 = lMessageLength + <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">let</span> lNumberOfWords_temp2 = (lNumberOfWords_temp1 - (lNumberOfWords_temp1 % <span class="number">64</span>)) / <span class="number">64</span>;</span><br><span class="line">    <span class="keyword">let</span> lNumberOfWords = (lNumberOfWords_temp2 + <span class="number">1</span>) * <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">let</span> lWordArray = <span class="title class_">Array</span>(lNumberOfWords - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">let</span> lBytePosition = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> lByteCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (lByteCount &lt; lMessageLength) &#123;</span><br><span class="line">      lWordCount = (lByteCount - (lByteCount % <span class="number">4</span>)) / <span class="number">4</span>;</span><br><span class="line">      lBytePosition = (lByteCount % <span class="number">4</span>) * <span class="number">8</span>;</span><br><span class="line">      lWordArray[lWordCount] = (lWordArray[lWordCount] | (string.<span class="title function_">charCodeAt</span>(lByteCount) &lt;&lt; lBytePosition));</span><br><span class="line">      lByteCount++;</span><br><span class="line">    &#125;</span><br><span class="line">    lWordCount = (lByteCount - (lByteCount % <span class="number">4</span>)) / <span class="number">4</span>;</span><br><span class="line">    lBytePosition = (lByteCount % <span class="number">4</span>) * <span class="number">8</span>;</span><br><span class="line">    lWordArray[lWordCount] = lWordArray[lWordCount] | (<span class="number">0x80</span> &lt;&lt; lBytePosition);</span><br><span class="line">    lWordArray[lNumberOfWords - <span class="number">2</span>] = lMessageLength &lt;&lt; <span class="number">3</span>;</span><br><span class="line">    lWordArray[lNumberOfWords - <span class="number">1</span>] = lMessageLength &gt;&gt;&gt; <span class="number">29</span>;</span><br><span class="line">    <span class="keyword">return</span> lWordArray;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">WordToHex</span>(<span class="params">v</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="title class_">WordToHexValue</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">      <span class="title class_">WordToHexValue</span> += <span class="string">`0<span class="subst">$&#123;((v &gt;&gt;&gt; (i * <span class="number">8</span>)) &amp; <span class="number">0xFF</span>).toString(<span class="number">16</span>)&#125;</span>`</span>.<span class="title function_">substr</span>(-<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">WordToHexValue</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">Utf8Encode</span>(<span class="params">string</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> utftext = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> n = <span class="number">0</span>; n &lt; string.<span class="property">length</span>; n++) &#123;</span><br><span class="line">      <span class="keyword">let</span> c = string.<span class="title function_">charCodeAt</span>(n);</span><br><span class="line">      <span class="keyword">if</span> (c &lt; <span class="number">128</span>) &#123;</span><br><span class="line">        utftext += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(c);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((c &gt; <span class="number">127</span>) &amp;&amp; (c &lt; <span class="number">2048</span>)) &#123;</span><br><span class="line">        utftext += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>((c &gt;&gt; <span class="number">6</span>) | <span class="number">192</span>);</span><br><span class="line">        utftext += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>((c &amp; <span class="number">63</span>) | <span class="number">128</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        utftext += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>((c &gt;&gt; <span class="number">12</span>) | <span class="number">224</span>);</span><br><span class="line">        utftext += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(((c &gt;&gt; <span class="number">6</span>) &amp; <span class="number">63</span>) | <span class="number">128</span>);</span><br><span class="line">        utftext += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>((c &amp; <span class="number">63</span>) | <span class="number">128</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> utftext;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">let</span> x = <span class="title class_">ConvertToWordArray</span>(<span class="title class_">Utf8Encode</span>(string));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> funcs = [</span><br><span class="line">    <span class="function">(<span class="params">x,y,z</span>) =&gt;</span> ((x &amp; y) | ((~x) &amp; z) ),</span><br><span class="line">    <span class="function">(<span class="params">x,y,z</span>) =&gt;</span> ((x &amp; z) | (y &amp; (~z))),</span><br><span class="line">    <span class="function">(<span class="params">x,y,z</span>) =&gt;</span> (x ^ y ^ z),</span><br><span class="line">    <span class="function">(<span class="params">x,y,z</span>) =&gt;</span> (y ^ (x | (~z)))</span><br><span class="line">  ];</span><br><span class="line">  <span class="comment">// K = abs(sin(i+1))*(2^32) int part</span></span><br><span class="line">  <span class="comment">// https://softwareengineering.stackexchange.com/questions/89694/md5-implementation-notes</span></span><br><span class="line">  <span class="keyword">const</span> K = [ <span class="number">0xD76AA478</span> ,<span class="number">0xE8C7B756</span> ,<span class="number">0x242070DB</span> ,<span class="number">0xC1BDCEEE</span> ,<span class="number">0xF57C0FAF</span> ,<span class="number">0x4787C62A</span> ,<span class="number">0xA8304613</span> ,<span class="number">0xFD469501</span> ,<span class="number">0x698098D8</span> ,<span class="number">0x8B44F7AF</span> ,<span class="number">0xFFFF5BB1</span> ,<span class="number">0x895CD7BE</span> ,<span class="number">0x6B901122</span> ,<span class="number">0xFD987193</span> ,<span class="number">0xA679438E</span> ,<span class="number">0x49B40821</span> ,<span class="number">0xF61E2562</span> ,<span class="number">0xC040B340</span> ,<span class="number">0x265E5A51</span> ,<span class="number">0xE9B6C7AA</span> ,<span class="number">0xD62F105D</span> ,<span class="number">0x02441453</span> ,<span class="number">0xD8A1E681</span> ,<span class="number">0xE7D3FBC8</span> ,<span class="number">0x21E1CDE6</span> ,<span class="number">0xC33707D6</span> ,<span class="number">0xF4D50D87</span> ,<span class="number">0x455A14ED</span> ,<span class="number">0xA9E3E905</span> ,<span class="number">0xFCEFA3F8</span> ,<span class="number">0x676F02D9</span> ,<span class="number">0x8D2A4C8A</span> ,<span class="number">0xFFFA3942</span> ,<span class="number">0x8771F681</span> ,<span class="number">0x6D9D6122</span> ,<span class="number">0xFDE5380C</span> ,<span class="number">0xA4BEEA44</span> ,<span class="number">0x4BDECFA9</span> ,<span class="number">0xF6BB4B60</span> ,<span class="number">0xBEBFBC70</span> ,<span class="number">0x289B7EC6</span> ,<span class="number">0xEAA127FA</span> ,<span class="number">0xD4EF3085</span> ,<span class="number">0x04881D05</span> ,<span class="number">0xD9D4D039</span> ,<span class="number">0xE6DB99E5</span> ,<span class="number">0x1FA27CF8</span> ,<span class="number">0xC4AC5665</span> ,<span class="number">0xF4292244</span> ,<span class="number">0x432AFF97</span> ,<span class="number">0xAB9423A7</span> ,<span class="number">0xFC93A039</span> ,<span class="number">0x655B59C3</span> ,<span class="number">0x8F0CCC92</span> ,<span class="number">0xFFEFF47D</span> ,<span class="number">0x85845DD1</span> ,<span class="number">0x6FA87E4F</span> ,<span class="number">0xFE2CE6E0</span> ,<span class="number">0xA3014314</span> ,<span class="number">0x4E0811A1</span> ,<span class="number">0xF7537E82</span> ,<span class="number">0xBD3AF235</span> ,<span class="number">0x2AD7D2BB</span> ,<span class="number">0xEB86D391</span> ] ;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> S = [[<span class="number">7</span>,<span class="number">12</span>,<span class="number">17</span>,<span class="number">22</span>],[<span class="number">5</span>,<span class="number">9</span>,<span class="number">14</span>,<span class="number">20</span>],[<span class="number">4</span>,<span class="number">11</span>,<span class="number">16</span>,<span class="number">23</span>],[<span class="number">6</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">21</span>]];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> offset = [[<span class="number">1</span>,<span class="number">0</span>],[<span class="number">5</span>,<span class="number">1</span>],[<span class="number">3</span>,<span class="number">5</span>],[<span class="number">7</span>,<span class="number">0</span>]];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 01234567 89abcdef fedcba98 76543210</span></span><br><span class="line">  <span class="keyword">let</span> abcd = [<span class="number">0x67452301</span>,<span class="number">0xEFCDAB89</span>,<span class="number">0x98BADCFE</span>,<span class="number">0x10325476</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// http://www.faqs.org/rfcs/rfc1321.html</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> idx = <span class="number">0</span>; idx &lt; x.<span class="property">length</span>; idx += <span class="number">16</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">ABCD</span> = [...abcd];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; <span class="number">4</span>;i ++)&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>;j &lt; <span class="number">4</span>;j ++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> k = <span class="number">0</span>;k &lt; <span class="number">4</span>;k ++)&#123;</span><br><span class="line">          abcd = [abcd[<span class="number">3</span>],<span class="title function_">f</span>(...abcd, x[idx + ((offset[i][<span class="number">0</span>]*(j*<span class="number">4</span>+k) + offset[i][<span class="number">1</span>] ) %<span class="number">16</span>)], S[i][k], K[(i*<span class="number">4</span>+j)*<span class="number">4</span>+k], funcs[i]),abcd[<span class="number">1</span>],abcd[<span class="number">2</span>]];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    abcd = <span class="variable constant_">ABCD</span>.<span class="title function_">map</span>(<span class="function">(<span class="params">item,idx</span>)=&gt;</span> <span class="title function_">unsignAdd</span>(item,abcd[idx]));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> abcd.<span class="title function_">map</span>(<span class="function"><span class="params">item</span>=&gt;</span><span class="title class_">WordToHex</span>(item)).<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">toLowerCase</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">md5</span>(<span class="string">&quot;&quot;</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">md5</span>(<span class="string">&quot;demo&quot;</span>))</span><br></pre></td></tr></table></figure>

<p>两段看起来复杂的函数 其实 是字符串通过utf8&#x2F;ascii之类转换成 数值</p>
<p>其中一些值和公式的设计大自能有个想法感受了，还不明白的是offset和s的设计为什么是这样的,搜了半天也没搜到</p>
<p><a href="https://en.wikipedia.org/wiki/MD5">https://en.wikipedia.org/wiki/MD5</a></p>
]]></content>
      <categories>
        <category>math</category>
      </categories>
      <tags>
        <tag>math</tag>
        <tag>md5</tag>
      </tags>
  </entry>
  <entry>
    <title>ios13.5.1+, vue2 vShow,css transform rotate, BUG</title>
    <url>/Blog/20-08-06-ios13_5_1_vuevshow_transformrotatebug/</url>
    <content><![CDATA[<h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>期望</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">点击按钮</span><br><span class="line">显示div</span><br><span class="line">旋转4.5秒</span><br><span class="line">隐藏div</span><br></pre></td></tr></table></figure>

<p>BUG:</p>
<p>在android和ios(系统版本&lt;&#x3D;12)上正常的代码，在ios(&gt;&#x3D;13.5.1)上 如果前后角度相同会无法旋转</p>
<h1 id="代码vue"><a href="#代码vue" class="headerlink" title="代码vue"></a>代码vue</h1><span id="more"></span>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div</span><br><span class="line">    class=&quot;container&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &lt;div</span><br><span class="line">      v-show=&quot;display&quot;</span><br><span class="line">      :style=&quot;&#123; transform: angle &#125;&quot;</span><br><span class="line">      class=&quot;demo-div&quot;</span><br><span class="line">    &gt;Hey</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h1&gt;expect: show div, rotate div. rotate angle(&#123;&#123; rotateA &#125;&#125;), hide div&lt;/h1&gt;</span><br><span class="line">    &lt;div v-if=&quot;!unClickable&quot;&gt;</span><br><span class="line">      &lt;h2 @click=&quot;onClick(0)&quot;&gt;Same angle(bug)&lt;/h2&gt;</span><br><span class="line">      &lt;h2 @click=&quot;onClick(60)&quot;&gt;+60 angle&lt;/h2&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// rotate stuck on ios ( &gt;=13.5.1 ) , works well on android and ios ( &lt;= 12 )</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      unClickable: false,</span><br><span class="line">      display: false,</span><br><span class="line">      angle: &#x27;rotate(0deg)&#x27;,</span><br><span class="line">      rotateA: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    onClick(deg) &#123;</span><br><span class="line">      if (this.unClickable) &#123;</span><br><span class="line">        return</span><br><span class="line">      &#125;</span><br><span class="line">      this.unClickable = true</span><br><span class="line">      this.display = true</span><br><span class="line">      setTimeout(() =&gt; &#123;</span><br><span class="line">        // if rotate don&#x27;t change the rotation will stucked</span><br><span class="line">        this.rotateA = (this.rotateA + deg) % 360</span><br><span class="line">        this.angle = `rotate($&#123;(6 * 360 + this.rotateA)&#125;deg)`</span><br><span class="line">      &#125;, 100)</span><br><span class="line">      // change 100 to 1000 works well</span><br><span class="line"></span><br><span class="line">      setTimeout(() =&gt; &#123;</span><br><span class="line">        this.angle = &#x27;rotate(0deg)&#x27;</span><br><span class="line">        this.display = false</span><br><span class="line">        this.unClickable = false</span><br><span class="line">      &#125;, 5500)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.container &#123;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  min-height: 100vh;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-direction: column;</span><br><span class="line">  justify-content: center;</span><br><span class="line">  align-items: center;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">h2 &#123;</span><br><span class="line">  background-color: lightgrey;</span><br><span class="line">  padding: 1em;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.demo-div &#123;</span><br><span class="line">  transition: transform ease-out 4.5s;</span><br><span class="line">  width: 50vw;</span><br><span class="line">  height: 50vh;</span><br><span class="line">  background-color: lightblue;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h1 id="一些调试结果"><a href="#一些调试结果" class="headerlink" title="一些调试结果"></a>一些调试结果</h1><p>如果和上一次结束的角度不同，则可以旋转。</p>
<p>如果把setTimeout调整到1000则可以旋转。</p>
<p>如果把<code>v-show</code>设置成始终显示也没有问题。</p>
<p>可能和vue关系不大，因为通过把v-show换成 纯js对的display操作也能重现</p>
<p>没有可以直接调试ios webview的工具。猜测是ios的 webview和 vue 的 <code>v-show</code> 某些处理出现了问题</p>
<h1 id="在线demo"><a href="#在线demo" class="headerlink" title="在线demo"></a>在线demo</h1><p><a href="https://42zc6.csb.app/">https://42zc6.csb.app</a></p>
<iframe src="https://codesandbox.io/embed/naughty-nobel-42zc6?fontsize=14&hidenavigation=1&theme=dark"
     style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
     title="naughty-nobel-42zc6"
     allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
     sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
   ></iframe>

]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>vue2</tag>
        <tag>ios13.5.1</tag>
        <tag>ios</tag>
        <tag>bug</tag>
      </tags>
  </entry>
  <entry>
    <title>《金字塔原理》笔记</title>
    <url>/Blog/20-08-10-pyramidprinciple/</url>
    <content><![CDATA[<h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>有收获但不推荐 4&#x2F;10推荐度，如果要看，看附录3就好了。</p>
<h1 id="书"><a href="#书" class="headerlink" title="书"></a>书</h1><h2 id="表达的逻辑"><a href="#表达的逻辑" class="headerlink" title="表达的逻辑"></a>表达的逻辑</h2><p>人单次记忆7+-2左右事物，如果更多会自动去抽象范畴高级归类</p>
<p>讲解从顶向下，直接讲解联系，否则听取的人是自己脑补的联系，很大可能是和讲解意图不同。</p>
<p>另一个角度，先承认人脑在处理记忆的时候会自动做的事情，对于其中有误差和负担的部分，先直接的讲解清楚。</p>
<blockquote>
<p>提示</p>
</blockquote>
<p>读者会将读到的细想进行归类分组和总结，以便记住，如果作者传达给读者的思想已经实现进行了归类和概括，并且按自上而下的顺序呈现，读者就能更容易理解作者表达的思想。以上会所名，条例清晰的文章应当具有金字塔结构，并且不断“自上而下”地向读者传递信息，虽然在开始写作时作者的西路是“自下而上”的。</p>
<blockquote>
<p>提示</p>
</blockquote>
<p>金字塔中的思想以3种方式互相关联——向上、向下和横向。位于一组思想的上一个层次的思想是对这一组思想的概。这一组思想则是对其上一层次的思想的解释和支持。</p>
<p>文章中的思想必须符合以下规则。</p>
<span id="more"></span>

<ol>
<li>纵向：文章中任一层次上的思想必须是其下一层次思想的概括。</li>
<li>横向：每组中的思想必须属于同一逻辑范畴</li>
<li>横向：每组中的思想必须按逻辑顺序组织</li>
</ol>
<blockquote>
<p>组织思想基本上只可能有4种顺序</p>
</blockquote>
<p>演绎顺序: 大前提，小前提，结论</p>
<p>时间（步骤）顺序：第一第二第三</p>
<p>结构（空间）顺序：波士顿，纽约，华盛顿</p>
<p>程度（重要性）顺序：最重要，次重要，等等</p>
<p>通过 产生疑问吸引读者，逐级提问引导再提问，读者不一定会同意作者从地一个表述到最后一个表述的思维进展方式，但至少能够明确了解作者的思路，而这是所有作者期望的最好结果。（在我看来这里在尽力保证人与人之间的传达准确性，但传达虽然准确了，其中有不少是“作者的，不必要的信息”</p>
<p>序言应当介绍4要素：介绍背景，指出冲突，引发疑问，给出答案。</p>
<blockquote>
<p>提示</p>
</blockquote>
<p>自上而下法构建金字塔的步骤</p>
<ol>
<li>提出主题思想</li>
<li>设想受众的主要疑问</li>
<li>写序言，背景-冲突-疑问-回答</li>
<li>与受众进行疑问&#x2F;回答式对话</li>
<li>对受众的新疑问，重复进行疑问&#x2F;回答式对话。</li>
</ol>
<p>子节点之间 演绎关系，归纳关系</p>
<p>“日本商人正在增加对中国市场的投资”</p>
<p>演绎关系“美国商人将很快进入中国市场，必将进一步促进日商的行动”</p>
<p>归纳关系“美国商人正在增加对中国市场的投资” （主语不变改变谓语，谓语不变改变主语）</p>
<p>演绎推理（第二点是对第一点主语或谓语的论述）归纳推理（同组中的思想具有类似的主语或谓语）</p>
<h2 id="思考的逻辑"><a href="#思考的逻辑" class="headerlink" title="思考的逻辑"></a>思考的逻辑</h2><p>分类方法：因果&#x2F;整体部分&#x2F;重要性</p>
<p>时间顺序&#x2F;阶段划分&#x2F;步骤</p>
<p>结构顺序</p>
<p>程度顺序&#x2F;重要性</p>
<p>以及对一个不合理的金字塔结构如何调整</p>
<p>各组思想有效概括</p>
<p>原始资料被概括后，包含传达者的意图，真的好吗？</p>
<p>“总是要概括？”</p>
<p>的确固定习惯可能发现新的提炼和思想，但习惯分类也会导致分类的固定死，和无真实意义。</p>
<p>事物之间可能本来没有意义关系是人类强加的，有时需要弄清，有时甚至是错的不该加以关系，现在要强制清晰这些联系，还做了个数限制，不太实际吧。</p>
<h2 id="解决问题的逻辑"><a href="#解决问题的逻辑" class="headerlink" title="解决问题的逻辑"></a>解决问题的逻辑</h2><p>界定问题：背景，当前，目标，方法</p>
<p>结构化分析：手机信息，描述发现，得出结论，提出方案</p>
<p>既定的表只适用于其特定的问题分析。如果是持续可能出问题的，可以维护这样一个分析结构，但感觉这是给不熟悉的人的，熟悉的人应该有一个快速问题的hash表</p>
<p>作者反复说了几次相互独立，完全穷尽。。。。可以尽量，但太不现实</p>
<p>使用诊断框架的意义，我感觉更多是，持续维护和更新框架，减少每一次或者重复出现过的思考，不熟悉的人对框架的思考，最好能再增加具体操作描述</p>
<h2 id="演示的逻辑"><a href="#演示的逻辑" class="headerlink" title="演示的逻辑"></a>演示的逻辑</h2><p>ppt教学？？？？感觉很多理所应当，不过我有不少事情感觉理所应当有不少人做不到，只能说作者写得细致？</p>
<p>关于图标，突然意识到，其实结论，文字就足够了，而为了“人类容易理解和记忆”，会辅助以图标和文字，但这个图标有多少人会去“校验”，和值得到文字结论的相比，都是不拥有原始数据的，像是五十步和百步。</p>
<p>图标幻灯片90%，文字幻灯片10%。。。</p>
<p>减少不必要术语创造所带来的理解代价</p>
<p>文章&#x2F;ppt等： 你收集了各种知识，通过一个通道线性的输出，读者线性的接受，自己组装成一个架构</p>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>有时结构不存在，无形的，不能解释的结果</p>
<p>任何推理涉及3个实体：规则（关于世界组成方式的看法），情况（世界上存在的已知事实），结果（如果把规则用于该情况，预期将发生的事情）</p>
<p>提出假设，设计实验</p>
<p><strong>搬运附录3 TODO</strong></p>
<h1 id="结"><a href="#结" class="headerlink" title="结"></a>结</h1><p>建议大家平时自己 多读写xmind，ppt，wiki，tutorial等 很多东西就自然而然了，或者每件事情写完后，多几遍自己阅读</p>
<p>收获有的，吐槽一下，例如上面作者说了好几遍 不重不漏这种不现实的，自己写书不同章节重复的不知有多少，例如子节点和父节点，有时平摊到一个层级 能更好的扁平化。</p>
<p>感受是 整体针对的是一个“想法传递的准确性保障”，但实践的步骤会因为各种奇怪的理由强制抽象（比如强调7+-2），有不少在现有工具优秀表现上显得过时，例如分类的维护性等。令我很怀疑这个title XD</p>
]]></content>
      <categories>
        <category>notes</category>
        <category>book</category>
      </categories>
      <tags>
        <tag>notes</tag>
        <tag>book</tag>
      </tags>
  </entry>
  <entry>
    <title>vue 强制生产可调试</title>
    <url>/Blog/20-08-23-vuedevtools/</url>
    <content><![CDATA[<h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>直接用devtools就不说了</p>
<p>现在说生产强制可调是，iqiyi为例</p>
<p>首先进入 vuejs.org 保证 控制版上有Vue标签</p>
<p>然后用同样的网页打开iqiyi保证 这个标签还存在</p>
<p>Sources-&gt;Page -&gt; 右键 top -&gt; search in all files</p>
<p>输入<code>file:* devtools</code> 搜索出文件</p>
<p>找到你觉得可能的文件（iqiyi是common.balabala…），格式化(chrome的花括号)，在<code>devtools:!1</code>执行后一句加断点。</p>
<p>刷新页面,在console中执行修改，例如<code>G.devtools = true;</code>，点调试的pause（暂停继续）按钮，切回Vue标签即可</p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>redis init 简单笔记</title>
    <url>/Blog/20-08-28-redisinit/</url>
    <content><![CDATA[<h1 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h1><h2 id="安装启动"><a href="#安装启动" class="headerlink" title="安装启动"></a>安装启动</h2><p>Debian 系列</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt install redis-server</span><br></pre></td></tr></table></figure>

<p>也可以考虑官网下源码自己编译，或者docker直接pull</p>
<p>修改<code>/etc/redis/redis.conf</code>中<code>supervised no</code>为<code>supervised systemd</code> (Ubuntu 用systemd初始化系统的这样设置</p>
<p>通用的重启</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart redis.service</span><br><span class="line"># 查看状态</span><br><span class="line">systemctl status redis</span><br></pre></td></tr></table></figure>

<blockquote>
<p>个人电脑取消它开机启动<code>systemctl disable redis</code></p>
</blockquote>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>啊 这个cli的提示真的香</p>
<span id="more"></span>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ redis-cli</span><br><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">127.0.0.1:6379&gt; set test &quot;It&#x27;s working!&quot;</span><br><span class="line">127.0.0.1:6379&gt; get test</span><br><span class="line">127.0.0.1:6379&gt; test</span><br><span class="line">$ systemctl restart redis</span><br><span class="line">127.0.0.1:6379&gt; get test</span><br></pre></td></tr></table></figure>

<h2 id="允许访问的ip设置"><a href="#允许访问的ip设置" class="headerlink" title="允许访问的ip设置"></a>允许访问的ip设置</h2><p>注释掉<code>bind 127.0.0.1 ::1</code> 或者改成<code>bind 0.0.0.0</code> 允许localhost以外的任何地址访问,默认只允许本地访问（不建议？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -lnp | grep redis</span><br></pre></td></tr></table></figure>

<p>你应该看到的第4列</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0.0.0.0:6379</span><br><span class="line">::1:6379</span><br></pre></td></tr></table></figure>

<h2 id="密码设置"><a href="#密码设置" class="headerlink" title="密码设置"></a>密码设置</h2><p>把下面配置启用并为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">requirepass 你的密码</span><br></pre></td></tr></table></figure>

<p>注释说因为很快用户可以150k&#x2F;s的尝试，所以建议复杂密码。推荐的方案是<code>openssl rand 60 | openssl base64 -A</code>生成一个</p>
<p>重启服务用密码登录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ systemctl restart redis.service</span><br><span class="line">$ redis-cli</span><br><span class="line">127.0.0.1:6379&gt; auth 你的密码</span><br><span class="line">127.0.0.1:6379&gt; set key1 10</span><br><span class="line">127.0.0.1:6379&gt; get key1</span><br><span class="line">127.0.0.1:6379&gt; quit</span><br></pre></td></tr></table></figure>

<h2 id="风险指令禁用"><a href="#风险指令禁用" class="headerlink" title="风险指令禁用"></a>风险指令禁用</h2><p>一些可能有风险的指令 FLUSHDB, FLUSHALL, KEYS, PEXPIRE, DEL, CONFIG, SHUTDOWN, BGREWRITEAOF, BGSAVE, SAVE, SPOP, SREM, RENAME, and DEBUG</p>
<p><strong>The following steps showing how to disable and rename commands are examples. You should only choose to disable or rename the commands that make sense for you. You can review the full list of commands for yourself and determine how they might be misused at</strong> </p>
<p><strong>总之就是你应该了解指令的意义，才禁用相关的指令,以防误用</strong> 相关指令描述 <a href="http://redis.io/commands">http://redis.io/commands</a></p>
<p>在配置中增加（两种方式）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rename-command 指令名字 &quot;&quot;</span><br><span class="line">rename-command 指令名字 新的难输入的指令名字</span><br></pre></td></tr></table></figure>

<h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><p>字符串，hash，list，集合，有序集合</p>
<p>超时时间设置</p>
<p>本身不支持嵌套对象，如果要把它变成json字符串</p>
<p><a href="https://redis.io/topics/data-types-intro">https://redis.io/topics/data-types-intro</a></p>
<p>Bit arrays (or simply bitmaps): it is possible, using special commands, to handle String values like an array of bits: you can set and clear individual bits, count all the bits set to 1, find the first set or unset bit, and so forth.</p>
<p>HyperLogLogs: this is a probabilistic data structure which is used in order to estimate the cardinality of a set. Don’t be scared, it is simpler than it seems… See later in the HyperLogLog section of this tutorial.</p>
<p>Streams: append-only collections of map-like entries that provide an abstract log data type. They are covered in depth in the Introduction to Redis Streams.</p>
<h2 id="发布-x2F-订阅"><a href="#发布-x2F-订阅" class="headerlink" title="发布&#x2F;订阅"></a>发布&#x2F;订阅</h2><p><a href="https://redis.io/topics/pubsub">https://redis.io/topics/pubsub</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SUBSCRIBE 频道名1 [频道名2 ...]</span><br><span class="line">PUBLISH 频道名1 &quot;消息&quot;</span><br></pre></td></tr></table></figure>

<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MULTI</span><br><span class="line"></span><br><span class="line">命令队列</span><br><span class="line"></span><br><span class="line">EXEC</span><br></pre></td></tr></table></figure>

<p><a href="https://redis.io/topics/transactions">https://redis.io/topics/transactions</a></p>
<p>每条命令是原子操作，如果exec调用了，那么执行过程中 如果有命令失败，则会跳过改命令继续往后。</p>
<p>? redis的事务 所以到底啥用,首先是和传统数据库的事务的意义不同</p>
<p>为啥不支持</p>
<p>Redis commands can fail only if called with a wrong syntax (and the problem is not detectable during the command queueing), or against keys holding the wrong data type: this means that in practical terms a failing command is the result of a programming errors, and a kind of error that is very likely to be detected during development, and not in production.</p>
<p>Redis is internally simplified and faster because it does not need the ability to roll back.</p>
<h3 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h3><p>一个非原子的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">val = GET mykey</span><br><span class="line">val = val + 1</span><br><span class="line">SET mykey $val</span><br></pre></td></tr></table></figure>

<p>改为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">WATCH mykey</span><br><span class="line">val = GET mykey</span><br><span class="line">val = val + 1</span><br><span class="line">MULTI</span><br><span class="line">SET mykey $val</span><br><span class="line">EXEC</span><br></pre></td></tr></table></figure>

<p>如果在WATCH和EXEC之间修改了mykey，这个transaction 会失败</p>
<p>然后反复尝试，因为从实际期望上，不同的用户冲突的可能性很小，所以用的是乐观锁, 多数情况并不需要重复尝试</p>
<p>管道Learn how to send multiple commands at once, saving on round trip time.: <code>$(echo -en &quot;PING\r\n SET runoobkey redis\r\nGET runoobkey\r\nINCR visitor\r\nINCR visitor\r\nINCR visitor\r\n&quot;; sleep 10) | nc localhost 6379</code></p>
<h2 id="cheatsheet"><a href="#cheatsheet" class="headerlink" title="cheatsheet"></a>cheatsheet</h2><p>远程连接: <code>redis-cli -h host -p port -a password</code> &#x2F;&#x2F; 不建议直接这样操作? 会被记录在你的命令历史里?</p>
<p>查看信息<code>info</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">config get 配置名</span><br><span class="line">config set 配置名 配置值</span><br></pre></td></tr></table></figure>

<p>benchmarks: <a href="https://redis.io/topics/benchmarks">https://redis.io/topics/benchmarks</a></p>
<p><code>redis-benchmark -h 127.0.0.1 -p 6379 -t set,lpush -n 10000 -q</code> 咦 这玩意不需要权限？？？</p>
<p>文档很多是ruby写的例子 XD，没用过，人脑执行了一下大概的代码</p>
<h1 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h1><p><a href="https://www.digitalocean.com/community/tutorials/how-to-install-and-secure-redis-on-ubuntu-18-04">https://www.digitalocean.com/community/tutorials/how-to-install-and-secure-redis-on-ubuntu-18-04</a></p>
<p><a href="https://redis.io/documentation">https://redis.io/documentation</a></p>
]]></content>
      <categories>
        <category>backend</category>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>宏任务 微任务</title>
    <url>/Blog/20-09-21-tasks-microtasks-queues-and-schedules/</url>
    <content><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>setTimeout 启动的宏任务</p>
<p>promise(以及await的写法) 和 observer 都是微任务</p>
<p>执行是单线程，当宏任务执行完后，把所有等待的微任务执行后，才会执行下一个宏任务。</p>
<p>然后作者举例了一个稍微特殊一点的，html的事件冒泡，父子元素都有点击事件。</p>
<ul>
<li><p>鼠标点击子元素。分发是靠浏览器分发，对于js的任务是两个click。</p>
</li>
<li><p>代码调用子元素点击事件，也会触发冒泡，但是对于js的任务是 这个调用代码。</p>
</li>
</ul>
<p>因此上面两种看似相同的点击会有不同的执行顺序。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/">https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/</a></p>
<p>有精力建议，直接看上面原文，作者的demo做得很好的！</p>
<p>以外的话 还有mdn的文档看</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide">https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide</a></p>
<p><a href="https://zh.javascript.info/event-loop">https://zh.javascript.info/event-loop</a></p>
<p><a href="https://stackoverflow.com/questions/25915634/difference-between-microtask-and-macrotask-within-an-event-loop-context">https://stackoverflow.com/questions/25915634/difference-between-microtask-and-macrotask-within-an-event-loop-context</a></p>
<p>对于不应该阻塞事件循环的耗时长的繁重计算任务，我们可以使用 Web Workers。<a href="https://html.spec.whatwg.org/multipage/workers.html">https://html.spec.whatwg.org/multipage/workers.html</a></p>
<p>这是在另一个并行线程中运行代码的方式。</p>
<p>Web Workers 可以与主线程交换消息，但是它们具有自己的变量和事件循环。</p>
<p>Web Workers 没有访问 DOM 的权限，因此，它们对于同时使用多个 CPU 内核的计算非常有用。</p>
]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>microTasks</tag>
        <tag>macroTasks</tag>
        <tag>schedule</tag>
      </tags>
  </entry>
  <entry>
    <title>call this</title>
    <url>/Blog/20-11-09-call/</url>
    <content><![CDATA[<p>直接上代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fn print&#x27;</span>)&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fn1 print&#x27;</span>)&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fnthis</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fn.<span class="property">call</span> == <span class="title class_">Function</span>.<span class="property">call</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fn.<span class="property">call</span>.<span class="property">call</span> == <span class="title class_">Function</span>.<span class="property">call</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Function</span>.<span class="property">call</span>.<span class="property">call</span> == <span class="title class_">Function</span>.<span class="property">call</span>)</span><br><span class="line"></span><br><span class="line">fn.<span class="title function_">call</span>(fn1)</span><br><span class="line">fn.<span class="property">call</span>.<span class="title function_">call</span>(fn1)</span><br><span class="line"><span class="title class_">Function</span>.<span class="title function_">call</span>(fn1)</span><br><span class="line"><span class="title class_">Function</span>.<span class="property">call</span>.<span class="title function_">call</span>(fn1)</span><br><span class="line"></span><br><span class="line">fn.<span class="title function_">call</span>(fnthis)</span><br><span class="line">fn.<span class="property">call</span>.<span class="title function_">call</span>(fnthis)</span><br><span class="line"><span class="title class_">Function</span>.<span class="title function_">call</span>(fnthis)</span><br><span class="line"><span class="title class_">Function</span>.<span class="property">call</span>.<span class="title function_">call</span>(fnthis)</span><br></pre></td></tr></table></figure>

<p>根据mdn上的call的文档</p>
<p><code>function.call(thisArg, arg1, arg2, ...)</code></p>
<p>所以</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fn.call(fn1) // 调用fn函数，在函数执行中的 this = fn1，</span><br><span class="line">fn.call.call(fn1) // 调用Function.call函数，在函数执行中的 this = fn1，</span><br><span class="line">Function.call(fn1) // 调用Function.call函数，但是是参数传递了fn1,而不是this = fn1</span><br><span class="line">Function.call.call(fn1) // 和第二个相同</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>highlight menu item when scrolling down to section</title>
    <url>/Blog/20-11-09-scroll/</url>
    <content><![CDATA[<p>对于css</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">html &#123;</span><br><span class="line">  scroll-behavior: smooth;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用id + hash的方式滚动</p>
<p>对于js</p>
<p>事件:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.addEventListener(&#x27;scroll&#x27;, callback);</span><br></pre></td></tr></table></figure>

<p><code>throttle + js判断后 再增删 class</code></p>
<p>详细：下面30k viewed的页面</p>
<p><a href="https://stackoverflow.com/questions/32395988/highlight-menu-item-when-scrolling-down-to-section">https://stackoverflow.com/questions/32395988/highlight-menu-item-when-scrolling-down-to-section</a></p>
]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>scroll</tag>
        <tag>context</tag>
      </tags>
  </entry>
  <entry>
    <title>mkfifo sh nc</title>
    <url>/Blog/20-11-11-mkfifo-nc/</url>
    <content><![CDATA[<h1 id="mkpipe"><a href="#mkpipe" class="headerlink" title="mkpipe"></a>mkpipe</h1><p>众所周知</p>
<p><code>ls | grep hey</code>中的竖线是pipe，</p>
<p>同样，我们可以用mkfifo创建命名的管道</p>
<p>创建</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkfifo /tmp/pipedemo</span><br></pre></td></tr></table></figure>

<p>输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls &gt; /tmp/pipedemo</span><br></pre></td></tr></table></figure>

<p>读出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat &lt; /tmp/pipedemo</span><br></pre></td></tr></table></figure>

<p>输入和读出不用保证执行顺序</p>
<span id="more"></span>

<h1 id="sh-i"><a href="#sh-i" class="headerlink" title="sh -i"></a>sh -i</h1><p>众所周知</p>
<p>0 是一个文件描述符，表示标准输入(stdin)<br>1 是一个文件描述符，表示标准输出(stdout)<br>2 是一个文件描述符，表示标准错误(stderr)</p>
<p>而<code>sh -i</code> 可以强制交互模式</p>
<h1 id="nc"><a href="#nc" class="headerlink" title="nc"></a>nc</h1><p>最后就有了, nc文档上的实例,既可以做server又可以做client</p>
<p>服务端</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 清除并创建fifo 的管道(看权限是`rw-rw-r--`)</span><br><span class="line">$ rm -f /tmp/f; mkfifo /tmp/f</span><br><span class="line">$ cat /tmp/f | /bin/sh -i 2&gt;&amp;1 | nc -l 127.0.0.1 1234 &gt; /tmp/f</span><br></pre></td></tr></table></figure>

<p>客户端</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc 127.0.0.1 1234</span><br></pre></td></tr></table></figure>

<p>&#x2F;bin&#x2F;sh 输出到服务端127.0.0.1:1234，作为输入</p>
<p>用户连接上127.0.0.1:1234，接受到上面的输入</p>
<p>用户敲入命令，发送给服务端127.0.0.1:1234</p>
<p>服务端输出重定向到&#x2F;tmp&#x2F;f中</p>
<p>&#x2F;tmp&#x2F;f 被cat出 定向给 &#x2F;bin&#x2F;sh</p>
<p>&#x2F;bin&#x2F;sh接受输入并反馈出输出给 服务端</p>
<p>服务端返回给客户端</p>
<h1 id="搜还搜到了一个"><a href="#搜还搜到了一个" class="headerlink" title="搜还搜到了一个"></a>搜还搜到了一个</h1><p><a href="https://www.dartmouth.edu/~rc/classes/ksh/welcome.html#top">https://www.dartmouth.edu/~rc/classes/ksh/welcome.html#top</a></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><code>man sh</code></p>
<p><code>man mkfifo</code></p>
<p><code>man nc</code></p>
]]></content>
      <categories>
        <category>software</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>mkfifo</tag>
      </tags>
  </entry>
  <entry>
    <title>android 11 wireless adb</title>
    <url>/Blog/20-11-13-android11-adb/</url>
    <content><![CDATA[<p>发现android 11 开发者模式 多了个无线调试</p>
<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>android 11，开发者模式</p>
<p>电脑：</p>
<p>android platform tools adb 30 版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb --version</span><br><span class="line">Android Debug Bridge version 1.0.41</span><br><span class="line">Version 30.0.5-6877874 # 这里 要30版本</span><br><span class="line">Installed as /&lt;your path&gt;/Sdk/platform-tools/adb</span><br></pre></td></tr></table></figure>

<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>手机上：</p>
<span id="more"></span>

<p>连接wifi，开发者选项-&gt;无线调试-&gt;使用配对码配对设备</p>
<p>电脑上</p>
<p>配对</p>
<p><code>adb pair 弹框中你的ip:端口</code> 输入六位数字 配对成功</p>
<p>连接</p>
<p><code>adb connect 无限调试界面的 ip:端口</code></p>
<p>查看</p>
<p><code>adb devices</code></p>
<p><code>adb shell</code></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://developer.android.com/studio/command-line/adb">https://developer.android.com/studio/command-line/adb</a></p>
<p>之前看了一些国内发的文章，很多缺少<code>adb connect</code>这一步骤,可能是android studio会自动调用connect？</p>
<p>另外就是无线调试并不是android 11 才有的，看官方文档在10以及以下一直可以，只是授权过程和启动手机上调试端口更麻烦一些</p>
<p>可以先usb连接后 通过 adb tcpip 5555 再 adb connect ip:5555 这样进入无线调试</p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>android</category>
      </categories>
      <tags>
        <tag>adb</tag>
        <tag>linux</tag>
        <tag>android 11</tag>
        <tag>wireless adb</tag>
      </tags>
  </entry>
  <entry>
    <title>chrome inspect 404</title>
    <url>/Blog/20-12-14-chromium-inspect/</url>
    <content><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p><code>chrome://inspect</code> 调试android 打开404</p>
<p>常见的问题是 因为这个网址是在线的被墙了</p>
<p>挂个代理就行</p>
<p>但并不是这个问题(同一个手机里面 chrome的页面能调试，但要调的应用的页面打开404)</p>
<p>手机应用里的 浏览器版本<code>@6cd201cc270433b22442a58084295da1ff3c1370</code> 并没有对应的调试 (87.0.4280.86)</p>
<p>作为对比<code>@d8a506935fc2273cfbac5e5b629d74917d9119c7</code> (86.0.4240.198) 是可用的</p>
<p><code>https://chrome-devtools-frontend.appspot.com/serve_file/@7f3cdc3f76faecc6425814688e3b2b71bf1630a4/inspector.html</code></p>
<p>最近 ubuntu snap 管理的chromium 貌似停在了一个尴尬的版本上, 升级了一下？似乎也不是这个问题</p>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>让客户端给了一个新的包（浏览器版本换了）</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://snapcraft.io/chromium">https://snapcraft.io/chromium</a></p>
<p><a href="https://stackoverflow.com/questions/33632793/chrome-inspect-without-internet-connection">https://stackoverflow.com/questions/33632793/chrome-inspect-without-internet-connection</a></p>
<p><a href="https://stackoverflow.com/questions/47723176/remote-debugging-chrome-on-android-while-offline">https://stackoverflow.com/questions/47723176/remote-debugging-chrome-on-android-while-offline</a></p>
]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>chrome</tag>
        <tag>debug</tag>
      </tags>
  </entry>
  <entry>
    <title>vue2 reactive基本原理demo</title>
    <url>/Blog/21-01-13-reactive-demo/</url>
    <content><![CDATA[<h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>以下代码均可以在nodejs和chrome的console里运行</p>
<p>以下均未考虑兼容,空判断,父类属性,解除绑定, 多层关系, 循环调用,多次调用等</p>
<h1 id="Step-1-接管赋值和取值"><a href="#Step-1-接管赋值和取值" class="headerlink" title="Step 1 接管赋值和取值"></a>Step 1 接管赋值和取值</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> demo = &#123;&#125;;</span><br><span class="line">demo.<span class="property">_dAtA</span> = &#123;&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(demo, <span class="string">&#x27;x&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> demo.<span class="property">_dAtA</span>[<span class="string">&#x27;x&#x27;</span>] * <span class="number">2</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">set</span>(<span class="params">val</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(val);</span><br><span class="line">    demo.<span class="property">_dAtA</span>[<span class="string">&#x27;x&#x27;</span>] = val;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">demo.<span class="property">x</span> = <span class="number">123</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(demo.<span class="property">x</span>)</span><br></pre></td></tr></table></figure>

<p>专门做了个赋值取值不一致的乘2</p>
<span id="more"></span>

<h1 id="Step-2-函数订阅与触发"><a href="#Step-2-函数订阅与触发" class="headerlink" title="Step 2 函数订阅与触发"></a>Step 2 函数订阅与触发</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">  subs = []</span><br><span class="line">  <span class="title function_">sub</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">subs</span>.<span class="title function_">push</span>(fn)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">unsub</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="variable language_">this</span>.<span class="property">subs</span>.<span class="property">length</span> - <span class="number">1</span>;i &gt;= <span class="number">0</span> ;i--)&#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">subs</span>[i] === fn)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">subs</span>.<span class="title function_">splice</span>(i,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">notify</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;nofity start&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">subs</span>.<span class="property">length</span>; i ++)&#123;</span><br><span class="line">      (<span class="variable language_">this</span>.<span class="property">subs</span>[i])();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;nofity end&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> d = <span class="keyword">new</span> <span class="title class_">Demo</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">hello0</span> = (<span class="params"></span>)=&gt;&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello 0&#x27;</span>)&#125;</span><br><span class="line">d.<span class="title function_">sub</span>(hello0)</span><br><span class="line">d.<span class="title function_">notify</span>()</span><br><span class="line">d.<span class="title function_">unsub</span>(hello0)</span><br><span class="line">d.<span class="title function_">notify</span>()</span><br><span class="line"></span><br><span class="line">d.<span class="title function_">sub</span>(<span class="function">()=&gt;</span>&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello 1&#x27;</span>)&#125;)</span><br><span class="line">d.<span class="title function_">unsub</span>(<span class="function">()=&gt;</span>&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello 1&#x27;</span>)&#125;)</span><br><span class="line">d.<span class="title function_">notify</span>()</span><br></pre></td></tr></table></figure>

<p>专门写了两种，对于函数指针不了解的，也可以通过这个理解一下</p>
<h1 id="Step-3-data-computed"><a href="#Step-3-data-computed" class="headerlink" title="Step 3 data + computed"></a>Step 3 data + computed</h1><p>有了上面的基本工具，结合一下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sub</span>&#123;</span><br><span class="line">  subs = []</span><br><span class="line">  <span class="title function_">sub</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">subs</span>.<span class="title function_">push</span>(fn)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">notify</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">subs</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">fn</span>=&gt;</span>&#123;<span class="title function_">fn</span>()&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// currentReactiveValue</span></span><br><span class="line"><span class="keyword">let</span> curV = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">defineReactive</span>(<span class="params">obj, key, value, db</span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> subs = <span class="keyword">new</span> <span class="title class_">Sub</span>();</span><br><span class="line">  obj[db][key] = value;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, key, &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(curV)&#123;</span><br><span class="line">        <span class="comment">// not bind self</span></span><br><span class="line">        <span class="keyword">if</span>(!(curV.<span class="property">vm</span> === obj &amp;&amp; curV.<span class="property">key</span> === key))&#123;</span><br><span class="line">          <span class="keyword">const</span> rv = curV;</span><br><span class="line">          subs.<span class="title function_">sub</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            rv.<span class="property">vm</span>[rv.<span class="property">key</span>] = rv.<span class="title function_">fn</span>();</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`\t[info][<span class="subst">$&#123;rv.key&#125;</span>] set to [<span class="subst">$&#123;rv.vm[rv.key]&#125;</span>]`</span>);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> obj[db][key];</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">v</span>)&#123;</span><br><span class="line">      obj[db][key] = v</span><br><span class="line">      subs.<span class="title function_">notify</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">defineComputed</span>(<span class="params">obj, key, fn</span>) &#123;</span><br><span class="line">  curV = &#123;<span class="attr">vm</span>: obj, key, <span class="attr">fn</span>: fn.<span class="title function_">bind</span>(obj)&#125;;</span><br><span class="line">  <span class="keyword">let</span> d = (fn.<span class="title function_">bind</span>(obj))();</span><br><span class="line">  <span class="title function_">defineReactive</span>(obj, key, d, <span class="string">&#x27;_computed&#x27;</span>);</span><br><span class="line">  curV = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VDemo</span>&#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">config</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> d = config.<span class="title function_">dAtA</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_data</span> = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> d) &#123;</span><br><span class="line">      <span class="title function_">defineReactive</span>(<span class="variable language_">this</span>, key, d[key], <span class="string">&#x27;_data&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_computed</span> = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> config.<span class="property">computed</span>)&#123;</span><br><span class="line">      <span class="title function_">defineComputed</span>(<span class="variable language_">this</span>, key, config.<span class="property">computed</span>[key])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vDemo = <span class="keyword">new</span> <span class="title class_">VDemo</span>(&#123;</span><br><span class="line">  <span class="title function_">dAtA</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">vAl0</span>: <span class="string">&#x27;hey&#x27;</span>,</span><br><span class="line">      <span class="attr">vAl1</span>: <span class="string">&#x27;world&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="title function_">x</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">vAl0</span> + <span class="string">&#x27; &#x27;</span> + <span class="variable language_">this</span>.<span class="property">vAl1</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">y</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;y: &#x27;</span> + <span class="variable language_">this</span>.<span class="property">x</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vDemo.<span class="property">vAl0</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vDemo.<span class="property">vAl1</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vDemo.<span class="property">x</span>)</span><br><span class="line">vDemo.<span class="property">vAl0</span> = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vDemo.<span class="property">x</span>)</span><br><span class="line">vDemo.<span class="property">vAl1</span> = <span class="string">&#x27; ?&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vDemo.<span class="property">x</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vDemo.<span class="property">x</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vDemo)</span><br></pre></td></tr></table></figure>

<p>这样，改变值，依赖的值就会自动跟着变化，而在依赖的值不变时，不会多次调用函数。</p>
<h1 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h1><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty</a></p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s</title>
    <url>/Blog/21-01-21-k8s/</url>
    <content><![CDATA[<h1 id="Install-minikube"><a href="#Install-minikube" class="headerlink" title="Install minikube"></a>Install minikube</h1><p><a href="https://minikube.sigs.k8s.io/docs/start/">https://minikube.sigs.k8s.io/docs/start/</a></p>
<p>Debian:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube_latest_amd64.deb</span><br><span class="line">sudo dpkg -i minikube_latest_amd64.deb</span><br></pre></td></tr></table></figure>

<p>start your cluster</p>
<p><code>minikube start</code></p>
<h1 id="install-kubectl"><a href="#install-kubectl" class="headerlink" title="install kubectl"></a>install kubectl</h1><p>下载<code>curl -LO &quot;https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl&quot;</code></p>
<p>下载sha256: <code>curl -LO &quot;https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256&quot;</code></p>
<p>校验sha256: <code>echo &quot;$(&lt;kubectl.sha256) kubectl&quot; | sha256sum --check</code></p>
<p><a href="https://kubernetes.io/zh/docs/tasks/tools/install-kubectl/#install-kubectl-on-linux">https://kubernetes.io/zh/docs/tasks/tools/install-kubectl/#install-kubectl-on-linux</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -LO &quot;https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl&quot;</span><br><span class="line">chmod +x ./kubectl</span><br><span class="line">sudo mv ./kubectl /usr/local/bin/kubectl</span><br><span class="line">kubectl version --client</span><br><span class="line">kubectl cluster-info</span><br></pre></td></tr></table></figure>

<h1 id="安装-minikube"><a href="#安装-minikube" class="headerlink" title="安装 minikube"></a>安装 minikube</h1><p><a href="https://minikube.sigs.k8s.io/docs/start/">https://minikube.sigs.k8s.io/docs/start/</a></p>
]]></content>
      <categories>
        <category>backend</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>devops</tag>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>图灵完备？那做个二分vue/react/angular,递归组件Demo</title>
    <url>/Blog/21-02-02-Turing-complete/</url>
    <content><![CDATA[<h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>之前看vue conf有人用vue组件算阶乘说图灵完备，于是突发奇想用组件做做二分？</p>
<span id="more"></span>

<h1 id="Vue-超栈了？Maximum-call-stack-size-exceeded"><a href="#Vue-超栈了？Maximum-call-stack-size-exceeded" class="headerlink" title="Vue( 超栈了？Maximum call stack size exceeded"></a>Vue( 超栈了？Maximum call stack size exceeded</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">demo</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">v-if</span>=<span class="string">&quot;this.l !== this.newl || this.r !== this.newr&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">:l</span>=<span class="string">&quot;newl&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">:r</span>=<span class="string">&quot;newr&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">:fn</span>=<span class="string">&quot;fn&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  /&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>[&#123;&#123; l &#125;&#125;,&#123;&#123; r &#125;&#125;]<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;Demo&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">props</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">l</span>: <span class="title class_">Number</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">r</span>: <span class="title class_">Number</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">fn</span>: <span class="title class_">Function</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">computed</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">mid</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> (<span class="variable language_">this</span>.<span class="property">l</span> + <span class="variable language_">this</span>.<span class="property">r</span>) / <span class="number">2</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">newl</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">fn</span>(<span class="variable language_">this</span>.<span class="property">mid</span>) ? <span class="variable language_">this</span>.<span class="property">l</span> : <span class="variable language_">this</span>.<span class="property">mid</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">newr</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">fn</span>(<span class="variable language_">this</span>.<span class="property">mid</span>) ? <span class="variable language_">this</span>.<span class="property">mid</span> : <span class="variable language_">this</span>.<span class="property">r</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">demo</span> <span class="attr">:l</span>=<span class="string">&quot;0&quot;</span> <span class="attr">:r</span>=<span class="string">&quot;1&quot;</span> <span class="attr">:fn</span>=<span class="string">&quot;(x) =&gt; x &gt; 0&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>在线代码</p>
<iframe src="https://codesandbox.io/embed/inspiring-sound-2f11o?fontsize=14&hidenavigation=1&theme=dark"
     style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
     title="inspiring-sound-2f11o"
     allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
     sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
   ></iframe>

<h1 id="React-能跑"><a href="#React-能跑" class="headerlink" title="React(能跑)"></a>React(能跑)</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  demo = <span class="function">(<span class="params">l, r, fn</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">const</span> newl = <span class="title function_">fn</span>(mid) ? l : mid;</span><br><span class="line">    <span class="keyword">const</span> newr = <span class="title function_">fn</span>(mid) ? mid : r;</span><br><span class="line">    <span class="keyword">if</span> (l !== newl || r !== newr) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;&gt;</span>&#123;this.demo(newl, newr, fn)&#125;<span class="tag">&lt;/&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        [&#123;l&#125;,&#123;r&#125;]</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.demo(this.props.l, this.props.r, this.props.fn)&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">App</span> <span class="attr">l</span>=<span class="string">&#123;0&#125;</span> <span class="attr">r</span>=<span class="string">&#123;1&#125;</span> <span class="attr">fn</span>=<span class="string">&#123;(v)</span> =&gt;</span> v &gt; 0&#125; /&gt;</span><br></pre></td></tr></table></figure>

<p>在线代码</p>
<iframe src="https://codesandbox.io/embed/determined-maxwell-dpuv1?fontsize=14&hidenavigation=1&theme=dark"
     style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
     title="determined-maxwell-dpuv1"
     allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
     sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
   ></iframe>

<h1 id="Angular-我本地调也爆栈，但是在线的可以"><a href="#Angular-我本地调也爆栈，但是在线的可以" class="headerlink" title="Angular(我本地调也爆栈，但是在线的可以"></a>Angular(我本地调也爆栈，但是在线的可以</h1><p>html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">demo</span></span></span><br><span class="line"><span class="tag">  *<span class="attr">ngIf</span>=<span class="string">&quot;l !== newl() || r !== newr();else ShowResult&quot;</span></span></span><br><span class="line"><span class="tag">  [<span class="attr">l</span>]=<span class="string">&quot;newl()&quot;</span></span></span><br><span class="line"><span class="tag">  [<span class="attr">r</span>]=<span class="string">&quot;newr()&quot;</span></span></span><br><span class="line"><span class="tag">  [<span class="attr">fn</span>]=<span class="string">&quot;fn&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">demo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ng-template</span> #<span class="attr">ShowResult</span>&gt;</span></span><br><span class="line">  [&#123;&#123; l &#125;&#125; , &#123;&#123; r &#125;&#125;]</span><br><span class="line"><span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, <span class="title class_">Input</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@angular/core&quot;</span>;</span><br><span class="line"></span><br><span class="line">@<span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&quot;demo&quot;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&quot;./demo.component.html&quot;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&quot;./demo.component.css&quot;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">DemoComponent</span> &#123;</span><br><span class="line">  @<span class="title class_">Input</span>() <span class="attr">l</span>: number;</span><br><span class="line">  @<span class="title class_">Input</span>() <span class="attr">r</span>: number;</span><br><span class="line">  @<span class="title class_">Input</span>() <span class="attr">fn</span>: <span class="function">(<span class="params">v: number</span>) =&gt;</span> boolean;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">newl</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">mid</span>: number = (<span class="variable language_">this</span>.<span class="property">l</span> + <span class="variable language_">this</span>.<span class="property">r</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">fn</span>(mid) ? <span class="variable language_">this</span>.<span class="property">l</span> : mid;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">newr</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">mid</span>: number = (<span class="variable language_">this</span>.<span class="property">l</span> + <span class="variable language_">this</span>.<span class="property">r</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">fn</span>(mid) ? mid : <span class="variable language_">this</span>.<span class="property">r</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">demo</span> [<span class="attr">l</span>]=<span class="string">&quot;0&quot;</span> [<span class="attr">r</span>]=<span class="string">&quot;1&quot;</span> [<span class="attr">fn</span>]=<span class="string">&quot;fn&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">demo</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在线代码</p>
<iframe src="https://codesandbox.io/embed/gifted-mestorf-zeb2m?fontsize=14&hidenavigation=1&theme=dark"
     style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
     title="gifted-mestorf-zeb2m"
     allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
     sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
   ></iframe>

<p>本地一旦把ngIf 去了也能跑，迷。</p>
<p>搜了半天，没学会ng怎么做完全的无wrapper的页面元素。</p>
]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>vue2</tag>
        <tag>Angular2+</tag>
        <tag>react</tag>
        <tag>recursive</tag>
      </tags>
  </entry>
  <entry>
    <title>v-for, ngFor, react(for) 列表真的需要key吗</title>
    <url>/Blog/21-02-18-html-for/</url>
    <content><![CDATA[<h1 id="总述问题"><a href="#总述问题" class="headerlink" title="总述问题"></a>总述问题</h1><p>列表渲染时，在对列表插入和移除之类的操作时，会因为其设计的“替换算法”，导致语义上的对应映射错误</p>
<p>原始列表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[ ] A</span><br><span class="line">[勾选] B</span><br><span class="line">[ ] C</span><br></pre></td></tr></table></figure>

<h2 id="Related-articles"><a href="#Related-articles" class="headerlink" title="Related articles"></a>Related articles</h2><p><a href="https://vuejs.org/v2/guide/list.html#Maintaining-State">https://vuejs.org/v2/guide/list.html#Maintaining-State</a></p>
<p><a href="https://forum.vuejs.org/t/v-for-with-simple-arrays-what-key-to-use/13692">https://forum.vuejs.org/t/v-for-with-simple-arrays-what-key-to-use/13692</a></p>
<p><a href="https://www.jianshu.com/p/4bd5e745ce95">https://www.jianshu.com/p/4bd5e745ce95</a></p>
<p><a href="https://www.zhihu.com/question/61064119">https://www.zhihu.com/question/61064119</a></p>
<span id="more"></span>

<h2 id="实际效果-Vue-x2F-React"><a href="#实际效果-Vue-x2F-React" class="headerlink" title="实际效果(Vue&#x2F;React)"></a>实际效果(Vue&#x2F;React)</h2><p>删除B</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[ ] A</span><br><span class="line">[勾选] C</span><br></pre></td></tr></table></figure>

<p>头部增加D</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[ ] D</span><br><span class="line">[勾选] A</span><br><span class="line">[ ] B</span><br><span class="line">[ ] C</span><br></pre></td></tr></table></figure>

<h2 id="期望效果-Ng"><a href="#期望效果-Ng" class="headerlink" title="期望效果(Ng)"></a>期望效果(Ng)</h2><p>删除B</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[ ] A</span><br><span class="line">[ ] C</span><br></pre></td></tr></table></figure>

<p>头部增加D</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[ ] D</span><br><span class="line">[ ] A</span><br><span class="line">[勾选] B</span><br><span class="line">[ ] C</span><br></pre></td></tr></table></figure>

<h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><p><a href="https://cromarmot.github.io/VueDemo/#/VueForDemo">https://cromarmot.github.io/VueDemo/#/VueForDemo</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>With key<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> /&gt;</span> &#123;&#123; item.name &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>Without key<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in list&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> /&gt;</span> &#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">newId</span>: <span class="number">3</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">list</span>: [</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;Name0&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;Name1&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;Name2&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">      ],</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">add</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">unshift</span>(&#123; <span class="attr">id</span>: ++<span class="variable language_">this</span>.<span class="property">newId</span>, <span class="attr">name</span>: <span class="variable language_">this</span>.<span class="property">name</span> &#125;)</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h1 id="React"><a href="#React" class="headerlink" title="React"></a>React</h1><p>Same with Vue, try it on <a href="https://codesandbox.io/">https://codesandbox.io/</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">CharShop</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  newId = <span class="number">3</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="attr">list</span>: [</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;Name0&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;Name1&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&quot;Name2&quot;</span> &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  add = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">list</span>.<span class="title function_">unshift</span>(&#123; <span class="attr">id</span>: ++<span class="variable language_">this</span>.<span class="property">newId</span>, <span class="attr">name</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">name</span> &#125;);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;&quot;</span>, <span class="attr">list</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">list</span> &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  handleChange = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">name</span>: e.<span class="property">target</span>.<span class="property">value</span> &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">value</span>=<span class="string">&#123;this.state.name&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          /&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.add&#125;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;this.state.list.map((item) =&gt; (</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> /&gt;</span> &#123;item.name&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          ))&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Warning: Each child in a list should have a unique &quot;key&quot; prop.</span><br><span class="line"></span><br><span class="line">Check the render method of `CharShop`. See https://reactjs.org/link/warning-keys for more information.</span><br><span class="line">    at li</span><br><span class="line">    at CharShop</span><br></pre></td></tr></table></figure>

<h1 id="Ng"><a href="#Ng" class="headerlink" title="Ng"></a>Ng</h1><p><a href="https://cromarmot.github.io/NgDemo/#/for-demo">https://cromarmot.github.io/NgDemo/#/for-demo</a></p>
<p>Smarter !?</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> [(<span class="attr">ngModel</span>)]=<span class="string">&quot;name&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">&quot;add()&quot;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Without key<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let item of list&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> /&gt;</span> &#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line">@<span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-for-demo&#x27;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./for-demo.component.html&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ForDemoComponent</span> &#123;</span><br><span class="line">  name = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  newId = <span class="number">3</span>;</span><br><span class="line">  list = [</span><br><span class="line">    &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;Name0&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;Name1&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;Name2&#x27;</span>&#125;,</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="title function_">add</span>(): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">unshift</span>(&#123;</span><br><span class="line">      <span class="attr">id</span>: ++<span class="variable language_">this</span>.<span class="property">newId</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="variable language_">this</span>.<span class="property">name</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>总的来说就是一个 设计上导致的Bug</p>
<p>从代码语义上，<code>Vue</code>和<code>React</code>在此时已经就不符合语义了，<code>for出来的input元素内容</code>和<code>渲染列表的内容</code>是挂钩的。渲染为空(默认状态)都比现在这样的更正确。</p>
<p>从设计上讲，既然都想到了做<code>值的ob</code>和<code>拦截set/get</code>，同样对于数组数据的每一项，可以用包裹的方式跟踪上，因为它们毕竟是会渲染到页面上的，从语义上 既然作为data(vue),state(react),class成员(ng)。</p>
<p>然而vue&#x2F;react都没有</p>
<p>  于是甩锅给用户，让用户提供<code>key</code>（虽然这部分主要是<code>eslint</code>在管理提示，但默认<code>error</code>，或者<code>warn</code>都会让用户难受），（而且在官方文档中,<code>for的基础使用</code>又是支持完全没有，虽然详细文档里有）, <code>ng</code>是<code>trackBy</code>非一定要提供。</p>
<p>然而实际上，如果真的需要跟踪，因该有相应的数据（VM层面），怎么想都不会“复用错误”，比如上面的勾选，如果真的要用应该会有对应的勾选数组VM层进行跟踪</p>
<p>而还有不少是简单列表，非动态列表，key其实不必要的情况更多。</p>
<p>甚至产生不少用<code>index</code>作为<code>key</code>来解决<code>eslint</code>报错的代码，跟没写一样，单纯是为了不让eslint报错而写的代码</p>
<p>或者简单页面有两块列表时，要么塞额外字符串前后缀，要么再拆一个没啥卵用的组件层级来解决<code>key</code>冲突。</p>
<p>而又不建议用了 非数字和字符串的key，有些时候，对象的地址甚至也是在没有<code>id</code>时，更好的值</p>
<p>所以 直接关掉<code>key</code>的需求，每个列表的渲染有VM上的数据跟踪感觉更合理</p>
<p><code>key</code>应该作为真的后台能提供<code>唯一id</code>时再使用的辅助功能</p>
<p>所以从实现上，Vue&#x2F;React 也“不那么需要”修复这个Bug，使用者该做的是VM层有对应的数据跟踪，而不是打开必须key的lint配置，然后提供一个无意义&#x2F;无语义的key</p>
]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>vue2</tag>
        <tag>Angular2+</tag>
        <tag>react</tag>
        <tag>for</tag>
      </tags>
  </entry>
  <entry>
    <title>.d 文件夹</title>
    <url>/Blog/21-03-08-dotd-folder/</url>
    <content><![CDATA[<h1 id="d-文件夹"><a href="#d-文件夹" class="headerlink" title=".d 文件夹"></a>.d 文件夹</h1><p>众所周知， debian系列的软件源列表, 从最早手动的改动<code>/etc/apt/sources.list</code>,到后面在<code>/etc/apt/sources.list.d/</code> 中手动增加，以及有软件可以直接更换不需要手动改</p>
<p>apache2 也从直接<code>conf</code>变成了<code>sites-enabled/</code> 和<code>sites-available/</code></p>
<p>nginx 也从<code>nginx.conf</code> 变成去配置 <code>conf.d/</code> 里的</p>
<p>虽然老的方法也可以用, 但更多的都变成<code>.d</code> 文件夹之类的</p>
<p>然而一堆文章还在改 主配置文件文件</p>
<p>甚至 例如 fail2ban的配置文件 已经明确说了, 还是有人在改主conf</p>
<span id="more"></span>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># HOW TO ACTIVATE JAILS:</span><br><span class="line">#</span><br><span class="line"># YOU SHOULD NOT MODIFY THIS FILE.</span><br><span class="line">#</span><br><span class="line"># It will probably be overwritten or improved in a distribution update.</span><br><span class="line">#</span><br><span class="line"># Provide customizations in a jail.local file or a jail.d/customisation.local.</span><br><span class="line"># For example to change the default bantime for all jails and to enable the</span><br><span class="line"># ssh-iptables jail the following (uncommented) would appear in the .local file.</span><br><span class="line"># See man 5 jail.conf for details.</span><br></pre></td></tr></table></figure>

<p>不禁想知道<code>.d</code> 的意义和由来</p>
<p>然后搜到了</p>
<blockquote>
<p>When distribution packaging became more and more common, it became clear that we needed better ways of forming such configuration files out of multiple fragments, often provided by multiple independent packages. Each package that needs to configure some shared service should be able to manage only its configuration without having to edit a shared configuration file used by other packages.</p>
</blockquote>
<blockquote>
<p>The most common convention adopted was to permit including a directory full of configuration files, where anything dropped into that directory would become active and part of that configuration. As that convention became more widespread, that directory was usually named after the configuration file that it was replacing or augmenting. But since one cannot have a directory and a file with the same name, some method was required to distinguish, so .d was appended to the end of the configuration file name. Hence, a configuration file &#x2F;etc&#x2F;Muttrc was augmented by fragments in &#x2F;etc&#x2F;Muttrc.d, &#x2F;etc&#x2F;bash_completion was augmented with &#x2F;etc&#x2F;bash_completion.d&#x2F;*, and so forth. Sometimes slight variations on that convention are used, such as &#x2F;etc&#x2F;xinetd.d to supplement &#x2F;etc&#x2F;xinetd.conf, or &#x2F;etc&#x2F;apache2&#x2F;conf.d to supplement &#x2F;etc&#x2F;apache2&#x2F;apache2.conf. But it’s the same basic idea.</p>
</blockquote>
<blockquote>
<p>Generally when you see that *.d convention, it means “this is a directory holding a bunch of configuration fragments which will be merged together into configuration for some service.”</p>
</blockquote>
<h1 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h1><p><a href="https://unix.stackexchange.com/questions/4029/what-does-the-d-stand-for-in-directory-names/4047">https://unix.stackexchange.com/questions/4029/what-does-the-d-stand-for-in-directory-names/4047</a></p>
<p><a href="https://lists.debian.org/debian-devel/2010/04/msg00352.html">https://lists.debian.org/debian-devel/2010/04/msg00352.html</a></p>
]]></content>
      <categories>
        <category>software</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>config</tag>
        <tag>server</tag>
        <tag>etc</tag>
      </tags>
  </entry>
  <entry>
    <title>amd/cmd/commonjs/umd/esm/iife/systemjs</title>
    <url>/Blog/21-03-09-js-module/</url>
    <content><![CDATA[<h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>为了模块拆分</p>
<h1 id="AMD-asynchromous-module-definition-异步模块定义"><a href="#AMD-asynchromous-module-definition-异步模块定义" class="headerlink" title="AMD(asynchromous module definition 异步模块定义)"></a>AMD(asynchromous module definition 异步模块定义)</h1><p>RequireJS,前端，异步</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">define</span>(<span class="string">&#x27;module1&#x27;</span>, [<span class="string">&#x27;jquery&#x27;</span>], <span class="function">(<span class="params">$</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//do something...</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">define</span>(模块, [依赖的模块], <span class="function">(<span class="params">$</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//do something...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="CMD-Common-Module-Definition-公共模块定义-有些地方都不再单独提及"><a href="#CMD-Common-Module-Definition-公共模块定义-有些地方都不再单独提及" class="headerlink" title="CMD(Common Module Definition - 公共模块定义) 有些地方都不再单独提及"></a>CMD(Common Module Definition - 公共模块定义) 有些地方都不再单独提及</h1><p>CMD是SeaJS在推广过程中对模块定义的规范化产出，对于模块的依赖，CMD是延迟执行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">define</span>(<span class="function">(<span class="params"><span class="built_in">require</span>, <span class="built_in">exports</span>, <span class="variable language_">module</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">fun1</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">       <span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">&#x27;jquery&#x27;</span>);</span><br><span class="line">       <span class="keyword">return</span> $(<span class="string">&#x27;#test&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">define</span>(<span class="function">(<span class="params"><span class="built_in">require</span>, <span class="built_in">exports</span>, <span class="variable language_">module</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    函数: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">       <span class="keyword">var</span> $ = <span class="built_in">require</span>(依赖的模块);</span><br><span class="line">       <span class="keyword">return</span> $(<span class="string">&#x27;#test&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="CommonJS-cjs"><a href="#CommonJS-cjs" class="headerlink" title="CommonJS(cjs)"></a>CommonJS(cjs)</h1><p>CommonJS服务端,Node.js,同步</p>
<p>使用require &#x2F; module.exports</p>
<p>file1.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">moudle.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>file2.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> f1 = <span class="built_in">require</span>(<span class="string">&#x27;./file1&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> v = f1.<span class="property">a</span> + <span class="number">2</span>;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> =&#123;</span><br><span class="line">  <span class="attr">v</span>: v</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="umd-Universal-Module-Definition-通用模块定义"><a href="#umd-Universal-Module-Definition-通用模块定义" class="headerlink" title="umd(Universal Module Definition - 通用模块定义)"></a>umd(Universal Module Definition - 通用模块定义)</h1><p>amd(浏览器，异步) 和 commonjs(服务器，同步) 合并</p>
<p>使用诸如Rollup&#x2F; Webpack之类的bundler时通常用作备用模块</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function">(<span class="params">root, factory</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">&#x27;function&#x27;</span> &amp;&amp; define.<span class="property">amd</span>) &#123;</span><br><span class="line">    <span class="comment">//AMD</span></span><br><span class="line">    <span class="title function_">define</span>([<span class="string">&#x27;jquery&#x27;</span>], factory);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">exports</span> === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">//CommonJS</span></span><br><span class="line">    <span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">factory</span>(<span class="built_in">require</span>(<span class="string">&#x27;jquery&#x27;</span>));</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//都不是，浏览器全局定义</span></span><br><span class="line">    root.<span class="property">returnExports</span> = <span class="title function_">factory</span>(root.<span class="property">jQuery</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)(<span class="variable language_">this</span>, <span class="function">(<span class="params">$</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//    方法</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">myFunc</span>(<span class="params"></span>)&#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//    暴露公共方法</span></span><br><span class="line">  <span class="keyword">return</span> myFunc;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="ESM-ECMA-Script-Modules"><a href="#ESM-ECMA-Script-Modules" class="headerlink" title="ESM(ECMA Script Modules)"></a>ESM(ECMA Script Modules)</h1><p>es6 模块化规范 (nodejs新版本可直接用,现代化浏览器script标签加<code>type=&quot;module&quot;</code> 可用)</p>
<p>常见的 export &#x2F; import</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 写法一</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> m = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line"><span class="keyword">var</span> m = <span class="number">1</span>; <span class="keyword">export</span> &#123; m &#125;;</span><br><span class="line"><span class="comment">// 写法三</span></span><br><span class="line"><span class="keyword">var</span> n = <span class="number">1</span>; <span class="keyword">export</span> &#123; n <span class="keyword">as</span> m &#125;;</span><br><span class="line"><span class="comment">// 写法四</span></span><br><span class="line"><span class="keyword">var</span> n = <span class="number">1</span>; <span class="keyword">export</span> <span class="keyword">default</span> n;</span><br><span class="line"><span class="comment">// 写法五</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123; <span class="title function_">import</span>(<span class="string">&#x27;./myModule.js&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">&#123; export1, export2 &#125;</span>) =&gt;</span> &#123; <span class="comment">/* ... */</span> &#125;); &#125;</span><br><span class="line"><span class="comment">// 写法六</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([<span class="title function_">import</span>(<span class="string">&#x27;./module1.js&#x27;</span>),</span><br><span class="line"><span class="title function_">import</span>(<span class="string">&#x27;./module2.js&#x27;</span>),</span><br><span class="line"><span class="title function_">import</span>(<span class="string">&#x27;./module3.js&#x27;</span>)]).<span class="title function_">then</span>(<span class="function">(<span class="params">[module1, module2, module3]</span>) =&gt;</span> &#123; <span class="comment">/* ... */</span> &#125;);</span><br></pre></td></tr></table></figure>

<h1 id="iife-立即-调用-函数-表达"><a href="#iife-立即-调用-函数-表达" class="headerlink" title="iife(立即 调用 函数 表达)"></a>iife(立即 调用 函数 表达)</h1><p>A self-executing function suitable for inclusion as a <code>&lt;script&gt;</code> tag. If you want to create a bundle for your application, you probably want to use this.</p>
<p>示例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// maths.js</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// This function gets included</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">cube</span> ( x ) &#123;</span><br><span class="line">    <span class="comment">// rewrite this as `square( x ) * x`</span></span><br><span class="line">    <span class="comment">// and see what happens!</span></span><br><span class="line">    <span class="keyword">return</span> x * x * x;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* TREE-SHAKING */</span></span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="title function_">cube</span>( <span class="number">5</span> ) ); <span class="comment">// 125</span></span><br><span class="line"></span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure>



<h1 id="systemjs"><a href="#systemjs" class="headerlink" title="systemjs"></a>systemjs</h1><p>示例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">System</span>.<span class="title function_">register</span>(<span class="string">&#x27;myBundle&#x27;</span>, [], <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">execute</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// maths.js</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// This function gets included</span></span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">cube</span> ( x ) &#123;</span><br><span class="line">        <span class="comment">// rewrite this as `square( x ) * x`</span></span><br><span class="line">        <span class="comment">// and see what happens!</span></span><br><span class="line">        <span class="keyword">return</span> x * x * x;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* TREE-SHAKING */</span></span><br><span class="line"></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="title function_">cube</span>( <span class="number">5</span> ) ); <span class="comment">// 125</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>universal module loader that supports CJS, AMD, and ESM modules</p>
<p>SystemJS is a hookable, standards-based module loader. It provides a workflow where code written for production workflows of native ES modules in browsers (like Rollup code-splitting builds), can be transpiled to the System.register module format to work in older browsers that don’t support native modules, running almost-native module speeds while supporting top-level await, dynamic import, circular references and live bindings, import.meta.url, module types, import maps, integrity and Content Security Policy with compatibility in older browsers back to IE11.</p>
<p>简单说在老的浏览器依然可以跑native module,且效率不差</p>
<h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><table>
<thead>
<tr>
<th>amd(requirejs)</th>
<th>cmd</th>
<th>commonjs(cjs)</th>
<th>umd</th>
<th>esm</th>
<th>iife</th>
<th>systemjs</th>
</tr>
</thead>
<tbody><tr>
<td>异步模块定义</td>
<td>公共模块定义</td>
<td>服务端模块规范</td>
<td>通用模块定义</td>
<td>ecma脚本模块</td>
<td>立刻自执行模块</td>
<td>系统js??翻译不能?</td>
</tr>
<tr>
<td>异步</td>
<td>异步</td>
<td>同步</td>
<td>服务端同步浏览器异步</td>
<td>es6手动编写,被webpack打包成amd,umd,cjs</td>
<td>同步立即</td>
<td>用于在老浏览器跑其它格式的js module</td>
</tr>
<tr>
<td>浏览器</td>
<td>相关seajs</td>
<td>服务器(nodejs), (通过Browserify用于浏览器)</td>
<td>先判断服务器再浏览器</td>
<td>新版nodejs支持，老版本可以用webpack&#x2F;rollup等打包</td>
<td>浏览器script标签</td>
<td>浏览器</td>
</tr>
</tbody></table>
<h1 id="Tree-Shaking"><a href="#Tree-Shaking" class="headerlink" title="Tree Shaking"></a>Tree Shaking</h1><p>rollup 提出</p>
<p>见rollup 的 repl(Read-Eval-Print-Loop) 的在线 tree-shaking 示例, 上面的几种生成转换也是可以在在线的repl上看的</p>
<ol>
<li>只能作为模块顶层的语句出现，不能出现在 function 里面或是 if 里面。（ECMA-262 15.2)</li>
<li>import 的模块名只能是字符串常量。(ECMA-262 15.2.2)</li>
<li>不管 import 的语句出现的位置在哪里，在模块初始化的时候所有的 import 都必须已经导入完成。换句话说，ES6 imports are hoisted。(ECMA-262 15.2.1.16.4 - 8.a)</li>
<li>import binding 是 immutable 的，类似 const。比如说你不能 import { a } from ‘.&#x2F;a’ 然后给 a 赋值个其他什么东西。(ECMA-262 15.2.1.16.4 - 12.c.3)</li>
</ol>
<p>切记副作用</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>上面提到的几种 仅仅是写法示例，完整的书写规则见各自的官方文档，或者下面的参考链接</p>
<p>现代书写来说，基本就是书写esm了，剩下的事情就由 rollup&#x2F;webpack之类的工具去完成了</p>
<h1 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h1><p><a href="https://requirejs.org/docs/api.html#define">requirejs::define a module</a></p>
<p><a href="http://wiki.commonjs.org/wiki/Modules/Async/B">commonjs</a></p>
<p><a href="https://github.com/login?return_to=/umdjs/umd">umd</a></p>
<p><a href="https://developer.mozilla.org/en-US/docs/Glossary/IIFE">iife</a></p>
<p><a href="https://github.com/systemjs/systemjs#systemjs">systemjs</a></p>
<p><a href="https://rollupjs.org/repl">rollup repl</a></p>
<p><a href="https://www.zhihu.com/question/41922432/answer/93346223">知乎 尤雨溪 tree-shaking</a></p>
]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>js module</tag>
      </tags>
  </entry>
  <entry>
    <title>vue2源码阅读(由xmind笔记生成)</title>
    <url>/Blog/21-03-11-vue2source/</url>
    <content><![CDATA[<h1 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h1><h2 id="commit-hash"><a href="#commit-hash" class="headerlink" title="commit hash:"></a>commit hash:</h2><p>4f81b5db9ab553ca0abe0706ac55ceb861344330</p>
<h2 id="src"><a href="#src" class="headerlink" title="src"></a>src</h2><ul>
<li><p>server</p>
</li>
<li><p>platforms</p>
</li>
<li><p>core 6600 行</p>
</li>
<li><p>shared</p>
</li>
<li><p>compiler</p>
</li>
<li><p>sfc</p>
<ul>
<li>134 .&#x2F;sfc&#x2F;parser.js</li>
</ul>
</li>
</ul>
<h2 id="dist"><a href="#dist" class="headerlink" title="dist"></a>dist</h2><ul>
<li>生成的文件</li>
</ul>
<h2 id="typings"><a href="#typings" class="headerlink" title="typings"></a>typings</h2><ul>
<li>TypeScript的定义文件</li>
</ul>
<h2 id="本地调试代码环境搭建"><a href="#本地调试代码环境搭建" class="headerlink" title="本地调试代码环境搭建"></a>本地调试代码环境搭建</h2><ul>
<li><pre><code>yarn
yarn dev -m
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">	- 产生的文件之后可以浏览器或node中调用输出</span><br><span class="line">	- -m 是 rollup 启用sourcemap</span><br><span class="line"></span><br><span class="line">- https://github.com/numbbbbb/read-vue-source-code/issues/9</span><br><span class="line"></span><br><span class="line">## &lt;!--more--&gt;</span><br><span class="line"></span><br><span class="line"># 阅读</span><br><span class="line"></span><br><span class="line">## src/platforms/weex</span><br><span class="line"></span><br><span class="line">- 阿里之前的，已经弃用了？上次更改2020年1月</span><br><span class="line"></span><br><span class="line">## entry</span><br><span class="line"></span><br><span class="line">- package.json: scripts::dev</span><br><span class="line"></span><br><span class="line">	- `rollup -w -c scripts/config.js --environment TARGET:web-full-dev`</span><br><span class="line"></span><br><span class="line">		- grep一下，在 scripts/config.js 中找到 web-full-dev 配置</span><br><span class="line"></span><br><span class="line">- 配置指向 `resolve(&#x27;web/entry-runtime-with-compiler.js&#x27;)`</span><br><span class="line"></span><br><span class="line">	- resolve基于alias，来自文件scripts/alias.js</span><br><span class="line"></span><br><span class="line">		- `web =   resolve(&#x27;src/platforms/web&#x27;)` 相对路径解析</span><br><span class="line"></span><br><span class="line">			- vue 对应 `src/platforms/web/entry-runtime-with-compiler.js`</span><br><span class="line"></span><br><span class="line">				- `Vue = ./runtime/index`</span><br><span class="line">				- 把原来的Vue.prototype.$mount 做了一层校验包裹</span><br><span class="line"></span><br><span class="line">					- 和把template通过 compileToFunctions 变成render和staticRenderFns </span><br><span class="line">					- 调用 idToTemplate ， getOuterHTML</span><br><span class="line"></span><br><span class="line">				- `Vue.compile = ./compiler/index`</span><br><span class="line"></span><br><span class="line">					- 子主题 1</span><br><span class="line"></span><br><span class="line">				- IE兼容</span><br><span class="line"></span><br><span class="line">					- `import &#123; shouldDecodeNewlines, shouldDecodeNewlinesForHref &#125; from &#x27;./util/compat&#x27;`</span><br><span class="line"></span><br><span class="line">## src/platforms/web/runtime/index.js</span><br><span class="line"></span><br><span class="line">- 通过core/index.js 引入Vue</span><br><span class="line">- 平台特有的utils</span><br><span class="line"></span><br><span class="line">	- vue.config.mustuseprop = mustuseprop</span><br><span class="line">	- vue.config.isreservedtag = isreservedtag</span><br><span class="line">	- vue.config.isreservedattr = isreservedattr</span><br><span class="line">	- vue.config.gettagnamespace = gettagnamespace</span><br><span class="line">	- vue.config.isunknownelement = isunknownelement</span><br><span class="line"></span><br><span class="line">- `extend(Vue.options.directives, platformDirectives)`</span><br><span class="line">- `extend(Vue.options.components, platformComponents)`</span><br><span class="line">- `Vue.prototype.__patch__ = inBrowser ? patch : noop`</span><br><span class="line"></span><br><span class="line">	- 更新操作DOM（稍后提到）</span><br><span class="line"></span><br><span class="line">- `Vue.prototype.$mount` 定义</span><br><span class="line">- 浏览器内，开发工具devtools相关的 console提示</span><br><span class="line"></span><br><span class="line">## core/index.js</span><br><span class="line"></span><br><span class="line">- 通过core/instance/index引入Vue</span><br><span class="line">- initGlobalAPI(Vue)</span><br><span class="line">- $isServer （原型链）</span><br><span class="line">- $ssrContext（原型链）</span><br><span class="line">- FunctionalRenderContext</span><br><span class="line">- .version</span><br><span class="line"></span><br><span class="line">## core/instance/index</span><br><span class="line"></span><br><span class="line">- 提供Vue函数，并调用多个 Mixin初始化</span><br><span class="line"></span><br><span class="line">  函数本身 判断是否是new 产生的，并调用`this._init(options)`</span><br><span class="line"></span><br><span class="line">	- 这一部分都是实例化Vue对象之前，我们可以略过的看看方法的内部实现，因为这个阶段，只是把Vue上去定义 字段和函数，和Vue.prototype上去定义字段和函数，其函数内容都还尚未执行，在调用new 之后才会进入到真正实例化</span><br><span class="line"></span><br><span class="line">- 这也是 在创建Vue的Class的最里层了</span><br><span class="line">- `core/instance/init.js::initMixin(Vue)`</span><br><span class="line"></span><br><span class="line">	- 提供用户 new Vue(&#123;.....&#125;)时，会去调用的_init()函数</span><br><span class="line"></span><br><span class="line">- `core/instance/state.js::stateMixin(Vue)`</span><br><span class="line"></span><br><span class="line">	- Object.defineProperty(Vue.prototype, &#x27;$data&#x27;,&#123;get : function () &#123; return this._data &#125;&#125;</span><br><span class="line">	- Object.defineProperty(Vue.prototype, &#x27;$props&#x27;,&#123;get : function () &#123; return this._props &#125;&#125;</span><br><span class="line">	- 原型链定义$set (target: Array&lt;any&gt; | Object, key: any, val: any): any &#123;)</span><br><span class="line">	- 原型链定义$delete(target: Array&lt;any&gt; | Object, key: any) &#123;</span><br><span class="line">	- 原型链定义$watch(expOrFn: string | Function,    cb: any,    options?: Object  ): Function &#123;</span><br><span class="line"></span><br><span class="line">- `core/instance/events.js::eventsMixin(Vue)`</span><br><span class="line"></span><br><span class="line">	- 这里数组 用的Array.isArray 判断的，而这个方法我查了一下， &lt; IE9 不支持，还是说有相关的polyfill</span><br><span class="line">	- 原型链定义$on</span><br><span class="line"></span><br><span class="line">		- 这为啥Array 还要递归，string直接，这还可以 $on([[],[],[[[]]]]) 这样来写？</span><br><span class="line">		- 这里也可以看到为了把 _hasHookEvent 移动到 $on 判断，修改了代码，但是测试没有保护，而对应的$off 没有加任何操作, 所以这里从逻辑意义上实现已经不对了，做成enable的语义，不改变实现或许都更好</span><br><span class="line"></span><br><span class="line">			- 对应的我们能找到提交记录 7ffa77f3df1d9ec5253657daa4a59bf7af7f503e</span><br><span class="line">			- 果然根据提交记录，就是从原本始终都触发的变成了 增加字段来判断，而再删除时不对称，真的是十分业务的实现（假设的前提是 大量的代码不使用hook，否则这些实现增加字段降低效率）</span><br><span class="line">			- 从callHook 可以看到 生命周期的事件会多一个 hook:&lt;xxxx&gt; 的事件出来</span><br><span class="line"></span><br><span class="line">	- 原型链定义$once</span><br><span class="line"></span><br><span class="line">		- once，包裹了一层，在off里面 去fn.fn 去判断的相等</span><br><span class="line"></span><br><span class="line">			- 也就是正常的函数 和 once 调用还有区别，一个是直接括号，一个是点fn括号</span><br><span class="line"></span><br><span class="line">	- 原型链定义$off</span><br><span class="line"></span><br><span class="line">		- if(!fn) 关掉所有 对应event...</span><br><span class="line"></span><br><span class="line">			- 这里有 undifined/null/空数组/有值的数组，都有可能</span><br><span class="line">			- 这里插入同一个函数可能插入多次，删除一次一个，从 尾部 找到 函数指针相等的删除</span><br><span class="line"></span><br><span class="line">	- 原型链定义$emit</span><br><span class="line"></span><br><span class="line">		- invokeWithErrorHandling</span><br><span class="line"></span><br><span class="line">			- 调用函数，有错报错</span><br><span class="line"></span><br><span class="line">				- 增加 _handled 来阻止 nested calls</span><br><span class="line"></span><br><span class="line">- `core/instance/lifecycle.js::lifecycleMixin(Vue)`</span><br><span class="line"></span><br><span class="line">	- 原型链定义_update 方法</span><br><span class="line"></span><br><span class="line">		- 考虑说，vm._vnode 有无 而不是增加state去做状态判断,有点magic number的意味，也不完全是</span><br><span class="line">		- `if (vm.$vnode &amp;&amp; vm.$parent &amp;&amp; vm.$vnode === vm.$parent._vnode) &#123;` 父组件是高阶组件的判断？</span><br><span class="line"></span><br><span class="line">			- 只替换高阶的 $el, 没替换 `__vue__`, _vnode 等？</span><br><span class="line"></span><br><span class="line">	- 原型链定义$forceUpdate 方法</span><br><span class="line"></span><br><span class="line">		- vm._watcher.update()</span><br><span class="line"></span><br><span class="line">	- 原型链定义$destroy 方法</span><br><span class="line"></span><br><span class="line">		- _isBeingDestroyed 状态</span><br><span class="line">		- hook</span><br><span class="line"></span><br><span class="line">			- 和我们外部看到的生命周期相关了</span><br><span class="line"></span><br><span class="line">		- 拆卸 vm._watcher</span><br><span class="line"></span><br><span class="line">			- .... 怎么又是 watcher又是watchers 数组</span><br><span class="line"></span><br><span class="line">		- 引用计数 vmCount--</span><br><span class="line">		- mountComponent 方法</span><br><span class="line"></span><br><span class="line">			- beforeMount的周期</span><br><span class="line"></span><br><span class="line">- `core/instance/render.js::renderMixin(Vue)`</span><br><span class="line"></span><br><span class="line">	- 一堆被压缩成 `_字母`的方法</span><br><span class="line">	- 方法 $nextTick</span><br><span class="line">	- _render 方法</span><br><span class="line"></span><br><span class="line">## Vue._init()</span><br><span class="line"></span><br><span class="line">- 前面的代码 都是在 new Vue 之前 import阶段发生的事情,往后就是，Vue整个类被构建好了，还是真正产生实例的过程</span><br><span class="line">- 这个函数是 initMixin 在原型链中定义的</span><br><span class="line">- 这部分的时候，先忽略 defineReactive，ast等，Watcher 相对复杂的实现，主要看一个流程 和 一些相对不那么复杂的调用实现。</span><br><span class="line">- 用户代码举例</span><br><span class="line"></span><br><span class="line">  ```js</span><br><span class="line">  new Vue(&#123;</span><br><span class="line">  	el:&#x27;#app&#x27;,</span><br><span class="line">  	data()&#123;</span><br><span class="line">  		return &#123;</span><br><span class="line">  			message: &#x27;Hello Vue!&#x27;</span><br><span class="line">  		&#125;</span><br><span class="line">  	&#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
<li><p><code>src/core/instance/init.js:: _init(options)</code></p>
<ul>
<li><p>_uid &#x3D; uid++ (“全局” uid)</p>
</li>
<li><p>_isVue &#x3D; true</p>
</li>
<li><p>$options</p>
<ul>
<li><p>根据_isComponent 静态创建</p>
<ul>
<li><p>function initInternalComponent</p>
<ul>
<li>因为动态options merging很慢，内部组件特殊处理</li>
</ul>
</li>
</ul>
</li>
<li><p>否则 mergeOptions 动态创建</p>
<ul>
<li><p>function resolveConstructorOptions</p>
<ul>
<li><p>动态 递归向根节点的 解析options</p>
</li>
<li><p>resolveModifiedOptions</p>
<ul>
<li>支持热更新 修改 options</li>
<li><a href="https://github.com/vuejs/vue/issues/4976">https://github.com/vuejs/vue/issues/4976</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>定义<code>_renderProxy</code></p>
<ul>
<li><p>是否生产用的不同的渲染函数</p>
<ul>
<li>重复的 env 判断?</li>
</ul>
</li>
</ul>
</li>
<li><p><code>_self</code>指向自己</p>
</li>
</ul>
</li>
<li><p>initLifecycle</p>
<ul>
<li>定义一些实例上的一些字段</li>
<li><code>$parent</code> (递归向上找，和$parent通过 上面的$children 建立联系)</li>
<li><code>$root = parent ? parent.$root : vm</code></li>
<li><code>$children = []</code></li>
<li><code>$refs = &#123;&#125;</code></li>
<li>_watcher &#x3D; null</li>
<li>_inactive &#x3D; null</li>
<li>_directInactive &#x3D; false</li>
<li>_isMounted &#x3D; false</li>
<li>_isDestroyed &#x3D; false</li>
<li>_isBeingDestroyed &#x3D; false</li>
</ul>
</li>
<li><p>initEvents</p>
<ul>
<li><p>vm._events &#x3D; Object.create(null)</p>
</li>
<li><p>vm._hasHookEvent &#x3D; false</p>
</li>
<li><p>基于<code>vm.$options._parentListeners</code>增加listeners</p>
<ul>
<li><code>__WEEX__</code> 又塞进来了？</li>
<li>这里又不用null用undefined了，而且也不是闭包一个 增删来控制vm?</li>
</ul>
</li>
</ul>
</li>
<li><p>initRender</p>
<ul>
<li><p>_vnode &#x3D; null</p>
</li>
<li><p>_staticTrees &#x3D; null</p>
</li>
<li><p>$slots &#x3D; resolveSlots(options._renderChildren, renderContext)</p>
</li>
<li><p>$scopedSlots &#x3D; emptyObject</p>
</li>
<li><p>_c &#x3D; (a, b, c, d) &#x3D;&gt; createElement(vm, a, b, c, d, false)</p>
<ul>
<li>这里可以看到在js实现函数重载然后封装的体验 XD</li>
</ul>
</li>
<li><p>$createElement &#x3D; (a, b, c, d) &#x3D;&gt; createElement(vm, a, b, c, d, true)</p>
</li>
<li><p>$attrs</p>
<ul>
<li>通过defineReactive创建</li>
<li><pre><code>defineReactive(vm, &#39;$attrs&#39;, parentData &amp;&amp; parentData.attrs || emptyObject, null, true)
</code></pre>
</li>
</ul>
</li>
<li><p>$listeners</p>
<ul>
<li><p>通过defineReactive创建</p>
<ul>
<li>这一块用了，emptyObject, 一个不可更改的空对象，我真的不看变量名，看不出它不可更改， 但刚刚才看的另一段代码没有用…不一致啊</li>
</ul>
</li>
<li><pre><code>defineReactive(vm, &#39;$listeners&#39;, options._parentListeners || emptyObject, null, true)
</code></pre>
</li>
</ul>
</li>
<li><p>主要作用是，提供vm上实例的函数， scoped信息 和 响应式属性 之类</p>
</li>
</ul>
</li>
<li><p>callHook(vm, ‘beforceCreate’) 生命周期</p>
</li>
<li><p>initInjections</p>
<ul>
<li><p>inject.js</p>
<ul>
<li><p>这个文件在上面的5个mixin中没有出现过，但是初始化会调用</p>
</li>
<li><p>通过 toggleObserving 包裹，中间的部分不触发响应式相关的</p>
</li>
<li><p>注入也是通过 defineReactive 挨个key注入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">﻿<span class="comment">// 核心实现</span></span><br><span class="line"><span class="keyword">const</span> result = ﻿<span class="title function_">resolveInject</span>(vm.<span class="property">$options</span>.<span class="property">inject</span>, vm)</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(result).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">defineReactive</span>(vm, key, result[key])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>来源 就是当前级别递归向上找<code>_provided</code></p>
</li>
</ul>
</li>
<li><p>resolve injections before data&#x2F;props</p>
</li>
<li><p>对于使用者，当前级别或父&#x2F;祖先级别提供provide的东西，任意层级子级别，需要用，直接写inject，就能获得到对应的数据，而中间层级完全不需要描述</p>
</li>
</ul>
</li>
<li><p>initState</p>
<ul>
<li><p>_watchers &#x3D; []</p>
</li>
<li><p>proxy 函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">proxy</span> (<span class="attr">target</span>: <span class="title class_">Object</span>, <span class="attr">sourceKey</span>: string, <span class="attr">key</span>: string) &#123;</span><br><span class="line">  sharedPropertyDefinition.<span class="property">get</span> = <span class="keyword">function</span> <span class="title function_">proxyGetter</span> () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>[sourceKey][key]</span><br><span class="line">  &#125;</span><br><span class="line">  sharedPropertyDefinition.<span class="property">set</span> = <span class="keyword">function</span> <span class="title function_">proxySetter</span> (val) &#123;</span><br><span class="line">    <span class="variable language_">this</span>[sourceKey][key] = val</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(target, key, sharedPropertyDefinition)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>也可以看到这里的用了 defineProperty</li>
</ul>
</li>
<li><p>porps 核心实现</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> props = vm.<span class="property">_props</span> = &#123;&#125;</span><br><span class="line">vm.<span class="property">_propsKeys</span> = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> vm.<span class="property">$options</span>.<span class="property">props</span>﻿) &#123;</span><br><span class="line">  <span class="title function_">defineReactive</span>(props, key, value)</span><br><span class="line">  <span class="keyword">if</span> (!(key <span class="keyword">in</span> vm)) &#123;</span><br><span class="line">    <span class="title function_">proxy</span>(vm, <span class="string">`_props`</span>, key)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>非 root，都是关闭响应式 进行操作的</li>
</ul>
</li>
<li><p>methods 核心实现</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> methods = vm.<span class="property">$options</span>.<span class="property">methods</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> methods) &#123;</span><br><span class="line">  vm[key] = <span class="title function_">bind</span>(methods[key], vm)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>这一块有做 保留词判断，对于<code>$</code> 和 <code>_</code>开头的视作保留词 isReserved</p>
</li>
<li><p>initMethods 中可以看到 和_props中做冲突检查，但是这里是直接提出了_props? 为啥不是专门建立冲突表，毕竟data，computed里都可能会有冲突检查</p>
</li>
<li><p>这里也可以看到，我面试喜欢问人 为啥function中的this是怎么来的，或者让你实现会怎么实现，这里bind</p>
<ul>
<li>稍微多dig一下代码，发现了还有nativebind和pollyfillBind 为了解决不支持默认的bind的情况</li>
</ul>
</li>
</ul>
</li>
<li><p>_data</p>
<ul>
<li><p>有data时，核心实现</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">﻿<span class="keyword">const</span> data = vm.<span class="property">_data</span> = <span class="keyword">typeof</span> data === <span class="string">&#x27;function&#x27;</span></span><br><span class="line">  ? <span class="title function_">getData</span>(data, vm)</span><br><span class="line">  : data || &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(data)</span><br><span class="line"><span class="keyword">let</span> i = keys.<span class="property">length</span></span><br><span class="line"><span class="keyword">while</span> (i--) &#123;</span><br><span class="line">  <span class="keyword">const</span> key = keys[i]</span><br><span class="line">    <span class="title function_">proxy</span>(vm, <span class="string">`_data`</span>, key)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// observe data</span></span><br><span class="line"><span class="title function_">observe</span>(data, <span class="literal">true</span> <span class="comment">/* asRootData */</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>…为啥相邻3个函数，传参设计还有的自己取，有的提取出来，再传入</li>
<li>刚刚说了，冲突校验越写越多</li>
<li>哦 原来这里data调用时会传递实例本身，可以this.去拿，也可以直接 通过传入的vm获得this</li>
<li>感觉，这里如果是裸的data，完全可以加一个 深拷贝来做，但是为啥 就只是报个错？历史原因？</li>
<li>也有isReserved判断是否是 <code>$</code>,<code>_</code>开头</li>
<li>最后observe(data, true)</li>
</ul>
</li>
<li><p>无data时，observe(vm._data&#x3D;{}, true)</p>
</li>
</ul>
</li>
<li><p>initComputed</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> watchers = vm.<span class="property">_computedWatchers</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> <span class="variable language_">this</span>.<span class="property">$options</span>.<span class="property">computed</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> userDef = computed[key]</span><br><span class="line">  <span class="keyword">const</span> getter = <span class="keyword">typeof</span> userDef === <span class="string">&#x27;function&#x27;</span> ? userDef : userDef.<span class="property">get</span></span><br><span class="line">    watchers[key] = <span class="keyword">new</span> <span class="title class_">Watcher</span>(</span><br><span class="line">      vm,</span><br><span class="line">      getter || noop,</span><br><span class="line">      noop,</span><br><span class="line">      computedWatcherOptions</span><br><span class="line">    )</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(target, key, sharedPropertyDefinition) <span class="comment">// 其中 sharedPropertyDefinition是基于用户提供的函数创建的 带有cache或直接的 调用函数﻿</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>this._computedWatchers = Object.create(null)</code> 真实存储在 这个field的键值对里</li>
<li>对于 服务端渲染ssr的情况，computed就是作为getter计算</li>
<li>这里可以看到，漏掉了和methods冲突校验？只有$data 和 props</li>
<li><pre><code>sharedPropertyDefinition.get = shouldCache       ? createComputedGetter(key) : createGetterInvoker(userDef)
</code></pre>
<ul>
<li>这两块实现细节与 响应式有关，在后面响应式讲解的地方再细说。总之从现在的视角就是通过把用户传入的包装后的函数</li>
</ul>
</li>
</ul>
</li>
<li><p>initWatch</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> <span class="variable language_">this</span>.<span class="property">$options</span>.<span class="property">watch</span>) &#123;</span><br><span class="line">  vm.$watch(key,watch[key])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>$watch，闭包内watcher，留一个unwatchFn支持取消</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> watcher = <span class="keyword">new</span> <span class="title class_">Watcher</span>(vm, key, watch[key], &#123;&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>这里代码做的是单watch的情况会走的代码，watch还可以数组函数, 可以immediate，这些官方文档上统统都没有</li>
<li>createWatcher又见函数重载</li>
</ul>
</li>
</ul>
</li>
<li><p>initProvide</p>
<ul>
<li>函数则vm调用，值则直接取，放在 vm._provided</li>
</ul>
</li>
<li><p>callHook(vm, ‘created’) 生命周期</p>
</li>
<li><p>上面就完成了js部分的创建，vm什么都好了，接下来就是渲染出html</p>
</li>
<li><p>vm.$mount(vm.$options.el)</p>
<ul>
<li><p>来自上面在设置Class时多次包裹的$mount</p>
<ul>
<li>web&#x2F;entry-runtime-with-compiler.js</li>
<li>web&#x2F;runtime&#x2F;index.js</li>
<li>core&#x2F;instance&#x2F;lifecycle.js:: mountComponent</li>
</ul>
</li>
</ul>
</li>
<li><p>之后的内容就是用户操作和 对应函数&#x2F;事件的触发了</p>
</li>
</ul>
<h2 id="响应式"><a href="#响应式" class="headerlink" title="响应式"></a>响应式</h2><ul>
<li><p>defineReactive(内部调用的 Observer), Watcher, Dep, </p>
<ul>
<li>先看分别的实现，再看实际使用时候的调用</li>
</ul>
</li>
<li><p>Dep</p>
<ul>
<li><p>core&#x2F;observer&#x2F;dep.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Dep</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="attr">target</span>: ?<span class="title class_">Watcher</span>;</span><br><span class="line">  <span class="attr">id</span>: number;</span><br><span class="line">  <span class="attr">subs</span>: <span class="title class_">Array</span>&lt;<span class="title class_">Watcher</span>&gt;;</span><br><span class="line">  <span class="title function_">constructor</span> () &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">id</span> = uid++</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">subs</span> = []</span><br><span class="line">  &#125;</span><br><span class="line">  addSub (<span class="attr">sub</span>: <span class="title class_">Watcher</span>) </span><br><span class="line">  removeSub (<span class="attr">sub</span>: <span class="title class_">Watcher</span>) </span><br><span class="line">  depend ()</span><br><span class="line">  notify () </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>虽然我们直接看到的是 defineReactive, 但是我们从Dep开始看</p>
</li>
<li><p>这也会有一个自己的单增 uid</p>
</li>
<li><p>Dep增删自己subs里的Watcher ： addSub&#x2F;removeSub</p>
</li>
<li><p>在当前Dep.target(是个Watcher)中增加自己 Dep.target.addDep(this)</p>
<ul>
<li><p>这里Dep.target又是，存在值&#x2F;null&#x2F;undefined 都有可能</p>
</li>
<li><p>这是个静态成员</p>
</li>
<li><p>通过 pushTarget&#x2F;popTarget 来维护的，是个栈，啊 搞这么多变量干嘛，直接取栈顶不就好了。从代码看起来在其它地方有前置判断，目测还是所谓性能相关？<!--我就不懂了，perf都是靠这样破坏层级的搞，那还得了，真把自己当后端了--></p>
<ul>
<li>看起来是 #7824 对应提交id： 6b1d431a8</li>
</ul>
</li>
</ul>
</li>
<li><p>触发所有subs数组中watcher的update方法，notify()</p>
</li>
</ul>
</li>
<li><p>Watcher</p>
<ul>
<li><p>core&#x2F;observer&#x2F;watcher.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Watcher</span> &#123;</span><br><span class="line"> <span class="attr">vm</span>: <span class="title class_">Component</span>;</span><br><span class="line"> <span class="attr">expression</span>: string;</span><br><span class="line"> <span class="attr">cb</span>: <span class="title class_">Function</span>;</span><br><span class="line"> <span class="attr">id</span>: number;</span><br><span class="line"> <span class="attr">deep</span>: boolean;</span><br><span class="line"> <span class="attr">user</span>: boolean;</span><br><span class="line"> <span class="attr">lazy</span>: boolean;</span><br><span class="line"> <span class="attr">sync</span>: boolean;</span><br><span class="line"> <span class="attr">dirty</span>: boolean;</span><br><span class="line"> <span class="attr">active</span>: boolean;</span><br><span class="line"> <span class="attr">deps</span>: <span class="title class_">Array</span>&lt;<span class="title class_">Dep</span>&gt;;</span><br><span class="line"> <span class="attr">newDeps</span>: <span class="title class_">Array</span>&lt;<span class="title class_">Dep</span>&gt;;</span><br><span class="line"> <span class="attr">depIds</span>: <span class="title class_">SimpleSet</span>;</span><br><span class="line"> <span class="attr">newDepIds</span>: <span class="title class_">SimpleSet</span>;</span><br><span class="line"> <span class="attr">before</span>: ?<span class="title class_">Function</span>;</span><br><span class="line"> <span class="attr">getter</span>: <span class="title class_">Function</span>;</span><br><span class="line"> <span class="attr">value</span>: any;</span><br><span class="line"></span><br><span class="line"> <span class="title function_">constructor</span> (</span><br><span class="line">  <span class="attr">vm</span>: <span class="title class_">Component</span>,</span><br><span class="line">  <span class="attr">expOrFn</span>: string | <span class="title class_">Function</span>,</span><br><span class="line">  <span class="attr">cb</span>: <span class="title class_">Function</span>,</span><br><span class="line">  options?: ?<span class="title class_">Object</span>,</span><br><span class="line">  isRenderWatcher?: boolean</span><br><span class="line"> ) &#123;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 计算getter并重新收集dep</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> get () &#123;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 向当前watcher增加dep</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> addDep (<span class="attr">dep</span>: <span class="title class_">Dep</span>) &#123;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 清理dep</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> cleanupDeps () &#123;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 当dep改变时会被调用</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> update () &#123;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 调度器会调用</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> run () &#123;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 只有lazy watcher 会调用，计算值</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> evaluate () &#123;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 和所有收集的dep建立联系</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> depend () &#123;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 移除自身订阅的所有dep列表</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> teardown () &#123;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>vm._watcher &#x3D; this</p>
</li>
<li><p>vm.watchers.push(this)</p>
</li>
<li><p>等等一堆初始化</p>
</li>
<li><p>根据 expOrFn 产生this.getter</p>
</li>
<li><p>最后    this.value &#x3D; this.lazy ? undefined : this.get()</p>
</li>
<li><p>get(), 会把当前watcher通过dep里提供的 pushTarget 压栈，再调用 getter，结束后popTarget</p>
<ul>
<li>其中如果设置deep，会遍历对象元素，触发每个层级的计算其中用set避免递归无限循环</li>
<li>注意到上面的Dep类，在get触发计算函数过程中会调用这里的addDep，在addDep的实现是通过 newDepIds&#x2F;newDep 去记录，到最后结束的时候，通过cleanupDeps 函数完成 从new开头的移动到depIds&#x2F;deps 中</li>
</ul>
</li>
<li><p>我们来看看Dep和Watcher之间的触发关系（不看移除）</p>
<ul>
<li><p>Dep::addSub 在dep中记录watcher</p>
</li>
<li><p>Dep::depend 当前watchers栈顶的addDep方法传入dep</p>
</li>
<li><p>Dep::notify 当前dep中的watchers 依次触发 update()</p>
</li>
<li><p>Watcher::get 触发自己getter函数，收集依赖（通过依赖自己的addDep）,最后 cleanupDeps</p>
</li>
<li><p>Watcher::update 调用自己的run 或 调用queueWatcher 或 标记dirty</p>
<ul>
<li><p>lazy</p>
<ul>
<li>dirty标识</li>
</ul>
</li>
<li><p>sync</p>
<ul>
<li><p>run</p>
<ul>
<li>这里会调用get，如果有设置callback，例如用户设置的watch函数，则会 callback.call(实例，新值，旧值)</li>
<li>这里我们从代码可以看到，deep不光会影响 深的对象，同时如果是基础类型其实这里即使和原来值相同也会触发callback</li>
</ul>
</li>
</ul>
</li>
<li><p>queueWatcher（传入当前Watcher）</p>
<ul>
<li><p>如果队列中没它，则加入到watcher队列中</p>
</li>
<li><p>这里可以看到nextTick 的使用，从promise&#x2F;MutationObserver&#x2F;setImmediate&#x2F;setTimeout0 逐级下降，所以不要靠 nextTick猜执行顺序来控制</p>
</li>
<li><p>通过 一个 scheduler 享有的has 集合，来记录 是否有当前的 watcher.id</p>
<ul>
<li>哎哟 好难受 又是 undefined&#x2F;null&#x2F;true 这里就是双等于，而不是三等于</li>
</ul>
</li>
<li><p>是否flushing决定是 排到队列最后，还是根据id从尾部插入来排序</p>
<ul>
<li>flushing默认false，在flushSchedulerQueue时置为true</li>
</ul>
</li>
<li><p>nextTick 再调用 flushSchedulerQueue</p>
<ul>
<li><p>本身队列会根据id来sort</p>
</li>
<li><p>这里我们可以看到 watcher.before会被调用</p>
<ul>
<li>例如 mountComponent 中 new Watcher(vm,updateComponent) 提供的before函数 提供了 beforeUpdate 的生命周期</li>
</ul>
</li>
<li><p>waiting 保证有且只有一个 queueWatcher 调用了或者 已经准备被调用了</p>
</li>
<li><p>flushing 意味着 queue是否在执行中</p>
</li>
</ul>
</li>
<li><p>本质上，实现了 队列加入和执行，同时支持执行时加入。保证单一执行队列</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>Watcher::evaluate 会被 用在设置了lazy的computed的getter里， 调用时会触发上面的get函数</p>
<ul>
<li>这为什么要在外部访问一个对象的属性，再掉对象的方法而不做任何其它事呢，那不直接把属性内置到对象内更好吗</li>
</ul>
</li>
<li><p>Watcher::depend  触发记录的所有dep的 depend方法，也是被computed的getter调用</p>
<ul>
<li><p>这里可以看到是，watcher是更主动的类，而Dep是被动的类，也就是watcher通过计算收集自己的deps，然后对deps里面再和自己建立关系</p>
<ul>
<li>computedGetter-&gt;watcher::depend-&gt;deps::depend-&gt;watcher::adddep, 区别是前后的watcher可能因为压栈而不是同一个吗？？？</li>
</ul>
</li>
</ul>
</li>
<li><p>也就是，我们把会收到影响的object push到Dep.target上，然后，每次运算中触发“响应式”的值相关的时候，会通过 dep.depend()-&gt;Target::addDep(dep) -&gt; dep.addSub (响应式属性) 和它建立影响关系，(数据的值) 也会 childOb.dep.depend() -&gt; .dep.depend()-&gt;Target::addDep(dep) -&gt; dep.addSub</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>observer&#x2F;index.js</p>
<ul>
<li><p>Observer</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">  <span class="attr">value</span>: any;</span><br><span class="line">  <span class="attr">dep</span>: <span class="title class_">Dep</span>;</span><br><span class="line">  <span class="attr">vmCount</span>: number; <span class="comment">// number of vms that have this object as root $data</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span> (<span class="attr">value</span>: any) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = value</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">dep</span> = <span class="keyword">new</span> <span class="title class_">Dep</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">vmCount</span> = <span class="number">0</span></span><br><span class="line">    <span class="title function_">def</span>(value, <span class="string">&#x27;__ob__&#x27;</span>, <span class="variable language_">this</span>)</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(value)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (hasProto) &#123;</span><br><span class="line">        <span class="title function_">protoAugment</span>(value, arrayMethods)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">copyAugment</span>(value, arrayMethods, arrayKeys)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">observeArray</span>(value)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">walk</span>(value)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Walk through all properties and convert them into</span></span><br><span class="line"><span class="comment">   * getter/setters. This method should only be called when</span></span><br><span class="line"><span class="comment">   * value type is Object.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  walk (<span class="attr">obj</span>: <span class="title class_">Object</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; keys.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="title function_">defineReactive</span>(obj, keys[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 对数组每个元素 调用observe函数</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  observeArray (<span class="attr">items</span>: <span class="title class_">Array</span>&lt;any&gt;)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>只给 object 且 instanceof VNode 增加 可ob</p>
</li>
<li><p><code>__ob__</code></p>
<ul>
<li>防止无限循环?指向 Observer实例，observe函数不会重复创建</li>
</ul>
</li>
<li><p>value 为初始化传入的value</p>
</li>
<li><p>dep &#x3D; new Dep()</p>
</li>
<li><p>vmCount ( asRootData 时会增加</p>
</li>
<li><p>如果是数组修改了数组的push之类的函数</p>
<ul>
<li>遍历每个 observe</li>
</ul>
</li>
<li><p>如果是对象，调用defineReactive处理每个属性</p>
<ul>
<li>具体的defineReactive 向后讲</li>
</ul>
</li>
</ul>
</li>
<li><p>observe 创建的是 Observer</p>
<ul>
<li><p>只会对对象创建，原始类型不会创建</p>
</li>
<li><p>observe 传递true时，自定义的vmCount计数会+1</p>
<ul>
<li>src&#x2F;core&#x2F;instance&#x2F;lifecycle.js:      <code>vm._data.__ob__.vmCount--</code></li>
<li>src&#x2F;core&#x2F;observer&#x2F;index.js:  vmCount: number; &#x2F;&#x2F; number of vms that have this object as root $data</li>
<li>src&#x2F;core&#x2F;observer&#x2F;index.js:    this.vmCount &#x3D; 0</li>
<li>src&#x2F;core&#x2F;observer&#x2F;index.js:    ob.vmCount++</li>
<li>src&#x2F;core&#x2F;observer&#x2F;index.js:  if (target._isVue || (ob &amp;&amp; ob.vmCount)) {</li>
<li>src&#x2F;core&#x2F;observer&#x2F;index.js:  if (target._isVue || (ob &amp;&amp; ob.vmCount)) {</li>
<li>看起来，判断是否是root data的？</li>
</ul>
</li>
</ul>
</li>
<li><p>defineReactive</p>
<ul>
<li><p>获取对象的key原有的set和get</p>
<ul>
<li>Object.getOwnPropertyDescriptor</li>
</ul>
</li>
<li><p>修改的是原有的属性，自定义了set&#x2F;get方法</p>
</li>
<li><p>自己比包内有dep，childOb和val来维持</p>
<ul>
<li><p>childOb</p>
<ul>
<li>在 $attrs&#x2F;$listener 时失效，只做到最外层dep</li>
<li>其余的会，对数据调用observe函数产生Observer对象，用对象内的dep建立关系</li>
</ul>
</li>
<li><p>dep</p>
<ul>
<li>get时建立关系</li>
<li>set时通知有关系的watcher</li>
</ul>
</li>
</ul>
</li>
<li><p>defineReactive-&gt;Observer-&gt;defineReactive 递归所有key</p>
</li>
<li><p>最简单的测试是通过vue官网浏览器，console里面调用 </p>
<ul>
<li><p>const obj &#x3D; {};</p>
</li>
<li><p>obj._data &#x3D; {xxx:’x value’,yyy:{zzz:’z value’,v:’v value’}};</p>
</li>
<li><p>Vue.util.defineReactive(obj,’_data’);</p>
</li>
<li><p>通过展开 可以看到，被defineReactive的obj本身会增加 <code>__ob__</code> 是个Observable, 内部的字段会递归的 defineReactive 变成 setter&#x2F;getter. </p>
</li>
<li><p>上面这些是直接在结构体上 &#x2F; 属性上的，而dep 和 childOb和 val 不在结构体上，是在 闭包里的</p>
<ul>
<li><p>因为这个缺点，想要尝试修改并运行代码，可以改 vue的源码然后，跑生成，再自己去调用 输出</p>
</li>
<li><p>不论是读代码，还是调试，childOb 其实就是 通过 observe方法绑定在对应对象上的<code>__ob__</code></p>
<ul>
<li><p>本身observer上也会有 value,vmCount,dep</p>
<ul>
<li>Observer 这个this.value 有啥用呢，感觉只有看看也许调试工具使用，本质上，感觉没卵用，可以尝试把初始化的赋值删掉，测试也是能运行的。</li>
</ul>
</li>
</ul>
</li>
<li><p>数据呢，通过闭包放在函数里的val上</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>defineProperty 中的set</p>
<ul>
<li><p>如果和旧值一致，则返回</p>
</li>
<li><p>这里有自己比较自己， 是因为？get方法可能返回不同值还是为什么？</p>
</li>
<li><p>如果有设置函数调用设置函数</p>
</li>
<li><p>通过闭包，修改childOb 和 val</p>
</li>
<li><p>dep.notify()</p>
<ul>
<li><p>被更新的内容 是调用的update()方法</p>
<ul>
<li><p>lazy，置dirty为true</p>
<ul>
<li><p>每次computedGetter()-&gt;state.js::evaluate()，先调用，dirty置为false， createComputedGetter</p>
</li>
<li><p>从实现上讲，就是 如果配置的lazy，那么计算过程 和 更新过程就会走 lazy 单独的 方案</p>
<ul>
<li>从理解的角度，其实这里是手工去做了，C++里面的同父类指针不同子类指针的虚函数，实际上如果以C++的角度来写，就是根据是否lazy是不同的子类实现，从而提供不同的方法。</li>
</ul>
</li>
<li><p>例子 computed的 lazy是true</p>
</li>
</ul>
</li>
<li><p>如果 sync 设置，直接调用run</p>
<ul>
<li><p>基于一个没太懂的active，为了防止内存泄漏还在跑？</p>
<ul>
<li>因为这个变量默认true，在 teardown完成后才会置为false</li>
</ul>
</li>
</ul>
</li>
<li><p>最终值都是来自 get()函数</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>这边提供了 没法触发defineReactive 时的 set和del函数，比如对象新增字段啊 之类的时候用</p>
</li>
<li><p>如何控制更新的顺序</p>
<ul>
<li><p>场景，页面上 一个 , computed 里 something， something依赖data中某个 val</p>
<ul>
<li><p>当val变化了，如何触发</p>
</li>
<li><p>初始化时，一个 响应属性 val，两个Watcher: vm 和 computed watcher </p>
<ul>
<li>简单的方法就是 写个test.html和test.js，然后跑vue的run dev，在watcher的实现中增加 console.log(expOrFn,this.id)</li>
<li>通过上面的方法，或者理解代码，可以看到，computed属性的id(1) 是小于页面的id(2)的</li>
</ul>
</li>
<li><p>watcher里的update函数增加 console.log(‘update’, this.id, {lazy:this.lazy,sync:this.sync})</p>
<ul>
<li>可以看到 先computed更新，后update页面</li>
<li>但是注意到输出的computed配置的是lazy</li>
</ul>
</li>
<li><p>computedGetter中增加console.log(‘computedGetter’,this._computedWatchers, key);</p>
<ul>
<li>可以看到，虽然从触发顺序是 先computed，但是因为lazy，在首次触发时不会触发，而是标记dirty，后页面刷新，在 页面刷新时去计算 computed时，才会触发对应的Getter，才真正的evaluate</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h2><ul>
<li><p>开端</p>
<ul>
<li><p>上面的部分，已经完成了 Class定义，实例产生，以及看了其中的实践方案，下面就是最后一步<code>$mount</code></p>
</li>
<li><p>从实践上来讲，我们其实已经有响应式了，那么要做的是说把它运用到渲染里，因为从抽象层面讲，响应式不也就是一个函数么</p>
</li>
<li><p>直接从<code>$mount</code>函数开始挖，核心就是</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">new</span> <span class="title class_">Watcher</span>(vm, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">	vm.<span class="title function_">__patch__</span>(vm.<span class="property">_vnode</span>,vm.<span class="title function_">_render</span>())</span><br><span class="line">&#125;, noop, &#123;</span><br><span class="line">  before () &#123;</span><br><span class="line">   <span class="keyword">if</span> (vm.<span class="property">_isMounted</span> &amp;&amp; !vm.<span class="property">_isDestroyed</span>) &#123;</span><br><span class="line">    <span class="title function_">callHook</span>(vm, <span class="string">&#x27;beforeUpdate&#x27;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;, <span class="literal">true</span> <span class="comment">/* isRenderWatcher */</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>_vnode 老的虚拟节点</p>
</li>
<li><p>_render() 是计算新虚拟节点的</p>
</li>
<li><p><code>__patch__</code>是做替换工作的，修改真正的html</p>
</li>
<li><p>Watcher复用实现的响应式，来完成响应式触发</p>
<ul>
<li><p>lazy: false</p>
</li>
<li><p>这里watcher传入设计上本来是getter，但实际上，这里就是返回undefined的箭头函数，所以 对应 Watcher实例里面的 value 一直undefined</p>
<ul>
<li>和直接的 响应式区别是，响应式实现的是变量，没有“直接的”的函数触发，例如这里的 updateComponent 实际上走的是getter的设计。所以说看上去有点“没有符合原始设计的实现方案”</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>core&#x2F;instance&#x2F;render.js::_render()</p>
<ul>
<li><p>根据父节点scopedSlots &#x2F; slots &#x2F; 之前计算的scopedSlots 生成当前节点的scopedSlots</p>
</li>
<li><pre><code>vm.$vnode = _parentVnode
</code></pre>
<ul>
<li>$vnode: VNode; &#x2F;&#x2F; the placeholder node for the component in parent’s render tree</li>
</ul>
</li>
<li><pre><code>  vnode = render.call(vm._renderProxy, vm.$createElement)
</code></pre>
<ul>
<li><p>render 根据平台不同而不同，对于web，在platforms&#x2F;web&#x2F;entry-runtime-with-compiler.js中找到实现，在$mount 调用时，当没有设置render函数时，由 compileToFunctions 返回</p>
<ul>
<li><p>compiler&#x2F;index.js :: createCompilerCreator</p>
</li>
<li><p>compiler&#x2F;create-compiler.js</p>
</li>
<li><p>函数返回函数，函数返回函数，层层返回</p>
</li>
<li><p>ast &#x3D; parse(template.trim(),options) , optimize(ast, options), {render,staticRenderFns} &#x3D; generate(ast, options)</p>
<ul>
<li>其中，这一部分的 parse&#x2F;optimize&#x2F;generate 其实都是可以换的</li>
<li>本质上 提供一个 (template,options) &#x3D;&gt; {ast,render,staticRenderFns} 的函数就行</li>
<li><a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree">https://en.wikipedia.org/wiki/Abstract_syntax_tree</a></li>
</ul>
</li>
<li><p>把上述函数提供给 createCompilerCreator, 就能得到真的 createCompiler, 它接受的是 baseOptions, 返回的依然是模板处理函数，最后这个函数也就是 compileToFunctions处理用户编写的 template，产生render函数</p>
</li>
</ul>
</li>
</ul>
</li>
<li><pre><code>vnode.parent = _parentVnode
</code></pre>
</li>
<li><p>return vnode</p>
</li>
<li><p>虽然上面说是可选，但是我们可以看看 默认的实现</p>
</li>
<li><p>当在浏览器中的时候 core&#x2F;vdom&#x2F;patch.js::createPatchFunction 创建的patch 函数</p>
</li>
<li><p>parser:: compiler&#x2F;parser&#x2F;index.js</p>
<ul>
<li><p>简单说就是把 字符串的 模版，变成 AST</p>
<ul>
<li>ASTELement 的结构体可以在 flow&#x2F;compiler.js 里看到，很多字段</li>
</ul>
</li>
<li><p>320 行的</p>
<ul>
<li>定义4个函数</li>
<li>最终调用parseHTML</li>
<li>然后 return  root</li>
</ul>
</li>
<li><p>黑箱视角</p>
<ul>
<li><p>我们在调用parse之后输出ast，然后， console.log(JSON.stringify(ast, (key, value) &#x3D;&gt; {if (key &#x3D;&#x3D;&#x3D; ‘’) {value.children.forEach(item &#x3D;&gt; {item.parent &#x3D; undefined;});}; return value; }, 2));</p>
<ul>
<li>html上的 花括号被 _s 函数包裹</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>compiler&#x2F;optimizer.js</p>
<ul>
<li>优化 据说老版本始终调用，现在看 options.optmize 是否设置</li>
<li>从调用的角度来说，从代码函数名字和 执行结果通过vimdiff看起来不会“更改” ast，只会在分析结果上 增加 static&#x2F;staticRoot 字段</li>
</ul>
</li>
<li><p>generate compiler&#x2F;codegen&#x2F;index.js</p>
<ul>
<li><p>功能呢就是 从ast生成render</p>
</li>
<li><p>我们把从code打出来，是 with(this) 开头的字符串</p>
<ul>
<li><p>其中我们可以看到 页面的click事件会变成 被 function($event) 包裹，再return的。一定程度上解释了，如果希望在for里既能接受内部的事件，又能传递例如index之类的值，为什么是写 $event</p>
</li>
<li><p>从构成上，看的到有 _v,_s,_c</p>
<ul>
<li><p>_s 目测 就是上面ast中能看到的模版中 的 双花括号解析</p>
<ul>
<li><p>core&#x2F;instance&#x2F;render-helpers&#x2F;index.js</p>
<ul>
<li>这里我们也能看到 json对象为啥可以直接花括号 输出</li>
</ul>
</li>
</ul>
</li>
<li><p>_c 就是如果我们手写render接受的那个h或者说createElement 函数</p>
<ul>
<li>core&#x2F;instance&#x2F;render.js</li>
</ul>
</li>
<li><p>而_v 呢 目测 是想对于_c 更具体用于 渲染页面元素的？</p>
<ul>
<li><p>core&#x2F;instance&#x2F;render-helpers&#x2F;index.js</p>
<ul>
<li><p>这里的编码，甚至直接把，变量写作a,b,c,d,只有向下翻原函数，才知道是 tag&#x2F;data&#x2F;children&#x2F;normalizationType</p>
<ul>
<li>core&#x2F;vdom&#x2F;create-element.js</li>
</ul>
</li>
<li><p>但是实际上因为 前端喜欢 去模仿C++之类的支持 重载函数，所以也不一定是100%上面的顺序</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>对于上面三个，可能在不同的平台编译下有对应的替代函数，比如ssr的时候</p>
</li>
</ul>
</li>
<li><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with</a></p>
<ul>
<li>不推荐使用with，在 ECMAScript 5 严格模式中该标签已被禁止。推荐的替代方案是声明一个临时变量来承载你所需要的属性。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p><code>__patch__</code></p>
<ul>
<li><p>接受 render()计算的虚拟节点的结果</p>
</li>
<li><p>如果是新的node，它会创建DOM节点</p>
</li>
<li><p>如果是更新，它会更新DOM</p>
</li>
<li><p>platforms&#x2F;web&#x2F;runtime&#x2F;patch.js</p>
<ul>
<li><p>createPatchFunction({ nodeOps, modules })</p>
<ul>
<li><p>nodeOps: platforms&#x2F;web&#x2F;runtime&#x2F;node-ops.js</p>
<ul>
<li><a href="https://stackoverflow.com/questions/8173217/createelement-vs-createelementns">https://stackoverflow.com/questions/8173217/createelement-vs-createelementns</a></li>
<li>本质上做的是同名函数封装</li>
</ul>
</li>
<li><p>modules</p>
<ul>
<li>core&#x2F;vdom&#x2F;modules&#x2F;index.js</li>
<li>platforms&#x2F;web&#x2F;runtime&#x2F;modules&#x2F;index.js</li>
<li>包括一些 class&#x2F; attr 等操作</li>
</ul>
</li>
</ul>
</li>
<li><p>优化dom操作效率</p>
<ul>
<li><p>抛开用户可见的讲，我们有的是vm层面和渲染函数，其中更新的部分由vue内部实现的响应式解决了，那么我们有了老的vdom和新的vdom，接下来就是 如何去做dom的替换了</p>
</li>
<li><p>有一些跨语言经验的都知道，c++ 写的加法编译出来的的代码每秒大约1e8~1e9 次，但是一旦和显示相关，就会很慢的</p>
</li>
<li><p>core&#x2F;vdom&#x2F;patch.js::createPatchFunction</p>
<ul>
<li>顶部注释  * Virtual DOM patching algorithm based on Snabbdom by</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>Simon Friis Vindum (@paldepind)</p>
<pre><code>         - 定义了蛮多 函数
         - 我们专注一下 最后的 返回 return function patch

             - 没新节点，销毁老节点
             - 没老节点 createElm
             - nodeType 判断?

                 - https://developer.mozilla.org/zh-CN/docs/Web/API/Node/nodeType

             - 不是真element(仅仅虚拟节点) 且 通过 key/tag/isComment/data/isAsyncPlaceholder/asyncFactory 等字段判断是同一个，调用 patchVnode

                 - 函数名可以看出仅仅 虚拟vnode? 好像也不是 注释上是 patch existing root node
                 - 这里我们看到有异步占位
                 - 有static tree且 isCloned

                     - hot-reload 相关

                 - 如果都不是，则 触发 vnode.data.hook.prepatch(oldVnode,vnode)

                     - 已经看到，这里开始放肆的用变量i了
                     - 感觉如果有 Ng的问号写法支持，岂不好看又好用 vnode?.data?.hook?.prepatch?(oldVnode,vnode)

                 - 之后 如果isPatchable, 把闭包内的cbs.update 数组的 函数触发一遍，并触发data.hook.update
                 - 接着就是 updateChildren/addVnodes/removeVnodes/setTextContent 的修改

                     - 如果有text就是叶子节点。。。。？
                     - 除了updateChildren以外 都是直接的操作
                     - updateChildren 递归操作

                         - 函数里可以看到 removeOnly 在 trasition-group 里会 启用，也就是做动画效果 其实会影响 替换实现！
                         - https://github.com/snabbdom/snabbdom/blob/d66905438dc6866b2a7ab21d719c45a156d1252e/src/package/init.ts#L203
                         - 把原来的child子数组 和 新子数组 做4个包裹指针，（每个数组一个开头指针一个结尾指针）
                         - 头同，patch 头
                         - 尾同，patch尾
                         - 原头=新尾，patch
                         - 原尾=新头，patch
                         - 剩余，通过建立老的元素的key到idx映射，然后把新放入时去查这个映射表，找到后记得删除老的表，继续while
                         - 如果找不到创建新的
                         - 感觉似乎很多面试喜欢问讲讲实现原理，实际上抽象出成问题可能也就一个leetcode easy难度

                 - vnode.data.hook.postpatch(oldVnode,vnode)

             - 是真节点

                 - 这里我们看到了 硬编码1，虽然不灵活，但是不应该是用 Node.ELEMENT_NODE 来代替1吗, 还是serverside？？？
                 - 然后这个isTrue函数 是认真的吗，不接受非零的其它值，只接受true值
                 - 这里可以看到如果是ssr，渲染的节点 会有SSR_ATTR 属性，这里会移除它

                     - 如果hydrate返回false且非生产，可以看到之前见过的 服务端和前端渲染不一致的提示
                     - 最后如果不是 服务端渲染的，或者 hydrate失败 emptyNodeAt 来代替它
</code></pre>
</li>
</ul>
<ul>
<li><p>vm._update 是包裹<code>__patch__</code>更新节点</p>
<ul>
<li><p>这里我们可以看到keep-alive 相关的 setActiveInstance 方法</p>
</li>
<li><p>在 render.call(vm._renderProxy, vm.$createElement) 之后增加 console.log(vnode)</p>
<ul>
<li><p>定义两个 多个component，可以看到 render的顺序是 先父级别的，后子级别的</p>
<ul>
<li>在context里可以看到 前面的 _c &#x2F; _data &#x2F; _watchers</li>
</ul>
</li>
<li><p>但是在children 数组里的tag会变成 “vue-component-1-&lt;你的组件名&gt;”</p>
</li>
<li><p>在子组件的vnode 输出里，parent的tag 是 “vue-component-1-&lt;你的组件名&gt;”</p>
</li>
<li><p>而当 我们跟新数据的时候，能够看到vnode被重新计算</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>本质上，我们已经有了，响应式实现的核心部分了，接下来是，在界面上如何使用的</p>
</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="Flow"><a href="#Flow" class="headerlink" title="Flow"></a>Flow</h2><ul>
<li><p>一个typescript类的工具，让编写的时候假装是强类型 可以转换成js</p>
</li>
<li><p>区别 是静态代码检查</p>
</li>
<li><p>Vue 2.0 为什么选用 Flow 进行静态代码检查而不是直接使用 TypeScript？ - 尤雨溪的回答 - 知乎<br><a href="https://www.zhihu.com/question/46397274/answer/101193678">https://www.zhihu.com/question/46397274/answer/101193678</a></p>
<ul>
<li>尤雨溪说 还是历史依赖 导致的成本问题，下个版本用TS</li>
</ul>
</li>
<li><p><a href="https://flow.org/en/">https://flow.org/en/</a></p>
</li>
<li><p><a href="https://zhuanlan.zhihu.com/p/26204569">https://zhuanlan.zhihu.com/p/26204569</a></p>
</li>
</ul>
<h2 id="首先整个Vue的原型，或者说Class-是通过多层不同文件共同写一个Vue来实现的。再之后产生实例的时候是通过配合用户的配置触发一个-Vue-init-函数，再触发这些不同文件创建的方法来完成-实例化对象。之后就是用户操作引发刚刚实例化的事件发生，Vue对应变化"><a href="#首先整个Vue的原型，或者说Class-是通过多层不同文件共同写一个Vue来实现的。再之后产生实例的时候是通过配合用户的配置触发一个-Vue-init-函数，再触发这些不同文件创建的方法来完成-实例化对象。之后就是用户操作引发刚刚实例化的事件发生，Vue对应变化" class="headerlink" title="首先整个Vue的原型，或者说Class 是通过多层不同文件共同写一个Vue来实现的。再之后产生实例的时候是通过配合用户的配置触发一个 Vue._init() 函数，再触发这些不同文件创建的方法来完成 实例化对象。之后就是用户操作引发刚刚实例化的事件发生，Vue对应变化"></a>首先整个Vue的原型，或者说Class 是通过多层不同文件共同写一个Vue来实现的。再之后产生实例的时候是通过配合用户的配置触发一个 Vue._init() 函数，再触发这些不同文件创建的方法来完成 实例化对象。之后就是用户操作引发刚刚实例化的事件发生，Vue对应变化</h2><ul>
<li><p>而目前的方式一层层包裹，却都是在Vue这一个 实例&#x2F;原型 上面 做操作</p>
<ul>
<li><p>带来的问题是</p>
<ul>
<li>不同的包裹之间，不能有冲突的字段</li>
<li>层级在代码上实现了分层，但是在对应的创建出来的实例并没有分层</li>
<li>类型标注上，希望字段分层增加是没有起到工具提供保护作用。</li>
</ul>
</li>
<li><p>可能可以通过ts的 类型描述解决</p>
</li>
</ul>
</li>
<li><p>定义Vue的类时包裹，包裹再包裹</p>
<ul>
<li><p>src&#x2F;core&#x2F;instance&#x2F;index.js</p>
<ul>
<li>导出Vue</li>
</ul>
</li>
<li><p>src&#x2F;core&#x2F;index.js</p>
<ul>
<li>包裹Vue并导出</li>
</ul>
</li>
<li><p>src&#x2F;platforms&#x2F;web&#x2F;runtime&#x2F;index.js</p>
<ul>
<li>包裹Vue并导出</li>
</ul>
</li>
<li><p>src&#x2F;platforms&#x2F;web&#x2F;entry-runtime-with-compiler.js</p>
<ul>
<li>包裹Vue并导出</li>
</ul>
</li>
</ul>
</li>
<li><p>实例化时</p>
<ul>
<li><p>初始化$options</p>
<ul>
<li>工作内容，根据默认配置和用户传入的配置，产生合并的$options</li>
</ul>
</li>
<li><p>然后是依次init和 穿插hook的触发</p>
</li>
<li><pre><code>vm.$mount(vm.$options.el)
</code></pre>
</li>
</ul>
</li>
</ul>
<h2 id="常见方法"><a href="#常见方法" class="headerlink" title="常见方法"></a>常见方法</h2><ul>
<li><p>自定义alias</p>
<ul>
<li><p>scripts&#x2F;alias.js</p>
<ul>
<li>可能的替代方案，利用typescript+idea的重构功能</li>
</ul>
</li>
</ul>
</li>
<li><p>version</p>
<ul>
<li><code>src/core/index.js</code>：<code>Vue.version = &#39;__VERSION__&#39;</code></li>
</ul>
</li>
<li><p><code>$on</code>,<code>$once</code> 等方法都返回了原始的实例，C++里有时能见到这样的写法，可以链式书写调用</p>
</li>
<li><p>toArray</p>
<ul>
<li>array like的转换成array</li>
</ul>
</li>
<li><p>报错封装</p>
<ul>
<li>handleError(error,vm,info)</li>
</ul>
</li>
<li><p>用户可能不传true&#x2F;false时的代码 &#x3D; !!value</p>
</li>
<li><p>手工 实现 重载</p>
</li>
<li><p>手工 实现 多态</p>
</li>
<li><p>如果有比较复杂的历史bug，利用上github，在注释中，写上对应的issue id</p>
</li>
<li><p>和其它语言写东西一样，都是主逻辑以外的错误判断有不少</p>
</li>
</ul>
<h2 id="体验上难受的点"><a href="#体验上难受的点" class="headerlink" title="体验上难受的点"></a>体验上难受的点</h2><ul>
<li><p>阅读代码时，非纯函数的确读起来相对更头疼，但是我在想，虽然是非纯函数，但实际上 如果变成一个class，也是类似的，因为有些内容不应该暴露出来的，而对于class内部的一些状态，把它取出来判断再只调用class内的操作，还不如直接class封好</p>
</li>
<li><p>文档也不全，官方档有些部分没三方博客描述全</p>
</li>
<li><p>可以看到是入侵式编码 性能测试，用 NODE_ENV 包裹，这个利用了rollup&#x2F;webpack等编译时能去掉，但从编码上还是入侵式的，如果有办法做切面编程是不是更好</p>
</li>
<li><!-- 在代码上，虽然都不愿意口头承认很多时候用的内容都是过度设计的，而现实的使用其实已经表明了观点，对于很多公司，其实jquery甚至都能胜任，在jquery上封一层类似框架或者ng1，vue1也都完全够用。而vue能火到今天的地步，是社区吹水+入门低+劣币驱逐良币等等的共同结果。随着源码阅读的深入，真的很惊叹这么多公司在用。 --></li>
<li><p>不够完备的测试，不太能做到重构保护</p>
<ul>
<li><p>覆盖报告的 ignore</p>
</li>
<li><p>例如事件的$on 设计是 有hook:冒号则置为true，否则是默认false，而测试覆盖 根本不全test&#x2F;unit&#x2F;features&#x2F;options&#x2F;lifecycle.spec.js 就简单做了覆盖</p>
<p>if (hookRE.test(event)) {<br>  vm._hasHookEvent &#x3D; true<br>}<br>改为 （语义变了，代码错了，测试依然通过）<br>vm._hasHookEvent &#x3D; hookRE.test(event)</p>
</li>
<li><p>这样也就意味着，能用就不会再有代码更新，不炸就没有对应测试，这类的测试代码对应的测试报告形同虚设，真的是为了写测试代码而写测试代码</p>
</li>
</ul>
</li>
<li><p>光是看core 相关的内容，发现是缺少自动生成文档的注释的</p>
<ul>
<li>相关工具比如commit msg检查的不一致性已经导致了多达百个commit不一致的问题</li>
</ul>
</li>
<li><p>很多的空判断，放在调用者而不是执行者，这样好码？</p>
<ul>
<li>比如 if(a){f(a)}, 而不是在f里面判断</li>
</ul>
</li>
<li><p>还是有不少的 ?Object &#x2F; any &#x2F; vm 飞来飞去，没有一个“严格”的类型管制，有些地方读代码还是比较困难，没有angular那样的注释，也是一个困难</p>
</li>
<li><p>又有undefined，又有null，阅读还是有些难受</p>
</li>
<li><p>没有具体看weex相关的，但是就阅读体验来说，weex感觉是侵入的写到了vue里</p>
</li>
</ul>
<h2 id="抽象内容"><a href="#抽象内容" class="headerlink" title="抽象内容"></a>抽象内容</h2><ul>
<li><p>响应式触发</p>
</li>
<li><p>空处理</p>
</li>
<li><p>定义冲突校验</p>
</li>
<li><p>生命周期</p>
</li>
<li><p>函数参数多时，参数顺序问题，代码格式一致</p>
<ul>
<li>所以还是done is better than perfect</li>
</ul>
</li>
<li><p>有办法让 js的参数接受能像C++ 那样区别而优雅吗？</p>
</li>
<li><p>保留前缀判断</p>
</li>
</ul>
<h2 id="写xmind，生成markdown比直接markdown更舒服"><a href="#写xmind，生成markdown比直接markdown更舒服" class="headerlink" title="写xmind，生成markdown比直接markdown更舒服"></a>写xmind，生成markdown比直接markdown更舒服</h2><p>xmind可以在分支上增加笔记，好处是转换成markdown就不会变成目录层级，缺点是xmind上不能直接展开。 然后xmind不能指定导出的目录层级。<br>另外xmind写一遍，整理成markdown时能对读的过程进行修剪补充可以再温习一遍。</p>
<h2 id="feature"><a href="#feature" class="headerlink" title="feature"></a>feature</h2><ul>
<li>如何ssr</li>
<li>如何keep-alive</li>
</ul>
<h1 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h1><h2 id="https-github-com-numbbbbb-read-vue-source-code"><a href="#https-github-com-numbbbbb-read-vue-source-code" class="headerlink" title="https://github.com/numbbbbb/read-vue-source-code/"></a><a href="https://github.com/numbbbbb/read-vue-source-code/">https://github.com/numbbbbb/read-vue-source-code/</a></h2><h2 id="https-www-youtube-com-watch-v-OrxmtDw4pVI-amp-t-45s-amp-ab-channel-Honeypot"><a href="#https-www-youtube-com-watch-v-OrxmtDw4pVI-amp-t-45s-amp-ab-channel-Honeypot" class="headerlink" title="https://www.youtube.com/watch?v=OrxmtDw4pVI&amp;t=45s&amp;ab_channel=Honeypot"></a><a href="https://www.youtube.com/watch?v=OrxmtDw4pVI&amp;t=45s&amp;ab_channel=Honeypot">https://www.youtube.com/watch?v=OrxmtDw4pVI&amp;t=45s&amp;ab_channel=Honeypot</a></h2><h2 id="https-www-bilibili-com-video-BV1d4411v7UX"><a href="#https-www-bilibili-com-video-BV1d4411v7UX" class="headerlink" title="https://www.bilibili.com/video/BV1d4411v7UX"></a><a href="https://www.bilibili.com/video/BV1d4411v7UX">https://www.bilibili.com/video/BV1d4411v7UX</a></h2><h2 id="https-developer-mozilla-org-zh-CN-docs-Web-JavaScript-Reference-Global-Objects-Object-defineProperty"><a href="#https-developer-mozilla-org-zh-CN-docs-Web-JavaScript-Reference-Global-Objects-Object-defineProperty" class="headerlink" title="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty</a></h2><p><em>XMind - Trial Version</em></p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
        <tag>js</tag>
        <tag>source code</tag>
      </tags>
  </entry>
  <entry>
    <title>open source db</title>
    <url>/Blog/21-03-15-opensourcedb/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>PostgreSQL</th>
<th>MariaDB</th>
<th>SQLite</th>
</tr>
</thead>
<tbody><tr>
<td>它的核心算法的效率高，性能优于许多宣称更先进数据库。这一点在处理大型数据集的时候就可以很明显地体现出来了，否则 I&#x2F;O 处理会成为瓶颈。多编程语言调用，社区支持好</td>
<td>频繁安全更新，曾和MySQL保持高度兼容，可以配合WordPress使用。</td>
<td>小而灵活，SQLite 体积很小，因此速度极快。兼容性高，可集成到智能手机上，可以原生运行于 iOS 上，可以在嵌入式系统中实现。</td>
</tr>
<tr>
<td>但对于数据量较小的情况，使用 PostgreSQL 就显得不如其它的一些工具快了。核心文档仍然需要作出改进。如果你需要使用并行计算或者集群化等高级工具，就需要安装 PostgreSQL 的第三方插件。尽管官方有计划将这些功能逐步添加到主要版本当中，但可能会需要再等待好几年才能出现在标准版本中。</td>
<td>MariaDB 有时会变得比较臃肿，尤其是它的 IDX 日志文件在长期使用之后会变得非常大，最终导致性能下降。缓存是 MariaDB 的另一个工作领域，并没有期望中那么快，这可能会让人有所失望。已经不是完全兼容 MySQL，需要额外做一些兼容工作。</td>
<td>缺少了很多其它大型数据库的常见功能。例如缺少数据加密就是抵御黑客攻击[15]的标准功能。SQLite 经常被发现高危的漏洞，例如最近的 Magellan[16]。尽管 SQLite 单文件的方式拥有速度上的优势，但是要使用它实现多用户环境却比较困难。</td>
</tr>
</tbody></table>
<h1 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h1><table>
<thead>
<tr>
<th></th>
<th>PostgreSQL</th>
<th>MariaDB</th>
<th>SQLite</th>
</tr>
</thead>
<tbody><tr>
<td>安全</td>
<td>中</td>
<td>中</td>
<td>低</td>
</tr>
<tr>
<td>效率场景</td>
<td>中大</td>
<td>中小</td>
<td>小</td>
</tr>
<tr>
<td>迁移代价</td>
<td>中</td>
<td>中</td>
<td>低</td>
</tr>
<tr>
<td>其它</td>
<td>三方插件和社区</td>
<td>基本兼容MySQL</td>
<td>灵活</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>backend</category>
        <category>database</category>
      </categories>
      <tags>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>fiddler android</title>
    <url>/Blog/21-03-16-fiddler/</url>
    <content><![CDATA[<h1 id="fiddler"><a href="#fiddler" class="headerlink" title="fiddler"></a>fiddler</h1><p><a href="https://www.telerik.com/download/fiddler/fiddler-everywhere-linux">https://www.telerik.com/download/fiddler/fiddler-everywhere-linux</a></p>
<h1 id="android"><a href="#android" class="headerlink" title="android"></a>android</h1><p>fiddler 开个代理，手机wifi 自定义过去</p>
<p>http没啥说的</p>
<span id="more"></span>

<p>https看了一下，就是导出个证书，把证书安装到android上，然后就能解密https。基本原理就是 你发东西给fiddler，fiddler解密后发给真实服务器。</p>
<p>然而试了一下，只有chrome里网页的https可以搞。搜了一下，android 7 以上，开发应用时可以设置不再信任 用户证书，而系统证书非root不能安，就没搞root。</p>
<p>总之放弃。</p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>fiddler</tag>
      </tags>
  </entry>
  <entry>
    <title>前端通信</title>
    <url>/Blog/21-03-24-frontend-call-and-data/</url>
    <content><![CDATA[<h1 id="交互"><a href="#交互" class="headerlink" title="交互"></a>交互</h1><p>概念上, 这几类</p>
<ol>
<li>触发一个远端方法</li>
<li>数据共享</li>
<li>响应式触发</li>
</ol>
<h1 id="回顾经典"><a href="#回顾经典" class="headerlink" title="回顾经典"></a>回顾经典</h1><p>说道通信，那就回顾一下Linux的通信方式，IPC</p>
<ul>
<li>共享文件</li>
<li>共享内存</li>
<li>管道(命名和匿名)</li>
<li>消息队列</li>
<li>sockets</li>
<li>signal</li>
</ul>
<span id="more"></span>

<p>众所周知 进程是资源最小单位，所以线程内对数据来说是默认共享的，而进程之间需要 memorymap之类的操作，</p>
<p>共享文件，当然加锁，慢，但数据量可以很大。</p>
<p>signal 比如中文博客常见的暴力杀人 <code>kill -9</code> &#x2F;&#x2F;不是，<code>Ctrl+C</code>,<code>Ctrl+Z</code>。一般来说这个古老，小巧，系统</p>
<p>管道，常见的就是linux中 通过竖线连接的命令，这些命令呢是shell在 程序外建立的临时管道，因此对于程序本身来说和读stdin&#x2F;stdout 的行为没区别。实现基本就是linux所有东西都是文件+同步+锁+一个读一个写+文件数据结构到物理页的映射. 也可以 mkfifo 创建文件来pipe通信, 本质上是字节流为单位</p>
<p>消息队列，单位是消息不是字节流，其它是消息单位以上的信息内容,比如优先级，获得第x条消息, 实现上每个消息一个结构体,链表链接</p>
<p>socket 就是套接字(domain,type,protocol)，除了网络套接字还有 unix domain socket,(domain,type,protocol,socketfd[2])</p>
<p>另外有一句话叫不要用共享内存来通信，而是通信来共享内存, 我们能见到的内存共享基本就是虚拟地址和物理地址映，其共享的是数据内容，而一般会通过其它方式来做控制通信,比如semaphore,</p>
<p>从设计上看，共享文件和共享内存以外的几个更注重信息发送，在信息发送的不同层级做了不同的包装，提供给用户使用的时候就是明确的事件</p>
<h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><table>
<thead>
<tr>
<th>方法</th>
<th>特点</th>
</tr>
</thead>
<tbody><tr>
<td><code>props</code>&#x2F;<code>$emit</code></td>
<td>父子，props下去的是值，$emit 上来的是带有值的事件，可以通过<code>$attrs,$listener</code>穿透, 虽然看似watch能变成事件，但本身上是别扭的并且有基础类型不触发的问题</td>
</tr>
<tr>
<td>props + 回调式</td>
<td>父子，类似react的习惯，本质是提供一个能访问上级的函数, 操作的是函数不是值</td>
</tr>
<tr>
<td>vuex</td>
<td>本质上是共享响应式的数据, 非事件,虽然是事件的方式操作的vuex里的数据</td>
</tr>
<tr>
<td>手工一个共享对象&#x2F;或<code>event = new Vue()</code>，可以支持<code>on/emit</code>方法，共享这个方法通信。</td>
<td>对象共享，可以非父子，都是事件</td>
</tr>
<tr>
<td>(vuex&#x2F;公共js) + (on&#x2F;emit)</td>
<td>明确事件 + 跨级访问，只要都能触及的对象即可</td>
</tr>
<tr>
<td>provide&#x2F;inject</td>
<td>祖先级别，单向，默认非响应式，当然通过共享对象，原理同上也是能做到多向通信</td>
</tr>
<tr>
<td>ref&#x2F; $parent</td>
<td>获取实例直接操作值或函数，父子，一定程度破坏闭包性质，可以考虑文档协定那些是作为不会变暴露的，哪些是私有不应该操作的</td>
</tr>
</tbody></table>
<h1 id="React"><a href="#React" class="headerlink" title="React"></a>React</h1><table>
<thead>
<tr>
<th>方法</th>
<th>特点</th>
</tr>
</thead>
<tbody><tr>
<td>props</td>
<td>单向，但实际上已经够了，基于这个单向的，提供回调，就能完成上面的 props+回调式</td>
</tr>
<tr>
<td>context&#x2F;redux</td>
<td>同vuex</td>
</tr>
<tr>
<td>EventEmitter</td>
<td>同上共享 通信对象，你可以自由实现是全局，还是父子还是</td>
</tr>
<tr>
<td>ref</td>
<td>虽然是单向，其实有props和自身也可以做大$parent的语义, 官方</td>
</tr>
</tbody></table>
<h1 id="Angular2"><a href="#Angular2" class="headerlink" title="Angular2"></a>Angular2</h1><p><a href="https://angular.cn/guide/component-interaction">https://angular.cn/guide/component-interaction</a></p>
<table>
<thead>
<tr>
<th>方法</th>
<th>特点</th>
</tr>
</thead>
<tbody><tr>
<td>@Input&#x2F;@Output</td>
<td>向下值(可以通过setter截听等各种操作)，向上事件，上述回调等也是都可以去做，不过大可不必</td>
</tr>
<tr>
<td>本地变量 #timer</td>
<td>不需要js，直接html建立关联，类似ref但并不是，ng这样默认ts的再用上本地变量也是一个公私分明的方案，至少封装性没有破坏，具体见ng的官方文档的讲解</td>
</tr>
<tr>
<td>ViewChild</td>
<td>也就是另外语言里的ref了，这个就可以操作一些私有的内容甚至子级别的内容, 你也可以用这个做透传</td>
</tr>
<tr>
<td>service+rxjs</td>
<td>看起来像Vuex&#x2F;Redux, 但本质是服务实现而不是响应式状态共享实现</td>
</tr>
</tbody></table>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="从可行方法上"><a href="#从可行方法上" class="headerlink" title="从可行方法上"></a>从可行方法上</h2><ol>
<li>直接通信 向下传递值，向上发送事件</li>
<li>向下传递回调，但上级别不需要回调的时候的兼容处理(比较好的是如果有ts，可以直接<code>?.</code>)</li>
<li>共享通信通道（传递通道（可以孤立和复用），共同引入通道（访问一定命名空间下的））</li>
<li>其它不是<code>操作</code>而仅仅是数据共享&#x2F; localStorge&#x2F; vuex&#x2F;redux&#x2F;ng service&#x2F;router params, 除了路由本身这些的通信属性是远远低于数据共享属性的</li>
<li>获取实例直接操作（依赖注入&#x2F;props&#x2F;ref&#x2F;$parent&#x2F;$child) 总之不论是啥框架这都是非优先的考虑，在解决一些上述解决不了的时候才考虑，见react的英文文档</li>
<li>当然基于本质是js的想法，你可以父传递回调函数给子组件，子组件回调给你一个有调用方法的实例，父对象在调用这个实例上的方法 XD等等花里胡哨的</li>
</ol>
<h2 id="从理论-实际使用上"><a href="#从理论-实际使用上" class="headerlink" title="从理论+实际使用上"></a>从理论+实际使用上</h2><ol>
<li>大多数时候，框架提供的向下共享数据，和向上传递事件（react回调也是）就足够了, 像</li>
<li>那么有向下传递事件和跨越任何关系传递事件时，通过共享通信通道是更符合代码意义的操作，并且你可以按照需求管理所在作用域</li>
<li>其它是react文档提到的几种实在要用ref操作的情况</li>
</ol>
<p>而 实例，watch等不是明确事件的，虽然你可以各种手段去搞一个像是可以用作事件的，而这种东西如果能封装出可用的也不是不行，但没有封装到处这样写的话，那就是缺失语义的屎山代码的开端</p>
<p>当需要更多的应用时, js方法都可以用，毕竟本质都是js</p>
<p>React完全就是核心实现了props，其余非核心必要都交给用户</p>
<p>Vue2，$emit&#x2F;ref&#x2F;$child&#x2F;$parent , 提供的杂乱的不一致 的可用方案，优点是相对常用，缺点是破坏封装性</p>
<p>Angular2+ 看起来还是最清晰详细的，有测试示例，有传递的各种处理工具，有0代码html上的组件交互，提供了公私分明(写起来比Vue还简洁)，也提供访问实例，还有Service+RxJs，而且这里文档实例也是“生产”的写法，并没有能跑就行，比如MissionService 的Subject使用（见我翻译的另一篇rxjs的文章）</p>
<p>react 提供核心，Vue2半成品即视感（当然react&#x2F;vue2都给了你绩效机会比如你可以像有赞的代码一样封装一个好用的通信），Angular就是一个你能想到的完整实现了</p>
<h2 id="更实际一点"><a href="#更实际一点" class="headerlink" title="更实际一点"></a>更实际一点</h2><p>暴论：考虑到有些代码，不在意代码质量，未来维护等等，以出产品为第一要义，你也可以，多获取实例调用，至少如果你的依赖组件几年不变的话，私有性等等其实是过度需求的，甚至写起来比上述的简单，也有一定的局部性保障。</p>
<p>这是根据看了不少线上源码得出来的结论,现实世界用户产品的优先级就是高于甚至远高于代码质量</p>
<h1 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h1><p>这里看到的是，如何在响应式框架中做通信，</p>
<p>React直接只提供传递，剩余的事情并不关心，你要做的就是用原生js去做就行了</p>
<p>Vue2看上去书写上看似比React多了点东西，但稍微有需求时，为了使用愿意破坏封装，要更有意义的实现，需要不少的额外手工操作代价，或者和React一样，Vue2的文档经常写一些自己的eslint过不了的示例代码。</p>
<p>Angular2看似你只需要读一边官方文档就好了。</p>
<p>再回顾最开始讲的linux通信，看起来都是创建一个通信通道，然后要通信的双方通过通道进行交流，而再看ipc&#x2F;rpc，就是利用各种可能的通道，在上面做了一层看起来是直接调用方法的方案，而本质上只是同名和映射，使用体验上是直接调用，当然这个局限是建立在互相不能获操作对方实例的基础上的通信方案</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://vuejs.org/v2/guide/components-props.html">https://vuejs.org/v2/guide/components-props.html</a></p>
<p><a href="https://reactjs.org/docs/refs-and-the-dom.html">https://reactjs.org/docs/refs-and-the-dom.html</a></p>
<p><a href="https://angular.io/guide/component-interaction">https://angular.io/guide/component-interaction</a></p>
<p><a href="https://github.com/youzan/vant/blob/2.x/src/mixins/relation.js">有赞relation</a></p>
<p><a href="https://tldp.org/LDP/tlk/ipc/ipc.html">https://tldp.org/LDP/tlk/ipc/ipc.html</a></p>
<p><a href="https://man7.org/linux/man-pages/man7/mq_overview.7.html">https://man7.org/linux/man-pages/man7/mq_overview.7.html</a></p>
<p><a href="https://toroid.org/unix-pipe-implementation">unix pipe implementation and history</a></p>
]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>vue2</tag>
        <tag>Angular2+</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>外部文章 索引</title>
    <url>/Blog/21-04-01-pointers/</url>
    <content><![CDATA[<h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>有些别人整理过的，暂时也不太需要二次整理的文章，建立索引，缺点是可能失效链接和无法自己维护, 移除用twitter书签的, 手机 Pocket, 网页书签栏,</p>
<h1 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h1><p><a href="https://blog.joway.io/posts/deep-into-distributed-filesystem/">分布式文件系统的演化</a></p>
<p><a href="https://coolshell.cn/articles/21263.html">GO 编程模式：K8S VISITOR 模式</a></p>
<p><a href="https://github.com/goharbor/community/blob/master/proposals/enhanced-default-processor.md">proposals&#x2F;enhanced-default-processor</a></p>
<p><a href="https://twitter.com/angular/status/1377395280648097796">ng packages</a></p>
<p><a href="https://www.ximalaya.com/keji/29161862/">牛油果烤面包</a></p>
<p><a href="https://www.ximalaya.com/keji/24821511/">捕蛇者说</a></p>
<p><a href="https://blog.angular.io/ivys-internal-data-structures-f410509c7480">ng ivy</a></p>
<p><a href="https://tech.meituan.com/2021/02/04/2021-spring-festival-present.html">美团技术团队</a></p>
<p><a href="https://docs.pingcap.com/tidbcloud/beta/tidb-cloud-intro#architecture">tidb</a></p>
<p><a href="http://maizure.org/projects/decoded-gnu-coreutils/">gnu core utils 源码</a></p>
<p><a href="http://jimbly.github.io/regex-crossword/">regex 填字游戏</a></p>
<p><a href="https://huggingface.co/stanford-cs329s">stanford cs 329s 机器学习设计</a></p>
<p><a href="https://www.bilibili.com/video/BV1Zo4y1R7En/">ncnn</a></p>
<p><a href="https://draveness.me/golang/">go语言设计与实现</a></p>
<p><a href="https://www.bilibili.com/video/BV1rx411Z7LV"> Learning How to Learn</a></p>
<p><a href="https://github.com/b1f6c1c4/learn-git-the-super-hard-way">git</a></p>
<p><a href="https://www.hacker101.com/start-here">hacker101</a></p>
<p><a href="https://github.com/type-challenges/type-challenges">typescript challenge</a></p>
<p><a href="https://nhigham.com/2020/09/01/what-is-the-sylvester-equation/">Sylvester Equation</a></p>
<p><a href="https://github.com/pingcap/awesome-database-learning">pingcap database learning path</a></p>
<p><a href="https://github.com/facebook/folly/blob/master/folly/docs/FBVector.md">FB vector</a></p>
<p><a href="https://linux.die.net/man/8/logrotate">logrotate</a></p>
<p><a href="https://coolshell.cn/articles/21003.html">timing attack</a></p>
<p><a href="https://github.com/NickCarneiro/curlconverter">py spider</a></p>
<p><a href="http://aggregate.org/MAGIC/">The Aggregate Magic Algorithms</a></p>
<p><a href="https://www.youtube.com/watch?v=EFwGK3Lvr04&ab_channel=PyConChina">py command line</a></p>
<p><a href="https://www.vadimbulavin.com/modern-mvvm-ios-app-architecture-with-combine-and-swiftui/">Modern MVVM iOS App Architecture with Combine and SwiftUI</a></p>
<p><a href="https://www.bilibili.com/video/av90473411">k8s 调度</a></p>
<p><a href="https://cloud.tsinghua.edu.cn/d/339de5f93d8c420ebbb7/?p=/aos-lec1&mode=list">tsinghua aos</a></p>
<p><a href="https://coolshell.cn/articles/20845.html">RUST语言的编程范式 coolshell</a></p>
<p><a href="https://www.sourcetrail.com/blog/open_source/">sourcetrail</a></p>
<p><a href="https://www.cs.cmu.edu/~rwh/courses/hott/">cmu type theory</a></p>
<p><a href="https://www.youtube.com/playlist?list=PLi01XoE8jYoi3SgnnGorR_XOW3IcK-TP6">Abstract Algobra Youtube</a></p>
<p><a href="https://github.com/caicloud/kube-ladder">kube ladder</a></p>
<p><a href="https://googleprojectzero.blogspot.com/">Project Zero</a></p>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>article</tag>
      </tags>
  </entry>
  <entry>
    <title>gogs with docker</title>
    <url>/Blog/21-04-27-gogs/</url>
    <content><![CDATA[<h1 id="起"><a href="#起" class="headerlink" title="起"></a>起</h1><p>众所周知，我电脑目前只有16G，虽然Ubuntu本身吃不了多少内存，要同时开Dota2,VMware，Chrome之类的，gitlab&#x2F;jenkins对我来说已经太大了</p>
<p>要想在自己本地电脑上玩个git server，（虽然也没啥卵用，毕竟一般来说私有的本地git就管理了不需要server，公开的都丢github</p>
<p>就要找一个小内存占用的</p>
<h1 id="用"><a href="#用" class="headerlink" title="用"></a>用</h1><p>建立一个宿主上的存放<code>gogs</code>数据的文件夹，我这边数据类都丢在<code>/data</code>里，所以我这是<code>mkdir -p /data/gogs</code></p>
<p>然后启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name=gogs -p 10022:22 -p 10080:3000 -v /data/gogs:/data gogs/gogs</span><br></pre></td></tr></table></figure>

<p>然后网页开<code>localhost:10080</code>就好了</p>
<p>这里需要注意的是git设置用<code>[git@192.XXX.XXX.XXX:10022]:cromarmot/demo.git</code>的形式</p>
<h1 id="合"><a href="#合" class="headerlink" title="合"></a>合</h1><p>这样就可以dota2+vmware+chrome+nextcloud+gogs了，好耶，虽然也不知道有啥卵用</p>
<p><a href="https://github.com/gogs/gogs/tree/main/docker">https://github.com/gogs/gogs/tree/main/docker</a></p>
]]></content>
      <categories>
        <category>software</category>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>gogs</tag>
      </tags>
  </entry>
  <entry>
    <title>latex on debian</title>
    <url>/Blog/21-05-12-latex-on-linux/</url>
    <content><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><code>sudo apt install texlive-full</code></p>
<p>包还蛮大的，3GB下载，5GB展开</p>
<h1 id="Interface-zh-CN"><a href="#Interface-zh-CN" class="headerlink" title="Interface zh_CN"></a>Interface zh_CN</h1><p><code>Options-&gt;Configure TeXstudio-&gt;General-&gt;Language</code></p>
<h1 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello world"></a>Hello world</h1><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="meta">% !TEX program = xelatex</span></span><br><span class="line"><span class="comment">% !Mode:: &quot;TeX:UTF-8&quot;</span></span><br><span class="line"><span class="comment">%Save as UTF-8, run xelatex.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\documentclass</span>&#123;article&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\usepackage</span>&#123;xeCJK&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line"></span><br><span class="line">hello,你好</span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="Big-Demo"><a href="#Big-Demo" class="headerlink" title="Big Demo"></a>Big Demo</h1><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="meta">% !TEX program = xelatex</span></span><br><span class="line"><span class="comment">% !Mode:: &quot;TeX:UTF-8&quot;</span></span><br><span class="line"><span class="comment">% Save as UTF-8, run xelatex.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\documentclass</span>&#123;article&#125;</span><br><span class="line"><span class="keyword">\title</span>&#123;My first document&#125;</span><br><span class="line"><span class="keyword">\date</span>&#123;2013-09-01&#125;</span><br><span class="line"><span class="keyword">\author</span>&#123;John Doe <span class="keyword">\thanks</span>&#123;funded by the Overleaf team&#125;&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>&#123;xeCJK&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line">	<span class="keyword">\pagenumbering</span>&#123;gobble&#125;</span><br><span class="line">	<span class="keyword">\maketitle</span></span><br><span class="line">	<span class="keyword">\newpage</span></span><br><span class="line">	<span class="keyword">\pagenumbering</span>&#123;arabic&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">\begin</span>&#123;abstract&#125;</span><br><span class="line">		This is a simple paragraph at the beginning of the </span><br><span class="line">		document. A brief introduction about the main subject.</span><br><span class="line">	<span class="keyword">\end</span>&#123;abstract&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\tableofcontents</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;Introduction&#125;</span><br><span class="line"></span><br><span class="line">This is the first section.</span><br><span class="line"></span><br><span class="line">Lorem  ipsum  dolor  sit  amet,  consectetuer  adipiscing  </span><br><span class="line">elit.   Etiam  lobortisfacilisis sem.  Nullam nec mi et </span><br><span class="line">neque pharetra sollicitudin.  Praesent imperdietmi nec ante. </span><br><span class="line">Donec ullamcorper, felis non sodales...</span><br><span class="line"></span><br><span class="line"><span class="keyword">\subsection</span>&#123;First Subsection&#125;</span><br><span class="line">Praesent imperdietmi nec ante. Donec ullamcorper, felis non sodales...</span><br><span class="line"></span><br><span class="line"><span class="keyword">\subsection</span>&#123;Second Subsection&#125;</span><br><span class="line">Praesent imperdietmi nec ante. Donec ullamcorper, felis non sodales...</span><br><span class="line"></span><br><span class="line"><span class="keyword">\subsubsection</span>&#123;subsubsection&#125;</span><br><span class="line">subsubsection</span><br><span class="line"></span><br><span class="line"><span class="keyword">\paragraph</span>&#123;paragraph&#125;</span><br><span class="line">paragraph</span><br><span class="line"></span><br><span class="line"><span class="keyword">\subparagraph</span>&#123;subparagraph&#125;</span><br><span class="line">subparagraph</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;Second Section&#125;</span><br><span class="line"></span><br><span class="line">Lorem ipsum dolor sit amet, consectetuer adipiscing elit.  </span><br><span class="line">Etiam lobortis facilisissem.  Nullam nec mi et neque pharetra </span><br><span class="line">sollicitudin.  Praesent imperdiet mi necante...</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>*&#123;Unnumbered Section&#125;</span><br><span class="line"><span class="keyword">\addcontentsline</span>&#123;toc&#125;&#123;section&#125;&#123;Unnumbered Section&#125;</span><br><span class="line"></span><br><span class="line">Lorem ipsum dolor sit amet, consectetuer adipiscing elit.  </span><br><span class="line">Etiam lobortis facilisissem.  Nullam nec mi et neque pharetra </span><br><span class="line">sollicitudin.  Praesent imperdiet mi necante...</span><br><span class="line"></span><br><span class="line">hello,你好 <span class="keyword">\LaTeX</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">% This line here is a comment. It will not be printed in the document.</span></span><br><span class="line"></span><br><span class="line">Some of the <span class="keyword">\textbf</span>&#123;greatest&#125;</span><br><span class="line">discoveries in <span class="keyword">\underline</span>&#123;science&#125; </span><br><span class="line">were made by <span class="keyword">\textbf</span>&#123;<span class="keyword">\textit</span>&#123;accident&#125;&#125;.</span><br><span class="line"></span><br><span class="line"><span class="comment">% Unordered lists</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;itemize&#125;</span><br><span class="line">	<span class="keyword">\item</span> The individual entries are indicated with a black dot, a so-called bullet.</span><br><span class="line">	<span class="keyword">\item</span> The text in the entries may be of any length.</span><br><span class="line"><span class="keyword">\end</span>&#123;itemize&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">%Ordered lists</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;enumerate&#125;</span><br><span class="line">	<span class="keyword">\item</span> This is the first entry in our list</span><br><span class="line">	<span class="keyword">\item</span> The list numbers increase with each entry we add</span><br><span class="line"><span class="keyword">\end</span>&#123;enumerate&#125;</span><br><span class="line"></span><br><span class="line">In physics, the mass-energy equivalence is stated </span><br><span class="line">by the equation <span class="built_in">$</span>E=mc<span class="built_in">^</span>2<span class="built_in">$</span>, discovered in 1905 by Albert Einstein.</span><br><span class="line"></span><br><span class="line">The mass-energy equivalence is described by the famous equation</span><br><span class="line"><span class="keyword">\[</span> E=mc<span class="built_in">^</span>2 <span class="keyword">\]</span></span><br><span class="line">discovered in 1905 by Albert Einstein. </span><br><span class="line">In natural units (<span class="built_in">$</span>c = 1<span class="built_in">$</span>), the formula expresses the identity</span><br><span class="line"><span class="keyword">\begin</span>&#123;equation&#125;</span><br><span class="line">	E=m</span><br><span class="line"><span class="keyword">\end</span>&#123;equation&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Subscripts in math mode are written as <span class="built_in">$</span>a<span class="built_in">_</span>b<span class="built_in">$</span> and superscripts are written as <span class="built_in">$</span>a<span class="built_in">^</span>b<span class="built_in">$</span>. These can be combined an nested to write expressions such as</span><br><span class="line"></span><br><span class="line"><span class="keyword">\[</span> T<span class="built_in">^</span>&#123;i<span class="built_in">_</span>1 i<span class="built_in">_</span>2 <span class="keyword">\dots</span> i<span class="built_in">_</span>p&#125;<span class="built_in">_</span>&#123;j<span class="built_in">_</span>1 j<span class="built_in">_</span>2 <span class="keyword">\dots</span> j<span class="built_in">_</span>q&#125; = T(x<span class="built_in">^</span>&#123;i<span class="built_in">_</span>1&#125;,<span class="keyword">\dots</span>,x<span class="built_in">^</span>&#123;i<span class="built_in">_</span>p&#125;,e<span class="built_in">_</span>&#123;j<span class="built_in">_</span>1&#125;,<span class="keyword">\dots</span>,e<span class="built_in">_</span>&#123;j<span class="built_in">_</span>q&#125;) <span class="keyword">\]</span></span><br><span class="line"></span><br><span class="line">We write integrals using <span class="built_in">$</span><span class="keyword">\int</span><span class="built_in">$</span> and fractions using <span class="built_in">$</span><span class="keyword">\frac</span>&#123;a&#125;&#123;b&#125;<span class="built_in">$</span>. Limits are placed on integrals using superscripts and subscripts:</span><br><span class="line"></span><br><span class="line"><span class="keyword">\[</span> <span class="keyword">\int</span><span class="built_in">_</span>0<span class="built_in">^</span>1 <span class="keyword">\frac</span>&#123;dx&#125;&#123;e<span class="built_in">^</span>x&#125; =  <span class="keyword">\frac</span>&#123;e-1&#125;&#123;e&#125; <span class="keyword">\]</span></span><br><span class="line"></span><br><span class="line">Lower case Greek letters are written as <span class="built_in">$</span><span class="keyword">\omega</span><span class="built_in">$</span> <span class="built_in">$</span><span class="keyword">\delta</span><span class="built_in">$</span> etc. while upper case Greek letters are written as <span class="built_in">$</span><span class="keyword">\Omega</span><span class="built_in">$</span> <span class="built_in">$</span><span class="keyword">\Delta</span><span class="built_in">$</span>.</span><br><span class="line"></span><br><span class="line">Mathematical operators are prefixed with a backslash as <span class="built_in">$</span><span class="keyword">\sin</span>(<span class="keyword">\beta</span>)<span class="built_in">$</span>, <span class="built_in">$</span><span class="keyword">\cos</span>(<span class="keyword">\alpha</span>)<span class="built_in">$</span>, <span class="built_in">$</span><span class="keyword">\log</span>(x)<span class="built_in">$</span> etc.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;center&#125;</span><br><span class="line">	<span class="keyword">\begin</span>&#123;tabular&#125;&#123; c c c &#125;</span><br><span class="line">		cell1 <span class="built_in">&amp;</span> cell2 <span class="built_in">&amp;</span> cell3 <span class="keyword">\\</span> </span><br><span class="line">		cell4 <span class="built_in">&amp;</span> cell5 <span class="built_in">&amp;</span> cell6 <span class="keyword">\\</span>  </span><br><span class="line">		cell7 <span class="built_in">&amp;</span> cell8 <span class="built_in">&amp;</span> cell9    </span><br><span class="line">	<span class="keyword">\end</span>&#123;tabular&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;center&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;center&#125;</span><br><span class="line">	<span class="keyword">\begin</span>&#123;tabular&#125;&#123; |c|c|c| &#125; </span><br><span class="line">		<span class="keyword">\hline</span></span><br><span class="line">		cell1 <span class="built_in">&amp;</span> cell2 <span class="built_in">&amp;</span> cell3 <span class="keyword">\\</span> </span><br><span class="line">		cell4 <span class="built_in">&amp;</span> cell5 <span class="built_in">&amp;</span> cell6 <span class="keyword">\\</span> </span><br><span class="line">		cell7 <span class="built_in">&amp;</span> cell8 <span class="built_in">&amp;</span> cell9 <span class="keyword">\\</span> </span><br><span class="line">		<span class="keyword">\hline</span></span><br><span class="line">	<span class="keyword">\end</span>&#123;tabular&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;center&#125;</span><br><span class="line"></span><br><span class="line">Table <span class="keyword">\ref</span>&#123;table:data&#125; is an example of referenced <span class="keyword">\LaTeX</span>&#123;&#125; elements.</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;table&#125;[h!]</span><br><span class="line">	<span class="keyword">\centering</span></span><br><span class="line">	<span class="keyword">\begin</span>&#123;tabular&#125;&#123;||c c c c||&#125; </span><br><span class="line">		<span class="keyword">\hline</span></span><br><span class="line">		Col1 <span class="built_in">&amp;</span> Col2 <span class="built_in">&amp;</span> Col2 <span class="built_in">&amp;</span> Col3 <span class="keyword">\\</span> [0.5ex]</span><br><span class="line">		<span class="keyword">\hline</span><span class="keyword">\hline</span></span><br><span class="line">		1 <span class="built_in">&amp;</span> 6 <span class="built_in">&amp;</span> 87837 <span class="built_in">&amp;</span> 787 <span class="keyword">\\</span> </span><br><span class="line">		2 <span class="built_in">&amp;</span> 7 <span class="built_in">&amp;</span> 78 <span class="built_in">&amp;</span> 5415 <span class="keyword">\\</span></span><br><span class="line">		3 <span class="built_in">&amp;</span> 545 <span class="built_in">&amp;</span> 778 <span class="built_in">&amp;</span> 7507 <span class="keyword">\\</span></span><br><span class="line">		4 <span class="built_in">&amp;</span> 545 <span class="built_in">&amp;</span> 18744 <span class="built_in">&amp;</span> 7560 <span class="keyword">\\</span></span><br><span class="line">		5 <span class="built_in">&amp;</span> 88 <span class="built_in">&amp;</span> 788 <span class="built_in">&amp;</span> 6344 <span class="keyword">\\</span> [1ex] </span><br><span class="line">		<span class="keyword">\hline</span></span><br><span class="line">	<span class="keyword">\end</span>&#123;tabular&#125;</span><br><span class="line">	<span class="keyword">\caption</span>&#123;Table to test captions and labels&#125;</span><br><span class="line">	<span class="keyword">\label</span>&#123;table:data&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;table&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure>

<h1 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h1><p><a href="https://hopf.math.purdue.edu/doc/html/suffixes.html">https://hopf.math.purdue.edu/doc/html/suffixes.html</a></p>
<p><code>.log</code> … denotes a log file for any flavour of TeX</p>
<p><code>.aux</code> … denotes an auxiliary file generated by running latex (or etex) on a source file. It typically contains information latex needs on a second pass to construct \refs and \cites and information that bibtex needs to construct a .bbl file. See BibTeX.</p>
<p><code>.toc</code> … denotes an table of contents file generated by latex when the source file contains the line <code>\tableofcontents</code></p>
<p><code>.bib</code> … denotes a BibTeX source file such files contain the database from which the <code>.bbl</code> bibliography file is generated. See BibTeX.</p>
<p><code>.bst</code> … denotes a BibTeX style file the style in which bibtex presents the <code>.bbl</code> bibliography file.</p>
<p><code>.cls</code> … denotes a LaTeX 2e class file</p>
<p><code>.sty</code> … denotes a LaTeX (or AmS-TeX) package&#x2F;style file LaTeX 2.09 made no distinction between classes and packages … all such files were style files - hence the suffix. LaTeX 2e has retained the suffix for what it now terms as packages</p>
<h1 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h1><ul>
<li>preamble<ul>
<li>documentclass 引入class文件，常见的article，和自定义</li>
<li>usepackage 引入 一些额外的功能函数<ul>
<li>例如 such as amsmath for additional math formatting</li>
</ul>
</li>
</ul>
</li>
<li>main document 以 <code>\begin&#123;document&#125; \end&#123;document&#125;</code>包裹<ul>
<li>section&#x2F;subsection&#x2F;subsubsection&#x2F;paragraph&#x2F;subparagraph&#x2F;author&#x2F;title&#x2F;date&#x2F;maketitle&#x2F;tableofcontents&#x2F;newpage 完成层级相关的操作</li>
<li>图片 $\begin{figure} \end{figure}$ 包裹, includegraphics&#x2F;caption</li>
<li>section&#x2F;label&#x2F;ref  段落引用</li>
<li>usepackage{biblatex}  &#x2F; bibliography{FILENAME}, 和 bib文件来 引别的书目内容, printbibliography</li>
<li>通过csv文件生产table&#x2F;plot图 等 <a href="https://latex-tutorial.com/tutorials/pgfplotstable/">https://latex-tutorial.com/tutorials/pgfplotstable/</a></li>
<li>tikz 绘图 <a href="https://latex-tutorial.com/tutorials/tikz/">https://latex-tutorial.com/tutorials/tikz/</a></li>
</ul>
</li>
</ul>
<h1 id="more-tutorial"><a href="#more-tutorial" class="headerlink" title="more tutorial"></a>more tutorial</h1><p><a href="https://www.overleaf.com/learn/latex/Learn_LaTeX_in_30_minutes">https://www.overleaf.com/learn/latex/Learn_LaTeX_in_30_minutes</a></p>
<p><a href="https://latex-tutorial.com/wp-content/uploads/2021/03/latex-quick-start-tutorial.pdf">https://latex-tutorial.com/wp-content/uploads/2021/03/latex-quick-start-tutorial.pdf</a></p>
<p><a href="https://latex-tutorial.com/quick-start/">https://latex-tutorial.com/quick-start/</a></p>
]]></content>
      <categories>
        <category>latex</category>
      </categories>
      <tags>
        <tag>latex</tag>
      </tags>
  </entry>
  <entry>
    <title>react 计时器与 useRef, useState</title>
    <url>/Blog/21-05-25-react-timer/</url>
    <content><![CDATA[<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><p>一般来说tutorial, 是从有什么讲什么的开始</p>
<p>这里我们假设一个已经能写js的,但只是搜索react的用法,然后就开始用,可能遇到的问题(坑?)</p>
<span id="more"></span>

<h1 id="问题1-useState-跟新导致局部变量无法获取新值"><a href="#问题1-useState-跟新导致局部变量无法获取新值" class="headerlink" title="问题1 useState 跟新导致局部变量无法获取新值"></a>问题1 useState 跟新导致局部变量无法获取新值</h1><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [count,setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">let</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">StartTimer</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    x = x + <span class="number">1</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x)</span><br><span class="line">    <span class="title class_">StartTimer</span>();</span><br><span class="line">    <span class="title function_">setCount</span>(x); <span class="comment">// &lt;----------------</span></span><br><span class="line">  &#125;,<span class="number">1000</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">PrintX</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;X:&#x27;</span>, x); <span class="comment">// &lt;------------</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">View</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Text</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">onPress</span>=<span class="string">&#123;()</span> =&gt;</span> StartTimer()&#125;</span></span><br><span class="line"><span class="language-xml">      title=&quot;Start&quot;</span></span><br><span class="line"><span class="language-xml">    /&gt;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">onPress</span>=<span class="string">&#123;()</span> =&gt;</span> PrintX()&#125;</span></span><br><span class="line"><span class="language-xml">      title=&quot;Log&quot;</span></span><br><span class="line"><span class="language-xml">    /&gt;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>我们, 把setCount注释和取消注释,会影响13行的输出</p>
<p>这以我历史的代码经验就很离谱,体验上就像 你写了100行代码,然后在100行以后增加了一行,影响了前100行</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p><a href="https://github.com/facebook/react/issues/14010">https://github.com/facebook/react/issues/14010</a></p>
<p>大概意思就是 react的闭包(因为如果是js闭包直接支持的话,所见即所得,也不会有这个问题)处理后, 前面timeout里的x指向的是老的,而PrintX里的指向的是新的</p>
<p>解决方法就是上面issue提到的, 你需要使用react 提供的工具,让它在更新时,能更新到新的</p>
<h1 id="问题2-设置值再取值"><a href="#问题2-设置值再取值" class="headerlink" title="问题2 设置值再取值"></a>问题2 设置值再取值</h1><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [count,setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_">setCount</span>(<span class="number">233</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count)</span><br></pre></td></tr></table></figure>

<p>输出是0</p>
<p><code>useState</code>导出的set函数是非同步的</p>
<p>看了一堆 count上加<code>useRef</code>的方法</p>
<p>感觉从分层上<code>useState</code>看起来 更适合在需要显示层时再去用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> count = <span class="title function_">useRef</span>(<span class="number">0</span>);</span><br><span class="line">count.<span class="property">current</span> = <span class="number">233</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">233</span>);</span><br></pre></td></tr></table></figure>

<h1 id="计时器代码"><a href="#计时器代码" class="headerlink" title="计时器代码"></a>计时器代码</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">let</span> timer = useRef&lt;<span class="title class_">NodeJS</span>.<span class="property">Timeout</span>&gt;(<span class="literal">null</span>);</span><br><span class="line"><span class="keyword">let</span> stRef = <span class="title function_">useRef</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">StartTimer</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> cur = <span class="title class_">Number</span>(<span class="keyword">new</span> <span class="title class_">Date</span>())</span><br><span class="line">    <span class="title function_">setCount</span>(cur - stRef.<span class="property">current</span>)</span><br><span class="line">    timer.<span class="property">current</span> = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title class_">StartTimer</span>();</span><br><span class="line">    &#125;, <span class="number">100</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">StartTimerClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setCount</span>(<span class="number">0</span>)</span><br><span class="line">    stRef.<span class="property">current</span> = <span class="title class_">Number</span>(<span class="keyword">new</span> <span class="title class_">Date</span>())</span><br><span class="line">    <span class="keyword">if</span> (timer.<span class="property">current</span>) &#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer.<span class="property">current</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">StartTimer</span>()</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">PrintX</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(timer.<span class="property">current</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.container&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Text</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">onPress</span>=<span class="string">&#123;()</span> =&gt;</span> StartTimerClick()&#125;</span></span><br><span class="line"><span class="language-xml">            title=&quot;Start&quot;</span></span><br><span class="line"><span class="language-xml">        /&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">onPress</span>=<span class="string">&#123;()</span> =&gt;</span> PrintX()&#125;</span></span><br><span class="line"><span class="language-xml">            title=&quot;End&quot;</span></span><br><span class="line"><span class="language-xml">        /&gt;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>


<h1 id="Vue2"><a href="#Vue2" class="headerlink" title="Vue2"></a>Vue2</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;&#123; count &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;StartTimerClick&quot;</span>&gt;</span>start<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;printX&quot;</span>&gt;</span>printX<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">count</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">timer</span>: <span class="literal">null</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">st</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">StartTimer</span>() &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> cur = <span class="title class_">Number</span>(<span class="keyword">new</span> <span class="title class_">Date</span>());</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">count</span> = cur - <span class="variable language_">this</span>.<span class="property">st</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="title class_">StartTimer</span>();</span></span><br><span class="line"><span class="language-javascript">      &#125;, <span class="number">100</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">StartTimerClick</span>() &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">count</span> = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">st</span> = <span class="title class_">Number</span>(<span class="keyword">new</span> <span class="title class_">Date</span>());</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">timer</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">clearTimeout</span>(<span class="variable language_">this</span>.<span class="property">timer</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="title class_">StartTimer</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">printX</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">count</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Ng"><a href="#Ng" class="headerlink" title="Ng"></a>Ng</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">&quot;StartTimerClick()&quot;</span>&gt;</span>start<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">&quot;printX()&quot;</span>&gt;</span>printX<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line">@<span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-timer-demo&#x27;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./timer-demo.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./timer-demo.component.scss&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">TimerDemoComponent</span> &#123;</span><br><span class="line">  count = <span class="number">0</span>;</span><br><span class="line">  private timer = <span class="literal">null</span>;</span><br><span class="line">  private st = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title class_">StartTimer</span>(): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> cur = <span class="title class_">Number</span>(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">count</span> = cur - <span class="variable language_">this</span>.<span class="property">st</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title class_">StartTimer</span>();</span><br><span class="line">    &#125;, <span class="number">100</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title class_">StartTimerClick</span>(): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">count</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">st</span> = <span class="title class_">Number</span>(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">timer</span>) &#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(<span class="variable language_">this</span>.<span class="property">timer</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title class_">StartTimer</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">printX</span>(): <span class="keyword">void</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">count</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上,据说在 Class component 都不会出现,只有函数组件会,(当然Ng和vue都没这问题, 状态同步变更</p>
<p>其实这里就是,useState都去显示层需要的值,(所以其实不应该从显示层拿值做运算?),而非显示层又需要更新保持的,用useRef</p>
<p>当然因为不熟练,可能有更简单的写法, 比如用useEffect之类</p>
<p>或者应该直接rxjs的interval或者, 封装一个timer类,来持有实例和监听事件</p>
<h1 id="Ng-rxjs"><a href="#Ng-rxjs" class="headerlink" title="Ng(rxjs)"></a>Ng(rxjs)</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;timer&#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"></span><br><span class="line">@<span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-timer-demo&#x27;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./timer-demo.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./timer-demo.component.scss&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">TimerDemoComponent</span> &#123;</span><br><span class="line">  count = <span class="number">0</span>;</span><br><span class="line">  private sub$ = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title class_">StartTimerClick</span>(): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">sub$</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">sub$</span>.<span class="title function_">unsubscribe</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sub$</span> = <span class="title function_">timer</span>(<span class="number">0</span>, <span class="number">100</span>)</span><br><span class="line">      .<span class="title function_">subscribe</span>(<span class="function"><span class="params">val</span> =&gt;</span> <span class="variable language_">this</span>.<span class="property">count</span> = val * <span class="number">100</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">printX</span>(): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">count</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>frontend</category>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>react js 笔记</title>
    <url>/Blog/21-05-31-reactjs/</url>
    <content><![CDATA[<p>一点总结提炼</p>
<h1 id="Thinking-in-react"><a href="#Thinking-in-react" class="headerlink" title="Thinking in react"></a>Thinking in react</h1><p><a href="https://reactjs.org/docs/thinking-in-react.html">https://reactjs.org/docs/thinking-in-react.html</a></p>
<ol>
<li>从UI和后台获得设计稿和接口以及接口返回</li>
<li>单一功能原则 组件层级划分</li>
<li>编写静态html(无用户交互,官方上面没有,仅结构,无样式?)</li>
<li>转换成静态react(无用户交互,无state,仅展示,数据流均为父向子)</li>
<li>最小(且完整)的state状态,其它的内容全部由这些state产生, (例如保存数组,而不需要专门保存数组长度的变量), 主要完成的内容是 <strong>单向数据流与state</strong>,注意:父组件传递的不应该是state,随时间推移的不应该是state, 能由其它state计算得到的不应该存储</li>
<li>反向数据流</li>
</ol>
<p>有一点不同的是, 真实开发中, 可能不会一个业务+组件同时提供. 思考顺序会变为,开发组件,再开发业务,而上面的思路其实也是有效的. 而对组件开发的思路比较像是, 先考虑出入参数,就像思考函数一样,考虑它的复用性以及编码迭代改版的设计性</p>
<h1 id="props-vs-state"><a href="#props-vs-state" class="headerlink" title="props vs state"></a>props vs state</h1><p><a href="https://reactjs.org/docs/faq-state.html#what-is-the-difference-between-state-and-props">https://reactjs.org/docs/faq-state.html#what-is-the-difference-between-state-and-props</a></p>
<p><a href="https://github.com/uberVU/react-guide/blob/master/props-vs-state.md">https://github.com/uberVU/react-guide/blob/master/props-vs-state.md</a></p>
<p><a href="https://lucybain.com/blog/2016/react-state-vs-pros/">https://lucybain.com/blog/2016/react-state-vs-pros/</a></p>
<p>props: 外部传递给组件, 应该看成只读的, 传递回调函数</p>
<p>state: 组件内部自己管理, 初始状态主要由客户事件变化, setState异步(一般传递函数, 这是实现细节,注意官方文档说不要依赖这种实现,相关问题可以看最近发生的rust的二分搜索引发的问题(与react无关))</p>
<p>相同点: 纯js对象, 变化触发更新, 相同的(props,state)输入输出应该是恒定的(for就有问题?)</p>
<p>?? state不可由子组件修改, props, state不应太多?</p>
<hr>
<p>就目前项目实践的感受,对于业务开发, 基本只有业务层关联的(顶层)需要state,而基础组件内都不持有state,主要是事件触发和props渲染.</p>
<h1 id="setState-非同步的一些举例"><a href="#setState-非同步的一些举例" class="headerlink" title="setState 非同步的一些举例"></a>setState 非同步的一些举例</h1><p><a href="https://github.com/facebook/react/issues/11527#issuecomment-360199710">https://github.com/facebook/react/issues/11527#issuecomment-360199710</a></p>
<p>即使 state同步,props是不同步的, react的props 是只读不会变的,和vue是对象引用不同</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">state触发</span><br><span class="line">props 触发</span><br><span class="line">state触发</span><br><span class="line">props 触发 // 这种情况 可能是老的props,而真实的props或许已经更新了</span><br><span class="line">state触发</span><br></pre></td></tr></table></figure>

<p>为了说明不是理论上的,然后还翻出了多个历史issue</p>
<h1 id="Flux-单向数据流"><a href="#Flux-单向数据流" class="headerlink" title="Flux 单向数据流"></a>Flux 单向数据流</h1><p><a href="https://facebook.github.io/flux/docs/in-depth-overview">https://facebook.github.io/flux/docs/in-depth-overview</a></p>
<p><a href="https://www.youtube.com/watch?v=nYkdrAPrdcw&amp;list=PLb0IAmt7-GS188xDYE-u1ShQmFFGbrk0v&amp;t=621s&amp;ab_channel=FacebookDevelopers">https://www.youtube.com/watch?v=nYkdrAPrdcw&amp;list=PLb0IAmt7-GS188xDYE-u1ShQmFFGbrk0v&amp;t=621s&amp;ab_channel=FacebookDevelopers</a></p>
<p><a href="https://facebook.github.io/flux/docs/overview">https://facebook.github.io/flux/docs/overview</a></p>
<p><a href="https://github.com/facebook/flux/tree/master/examples">https://github.com/facebook/flux/tree/master/examples</a></p>
<p><a href="https://code-cartoons.com/a-cartoon-guide-to-flux-6157355ab207">https://code-cartoons.com/a-cartoon-guide-to-flux-6157355ab207</a></p>
<p>action -&gt; dispatcher -&gt; store -&gt; view -&gt; action</p>
<p>action: type + payload</p>
<p>dispatcher(同步), 可以waitFor 等待其它dispatcher</p>
<p>store: 数据储存 更新view</p>
<p>controller view &amp; view: store变化被通知,让view把数据渲染</p>
<blockquote>
<p>执行流程</p>
</blockquote>
<p>初始state数据</p>
<p>state去dispatcher “订阅”?</p>
<p>controller view 从state获取数据,给view渲染</p>
<p>controller view 去store “订阅”?</p>
<blockquote>
<p>用户事件</p>
</blockquote>
<p>view 通知 action, 或其它Action</p>
<p>action 通知dispatcher</p>
<p>dispatcher 给对应的store</p>
<p>store内部处理,如果需要更新state,更新完以后,通知controller view , 根据 type 分发</p>
<p>controller view获取新state并通知view渲染</p>
<p>从根本上讲,仅从上述的角度来看, 根本在规范了流程和代码位置, 对于新进入的开发来说, 能直接通过代码,知道各个层级的内容. 本质上解决的更多是一个软件工程的质量管理工程经验得到解决方案, 甚至可以脱离redux到不同的框架内使用. 相对于MVC是 给MVC内部调用关系错综复杂的解决方案</p>
<p>从另一个角度讲, 只能通过触发Action来修改store里的内容</p>
<p>单元测试更容易!</p>
<p>从其它技术来讲,现在有rxjs, 直接描述关系式的开发,和vue这样的自己实现的reactive的关系式描述开发, 当然也有 rxjs + flux 的方案</p>
<p>不过facebook说他们的消息显示1 的更新问题,现在还有不少应用持续有这种bug :-)</p>
<p>然后看youtube视频上小姐姐的展示,实际上再回想开发, 这里的数据流的每一条线,实际上是多条线</p>
<h1 id="redux"><a href="#redux" class="headerlink" title="redux"></a>redux</h1><p><code>npx create-react-app redux-ts-demo --template redux-typescript</code></p>
<blockquote>
<p>redux有可以与react无关单独使用的<code>redux core</code>, 也就是一个具体的flux实现?</p>
</blockquote>
<p>官方的 <a href="https://redux.js.org/introduction/getting-started#basic-example">Basic Example</a> 里能看到</p>
<p>用户实现reducer, 提供 createStore(reducer), subscribe(fn), getState(), dispatch()</p>
<blockquote>
<p>有<code>@reduxjs/toolkit</code></p>
</blockquote>
<p>提供 createSlice(提供导出 acitions,reducer), configureStore(替代上面的 createStore, reducer可以单个或者store的map)</p>
<p>其它getState,subscribe,dispatch上面有的还是有</p>
<p>同样要用户实现reducer,不过写法可以像是操作state(之所以说像是,是因为它并不是真的更改,而是toolkit内Immer去做的变化检测一类,也要注意因为只有这里用Immer,所以只能在createSlice或createReducer里面这样写)</p>
<p>Redux Slices: A “slice” is a collection of Redux reducer logic and actions for a single feature in your app</p>
<p>这个角度是对root state的划分,</p>
<p>同时简化了reducer和actions的写法,并且在ts加持下能不再靠字符串(或额外自己写控制)保持一致</p>
<p>reducer规则:</p>
<ol>
<li>计算结果应该只由old state和 action的传入相关(也就是不依赖 其它变量), 纯函数能让它”可以预测”易测试,更加工程友好</li>
<li>不修改现有state,而是产生新的修改后的state</li>
<li>不应该有异步或其它副作用</li>
</ol>
<p>time-travel debugging 也是一个特点</p>
<blockquote>
<p>thunks 异步, 直接使用是<code>redux-thunk</code>,现有的toolkit里<code>configureStore</code>能简化</p>
</blockquote>
<p>外部是包裹,返回thunk函数, 中间是异步</p>
<p>内部是调用dispatch 和 getState</p>
<p>官方demo( async+await看起来就很自然舒服了, 对于外部调用thunk的包裹, 也是直接和同步调用看上去类似,fetchUserById()</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// the outside &quot;thunk creator&quot; function</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fetchUserById</span> = userId =&gt; &#123;</span><br><span class="line">  <span class="comment">// the inside &quot;thunk function&quot;</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">async</span> (dispatch, getState) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// make an async call in the thunk</span></span><br><span class="line">      <span class="keyword">const</span> user = <span class="keyword">await</span> userAPI.<span class="title function_">fetchById</span>(userId)</span><br><span class="line">      <span class="comment">// dispatch an action when we get the response back</span></span><br><span class="line">      <span class="title function_">dispatch</span>(<span class="title function_">userLoaded</span>(user))</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="comment">// If something went wrong, handle it here</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>import &#123; useSelector, useDispatch &#125; from &#39;react-redux&#39; </code> 可以 解决把redux中的state用在react里和调用redux里的dispatch ( 作为对比默认是useState</p>
<p>官方说, 还是通过使用react提供的useState和useEffect,来构建自己的逻辑</p>
<p>在ts demo生成的模板里是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export const useAppDispatch = () =&gt; useDispatch&lt;AppDispatch&gt;();</span><br><span class="line">export const useAppSelector: TypedUseSelectorHook&lt;RootState&gt; = useSelector;</span><br></pre></td></tr></table></figure>

<p>官方<code>export const selectCount = (state: RootState) =&gt; state.counter.value;</code></p>
<p>并且注释说,也可以不定义直接在使用的地方写<code>useSelector((state) =&gt; state.counter.value)</code></p>
<p>你也可以不完全是暴露值,也可以是函数处理映射后<code>const countPlusTwo = useSelector(state =&gt; state.counter.value + 2)</code></p>
<p>The answer is NO. Global state that is needed across the app should go in the Redux store. State that’s only needed in one place should be kept in component state.</p>
<p>提供了+1,+n,条件+2,异步+的四种demo</p>
<blockquote>
<p>总结</p>
</blockquote>
<p>redux基本是一个flux的实现</p>
<p><code>@reactjs/toolkit</code> 简化了redux中 actions,reducer 编写和使用</p>
<p>thunk: 异步的 </p>
<h1 id="对比Vue"><a href="#对比Vue" class="headerlink" title="对比Vue"></a>对比Vue</h1><p>TODO 三个框架的工程解决方案和实际产出对比</p>
<ol>
<li>props, Vue也提供,但是没有强制限死为只读,导致接手的不少前端经理的代码还有修改props的行为, 而即使不是因为代码也会因为用户操作,没有对应的vm更改时,展示的页面不是”vm渲染的”, 最常见的就是input只传value</li>
<li>Vue凡是要渲染的 都是data&#x2F;computed&#x2F;props, 但对于这种完全, 其实没有静态的划分,虽然可以通过const配置 + js语法引入到data里</li>
<li>回调和emit的区别就是需要忽略时的体验了</li>
<li>flux&#x2F;redux vs vuex, vuex(以我的视角vuex一定上是为了仿照其它框架的解决产物,其设计理念一定程度上和vue本身是相互违背的, vuex完成了简单共享js完成不了的动态触发(其实核心是调用了Vue.data), 提供了 mutation&#x2F;actions 看上去划分了 同步异步, 也可以devtools调试, 也可以有插件支持,但就我看目前的开发来说,很多很多只是使用了 数据共享这一点, 而vue的简单设计理念,在我看来更适合直接等号而不是修改需要调用函数,+声明化的使用,剩下的就是module和这里无关, 所以vuex本质是一个vue reactive + flux 的类似实现)</li>
</ol>
<h1 id="延伸阅读"><a href="#延伸阅读" class="headerlink" title="延伸阅读"></a>延伸阅读</h1><p><a href="https://github.com/type-challenges/type-challenges">ts</a></p>
<p><a href="https://immerjs.github.io/immer/">Immer</a></p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>迁移到win</title>
    <url>/Blog/21-07-05-migrate2win/</url>
    <content><![CDATA[<h1 id="apt"><a href="#apt" class="headerlink" title="apt"></a>apt</h1><p>怀念 Debian apt 的好, 在windows上腾讯软件管家成了我的“apt”</p>
<h1 id="以下是一些问题记录"><a href="#以下是一些问题记录" class="headerlink" title="以下是一些问题记录"></a>以下是一些问题记录</h1><h1 id="vscode"><a href="#vscode" class="headerlink" title="vscode"></a>vscode</h1><p>set <code>git bash</code> as default terminal</p>
<h1 id="windows-terminal"><a href="#windows-terminal" class="headerlink" title="windows terminal"></a>windows terminal</h1><p>windows terminal 双击点击鼠标选择 在单词和行选择切换,而非空格分割和行之间切换</p>
<p><a href="https://stackoverflow.com/questions/60441221/double-click-to-select-text-in-windows-terminal-selects-only-one-word">https://stackoverflow.com/questions/60441221/double-click-to-select-text-in-windows-terminal-selects-only-one-word</a></p>
<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><p><strong>更应该 不要 win和wsl共用磁盘</strong></p>
<p><a href="https://stackoverflow.com/questions/1580596/how-do-i-make-git-ignore-file-mode-chmod-changes">https://stackoverflow.com/questions/1580596/how-do-i-make-git-ignore-file-mode-chmod-changes</a></p>
<p><a href="https://stackoverflow.com/questions/50096060/how-to-switch-branch-when-filename-case-changes">https://stackoverflow.com/questions/50096060/how-to-switch-branch-when-filename-case-changes</a></p>
<p>git bash ssh-keygen (same as linux)</p>
<p>wsl2 里 默认编辑器</p>
<p><a href="https://stackoverflow.com/questions/2596805/how-do-i-make-git-use-the-editor-of-my-choice-for-commits">https://stackoverflow.com/questions/2596805/how-do-i-make-git-use-the-editor-of-my-choice-for-commits</a></p>
<p>中文乱码：log commit信息, diff 文件内容, 文件名</p>
<p><a href="https://stackoverflow.com/questions/22827239/how-to-make-git-properly-display-utf-8-encoded-pathnames-in-the-console-window">https://stackoverflow.com/questions/22827239/how-to-make-git-properly-display-utf-8-encoded-pathnames-in-the-console-window</a></p>
<p><a href="https://gist.github.com/xkyii/1079783/3e77453c05f6bcbce133fd0ba128686683f75bf8">https://gist.github.com/xkyii/1079783/3e77453c05f6bcbce133fd0ba128686683f75bf8</a></p>
<p>win10有个Beta版本的区域utf-8设置，开了以后很多软件都是乱码，包括微信小程序开发工具,哎，</p>
<h1 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h1><p>account sync</p>
<p>default browser( <a href="https://github.com/da2x/EdgeDeflector">https://github.com/da2x/EdgeDeflector</a>  )</p>
<h1 id="firefox"><a href="#firefox" class="headerlink" title="firefox"></a>firefox</h1><p>国内外登录地址一个有.cn 一个没有，所以不同地址相同邮箱账号不同, 选择firefox 官方 developer 版本+ win x64 版本+English版本</p>
<p><a href="https://www.mozilla.org/zh-CN/firefox/all/#product-desktop-developer">https://www.mozilla.org/zh-CN/firefox/all/#product-desktop-developer</a></p>
<h1 id="Python-被windows商店劫持"><a href="#Python-被windows商店劫持" class="headerlink" title="Python 被windows商店劫持"></a>Python 被windows商店劫持</h1><p><a href="https://stackoverflow.com/questions/58754860/cmd-opens-window-store-when-i-type-python">https://stackoverflow.com/questions/58754860/cmd-opens-window-store-when-i-type-python</a></p>
<span id="more"></span>

<h1 id="wsl2-777看得我有点头疼，不过官方建议一般来说不要共用文件夹"><a href="#wsl2-777看得我有点头疼，不过官方建议一般来说不要共用文件夹" class="headerlink" title="wsl2 (777看得我有点头疼，不过官方建议一般来说不要共用文件夹)"></a>wsl2 (777看得我有点头疼，不过官方建议一般来说不要共用文件夹)</h1><p><a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-win10#step-1---enable-the-windows-subsystem-for-linux">https://docs.microsoft.com/zh-cn/windows/wsl/install-win10#step-1---enable-the-windows-subsystem-for-linux</a></p>
<p>桌面方案xfce4+xrdp+windows远程桌面,xfce4相对轻量，也可以用gnome <a href="https://gist.github.com/Ta180m/e1471413f62e3ed94e72001d42e77e22">https://gist.github.com/Ta180m/e1471413f62e3ed94e72001d42e77e22</a></p>
<p><code>sudo update-alternatives --config x-session-manager</code> 默认桌面设置</p>
<p>开发方案wsl2内部文件夹 + vscode wsl插件</p>
<p>网络问题</p>
<p><code>New-NetFirewallRule -DisplayName &quot;WSL&quot; -Direction Inbound  -InterfaceAlias &quot;vEthernet (WSL)&quot;  -Action Allow</code></p>
<p><a href="https://github.com/microsoft/WSL/issues/5805#issuecomment-686807121">https://github.com/microsoft/WSL/issues/5805#issuecomment-686807121</a></p>
<p><a href="https://github.com/microsoft/WSL/issues/4585">https://github.com/microsoft/WSL/issues/4585</a></p>
<p>oh-my-zsh 字体</p>
<p><a href="https://blog.nillsf.com/index.php/2020/02/17/setting-up-wsl2-windows-terminal-and-oh-my-zsh/">https://blog.nillsf.com/index.php/2020/02/17/setting-up-wsl2-windows-terminal-and-oh-my-zsh/</a></p>
<p>vim (ctrl+shift+v粘贴)</p>
<p><a href="https://stackoverflow.com/questions/61824177/visual-block-mode-not-working-in-vim-with-c-v-on-wslwindows-10">https://stackoverflow.com/questions/61824177/visual-block-mode-not-working-in-vim-with-c-v-on-wslwindows-10</a></p>
<p><a href="https://docs.microsoft.com/zh-cn/windows/wsl/compare-versions">https://docs.microsoft.com/zh-cn/windows/wsl/compare-versions</a></p>
<p>当然需要一点网络基础知识，无脑的话，把server地址设为0.0.0.0</p>
<p><a href="https://github.com/Microsoft/WSL/issues/1032">https://github.com/Microsoft/WSL/issues/1032</a></p>
<h1 id="proxy"><a href="#proxy" class="headerlink" title="proxy"></a>proxy</h1><p><a href="https://github.com/Qv2ray/Qv2ray">https://github.com/Qv2ray/Qv2ray</a></p>
<p><a href="https://github.com/v2ray/v2ray-core">https://github.com/v2ray/v2ray-core</a></p>
<p>访问主机见上面微软的文档</p>
<p><a href="https://github.com/rofl0r/proxychains-ng">https://github.com/rofl0r/proxychains-ng</a></p>
<h1 id="ADB"><a href="#ADB" class="headerlink" title="ADB"></a>ADB</h1><p>idea + android + PATH 设置</p>
<h1 id="nvm-nodejs"><a href="#nvm-nodejs" class="headerlink" title="nvm(nodejs)"></a>nvm(nodejs)</h1><p><a href="https://docs.microsoft.com/en-us/windows/dev-environment/javascript/nodejs-on-windows">https://docs.microsoft.com/en-us/windows/dev-environment/javascript/nodejs-on-windows</a></p>
<h1 id="symlink"><a href="#symlink" class="headerlink" title="symlink"></a>symlink</h1><p><a href="https://docs.microsoft.com/zh-cn/windows/security/threat-protection/security-policy-settings/create-symbolic-links">https://docs.microsoft.com/zh-cn/windows/security/threat-protection/security-policy-settings/create-symbolic-links</a></p>
<p><a href="https://stackoverflow.com/questions/18641864/git-bash-shell-fails-to-create-symbolic-links">https://stackoverflow.com/questions/18641864/git-bash-shell-fails-to-create-symbolic-links</a></p>
<p><a href="https://github.community/t/git-bash-symbolic-links-on-windows/522/12">https://github.community/t/git-bash-symbolic-links-on-windows/522/12</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/106225935">https://zhuanlan.zhihu.com/p/106225935</a></p>
<p>有的人的win上直接能用，是专业版，我这个是家庭版，为了不要因为用工具改配置，我做成了根据系统决定是拷贝还是symlink</p>
<p><a href="https://nodejs.org/api/process.html#process_process_platform">https://nodejs.org/api/process.html#process_process_platform</a></p>
<h1 id="win10更新和指纹问题"><a href="#win10更新和指纹问题" class="headerlink" title="win10更新和指纹问题"></a>win10更新和指纹问题</h1><p><a href="https://answers.microsoft.com/zh-hans/windows/forum/all/%E6%9B%B4%E6%96%B0win10%E5%90%8E%E6%8C%87%E7%BA%B9/7fc55349-7234-4fd0-a3c1-04fcf20e2aaa">https://answers.microsoft.com/zh-hans/windows/forum/all/%E6%9B%B4%E6%96%B0win10%E5%90%8E%E6%8C%87%E7%BA%B9/7fc55349-7234-4fd0-a3c1-04fcf20e2aaa</a></p>
<h1 id="文件传输"><a href="#文件传输" class="headerlink" title="文件传输"></a>文件传输</h1><p>据说有</p>
<p>scp</p>
<p>ftp(中文 字符集问题)</p>
<p>windows samba</p>
<p>usb、移动硬盘拷贝</p>
<p>网络</p>
<p>nextcloud之类</p>
<p>三方云</p>
<p>注意防火墙等设置</p>
<p>我东西蛮多,蛮大的比如wechat，然后samba等搭了半天没搞好，scp又慢，还是主要移动硬盘拷贝</p>
<p>filezilla 左连wsl文件夹，右连Ubuntu ssh，可以不受文件mode影响的拷贝文件</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>目前看起来最理想的架起来大概</p>
<p><img data-src="/Blog/Blog/images/migrate2win.png" alt="migrate2win"></p>
<ol>
<li>因为777等各种原因，开发丢在wsl2里面的文件夹里</li>
<li><code>/etc/resolv.conf</code> 每次是变化的，虽然一行命令能获取，但是<code>/etc/proxychains.conf</code> 里的配置不能配<code>$</code>还有点问题</li>
<li>host能访问wsl2里暴露的端口，虽然好像端口冲突的报错有点不够理想，不过可以简单的靠改端口解决</li>
</ol>
<p>综上所述，要轻量，不如 VMware player + Xubuntu ( 但 有一说一启动比vmware快还是很香的</p>
]]></content>
      <categories>
        <category>software</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker Harbor on Ubuntu 20 on WSL2</title>
    <url>/Blog/21-07-06-dockerharbor/</url>
    <content><![CDATA[<h1 id="Docker-Harbor"><a href="#Docker-Harbor" class="headerlink" title="Docker Harbor"></a>Docker Harbor</h1><p>简单说，可以搭本地&#x2F;局域网 docker仓库</p>
<h1 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h1><p>Ubuntu 或 其它linux 或 Ubuntu on WSL2</p>
<h1 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h1><p>安装docker:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install docker.io docker-compose</span><br></pre></td></tr></table></figure>

<h1 id="下载包"><a href="#下载包" class="headerlink" title="下载包"></a>下载包</h1><p>经过历史经验教训 用WSL2的不要把包放在win的目录下，要放在wsl2 <strong>私有</strong>的目录下</p>
<p><a href="https://github.com/goharbor/harbor/releases">https://github.com/goharbor/harbor/releases</a></p>
<p>解压</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar xvzf harbor-offline-installer-*.tgz &amp;&amp; cd harbor</span><br></pre></td></tr></table></figure>

<h1 id="SSL等配置"><a href="#SSL等配置" class="headerlink" title="SSL等配置"></a>SSL等配置</h1><p>这玩意一定要SSL, 这里用自签</p>
<p>ip查看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ifconfig | grep inet</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p><strong>注意替换成你的ip</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">YOURIP=192.168.1.203</span><br><span class="line">openssl req -newkey rsa:4096 -nodes -sha256 -keyout ca.key -x509 -days 3650 -out ca.crt</span><br><span class="line">openssl req -newkey rsa:4096 -nodes -sha256 -keyout <span class="variable">$YOURIP</span> -out <span class="variable">$YOURIP</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;subjectAltName = IP:<span class="variable">$YOURIP</span>&quot;</span> &gt; extfile.cnf</span><br><span class="line">openssl x509 -req -days 3650 -<span class="keyword">in</span> <span class="variable">$YOURIP</span> -CA ca.crt -CAkey ca.key -CAcreateserial -extfile extfile.cnf -out <span class="variable">$YOURIP</span></span><br><span class="line">sudo <span class="built_in">mkdir</span> -p /etc/docker/certs.d/<span class="variable">$YOURIP</span></span><br><span class="line">sudo <span class="built_in">cp</span> *.crt *.key /etc/docker/certs.d/<span class="variable">$YOURIP</span></span><br><span class="line">sed -i <span class="string">&quot;s/^hostname.*/hostname: <span class="variable">$YOURIP</span>/&quot;</span> harbor.yml</span><br><span class="line">sed -i <span class="string">&quot;s@^\(\s*certificate\).*@\1: /etc/docker/certs.d/<span class="variable">$YOURIP</span>/ca.crt@&quot;</span> harbor.yml</span><br><span class="line">sed -i <span class="string">&quot;s@^\(\s*private_key\).*@\1: /etc/docker/certs.d/<span class="variable">$YOURIP</span>/ca.key@&quot;</span> harbor.yml</span><br></pre></td></tr></table></figure>

<p>如果有需要可以改动<code>harbor.yml</code>里面的端口配置</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo ./install.sh --with-clair</span><br></pre></td></tr></table></figure>

<h1 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h1><p>localhost:你设置的端口</p>
<p>wsl2需要做以下映射</p>
<p>powershell:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netsh interface portproxy add v4tov4 listenport=8080 listenaddress=0.0.0.0 connectport=443 connectaddress=172.28.52.88 </span><br></pre></td></tr></table></figure>

<blockquote>
<p>其中listenport是对外部暴露的端口<br>connectport是你wsl2里的端口<br>connectaddr是wsl2的地址</p>
</blockquote>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://goharbor.io/docs/latest/install-config">https://goharbor.io/docs/latest/install-config</a></p>
<p><a href="https://thenewstack.io/tutorial-install-the-docker-harbor-registry-server-on-ubuntu-18-04/">https://thenewstack.io/tutorial-install-the-docker-harbor-registry-server-on-ubuntu-18-04/</a></p>
<p><a href="https://docs.microsoft.com/en-us/windows/wsl/compare-versions#accessing-a-wsl-2-distribution-from-your-local-area-network-lan">https://docs.microsoft.com/en-us/windows/wsl/compare-versions#accessing-a-wsl-2-distribution-from-your-local-area-network-lan</a></p>
]]></content>
      <categories>
        <category>backend</category>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>harbor</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue transition</title>
    <url>/Blog/21-09-02-vue-transition/</url>
    <content><![CDATA[<h1 id="对于transition的一个核心问题是时间哪里来的"><a href="#对于transition的一个核心问题是时间哪里来的" class="headerlink" title="对于transition的一个核心问题是时间哪里来的"></a>对于transition的一个核心问题是时间哪里来的</h1><p>因为name这些感觉能拿到, 拼接也就当然</p>
<p>而 transition包裹的内部元素销毁，如果能拿到时间，那其实跟keep-alive 原理类似，在时间以后再销毁即可</p>
<p>然而我们并没有传递一个时间给元素，它却能知道时间</p>
<h1 id="source-code"><a href="#source-code" class="headerlink" title="source code"></a>source code</h1><h2 id="vue2"><a href="#vue2" class="headerlink" title="vue2"></a>vue2</h2><p><code>src/platforms/web/runtime/transition-util.js</code></p>
<p>中</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">export</span> function <span class="title">getTransitionInfo</span> <span class="params">(el: Element, expectedType?: ?string)</span>: &#123;</span></span><br><span class="line">  type: ?string;</span><br><span class="line">  propCount: number;</span><br><span class="line">  timeout: number;</span><br><span class="line">  hasTransform: boolean;</span><br><span class="line">&#125; &#123;</span><br><span class="line">  <span class="type">const</span> styles: any = window.<span class="built_in">getComputedStyle</span>(el)</span><br><span class="line">  <span class="comment">// JSDOM may return undefined for transition properties</span></span><br><span class="line">  <span class="type">const</span> transitionDelays: Array&lt;string&gt; = (styles[transitionProp + <span class="string">&#x27;Delay&#x27;</span>] || <span class="string">&#x27;&#x27;).split(&#x27;</span>, <span class="string">&#x27;)</span></span><br><span class="line"><span class="string">  const transitionDurations: Array&lt;string&gt; = (styles[transitionProp + &#x27;</span>Duration<span class="number">&#x27;</span>] || <span class="string">&#x27;&#x27;).split(&#x27;</span>, <span class="string">&#x27;)</span></span><br><span class="line"><span class="string">  const transitionTimeout: number = getTimeout(transitionDelays, transitionDurations)</span></span><br><span class="line"><span class="string">  const animationDelays: Array&lt;string&gt; = (styles[animationProp + &#x27;</span>Delay<span class="number">&#x27;</span>] || <span class="string">&#x27;&#x27;).split(&#x27;</span>, <span class="string">&#x27;)</span></span><br><span class="line"><span class="string">  const animationDurations: Array&lt;string&gt; = (styles[animationProp + &#x27;</span>Duration<span class="number">&#x27;</span>] || <span class="string">&#x27;&#x27;).split(&#x27;</span>, <span class="string">&#x27;)</span></span><br><span class="line"><span class="string">  const animationTimeout: number = getTimeout(animationDelays, animationDurations)</span></span><br></pre></td></tr></table></figure>



<h2 id="vue3"><a href="#vue3" class="headerlink" title="vue3"></a>vue3</h2><p><code>packages/runtime-dom/src/components/Transition.ts</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export function getTransitionInfo(</span><br><span class="line">  el: Element,</span><br><span class="line">  expectedType?: TransitionProps[&#x27;type&#x27;]</span><br><span class="line">): CSSTransitionInfo &#123;</span><br><span class="line">  const styles: any = window.getComputedStyle(el)</span><br><span class="line">  // JSDOM may return undefined for transition properties</span><br><span class="line">  const getStyleProperties = (key: string) =&gt; (styles[key] || &#x27;&#x27;).split(&#x27;, &#x27;)</span><br><span class="line">  const transitionDelays = getStyleProperties(TRANSITION + &#x27;Delay&#x27;)</span><br><span class="line">  const transitionDurations = getStyleProperties(TRANSITION + &#x27;Duration&#x27;)</span><br><span class="line">  const transitionTimeout = getTimeout(transitionDelays, transitionDurations)</span><br><span class="line">  const animationDelays = getStyleProperties(ANIMATION + &#x27;Delay&#x27;)</span><br><span class="line">  const animationDurations = getStyleProperties(ANIMATION + &#x27;Duration&#x27;)</span><br><span class="line">  const animationTimeout = getTimeout(animationDelays, animationDurations)</span><br></pre></td></tr></table></figure>

<h2 id="所以"><a href="#所以" class="headerlink" title="所以"></a>所以</h2><p>核心是<code>window.getComputedStyle</code></p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>你所见的pr可能不是真正的变化(Gitlab/Github pr view diff bug</title>
    <url>/Blog/21-11-16-gitlab-github-pr-view-bug/</url>
    <content><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>因为工期，项目上有多个长分支，而最近在看pr的时候，发现有些已经合并过的，在页面上还是展示了变更，但是命令行里 直接diff两个分支不存在</p>
<h1 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h1><p><a href="https://github.com/CroMarmot/gitlab-pr-view-bug/blob/master/reproduce.sh">https://github.com/CroMarmot/gitlab-pr-view-bug/blob/master/reproduce.sh</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Init Repo</span></span><br><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line"><span class="built_in">mkdir</span> gitlab-pr-view-diff-bug &amp;&amp; <span class="built_in">cd</span> gitlab-pr-view-diff-bug</span><br><span class="line">git init</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Init&quot;</span> &gt;&gt; init</span><br><span class="line">git add init</span><br><span class="line">git commit -m <span class="string">&quot;init&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># branchs</span></span><br><span class="line">git checkout -b pre-release</span><br><span class="line">git checkout -b common</span><br><span class="line">git checkout -b feat</span><br><span class="line"></span><br><span class="line"><span class="comment"># some feature on feat0 branch</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;feat0&quot;</span> &gt;&gt; feat0</span><br><span class="line">git add feat0</span><br><span class="line">git commit -m <span class="string">&quot;file feat0&quot;</span></span><br><span class="line"></span><br><span class="line">git checkout pre-release</span><br><span class="line">git merge --no-ff --no-edit feat</span><br><span class="line"><span class="built_in">sleep</span> 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># some common update</span></span><br><span class="line">git checkout common</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;cmm&quot;</span> &gt;&gt; cmm</span><br><span class="line">git add cmm</span><br><span class="line">git commit -m <span class="string">&quot;file cmm&quot;</span></span><br><span class="line"><span class="built_in">sleep</span> 1</span><br><span class="line"></span><br><span class="line">git checkout pre-release</span><br><span class="line">git merge --no-ff --no-edit common</span><br><span class="line"><span class="built_in">sleep</span> 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># feat use common and update some feature</span></span><br><span class="line">git checkout feat</span><br><span class="line">git merge common --no-edit</span><br><span class="line"><span class="built_in">sleep</span> 1</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;feat1&quot;</span> &gt;&gt; feat1</span><br><span class="line">git add feat1</span><br><span class="line">git commit -m <span class="string">&quot;file feat1&quot;</span></span><br><span class="line"><span class="built_in">sleep</span> 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># diff</span></span><br><span class="line">git <span class="built_in">log</span> --all --graph --oneline</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;git diff pre-release feat&quot;</span></span><br><span class="line">git diff pre-release feat</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;git diff pre-release..feat&quot;</span></span><br><span class="line">git diff pre-release..feat</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;git diff pre-release...feat&quot;</span></span><br><span class="line">git diff pre-release...feat</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;git diff $(git merge-base pre-release feat) feat&#x27;</span></span><br><span class="line">git diff $(git merge-base pre-release feat) feat</span><br><span class="line"></span><br><span class="line"><span class="comment"># clear</span></span><br><span class="line"><span class="built_in">rm</span> -rf /tmp/gitlab-pr-view-diff-bug/</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Initialized empty Git repository in /tmp/gitlab-pr-view-diff-bug/.git/</span><br><span class="line">[master (root-commit) 7dbccd5] init</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 init</span><br><span class="line">Switched to a new branch &#x27;pre-release&#x27;</span><br><span class="line">Switched to a new branch &#x27;common&#x27;</span><br><span class="line">Switched to a new branch &#x27;feat&#x27;</span><br><span class="line">[feat 5e8b20f] file feat0</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 feat0</span><br><span class="line">Switched to branch &#x27;pre-release&#x27;</span><br><span class="line">Merge made by the &#x27;recursive&#x27; strategy.</span><br><span class="line"> feat0 | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 feat0</span><br><span class="line">Switched to branch &#x27;common&#x27;</span><br><span class="line">[common 09a3969] file cmm</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 cmm</span><br><span class="line">Switched to branch &#x27;pre-release&#x27;</span><br><span class="line">Merge made by the &#x27;recursive&#x27; strategy.</span><br><span class="line"> cmm | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 cmm</span><br><span class="line">Switched to branch &#x27;feat&#x27;</span><br><span class="line">Merge made by the &#x27;recursive&#x27; strategy.</span><br><span class="line"> cmm | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 cmm</span><br><span class="line">[feat 9d8b809] file feat1</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 feat1</span><br><span class="line">* 9d8b809 (HEAD -&gt; feat) file feat1</span><br><span class="line">*   b9bfda6 Merge branch &#x27;common&#x27; into feat</span><br><span class="line">|\</span><br><span class="line">| | *   376c6cc (pre-release) Merge branch &#x27;common&#x27; into pre-release</span><br><span class="line">| | |\</span><br><span class="line">| | |/</span><br><span class="line">| |/|</span><br><span class="line">| * | 09a3969 (common) file cmm</span><br><span class="line">| | * 5a08d58 Merge branch &#x27;feat&#x27; into pre-release</span><br><span class="line">| |/|</span><br><span class="line">| |/</span><br><span class="line">|/|</span><br><span class="line">* | 5e8b20f file feat0</span><br><span class="line">|/</span><br><span class="line">* 7dbccd5 (master) init</span><br><span class="line">git diff pre-release feat</span><br><span class="line">diff --git a/feat1 b/feat1</span><br><span class="line">new file mode 100644</span><br><span class="line">index 0000000..d7c678b</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/feat1</span><br><span class="line">@@ -0,0 +1 @@</span><br><span class="line">+feat1</span><br><span class="line">git diff pre-release..feat</span><br><span class="line">diff --git a/feat1 b/feat1</span><br><span class="line">new file mode 100644</span><br><span class="line">index 0000000..d7c678b</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/feat1</span><br><span class="line">@@ -0,0 +1 @@</span><br><span class="line">+feat1</span><br><span class="line">git diff pre-release...feat</span><br><span class="line">diff --git a/feat0 b/feat0</span><br><span class="line">new file mode 100644</span><br><span class="line">index 0000000..05884ff</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/feat0</span><br><span class="line">@@ -0,0 +1 @@</span><br><span class="line">+feat0</span><br><span class="line">diff --git a/feat1 b/feat1</span><br><span class="line">new file mode 100644</span><br><span class="line">index 0000000..d7c678b</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/feat1</span><br><span class="line">@@ -0,0 +1 @@</span><br><span class="line">+feat1</span><br><span class="line">git diff $(git merge-base pre-release feat) feat</span><br><span class="line">diff --git a/feat0 b/feat0</span><br><span class="line">new file mode 100644</span><br><span class="line">index 0000000..05884ff</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/feat0</span><br><span class="line">@@ -0,0 +1 @@</span><br><span class="line">+feat0</span><br><span class="line">diff --git a/feat1 b/feat1</span><br><span class="line">new file mode 100644</span><br><span class="line">index 0000000..d7c678b</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/feat1</span><br><span class="line">@@ -0,0 +1 @@</span><br><span class="line">+feat1</span><br></pre></td></tr></table></figure>

<p>注意到 上面 4种比较方式，前两种一致，后两种一致，而对于看一个pr导致的变化，更期望的是前两种(仅多了 feat1)而不是后两种(多了 feat0 和 feat1)</p>
<p>**但实际上 直接的 diff 也不是真正期望看到的，期望的还是如果merge以后和当前的差异 ** </p>
<h1 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h1><p>搜到了一个<code>gitlab-ce</code>官方讨论的地方，大概意思是用的<code>git diff A...B</code>相当于<code>git diff $(git merge-base A B) B</code></p>
<p>也就是 当<code>预发布分支 pre-release</code> 合并了公共的一个分支 <code>common</code> 后, 功能分支<code>feat</code> 页合并过公共分支后</p>
<p>那么<code>git merge-base A B</code> 去找的并不是<code>A</code></p>
<p>而 你所看到的 pr 并不是真正的变化，就离谱</p>
<h1 id="在线"><a href="#在线" class="headerlink" title="在线"></a>在线</h1><p>看起来 github 还有这个问题</p>
<p><a href="https://github.com/CroMarmot/gitlab-pr-view-bug/pull/1/files">https://github.com/CroMarmot/gitlab-pr-view-bug/pull/1/files</a></p>
<p>但 gitlab官方似乎已经改了</p>
<p><a href="https://gitlab.com/YeXiaoRain/gitlab-pr-view-bug/-/merge_requests/1/diffs">https://gitlab.com/YeXiaoRain/gitlab-pr-view-bug/-/merge_requests/1/diffs</a></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://gitlab.com/gitlab-org/gitlab-foss/-/issues/15140">https://gitlab.com/gitlab-org/gitlab-foss/-/issues/15140</a></p>
]]></content>
      <categories>
        <category>software</category>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>pull request</tag>
      </tags>
  </entry>
  <entry>
    <title>前端资料链接</title>
    <url>/Blog/21-11-22-frontEndRoadmap/</url>
    <content><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>不论是面试也好，培训新人也好，自己总结也好，做个这些子集的超集。这里尽量给一手资料的链接，和一些公共维护的文档，也建议大家少看博客这类二手资料&#x2F;非公共资料。</p>
<h1 id="RoadMap"><a href="#RoadMap" class="headerlink" title="RoadMap"></a>RoadMap</h1><h2 id="前端基础"><a href="#前端基础" class="headerlink" title="前端基础"></a>前端基础</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML#tools">HTML 与 语义化 HTML</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS">css 与 css3</a></p>
<ul>
<li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex">flex</a></p>
</li>
<li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/@media">@media</a></p>
</li>
</ul>
<p><a href="https://zh.javascript.info/">js</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript">js mdn</a></p>
<h2 id="基本开发技能"><a href="#基本开发技能" class="headerlink" title="基本开发技能"></a>基本开发技能</h2><p><a href="https://git-scm.com/book/zh/v2/">git</a></p>
<p>如何使用 google 搜索&#x2F;《提问的智慧》</p>
<p>linux&#x2F;wsl&#x2F;常用 linux 命令</p>
<p>基本数据结构和算法(<a href="https://oi-wiki.org/">https://oi-wiki.org/</a> , codeforces.com 1900 分以下的题)</p>
<p><a href="https://www.runoob.com/design-pattern/design-pattern-tutorial.html">设计模式</a></p>
<h2 id="前端包工具"><a href="#前端包工具" class="headerlink" title="前端包工具"></a>前端包工具</h2><p><a href="https://www.npmjs.com/">npm</a>&#x2F;<a href="https://yarnpkg.com/">yarn</a> , <a href="https://github.com/nvm-sh/nvm/blob/master/README.md">nvm</a></p>
<p><a href="https://webpack.js.org/">Webpack</a>&#x2F;<a href="https://rollupjs.org/guide/en/">Rollup</a>&#x2F;<a href="https://parceljs.org/">Parcel</a></p>
<p><a href="https://angular.io/cli">Angular CLI</a>&#x2F;<a href="https://nuxtjs.org/">Nuxt</a>&#x2F;<a href="https://nextjs.org/">Next</a>&#x2F;<a href="https://www.gatsbyjs.com/">Gatsby</a>&#x2F;<a href="https://create-react-app.dev/">CRA</a></p>
<p><a href="https://docs.bazel.build/versions/main/build-javascript.html">Bazel</a></p>
<p><a href="https://gulpjs.com/">gulp</a>&#x2F;npm scripts</p>
<h2 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h2><p><a href="https://sass-lang.com/">sass</a>&#x2F;<a href="https://lesscss.org/">less</a>&#x2F;<a href="https://postcss.org/">postcss</a></p>
<p><a href="https://tailwindcss.com/">tailwind</a></p>
<p><a href="https://material.angular.io/">Angular Material</a>&#x2F;<a href="https://element.eleme.cn/">Element UI</a>&#x2F;<a href="https://ant.design/">Ant Design</a></p>
<h2 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h2><p><a href="https://angular.cn/guide/styleguide">Angular Styleguide</a>&#x2F;<a href="https://vuejs.org/v2/style-guide/">Vue Styleguide</a>&#x2F;<a href="https://reactjs.org/docs/getting-started.html">Reactjs advanced guides</a></p>
<p><a href="https://angular.io/guide/schematics">Angular Schematics</a></p>
<p><a href="https://eslint.org/">eslint</a>&#x2F;<a href="https://prettier.io/">prettier</a>&#x2F;<a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks">git hooks</a></p>
<h2 id="三方基础"><a href="#三方基础" class="headerlink" title="三方基础"></a>三方基础</h2><p><a href="https://www.typescriptlang.org/">TypeScript</a></p>
<p><a href="https://rxjs.dev/">RxJs</a></p>
<h2 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h2><p><a href="https://facebook.github.io/flux/">Flux</a>&#x2F;<a href="https://ngrx.io/">@ngrx</a>&#x2F;<a href="https://angular.io/guide/architecture-services">Angular Services</a>&#x2F;<a href="https://vuex.vuejs.org/">Vuex</a>&#x2F;<a href="https://react-redux.js.org/">Redux</a></p>
<h2 id="PWA"><a href="#PWA" class="headerlink" title="PWA"></a>PWA</h2><p><a href="https://angular.io/guide/service-worker-getting-started">@angular&#x2F;pwa</a>&#x2F;<a href="https://pwa.nuxtjs.org/">Nuxt pwa</a>&#x2F;<a href="https://developers.google.com/web/tools/workbox/guides/get-started">Workbox</a></p>
<h2 id="Router"><a href="#Router" class="headerlink" title="Router"></a>Router</h2><p><a href="https://router.vuejs.org/guide/">Vue router</a> &#x2F; <a href="https://angular.io/guide/router">Angular router</a> &#x2F; <a href="https://reactrouter.com/">React router</a></p>
<h2 id="非浏览器"><a href="#非浏览器" class="headerlink" title="非浏览器"></a>非浏览器</h2><p><a href="https://ionicframework.com/">Ionic</a>&#x2F;<a href="https://reactnative.dev/">React Native</a>&#x2F;<a href="https://www.electronjs.org/">Electron</a></p>
<p>SSR</p>
<p><a href="https://flutter.dev/">Flutter</a></p>
<p><a href="https://webassembly.org/">WASM</a></p>
<h2 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h2><p>单元:<a href="https://jasmine.github.io/">Jasmine</a>&#x2F;<a href="https://karma-runner.github.io/latest/index.html">Karma</a>&#x2F;<a href="https://jestjs.io/">Jest</a></p>
<p>e2e:</p>
<h2 id="Util"><a href="#Util" class="headerlink" title="Util"></a>Util</h2><p>日期 <a href="https://dayjs.fenxianglu.cn/category/parse.html">dayjs</a>&#x2F;<a href="https://momentjs.com/">Momentsjs</a></p>
<p>轮播 <a href="https://swiperjs.com/">swiper</a></p>
<p>图表 <a href="https://echarts.apache.org/en/index.html">echarts</a></p>
<p>条形码 <a href="https://github.com/lindell/JsBarcode">jsbarcode</a></p>
<p>二维码 <a href="https://github.com/soldair/node-qrcode#api">qrcode</a></p>
<h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><p><img data-src="https://ares.decipherzone.com/blog-manager/uploads/ckeditor_frontend-developer-roadmap.png" alt="2021 frontend roadmap"></p>
<h1 id="常用知识"><a href="#常用知识" class="headerlink" title="常用知识"></a>常用知识</h1><h2 id="异步通信"><a href="#异步通信" class="headerlink" title="异步通信"></a>异步通信</h2><p><a href="https://developer.mozilla.org/en-US/docs/Glossary/Callback_function">callback</a></p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise</a></p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function">async&#x2F;await</a></p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API">Observer</a></p>
<p><a href="https://rxjs-dev.firebaseapp.com/">RxJs</a></p>
]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>vue2</tag>
        <tag>Angular2+</tag>
      </tags>
  </entry>
  <entry>
    <title>currying 加法</title>
    <url>/Blog/21-12-06-currying-add/</url>
    <content><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>一个支持 任意多参数，可以柯里化的加法函数</p>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>直接返回函数 保留已传内容的加和</p>
<p>toString 支持输出值</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">createF</span> = (<span class="params">v</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> b = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">createF</span>(v + [...<span class="variable language_">arguments</span>].<span class="title function_">reduce</span>(<span class="function">(<span class="params">s, cur</span>) =&gt;</span> s + cur, <span class="number">0</span>));</span><br><span class="line">    &#125;;</span><br><span class="line">    b.<span class="property">toString</span> = <span class="function">() =&gt;</span> v;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">createF</span>([...<span class="variable language_">arguments</span>].<span class="title function_">reduce</span>(<span class="function">(<span class="params">s, cur</span>) =&gt;</span> s + cur, <span class="number">0</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(+<span class="title function_">add</span>(<span class="number">1</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(+<span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(+<span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>)(<span class="number">3</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(+<span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>)(<span class="number">3</span>)(<span class="number">4</span>));</span><br><span class="line"><span class="keyword">const</span> x = <span class="title function_">add</span>(<span class="number">5</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(+<span class="title function_">x</span>(<span class="number">6</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(+<span class="title function_">x</span>(<span class="number">7</span>)(<span class="number">8</span>));</span><br><span class="line"><span class="keyword">const</span> y = <span class="title function_">x</span>(<span class="number">9</span>)(<span class="number">9</span>, <span class="number">10</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(+<span class="title function_">y</span>());</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>豆瓣页面数据解密</title>
    <url>/Blog/21-12-21-anti-douban/</url>
    <content><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>个人的网页需要一些书目数据，印象中，老的豆瓣直接是页面还是接口，能获直接取到，可以作为爬虫入门练手</p>
<p>然而前天一看，新版的豆瓣已经不明文返回数据了</p>
<p><code>https://search.douban.com/book/subject_search?search_text=%E5%AE%9E%E5%8F%98%E5%87%BD%E6%95%B0&amp;cat=1001</code></p>
<h1 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h1><p><code>C++函数调用</code>：这个知识点让你知道函数调用堆栈的常见设计</p>
<p>js调试：chrome断点，格式化代码，console，js基本语法，</p>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><h2 id="定位数据来源"><a href="#定位数据来源" class="headerlink" title="定位数据来源"></a>定位数据来源</h2><p>一般来说 只要页面不用花里胡哨的技巧，比如把数据放在png里的话，一般来说，数据只会在<code>Fetch/XHR</code>,<code>JS</code>,<code>html</code>，<code>ws</code> 中</p>
<p>通过页面展示的<code>实变函数论</code> 去上述类型中搜索，结果没有任何内容中直接包含数据</p>
<span id="more"></span>

<hr>
<p>接下来考虑，通过限制网速，切换到低速3G, 并增加截图，定位大概和哪个资源有关</p>
<p>并伴随block地址，来看是哪个资源相关</p>
<hr>
<p>定位到有个<code>img3.doubanio.com/.../bundle.js</code>是与渲染相关</p>
<p>但注意到它的<code>大小</code>是来自于<code>内存缓存</code>的，里面应该不会有数据，而在变的依然是最开始的请求</p>
<p>翻看最开始的请求，里面有个<code>window.__DATA__</code> 十分像加密数据</p>
<p>在<code>bundle.js</code>中 搜索该关键字，找到位置，打断点，console里清空这个值，页面无显示，确定了数据的确是来自首个请求，而<code>bundle.js</code> 是负责它的解密和渲染(不那么准确，vendor实际也有参与，但对于找入口来说定位到bundle中的<code>__DATA__</code>足够了</p>
<h2 id="主要节点"><a href="#主要节点" class="headerlink" title="主要节点"></a>主要节点</h2><p><strong>下面代码都省去了外层包裹，实际运行是有相关的闭包的，这里主要是展示代码位置，而不是完整代码</strong></p>
<p>通过断点，注意到有个被混淆变量后的函数被反复调用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">t</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">n</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">r</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title function_">e</span>(t)(n)(r)</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title class_">Object</span>(B.<span class="property">b</span>)(e),</span><br><span class="line">                <span class="title function_">n</span>(r)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而我们对 这里最后 <code>(r)</code>的调用断点进去, 会发现以下3个</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">r</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = e.<span class="title function_">from</span>(r, <span class="string">&quot;base64&quot;</span>)</span><br><span class="line">      , s = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>((a.<span class="property">length</span> - <span class="number">2</span> * i) / <span class="number">3</span>), <span class="number">0</span>)</span><br><span class="line">      , u = a.<span class="title function_">slice</span>(s, s + i);</span><br><span class="line">    a = e.<span class="title function_">concat</span>([a.<span class="title function_">slice</span>(<span class="number">0</span>, s), a.<span class="title function_">slice</span>(s + i)]);</span><br><span class="line">    <span class="keyword">var</span> c = <span class="title class_">Object</span>(o.<span class="property">hash</span>)(e.<span class="title function_">concat</span>([u, e.<span class="title function_">from</span>(t)]));</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">n</span>((l = &#123;&#125;,</span><br><span class="line">    l[c] = a,</span><br><span class="line">    l));</span><br><span class="line">    <span class="keyword">var</span> l</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">t</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> n = <span class="title class_">Object</span>.<span class="title function_">keys</span>(t)[<span class="number">0</span>]</span><br><span class="line">      , r = <span class="title class_">At</span>.<span class="property">crypto</span>.<span class="title function_">decrypt</span>(t[n], n);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">e</span>(r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">t</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">e</span>(<span class="title class_">It</span>()(t))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而根据chrome对变量的提示，三个断点的入参<code>r</code>分别是 原<code>__DATA__</code>,<code>&#123;hash:Uint8Array&#125;</code>,<code>Uint8Array</code></p>
<h2 id="清理无关内容"><a href="#清理无关内容" class="headerlink" title="清理无关内容"></a>清理无关内容</h2><p>在最外层的<code>e(t)(n)(r)</code> 断点处e </p>
<p><code>t</code> 输出为<code>&#123;getState: ƒ, dispatch: ƒ&#125;</code>,而<code>e()(n)(r)</code> 输出依然不变</p>
<p>所以估计<code>t</code>是一个渲染页面的函数，这里我们不需要</p>
<p><code>n1 = function(...args)&#123;const result = n(...args);console.warn([...args],result);return result;&#125;</code></p>
<p>再调用<code>e()(n1)(t)</code></p>
<p>发现<code>n</code>接受的参数，就是上面的<code>&#123;hash:Uini8Array&#125;</code> 输出的是结果</p>
<p>或者<code>e()((x)=&gt;&#123;console.log(x)&#125;)(r)</code> 也能知道中间的入参</p>
<p>读静态代码发现，上面的第一个函数，就是把<code>__DATA__</code>转换成<code>n</code>的入参的</p>
<hr>
<p>加上断点的输出，代码块还剩下</p>
<p><code>__DATA__</code>到 <code>&#123;秘钥:加密后数据&#125;</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>(<span class="params">r</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = e.<span class="title function_">from</span>(r, <span class="string">&quot;base64&quot;</span>)</span><br><span class="line">      , s = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>((a.<span class="property">length</span> - <span class="number">2</span> * i) / <span class="number">3</span>), <span class="number">0</span>)</span><br><span class="line">      , u = a.<span class="title function_">slice</span>(s, s + i);</span><br><span class="line">    a = e.<span class="title function_">concat</span>([a.<span class="title function_">slice</span>(<span class="number">0</span>, s), a.<span class="title function_">slice</span>(s + i)]);</span><br><span class="line">    <span class="keyword">var</span> c = <span class="title class_">Object</span>(o.<span class="property">hash</span>)(e.<span class="title function_">concat</span>([u, e.<span class="title function_">from</span>(t)]));</span><br><span class="line">    <span class="keyword">return</span> (l = &#123;&#125;,</span><br><span class="line">    l[c] = a,</span><br><span class="line">    l);</span><br><span class="line">    <span class="keyword">var</span> l</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看上去接受一个参数，实际接受<code>密文e</code>和<code>秘钥r</code>两个参数, 输出是<code>Uint8Array</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">r</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> r = <span class="variable language_">arguments</span>.<span class="property">length</span> &gt; <span class="number">1</span> &amp;&amp; <span class="keyword">void</span> <span class="number">0</span> !== <span class="variable language_">arguments</span>[<span class="number">1</span>] ? <span class="variable language_">arguments</span>[<span class="number">1</span>] : <span class="string">&quot;hjasbdn2ih823rgwudsde7e2dhsdhas&quot;</span>;</span><br><span class="line">    <span class="string">&quot;string&quot;</span> == <span class="keyword">typeof</span> r &amp;&amp; (r = [].<span class="property">map</span>.<span class="title function_">call</span>(r, <span class="keyword">function</span>(<span class="params">t</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> t.<span class="title function_">charCodeAt</span>(<span class="number">0</span>)</span><br><span class="line">    &#125;));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> n, o = [], i = <span class="number">0</span>, a = <span class="keyword">new</span> <span class="title function_">t</span>(e.<span class="property">length</span>), s = <span class="number">0</span>; s &lt; <span class="number">256</span>; s++)</span><br><span class="line">        o[s] = s;</span><br><span class="line">    <span class="keyword">for</span> (s = <span class="number">0</span>; s &lt; <span class="number">256</span>; s++)</span><br><span class="line">        i = (i + o[s] + r[s % r.<span class="property">length</span>]) % <span class="number">256</span>,</span><br><span class="line">        n = o[s],</span><br><span class="line">        o[s] = o[i],</span><br><span class="line">        o[i] = n;</span><br><span class="line">    s = <span class="number">0</span>,</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> u = <span class="number">0</span>; u &lt; e.<span class="property">length</span>; u++)</span><br><span class="line">        s = (s + <span class="number">1</span>) % <span class="number">256</span>,</span><br><span class="line">        i = (i + o[s]) % <span class="number">256</span>,</span><br><span class="line">        n = o[s],</span><br><span class="line">        o[s] = o[i],</span><br><span class="line">        o[i] = n,</span><br><span class="line">        a[u] = e[u] ^ o[(o[s] + o[i]) % <span class="number">256</span>];</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>It()(t)</code>，也就是把上面<code>Uint8array</code> 转换成最终输出的json的超大函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> _ = t.<span class="title function_">slice</span>(t.<span class="property">length</span> - <span class="number">32</span>, t.<span class="property">length</span>)</span><br><span class="line">  , E = _.<span class="title function_">readUInt8</span>(<span class="number">6</span>);</span><br><span class="line">(<span class="number">0</span>,</span><br><span class="line">f.<span class="property">debug</span>)(<span class="string">&quot;offsetSize: &quot;</span> + E);</span><br><span class="line"><span class="keyword">var</span> A = _.<span class="title function_">readUInt8</span>(<span class="number">7</span>);</span><br><span class="line">(<span class="number">0</span>,</span><br><span class="line">f.<span class="property">debug</span>)(<span class="string">&quot;objectRefSize: &quot;</span> + A);</span><br><span class="line"><span class="keyword">var</span> C = <span class="title function_">s</span>(_, <span class="number">8</span>);</span><br><span class="line"><span class="comment">// .........</span></span><br></pre></td></tr></table></figure>

<h2 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h2><h3 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h3><p>第一部分，根据<code>__DATA__</code>的格式，其实稍有经验的就能看出是<code>base64</code>当然这里直接代码也可以看到是<code>base64</code></p>
<ol>
<li>断点确定<code>i = 16</code></li>
<li><code>base64</code> 通过<code>atob</code>实现</li>
<li>concat可以prototype实现</li>
<li>hash 相对较难</li>
</ol>
<h4 id="hash部分"><a href="#hash部分" class="headerlink" title="hash部分"></a>hash部分</h4><p>定位到, 入参只是秘钥</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;string&quot;</span> == <span class="keyword">typeof</span> e &amp;&amp; (e = t.<span class="title function_">from</span>(e)),</span><br><span class="line">    (<span class="number">0</span>,</span><br><span class="line">    h.<span class="property">default</span>)(e, <span class="number">41405</span>).<span class="title function_">toString</span>(<span class="number">16</span>).<span class="title function_">replace</span>(<span class="regexp">/^0+/</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>和具体的调用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">o</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> == <span class="variable language_">arguments</span>.<span class="property">length</span> ? <span class="keyword">new</span> <span class="title function_">o</span>(<span class="variable language_">arguments</span>[<span class="number">1</span>]).<span class="title function_">update</span>(<span class="variable language_">arguments</span>[<span class="number">0</span>]).<span class="title function_">digest</span>() : <span class="variable language_">this</span> <span class="keyword">instanceof</span> o ? <span class="keyword">void</span> i.<span class="title function_">call</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>[<span class="number">0</span>]) : <span class="keyword">new</span> <span class="title function_">o</span>(<span class="variable language_">arguments</span>[<span class="number">0</span>])</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">i</span>(<span class="params">t</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">seed</span> = t <span class="keyword">instanceof</span> a ? t.<span class="title function_">clone</span>() : <span class="title function_">a</span>(t),</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">v1</span> = <span class="variable language_">this</span>.<span class="property">seed</span>.<span class="title function_">clone</span>().<span class="title function_">add</span>(s).<span class="title function_">add</span>(u),</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">v2</span> = <span class="variable language_">this</span>.<span class="property">seed</span>.<span class="title function_">clone</span>().<span class="title function_">add</span>(u),</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">v3</span> = <span class="variable language_">this</span>.<span class="property">seed</span>.<span class="title function_">clone</span>(),</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">v4</span> = <span class="variable language_">this</span>.<span class="property">seed</span>.<span class="title function_">clone</span>().<span class="title function_">subtract</span>(s),</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">total_len</span> = <span class="number">0</span>,</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">memsize</span> = <span class="number">0</span>,</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">memory</span> = <span class="literal">null</span>,</span><br><span class="line">    <span class="variable language_">this</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="title function_">r</span>(<span class="number">81</span>).<span class="property">UINT64</span></span><br><span class="line">  , s = <span class="title function_">a</span>(<span class="string">&quot;11400714785074694791&quot;</span>)</span><br><span class="line">  , u = <span class="title function_">a</span>(<span class="string">&quot;14029467366897019727&quot;</span>)</span><br><span class="line">  , c = <span class="title function_">a</span>(<span class="string">&quot;1609587929392839161&quot;</span>)</span><br><span class="line">  , f = <span class="title function_">a</span>(<span class="string">&quot;9650029242287828579&quot;</span>)</span><br><span class="line">  , l = <span class="title function_">a</span>(<span class="string">&quot;2870177450012600261&quot;</span>);</span><br><span class="line"><span class="comment">// ....</span></span><br></pre></td></tr></table></figure>

<p>通过其中的数值和代码关键搜索，定位到一个xxhash的算法</p>
<p>并且确定了第一段中的<code>41405</code> 应该是初始种子</p>
<hr>
<p>综上，通过简单实现concat，base64转换和提取秘钥，加上以<code>41405</code>为种子的<code>xxhash.64</code>算法</p>
<p>我们能得到和断点中输出一致的<code>&#123;hash:Uint8Array&#125;</code>的输出, 如果不想肉眼比较，可以用<code>n</code>函数来验证</p>
<h3 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h3><p>如果你直接搜第二部分中存在的hash：<code>hjasbdn2ih823rgwudsde7e2dhsdhas</code> 你可以搜到的都是douban的破解</p>
<p>而比较好的是，第二部分除了一个t需要修改成<code>Uint8Array</code> 以外，剩下的都没有外部依赖，直接拿来用即可</p>
<p>并且我们可以验证，第二部分的输出和断点第三部分的输入一致</p>
<h3 id="第三部分"><a href="#第三部分" class="headerlink" title="第三部分"></a>第三部分</h3><p>其实，这时候你把输入的内容转化成ascii输出，已经能看到部分单词了，所以这部分应该不是字典密码，而是不带加密的结构体流化</p>
<p>然而它又不是众所周知的 base64 或者 json字符串</p>
<p>我们能通过断点的方式，启用它的debug模式<code>f.debug.enable = true</code>, 看到输出<code>json-enctryptor</code></p>
<p>我开始以为又找到库了，结果 连单词都拼错了，目测在现今这个开源大家积极修typo的时代，应该是它们内部改造过的库</p>
<hr>
<p>一个好消息是，这里的字段和输出提示，有不少没有被打包模糊掉</p>
<p>通过关键字，搜索到一个叫做bplist的东西, 把bplist的代码拷贝进来调用</p>
<p>剩下的内容就完全抠代码。其中有不少<code>Uint8Array.prototype</code> 的函数</p>
<p>这里需要注意的是，豆瓣的<code>parseObject</code>中的<code>objType</code> 和 上面的<code>bplistParser.js</code>中的不一样</p>
<p>这里修改了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">0x6</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">parseData</span>();</span><br><span class="line"><span class="keyword">case</span> <span class="number">0x4</span>:</span><br><span class="line">    <span class="comment">// ASCII</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">parsePlistString</span>();</span><br><span class="line"><span class="keyword">case</span> <span class="number">0x5</span>:</span><br><span class="line">    <span class="comment">// UTF-16</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">parsePlistString</span>(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>

<hr>
<p>至此 我们有了一份 能跑的代码, 修改搜索内容，新的页面中的<code>__DATA__</code>放进来依然可以解密，说明成功</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="版本1"><a href="#版本1" class="headerlink" title="版本1"></a>版本1</h2><p>能跑就行</p>
<p><code>index.html</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./xxhash.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>其中<code>xxhash.min.js</code>是公开的算法, 下载一个即可, 见Ref中链接</p>
<p><code>index.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// XXH 需要支持 copy</span></span><br><span class="line"><span class="title class_">Uint8Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">copy</span> = <span class="keyword">function</span> <span class="title function_">copy</span>(<span class="params">target, targetStart, start, end</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!start)</span><br><span class="line">        start = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> (!end &amp;&amp; end !== <span class="number">0</span>)</span><br><span class="line">        end = <span class="variable language_">this</span>.<span class="property">length</span></span><br><span class="line">    <span class="keyword">if</span> (targetStart &gt;= target.<span class="property">length</span>)</span><br><span class="line">        targetStart = target.<span class="property">length</span></span><br><span class="line">    <span class="keyword">if</span> (!targetStart)</span><br><span class="line">        targetStart = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> (end &gt; <span class="number">0</span> &amp;&amp; end &lt; start)</span><br><span class="line">        end = start</span><br><span class="line">    <span class="comment">// Copy 0 bytes; we&#x27;re done</span></span><br><span class="line">    <span class="keyword">if</span> (end === start)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> (target.<span class="property">length</span> === <span class="number">0</span> || <span class="variable language_">this</span>.<span class="property">length</span> === <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="comment">// Fatal error conditions</span></span><br><span class="line">    <span class="keyword">if</span> (targetStart &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RangeError</span>(<span class="string">&#x27;targetStart out of bounds&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (start &lt; <span class="number">0</span> || start &gt;= <span class="variable language_">this</span>.<span class="property">length</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RangeError</span>(<span class="string">&#x27;sourceStart out of bounds&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (end &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RangeError</span>(<span class="string">&#x27;sourceEnd out of bounds&#x27;</span>)</span><br><span class="line">    <span class="comment">// Are we oob?</span></span><br><span class="line">    <span class="keyword">if</span> (end &gt; <span class="variable language_">this</span>.<span class="property">length</span>)</span><br><span class="line">        end = <span class="variable language_">this</span>.<span class="property">length</span></span><br><span class="line">    <span class="keyword">if</span> (target.<span class="property">length</span> - targetStart &lt; end - start) &#123;</span><br><span class="line">        end = target.<span class="property">length</span> - targetStart + start</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> len = end - start</span><br><span class="line">    <span class="keyword">var</span> i</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span> === target &amp;&amp; start &lt; targetStart &amp;&amp; targetStart &lt; end) &#123;</span><br><span class="line">        <span class="comment">// descending copy from end</span></span><br><span class="line">        <span class="keyword">for</span> (i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            target[i + targetStart] = <span class="variable language_">this</span>[i + start]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (len &lt; <span class="number">1000</span> || !<span class="title class_">Buffer</span>.<span class="property">TYPED_ARRAY_SUPPORT</span>) &#123;</span><br><span class="line">        <span class="comment">// ascending copy from start</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            target[i + targetStart] = <span class="variable language_">this</span>[i + start]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        target.<span class="title function_">_set</span>(<span class="variable language_">this</span>.<span class="title function_">subarray</span>(start, start + len), targetStart)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Uint8Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">readUInt8</span> = <span class="keyword">function</span>(<span class="params">t</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>[t]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Uint8Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">readUInt32BE</span> = <span class="keyword">function</span>(<span class="params">t</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">16777216</span> * <span class="variable language_">this</span>[t] + (<span class="variable language_">this</span>[t + <span class="number">1</span>] &lt;&lt; <span class="number">16</span> | <span class="variable language_">this</span>[t + <span class="number">2</span>] &lt;&lt; <span class="number">8</span> | <span class="variable language_">this</span>[t + <span class="number">3</span>])</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> J_read = <span class="keyword">function</span>(<span class="params">t, e, r, n, o</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> i, a, s = <span class="number">8</span> * o - n - <span class="number">1</span>, u = (<span class="number">1</span> &lt;&lt; s) - <span class="number">1</span>, c = u &gt;&gt; <span class="number">1</span>, f = -<span class="number">7</span>, l = r ? o - <span class="number">1</span> : <span class="number">0</span>, h = r ? -<span class="number">1</span> : <span class="number">1</span>, p = t[e + l];</span><br><span class="line">    <span class="keyword">for</span> (l += h,</span><br><span class="line">    i = p &amp; (<span class="number">1</span> &lt;&lt; -f) - <span class="number">1</span>,</span><br><span class="line">    p &gt;&gt;= -f,</span><br><span class="line">    f += s; f &gt; <span class="number">0</span>; i = <span class="number">256</span> * i + t[e + l],</span><br><span class="line">    l += h,</span><br><span class="line">    f -= <span class="number">8</span>)</span><br><span class="line">        ;</span><br><span class="line">    <span class="keyword">for</span> (a = i &amp; (<span class="number">1</span> &lt;&lt; -f) - <span class="number">1</span>,</span><br><span class="line">    i &gt;&gt;= -f,</span><br><span class="line">    f += n; f &gt; <span class="number">0</span>; a = <span class="number">256</span> * a + t[e + l],</span><br><span class="line">    l += h,</span><br><span class="line">    f -= <span class="number">8</span>)</span><br><span class="line">        ;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> === i)</span><br><span class="line">        i = <span class="number">1</span> - c;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i === u)</span><br><span class="line">            <span class="keyword">return</span> a ? <span class="title class_">NaN</span> : <span class="number">1</span> / <span class="number">0</span> * (p ? -<span class="number">1</span> : <span class="number">1</span>);</span><br><span class="line">        a += <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, n),</span><br><span class="line">        i -= c</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (p ? -<span class="number">1</span> : <span class="number">1</span>) * a * <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, i - n)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Uint8Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">readInt8</span> = <span class="keyword">function</span>(<span class="params">t, e</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">128</span> &amp; <span class="variable language_">this</span>[t] ? -<span class="number">1</span> * (<span class="number">255</span> - <span class="variable language_">this</span>[t] + <span class="number">1</span>) : <span class="variable language_">this</span>[t]</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line"><span class="title class_">Uint8Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">readInt16LE</span> = <span class="keyword">function</span>(<span class="params">t, e</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> r = <span class="variable language_">this</span>[t] | <span class="variable language_">this</span>[t + <span class="number">1</span>] &lt;&lt; <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">32768</span> &amp; r ? <span class="number">4294901760</span> | r : r</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line"><span class="title class_">Uint8Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">readInt16BE</span> = <span class="keyword">function</span>(<span class="params">t, e</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> r = <span class="variable language_">this</span>[t + <span class="number">1</span>] | <span class="variable language_">this</span>[t] &lt;&lt; <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">32768</span> &amp; r ? <span class="number">4294901760</span> | r : r</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line"><span class="title class_">Uint8Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">readInt32LE</span> = <span class="keyword">function</span>(<span class="params">t, e</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>[t] | <span class="variable language_">this</span>[t + <span class="number">1</span>] &lt;&lt; <span class="number">8</span> | <span class="variable language_">this</span>[t + <span class="number">2</span>] &lt;&lt; <span class="number">16</span> | <span class="variable language_">this</span>[t + <span class="number">3</span>] &lt;&lt; <span class="number">24</span></span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line"><span class="title class_">Uint8Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">readInt32BE</span> = <span class="keyword">function</span>(<span class="params">t, e</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>[t] &lt;&lt; <span class="number">24</span> | <span class="variable language_">this</span>[t + <span class="number">1</span>] &lt;&lt; <span class="number">16</span> | <span class="variable language_">this</span>[t + <span class="number">2</span>] &lt;&lt; <span class="number">8</span> | <span class="variable language_">this</span>[t + <span class="number">3</span>]</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line"><span class="title class_">Uint8Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">readFloatLE</span> = <span class="keyword">function</span>(<span class="params">t, e</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">J_read</span>(<span class="variable language_">this</span>, t, !<span class="number">0</span>, <span class="number">23</span>, <span class="number">4</span>)</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line"><span class="title class_">Uint8Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">readFloatBE</span> = <span class="keyword">function</span>(<span class="params">t, e</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">J_read</span>(<span class="variable language_">this</span>, t, !<span class="number">1</span>, <span class="number">23</span>, <span class="number">4</span>)</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line"><span class="title class_">Uint8Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">readDoubleLE</span> = <span class="keyword">function</span>(<span class="params">t, e</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">J_read</span>(<span class="variable language_">this</span>, t, !<span class="number">0</span>, <span class="number">52</span>, <span class="number">8</span>)</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line"><span class="title class_">Uint8Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">readDoubleBE</span> = <span class="keyword">function</span>(<span class="params">t, e</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">J_read</span>(<span class="variable language_">this</span>, t, !<span class="number">1</span>, <span class="number">52</span>, <span class="number">8</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Uint8Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> t = <span class="number">0</span> | <span class="variable language_">this</span>.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> === t ? <span class="string">&quot;&quot;</span> : ucs2.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Q = <span class="number">4096</span>;</span><br><span class="line"><span class="keyword">var</span> P = <span class="keyword">function</span>(<span class="params">t</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> e = t.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">if</span> (e &lt;= Q)</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">String</span>.<span class="property">fromCharCode</span>.<span class="title function_">apply</span>(<span class="title class_">String</span>, t);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> r = <span class="string">&quot;&quot;</span>, n = <span class="number">0</span>; n &lt; e; )</span><br><span class="line">        r += <span class="title class_">String</span>.<span class="property">fromCharCode</span>.<span class="title function_">apply</span>(<span class="title class_">String</span>, t.<span class="title function_">slice</span>(n, n += Q));</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> T = <span class="keyword">function</span>(<span class="params">t, e, r</span>) &#123;</span><br><span class="line">    r = <span class="title class_">Math</span>.<span class="title function_">min</span>(t.<span class="property">length</span>, r);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> n = [], o = e; o &lt; r; ) &#123;</span><br><span class="line">        <span class="keyword">var</span> i = t[o]</span><br><span class="line">          , a = <span class="literal">null</span></span><br><span class="line">          , s = i &gt; <span class="number">239</span> ? <span class="number">4</span> : i &gt; <span class="number">223</span> ? <span class="number">3</span> : i &gt; <span class="number">191</span> ? <span class="number">2</span> : <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (o + s &lt;= r) &#123;</span><br><span class="line">            <span class="keyword">var</span> u, c, f, l;</span><br><span class="line">            <span class="keyword">switch</span> (s) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                i &lt; <span class="number">128</span> &amp;&amp; (a = i);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                u = t[o + <span class="number">1</span>],</span><br><span class="line">                <span class="number">128</span> == (<span class="number">192</span> &amp; u) &amp;&amp; (l = (<span class="number">31</span> &amp; i) &lt;&lt; <span class="number">6</span> | <span class="number">63</span> &amp; u) &gt; <span class="number">127</span> &amp;&amp; (a = l);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                u = t[o + <span class="number">1</span>],</span><br><span class="line">                c = t[o + <span class="number">2</span>],</span><br><span class="line">                <span class="number">128</span> == (<span class="number">192</span> &amp; u) &amp;&amp; <span class="number">128</span> == (<span class="number">192</span> &amp; c) &amp;&amp; (l = (<span class="number">15</span> &amp; i) &lt;&lt; <span class="number">12</span> | (<span class="number">63</span> &amp; u) &lt;&lt; <span class="number">6</span> | <span class="number">63</span> &amp; c) &gt; <span class="number">2047</span> &amp;&amp; (l &lt; <span class="number">55296</span> || l &gt; <span class="number">57343</span>) &amp;&amp; (a = l);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                u = t[o + <span class="number">1</span>],</span><br><span class="line">                c = t[o + <span class="number">2</span>],</span><br><span class="line">                f = t[o + <span class="number">3</span>],</span><br><span class="line">                <span class="number">128</span> == (<span class="number">192</span> &amp; u) &amp;&amp; <span class="number">128</span> == (<span class="number">192</span> &amp; c) &amp;&amp; <span class="number">128</span> == (<span class="number">192</span> &amp; f) &amp;&amp; (l = (<span class="number">15</span> &amp; i) &lt;&lt; <span class="number">18</span> | (<span class="number">63</span> &amp; u) &lt;&lt; <span class="number">12</span> | (<span class="number">63</span> &amp; c) &lt;&lt; <span class="number">6</span> | <span class="number">63</span> &amp; f) &gt; <span class="number">65535</span> &amp;&amp; l &lt; <span class="number">1114112</span> &amp;&amp; (a = l)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="literal">null</span> === a ? (a = <span class="number">65533</span>,</span><br><span class="line">        s = <span class="number">1</span>) : a &gt; <span class="number">65535</span> &amp;&amp; (a -= <span class="number">65536</span>,</span><br><span class="line">        n.<span class="title function_">push</span>(a &gt;&gt;&gt; <span class="number">10</span> &amp; <span class="number">1023</span> | <span class="number">55296</span>),</span><br><span class="line">        a = <span class="number">56320</span> | <span class="number">1023</span> &amp; a),</span><br><span class="line">        n.<span class="title function_">push</span>(a),</span><br><span class="line">        o += s</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">P</span>(n)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> N = <span class="keyword">function</span>(<span class="params">t, e, r</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> n = t.<span class="title function_">slice</span>(e, r), o = <span class="string">&quot;&quot;</span>, i = <span class="number">0</span>; i &lt; n.<span class="property">length</span>; i += <span class="number">2</span>)</span><br><span class="line">        o += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(n[i] + <span class="number">256</span> * n[i + <span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> o</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ucs2 = <span class="keyword">function</span>(<span class="params">t, e, r</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> n = !<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">void</span> <span class="number">0</span> === e || e &lt; <span class="number">0</span>) &amp;&amp; (e = <span class="number">0</span>),</span><br><span class="line">    e &gt; <span class="variable language_">this</span>.<span class="property">length</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">void</span> <span class="number">0</span> === r || r &gt; <span class="variable language_">this</span>.<span class="property">length</span>) &amp;&amp; (r = <span class="variable language_">this</span>.<span class="property">length</span>),</span><br><span class="line">    r &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (r &gt;&gt;&gt;= <span class="number">0</span>,</span><br><span class="line">    e &gt;&gt;&gt;= <span class="number">0</span>,</span><br><span class="line">    r &lt;= e)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (t || (t = <span class="string">&quot;utf8&quot;</span>); ; )</span><br><span class="line">        <span class="keyword">switch</span> (t) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;hex&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">j</span>(<span class="variable language_">this</span>, e, r);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;utf8&quot;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;utf-8&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">T</span>(<span class="variable language_">this</span>, e, r);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;ascii&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">k</span>(<span class="variable language_">this</span>, e, r);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;latin1&quot;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;binary&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">R</span>(<span class="variable language_">this</span>, e, r);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;base64&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">O</span>(<span class="variable language_">this</span>, e, r);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;ucs2&quot;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;ucs-2&quot;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;utf16le&quot;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;utf-16le&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">N</span>(<span class="variable language_">this</span>, e, r);</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="keyword">if</span> (n)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&quot;Unknown encoding: &quot;</span> + t);</span><br><span class="line">            t = (t + <span class="string">&quot;&quot;</span>).<span class="title function_">toLowerCase</span>(),</span><br><span class="line">            n = !<span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> concat = <span class="keyword">function</span>(<span class="params">arr0, arr1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Uint8Array</span>([...arr0, ...arr1]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hashuint16 = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable constant_">XXH</span>.<span class="title function_">h64</span>(e, <span class="number">0xA1BD</span>).<span class="title function_">toString</span>(<span class="number">16</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> btool = <span class="keyword">function</span>(<span class="params">r</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="title class_">Uint8Array</span>.<span class="title function_">from</span>(<span class="title function_">atob</span>(r), <span class="function"><span class="params">c</span>=&gt;</span>c.<span class="title function_">charCodeAt</span>(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">let</span> s = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>((a.<span class="property">length</span> - <span class="number">2</span> * i) / <span class="number">3</span>), <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">let</span> u = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(a.<span class="title function_">slice</span>(s, s + i));</span><br><span class="line">    a = <span class="title function_">concat</span>(a.<span class="title function_">slice</span>(<span class="number">0</span>, s), a.<span class="title function_">slice</span>(s + i));</span><br><span class="line">    <span class="keyword">var</span> c = <span class="title function_">hashuint16</span>(<span class="title function_">concat</span>(u, <span class="title class_">Uint8Array</span>.<span class="title function_">from</span>(<span class="string">&quot;&quot;</span>)));</span><br><span class="line">    <span class="keyword">return</span> [c, a]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> decrypto = <span class="keyword">function</span>(<span class="params">e, r</span>) &#123;</span><br><span class="line">    <span class="comment">// &quot;hjasbdn2ih823rgwudsde7e2dhsdhas&quot;;</span></span><br><span class="line">    <span class="string">&quot;string&quot;</span> == <span class="keyword">typeof</span> r &amp;&amp; (r = [].<span class="property">map</span>.<span class="title function_">call</span>(r, <span class="keyword">function</span>(<span class="params">t</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> t.<span class="title function_">charCodeAt</span>(<span class="number">0</span>)</span><br><span class="line">    &#125;));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> n, o = [], i = <span class="number">0</span>, a = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(e.<span class="property">length</span>), s = <span class="number">0</span>; s &lt; <span class="number">256</span>; s++)</span><br><span class="line">        o[s] = s;</span><br><span class="line">    <span class="keyword">for</span> (s = <span class="number">0</span>; s &lt; <span class="number">256</span>; s++)</span><br><span class="line">        i = (i + o[s] + r[s % r.<span class="property">length</span>]) % <span class="number">256</span>,</span><br><span class="line">        n = o[s],</span><br><span class="line">        o[s] = o[i],</span><br><span class="line">        o[i] = n;</span><br><span class="line">    s = <span class="number">0</span>,</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> u = <span class="number">0</span>; u &lt; e.<span class="property">length</span>; u++)</span><br><span class="line">        s = (s + <span class="number">1</span>) % <span class="number">256</span>,</span><br><span class="line">        i = (i + o[s]) % <span class="number">256</span>,</span><br><span class="line">        n = o[s],</span><br><span class="line">        o[s] = o[i],</span><br><span class="line">        o[i] = n,</span><br><span class="line">        a[u] = e[u] ^ o[(o[s] + o[i]) % <span class="number">256</span>];</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> debug = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> maxObjectSize = <span class="number">100</span> * <span class="number">1000</span> * <span class="number">1000</span>;</span><br><span class="line"><span class="comment">// 100Meg</span></span><br><span class="line"><span class="keyword">var</span> maxObjectCount = <span class="number">32768</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// EPOCH = new SimpleDateFormat(&quot;yyyy MM dd zzz&quot;).parse(&quot;2001 01 01 GMT&quot;).getTime();</span></span><br><span class="line"><span class="comment">// ...but that&#x27;s annoying in a static initializer because it can throw exceptions, ick.</span></span><br><span class="line"><span class="comment">// So we just hardcode the correct value.</span></span><br><span class="line"><span class="keyword">var</span> <span class="variable constant_">EPOCH</span> = <span class="number">978307200000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// we&#x27;re just going to toss the high order bits because javascript doesn&#x27;t have 64-bit ints</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">readUInt64BE</span>(<span class="params">buffer, start</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> data = buffer.<span class="title function_">slice</span>(start, start + <span class="number">8</span>);</span><br><span class="line">  <span class="keyword">return</span> data.<span class="title function_">readUInt32BE</span>(<span class="number">4</span>, <span class="number">8</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">swapBytes</span>(<span class="params">buffer</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> len = buffer.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i += <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = buffer[i];</span><br><span class="line">    buffer[i] = buffer[i+<span class="number">1</span>];</span><br><span class="line">    buffer[i+<span class="number">1</span>] = a;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> buffer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">readUInt</span>(<span class="params">buffer, start</span>) &#123;</span><br><span class="line">  start = start || <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> l = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = start; i &lt; buffer.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    l &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">    l |= buffer[i] &amp; <span class="number">0xFF</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> parseBuffer = <span class="keyword">function</span>(<span class="params">buffer</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> result = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Handle trailer, last 32 bytes of the file</span></span><br><span class="line">    <span class="keyword">var</span> trailer = buffer.<span class="title function_">slice</span>(buffer.<span class="property">length</span> - <span class="number">32</span>, buffer.<span class="property">length</span>);</span><br><span class="line">    <span class="comment">// 6 null bytes (index 0 to 5)</span></span><br><span class="line">    <span class="keyword">var</span> offsetSize = trailer.<span class="title function_">readUInt8</span>(<span class="number">6</span>);</span><br><span class="line">    <span class="keyword">if</span> (debug) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;offsetSize: &quot;</span> + offsetSize);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> objectRefSize = trailer.<span class="title function_">readUInt8</span>(<span class="number">7</span>);</span><br><span class="line">    <span class="keyword">if</span> (debug) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;objectRefSize: &quot;</span> + objectRefSize);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> numObjects = <span class="title function_">readUInt64BE</span>(trailer, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span> (debug) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;numObjects: &quot;</span> + numObjects);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> topObject = <span class="title function_">readUInt64BE</span>(trailer, <span class="number">16</span>);</span><br><span class="line">    <span class="keyword">if</span> (debug) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;topObject: &quot;</span> + topObject);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> offsetTableOffset = <span class="title function_">readUInt64BE</span>(trailer, <span class="number">24</span>);</span><br><span class="line">    <span class="keyword">if</span> (debug) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;offsetTableOffset: &quot;</span> + offsetTableOffset);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (numObjects &gt; maxObjectCount) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;maxObjectCount exceeded&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Handle offset table</span></span><br><span class="line">    <span class="keyword">var</span> offsetTable = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; numObjects; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> offsetBytes = buffer.<span class="title function_">slice</span>(offsetTableOffset + i * offsetSize, offsetTableOffset + (i + <span class="number">1</span>) * offsetSize);</span><br><span class="line">        offsetTable[i] = <span class="title function_">readUInt</span>(offsetBytes, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (debug) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Offset for Object #&quot;</span> + i + <span class="string">&quot; is &quot;</span> + offsetTable[i] + <span class="string">&quot; [&quot;</span> + offsetTable[i].<span class="title function_">toString</span>(<span class="number">16</span>) + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Parses an object inside the currently parsed binary property list.</span></span><br><span class="line">    <span class="comment">// For the format specification check</span></span><br><span class="line">    <span class="comment">// &lt;a href=&quot;http://www.opensource.apple.com/source/CF/CF-635/CFBinaryPList.c&quot;&gt;</span></span><br><span class="line">    <span class="comment">// Apple&#x27;s binary property list parser implementation&lt;/a&gt;.</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">parseObject</span>(<span class="params">tableOffset</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> offset = offsetTable[tableOffset];</span><br><span class="line">        <span class="keyword">var</span> type = buffer[offset];</span><br><span class="line">        <span class="keyword">var</span> objType = (type &amp; <span class="number">0xF0</span>) &gt;&gt; <span class="number">4</span>;</span><br><span class="line">        <span class="comment">//First  4 bits</span></span><br><span class="line">        <span class="keyword">var</span> objInfo = (type &amp; <span class="number">0x0F</span>);</span><br><span class="line">        <span class="comment">//Second 4 bits</span></span><br><span class="line">        <span class="keyword">switch</span> (objType) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">parseSimple</span>();</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x1</span>:</span><br><span class="line">            <span class="keyword">return</span> parseInteger();</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x8</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">parseUID</span>();</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x2</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">parseReal</span>();</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x3</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">parseDate</span>();</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x6</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">parseData</span>();</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x4</span>:</span><br><span class="line">            <span class="comment">// ASCII</span></span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">parsePlistString</span>();</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x5</span>:</span><br><span class="line">            <span class="comment">// UTF-16</span></span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">parsePlistString</span>(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xA</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">parseArray</span>();</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xD</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">parseDictionary</span>();</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Unhandled type 0x&quot;</span> + objType.<span class="title function_">toString</span>(<span class="number">16</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">parseSimple</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">//Simple</span></span><br><span class="line">            <span class="keyword">switch</span> (objInfo) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0x0</span>:</span><br><span class="line">                <span class="comment">// null</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0x8</span>:</span><br><span class="line">                <span class="comment">// false</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0x9</span>:</span><br><span class="line">                <span class="comment">// true</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0xF</span>:</span><br><span class="line">                <span class="comment">// filler byte</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="attr">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Unhandled simple type 0x&quot;</span> + objType.<span class="title function_">toString</span>(<span class="number">16</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">parseInteger</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> length = <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, objInfo);</span><br><span class="line">            <span class="keyword">if</span> (length &lt; maxObjectSize) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title function_">readUInt</span>(buffer.<span class="title function_">slice</span>(offset + <span class="number">1</span>, offset + <span class="number">1</span> + length));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;To little heap space available! Wanted to read &quot;</span> + length + <span class="string">&quot; bytes, but only &quot;</span> + maxObjectSize + <span class="string">&quot; are available.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">parseUID</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> length = objInfo + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (length &lt; maxObjectSize) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title function_">readUInt</span>(buffer.<span class="title function_">slice</span>(offset + <span class="number">1</span>, offset + <span class="number">1</span> + length));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;To little heap space available! Wanted to read &quot;</span> + length + <span class="string">&quot; bytes, but only &quot;</span> + maxObjectSize + <span class="string">&quot; are available.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">parseReal</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> length = <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, objInfo);</span><br><span class="line">            <span class="keyword">if</span> (length &lt; maxObjectSize) &#123;</span><br><span class="line">                <span class="keyword">var</span> realBuffer = buffer.<span class="title function_">slice</span>(offset + <span class="number">1</span>, offset + <span class="number">1</span> + length);</span><br><span class="line">                <span class="keyword">if</span> (length === <span class="number">4</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> realBuffer.<span class="title function_">readFloatBE</span>(<span class="number">0</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (length === <span class="number">8</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> realBuffer.<span class="title function_">readDoubleBE</span>(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;To little heap space available! Wanted to read &quot;</span> + length + <span class="string">&quot; bytes, but only &quot;</span> + maxObjectSize + <span class="string">&quot; are available.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">parseDate</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (objInfo != <span class="number">0x3</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Unknown date type :&quot;</span> + objInfo + <span class="string">&quot;. Parsing anyway...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> dateBuffer = buffer.<span class="title function_">slice</span>(offset + <span class="number">1</span>, offset + <span class="number">9</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="variable constant_">EPOCH</span> + (<span class="number">1000</span> * dateBuffer.<span class="title function_">readDoubleBE</span>(<span class="number">0</span>)));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">parseData</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> dataoffset = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">var</span> length = objInfo;</span><br><span class="line">            <span class="keyword">if</span> (objInfo == <span class="number">0xF</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> int_type = buffer[offset + <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">var</span> intType = (int_type &amp; <span class="number">0xF0</span>) / <span class="number">0x10</span>;</span><br><span class="line">                <span class="keyword">if</span> (intType != <span class="number">0x1</span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;0x4: UNEXPECTED LENGTH-INT TYPE! &quot;</span> + intType);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">var</span> intInfo = int_type &amp; <span class="number">0x0F</span>;</span><br><span class="line">                <span class="keyword">var</span> intLength = <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, intInfo);</span><br><span class="line">                dataoffset = <span class="number">2</span> + intLength;</span><br><span class="line">                <span class="keyword">if</span> (intLength &lt; <span class="number">3</span>) &#123;</span><br><span class="line">                    length = <span class="title function_">readUInt</span>(buffer.<span class="title function_">slice</span>(offset + <span class="number">2</span>, offset + <span class="number">2</span> + intLength));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    length = <span class="title function_">readUInt</span>(buffer.<span class="title function_">slice</span>(offset + <span class="number">2</span>, offset + <span class="number">2</span> + intLength));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (length &lt; maxObjectSize) &#123;</span><br><span class="line">                <span class="keyword">return</span> buffer.<span class="title function_">slice</span>(offset + dataoffset, offset + dataoffset + length);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;To little heap space available! Wanted to read &quot;</span> + length + <span class="string">&quot; bytes, but only &quot;</span> + maxObjectSize + <span class="string">&quot; are available.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">parsePlistString</span>(<span class="params">isUtf16</span>) &#123;</span><br><span class="line">            isUtf16 = isUtf16 || <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">var</span> enc = <span class="string">&quot;utf8&quot;</span>;</span><br><span class="line">            <span class="keyword">var</span> length = objInfo;</span><br><span class="line">            <span class="keyword">var</span> stroffset = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (objInfo == <span class="number">0xF</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> int_type = buffer[offset + <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">var</span> intType = (int_type &amp; <span class="number">0xF0</span>) / <span class="number">0x10</span>;</span><br><span class="line">                <span class="keyword">if</span> (intType != <span class="number">0x1</span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">err</span>(<span class="string">&quot;UNEXPECTED LENGTH-INT TYPE! &quot;</span> + intType);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">var</span> intInfo = int_type &amp; <span class="number">0x0F</span>;</span><br><span class="line">                <span class="keyword">var</span> intLength = <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, intInfo);</span><br><span class="line">                <span class="keyword">var</span> stroffset = <span class="number">2</span> + intLength;</span><br><span class="line">                <span class="keyword">if</span> (intLength &lt; <span class="number">3</span>) &#123;</span><br><span class="line">                    length = <span class="title function_">readUInt</span>(buffer.<span class="title function_">slice</span>(offset + <span class="number">2</span>, offset + <span class="number">2</span> + intLength));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    length = <span class="title function_">readUInt</span>(buffer.<span class="title function_">slice</span>(offset + <span class="number">2</span>, offset + <span class="number">2</span> + intLength));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// length is String length -&gt; to get byte length multiply by 2, as 1 character takes 2 bytes in UTF-16</span></span><br><span class="line">            length *= (isUtf16 + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (length &lt; maxObjectSize) &#123;</span><br><span class="line">                <span class="keyword">var</span> plistString = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(buffer.<span class="title function_">slice</span>(offset + stroffset, offset + stroffset + length));</span><br><span class="line">                <span class="keyword">if</span> (isUtf16) &#123;</span><br><span class="line">                    plistString = <span class="title function_">swapBytes</span>(plistString);</span><br><span class="line">                    enc = <span class="string">&quot;ucs2&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> plistString.<span class="title function_">toString</span>(enc);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;To little heap space available! Wanted to read &quot;</span> + length + <span class="string">&quot; bytes, but only &quot;</span> + maxObjectSize + <span class="string">&quot; are available.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">parseArray</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> length = objInfo;</span><br><span class="line">            <span class="keyword">var</span> arrayoffset = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (objInfo == <span class="number">0xF</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> int_type = buffer[offset + <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">var</span> intType = (int_type &amp; <span class="number">0xF0</span>) / <span class="number">0x10</span>;</span><br><span class="line">                <span class="keyword">if</span> (intType != <span class="number">0x1</span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;0xa: UNEXPECTED LENGTH-INT TYPE! &quot;</span> + intType);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">var</span> intInfo = int_type &amp; <span class="number">0x0F</span>;</span><br><span class="line">                <span class="keyword">var</span> intLength = <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, intInfo);</span><br><span class="line">                arrayoffset = <span class="number">2</span> + intLength;</span><br><span class="line">                <span class="keyword">if</span> (intLength &lt; <span class="number">3</span>) &#123;</span><br><span class="line">                    length = <span class="title function_">readUInt</span>(buffer.<span class="title function_">slice</span>(offset + <span class="number">2</span>, offset + <span class="number">2</span> + intLength));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    length = <span class="title function_">readUInt</span>(buffer.<span class="title function_">slice</span>(offset + <span class="number">2</span>, offset + <span class="number">2</span> + intLength));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (length * objectRefSize &gt; maxObjectSize) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;To little heap space available!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> array = [];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">                <span class="keyword">var</span> objRef = <span class="title function_">readUInt</span>(buffer.<span class="title function_">slice</span>(offset + arrayoffset + i * objectRefSize, offset + arrayoffset + (i + <span class="number">1</span>) * objectRefSize));</span><br><span class="line">                array[i] = <span class="title function_">parseObject</span>(objRef);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> array;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">parseDictionary</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> length = objInfo;</span><br><span class="line">            <span class="keyword">var</span> dictoffset = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (objInfo == <span class="number">0xF</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> int_type = buffer[offset + <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">var</span> intType = (int_type &amp; <span class="number">0xF0</span>) / <span class="number">0x10</span>;</span><br><span class="line">                <span class="keyword">if</span> (intType != <span class="number">0x1</span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;0xD: UNEXPECTED LENGTH-INT TYPE! &quot;</span> + intType);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">var</span> intInfo = int_type &amp; <span class="number">0x0F</span>;</span><br><span class="line">                <span class="keyword">var</span> intLength = <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, intInfo);</span><br><span class="line">                dictoffset = <span class="number">2</span> + intLength;</span><br><span class="line">                <span class="keyword">if</span> (intLength &lt; <span class="number">3</span>) &#123;</span><br><span class="line">                    length = <span class="title function_">readUInt</span>(buffer.<span class="title function_">slice</span>(offset + <span class="number">2</span>, offset + <span class="number">2</span> + intLength));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    length = <span class="title function_">readUInt</span>(buffer.<span class="title function_">slice</span>(offset + <span class="number">2</span>, offset + <span class="number">2</span> + intLength));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (length * <span class="number">2</span> * objectRefSize &gt; maxObjectSize) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;To little heap space available!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (debug) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Parsing dictionary #&quot;</span> + tableOffset);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> dict = &#123;&#125;;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">                <span class="keyword">var</span> keyRef = <span class="title function_">readUInt</span>(buffer.<span class="title function_">slice</span>(offset + dictoffset + i * objectRefSize, offset + dictoffset + (i + <span class="number">1</span>) * objectRefSize));</span><br><span class="line">                <span class="keyword">var</span> valRef = <span class="title function_">readUInt</span>(buffer.<span class="title function_">slice</span>(offset + dictoffset + (length * objectRefSize) + i * objectRefSize, offset + dictoffset + (length * objectRefSize) + (i + <span class="number">1</span>) * objectRefSize));</span><br><span class="line">                <span class="keyword">var</span> key = <span class="title function_">parseObject</span>(keyRef);</span><br><span class="line">                <span class="keyword">var</span> val = <span class="title function_">parseObject</span>(valRef);</span><br><span class="line">                <span class="keyword">if</span> (debug) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;  DICT #&quot;</span> + tableOffset + <span class="string">&quot;: Mapped &quot;</span> + key + <span class="string">&quot; to &quot;</span> + val);</span><br><span class="line">                &#125;</span><br><span class="line">                dict[key] = val;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> dict;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [<span class="title function_">parseObject</span>(topObject)];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 这里放拷贝过来的数据</span></span><br><span class="line"><span class="keyword">var</span> result0 = <span class="title function_">btool</span>(<span class="variable language_">window</span>.<span class="property">__DATA__</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">warn</span>(result0);</span><br><span class="line">result1 = <span class="title function_">decrypto</span>(result0[<span class="number">1</span>], result0[<span class="number">0</span>])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">warn</span>(result1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="title function_">parseBuffer</span>(result1))</span><br></pre></td></tr></table></figure>

<h2 id="版本2"><a href="#版本2" class="headerlink" title="版本2"></a>版本2</h2><p>多个迹象表明，他们应该用的bufferjs，但是buffer只有node的，所以需要bufferjs的前端库<code>https://bundle.run/buffer@6.0.3</code></p>
<p>通过<code>script</code>标签和<code>var Buffer = buffer.Buffer</code>就可以使用了</p>
<p>不幸的是，经过替换发现有个值转义失败了，检查传入数组没有问题，定位到问题在他被swapBytes了两次，</p>
<p>也就是传值传址，Buffer和Uint8Array行为上有区别，解决方案是，swapBytes不操作传入数据, 或者在开始套上 <code>Buffer.from()</code>, github上有的代码这部分是错的</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">- var plistString = buffer.slice(offset + stroffset, offset + stroffset + length);</span></span><br><span class="line"><span class="addition">+ var plistString = Buffer.from(buffer.slice(offset + stroffset, offset + stroffset + length));</span></span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">- function swapBytes(buffer) &#123;</span></span><br><span class="line"><span class="addition">+ function swapBytes(buf) &#123;</span></span><br><span class="line"><span class="addition">+  buffer = new Buffer(buf); // 这里需要修改 因为某个位置被访问了多次，修改了原始数据</span></span><br><span class="line">  var len = buffer.length;</span><br><span class="line">  for (var i = 0; i &lt; len; i += 2) &#123;</span><br><span class="line">    var a = buffer[i];</span><br><span class="line">    buffer[i] = buffer[i+1];</span><br><span class="line">    buffer[i+1] = a;</span><br><span class="line">  &#125;</span><br><span class="line">  return buffer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为 豆瓣对parse解析还有魔改（上面的映射），这里找到的库即是nodejs的，又和它不一致，这一部分就不找外部函数了，最终</p>
<p><code>index.html</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./feross.buffer.6.0.3.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./xxhash.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>index.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Buffer</span> = buffer.<span class="property">Buffer</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> btool = <span class="keyword">function</span>(<span class="params">r</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(r, <span class="string">&quot;base64&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> s = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>((a.<span class="property">length</span> - <span class="number">2</span> * i) / <span class="number">3</span>), <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">let</span> u = <span class="keyword">new</span> <span class="title class_">Buffer</span>(a.<span class="title function_">slice</span>(s, s + i));</span><br><span class="line">    a = <span class="title class_">Buffer</span>.<span class="title function_">concat</span>([a.<span class="title function_">slice</span>(<span class="number">0</span>, s), a.<span class="title function_">slice</span>(s + i)]);</span><br><span class="line">    <span class="keyword">var</span> c = <span class="variable constant_">XXH</span>.<span class="title function_">h64</span>(<span class="title class_">Buffer</span>.<span class="title function_">concat</span>([u, <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&quot;&quot;</span>)]), <span class="number">0xA1BD</span>).<span class="title function_">toString</span>(<span class="number">16</span>);</span><br><span class="line">    <span class="keyword">return</span> [c, a]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> decrypto = <span class="keyword">function</span>(<span class="params">e, r</span>) &#123;</span><br><span class="line">    <span class="comment">// &quot;hjasbdn2ih823rgwudsde7e2dhsdhas&quot;;</span></span><br><span class="line">    <span class="string">&quot;string&quot;</span> == <span class="keyword">typeof</span> r &amp;&amp; (r = [].<span class="property">map</span>.<span class="title function_">call</span>(r, <span class="keyword">function</span>(<span class="params">t</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> t.<span class="title function_">charCodeAt</span>(<span class="number">0</span>)</span><br><span class="line">    &#125;));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> n, o = [], i = <span class="number">0</span>, a = <span class="keyword">new</span> <span class="title class_">Buffer</span>(e.<span class="property">length</span>), s = <span class="number">0</span>; s &lt; <span class="number">256</span>; s++)</span><br><span class="line">        o[s] = s;</span><br><span class="line">    <span class="keyword">for</span> (s = <span class="number">0</span>; s &lt; <span class="number">256</span>; s++)</span><br><span class="line">        i = (i + o[s] + r[s % r.<span class="property">length</span>]) % <span class="number">256</span>,</span><br><span class="line">        n = o[s],</span><br><span class="line">        o[s] = o[i],</span><br><span class="line">        o[i] = n;</span><br><span class="line">    s = <span class="number">0</span>,</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> u = <span class="number">0</span>; u &lt; e.<span class="property">length</span>; u++)</span><br><span class="line">        s = (s + <span class="number">1</span>) % <span class="number">256</span>,</span><br><span class="line">        i = (i + o[s]) % <span class="number">256</span>,</span><br><span class="line">        n = o[s],</span><br><span class="line">        o[s] = o[i],</span><br><span class="line">        o[i] = n,</span><br><span class="line">        a[u] = e[u] ^ o[(o[s] + o[i]) % <span class="number">256</span>];</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> debug = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> maxObjectSize = <span class="number">100</span> * <span class="number">1000</span> * <span class="number">1000</span>;</span><br><span class="line"><span class="comment">// 100Meg</span></span><br><span class="line"><span class="keyword">var</span> maxObjectCount = <span class="number">32768</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// EPOCH = new SimpleDateFormat(&quot;yyyy MM dd zzz&quot;).parse(&quot;2001 01 01 GMT&quot;).getTime();</span></span><br><span class="line"><span class="comment">// ...but that&#x27;s annoying in a static initializer because it can throw exceptions, ick.</span></span><br><span class="line"><span class="comment">// So we just hardcode the correct value.</span></span><br><span class="line"><span class="keyword">var</span> <span class="variable constant_">EPOCH</span> = <span class="number">978307200000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// we&#x27;re just going to toss the high order bits because javascript doesn&#x27;t have 64-bit ints</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">readUInt64BE</span>(<span class="params">buffer, start</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> data = buffer.<span class="title function_">slice</span>(start, start + <span class="number">8</span>);</span><br><span class="line">  <span class="keyword">return</span> data.<span class="title function_">readUInt32BE</span>(<span class="number">4</span>, <span class="number">8</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">swapBytes</span>(<span class="params">buffer</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> len = buffer.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i += <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = buffer[i];</span><br><span class="line">    buffer[i] = buffer[i+<span class="number">1</span>];</span><br><span class="line">    buffer[i+<span class="number">1</span>] = a;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> buffer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">readUInt</span>(<span class="params">buffer, start</span>) &#123;</span><br><span class="line">  start = start || <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> l = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = start; i &lt; buffer.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    l &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">    l |= buffer[i] &amp; <span class="number">0xFF</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> parseBuffer = <span class="keyword">function</span>(<span class="params">buffer</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> result = &#123;&#125;;</span><br><span class="line">    <span class="comment">// Handle trailer, last 32 bytes of the file</span></span><br><span class="line">    <span class="keyword">var</span> trailer = buffer.<span class="title function_">slice</span>(buffer.<span class="property">length</span> - <span class="number">32</span>, buffer.<span class="property">length</span>);</span><br><span class="line">    <span class="comment">// 6 null bytes (index 0 to 5)</span></span><br><span class="line">    <span class="keyword">var</span> offsetSize = trailer.<span class="title function_">readUInt8</span>(<span class="number">6</span>);</span><br><span class="line">    <span class="keyword">if</span> (debug) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;offsetSize: &quot;</span> + offsetSize);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> objectRefSize = trailer.<span class="title function_">readUInt8</span>(<span class="number">7</span>);</span><br><span class="line">    <span class="keyword">if</span> (debug) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;objectRefSize: &quot;</span> + objectRefSize);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> numObjects = <span class="title function_">readUInt64BE</span>(trailer, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span> (debug) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;numObjects: &quot;</span> + numObjects);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> topObject = <span class="title function_">readUInt64BE</span>(trailer, <span class="number">16</span>);</span><br><span class="line">    <span class="keyword">if</span> (debug) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;topObject: &quot;</span> + topObject);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> offsetTableOffset = <span class="title function_">readUInt64BE</span>(trailer, <span class="number">24</span>);</span><br><span class="line">    <span class="keyword">if</span> (debug) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;offsetTableOffset: &quot;</span> + offsetTableOffset);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (numObjects &gt; maxObjectCount) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;maxObjectCount exceeded&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(buffer.<span class="title function_">slice</span>(<span class="number">0</span>,<span class="number">20</span>)));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Handle offset table</span></span><br><span class="line">    <span class="keyword">var</span> offsetTable = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; numObjects; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> offsetBytes = buffer.<span class="title function_">slice</span>(offsetTableOffset + i * offsetSize, offsetTableOffset + (i + <span class="number">1</span>) * offsetSize);</span><br><span class="line">        offsetTable[i] = <span class="title function_">readUInt</span>(offsetBytes, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (debug) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Offset for Object #&quot;</span> + i + <span class="string">&quot; is &quot;</span> + offsetTable[i] + <span class="string">&quot; [&quot;</span> + offsetTable[i].<span class="title function_">toString</span>(<span class="number">16</span>) + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Parses an object inside the currently parsed binary property list.</span></span><br><span class="line">    <span class="comment">// For the format specification check</span></span><br><span class="line">    <span class="comment">// &lt;a href=&quot;http://www.opensource.apple.com/source/CF/CF-635/CFBinaryPList.c&quot;&gt;</span></span><br><span class="line">    <span class="comment">// Apple&#x27;s binary property list parser implementation&lt;/a&gt;.</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">parseObject</span>(<span class="params">tableOffset</span>) &#123;</span><br><span class="line">		<span class="keyword">var</span> offset = offsetTable[tableOffset];</span><br><span class="line">        <span class="keyword">var</span> type = buffer[offset];</span><br><span class="line">        <span class="keyword">var</span> objType = (type &amp; <span class="number">0xF0</span>) &gt;&gt; <span class="number">4</span>;</span><br><span class="line">        <span class="comment">//First  4 bits</span></span><br><span class="line">        <span class="keyword">var</span> objInfo = (type &amp; <span class="number">0x0F</span>);</span><br><span class="line">        <span class="comment">//Second 4 bits</span></span><br><span class="line">        <span class="keyword">switch</span> (objType) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">parseSimple</span>();</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x1</span>:</span><br><span class="line">            <span class="keyword">return</span> parseInteger();</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x8</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">parseUID</span>();</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x2</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">parseReal</span>();</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x3</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">parseDate</span>();</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x6</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">parseData</span>();</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x4</span>:</span><br><span class="line">            <span class="comment">// ASCII</span></span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">parsePlistString</span>();</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x5</span>:</span><br><span class="line">            <span class="comment">// UTF-16</span></span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">parsePlistString</span>(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xA</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">parseArray</span>();</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xD</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">parseDictionary</span>();</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Unhandled type 0x&quot;</span> + objType.<span class="title function_">toString</span>(<span class="number">16</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">parseSimple</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">//Simple</span></span><br><span class="line">            <span class="keyword">switch</span> (objInfo) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0x0</span>:</span><br><span class="line">                <span class="comment">// null</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0x8</span>:</span><br><span class="line">                <span class="comment">// false</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0x9</span>:</span><br><span class="line">                <span class="comment">// true</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0xF</span>:</span><br><span class="line">                <span class="comment">// filler byte</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="attr">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Unhandled simple type 0x&quot;</span> + objType.<span class="title function_">toString</span>(<span class="number">16</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">parseInteger</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> length = <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, objInfo);</span><br><span class="line">            <span class="keyword">if</span> (length &lt; maxObjectSize) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title function_">readUInt</span>(buffer.<span class="title function_">slice</span>(offset + <span class="number">1</span>, offset + <span class="number">1</span> + length));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;To little heap space available! Wanted to read &quot;</span> + length + <span class="string">&quot; bytes, but only &quot;</span> + maxObjectSize + <span class="string">&quot; are available.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">parseUID</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> length = objInfo + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (length &lt; maxObjectSize) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title function_">readUInt</span>(buffer.<span class="title function_">slice</span>(offset + <span class="number">1</span>, offset + <span class="number">1</span> + length));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;To little heap space available! Wanted to read &quot;</span> + length + <span class="string">&quot; bytes, but only &quot;</span> + maxObjectSize + <span class="string">&quot; are available.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">parseReal</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> length = <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, objInfo);</span><br><span class="line">            <span class="keyword">if</span> (length &lt; maxObjectSize) &#123;</span><br><span class="line">                <span class="keyword">var</span> realBuffer = buffer.<span class="title function_">slice</span>(offset + <span class="number">1</span>, offset + <span class="number">1</span> + length);</span><br><span class="line">                <span class="keyword">if</span> (length === <span class="number">4</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> realBuffer.<span class="title function_">readFloatBE</span>(<span class="number">0</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (length === <span class="number">8</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> realBuffer.<span class="title function_">readDoubleBE</span>(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;To little heap space available! Wanted to read &quot;</span> + length + <span class="string">&quot; bytes, but only &quot;</span> + maxObjectSize + <span class="string">&quot; are available.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">parseDate</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (objInfo != <span class="number">0x3</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Unknown date type :&quot;</span> + objInfo + <span class="string">&quot;. Parsing anyway...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> dateBuffer = buffer.<span class="title function_">slice</span>(offset + <span class="number">1</span>, offset + <span class="number">9</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="variable constant_">EPOCH</span> + (<span class="number">1000</span> * dateBuffer.<span class="title function_">readDoubleBE</span>(<span class="number">0</span>)));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">parseData</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> dataoffset = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">var</span> length = objInfo;</span><br><span class="line">            <span class="keyword">if</span> (objInfo == <span class="number">0xF</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> int_type = buffer[offset + <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">var</span> intType = (int_type &amp; <span class="number">0xF0</span>) / <span class="number">0x10</span>;</span><br><span class="line">                <span class="keyword">if</span> (intType != <span class="number">0x1</span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;0x4: UNEXPECTED LENGTH-INT TYPE! &quot;</span> + intType);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">var</span> intInfo = int_type &amp; <span class="number">0x0F</span>;</span><br><span class="line">                <span class="keyword">var</span> intLength = <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, intInfo);</span><br><span class="line">                dataoffset = <span class="number">2</span> + intLength;</span><br><span class="line">                <span class="keyword">if</span> (intLength &lt; <span class="number">3</span>) &#123;</span><br><span class="line">                    length = <span class="title function_">readUInt</span>(buffer.<span class="title function_">slice</span>(offset + <span class="number">2</span>, offset + <span class="number">2</span> + intLength));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    length = <span class="title function_">readUInt</span>(buffer.<span class="title function_">slice</span>(offset + <span class="number">2</span>, offset + <span class="number">2</span> + intLength));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (length &lt; maxObjectSize) &#123;</span><br><span class="line">                <span class="keyword">return</span> buffer.<span class="title function_">slice</span>(offset + dataoffset, offset + dataoffset + length);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;To little heap space available! Wanted to read &quot;</span> + length + <span class="string">&quot; bytes, but only &quot;</span> + maxObjectSize + <span class="string">&quot; are available.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">parsePlistString</span>(<span class="params">isUtf16</span>) &#123;</span><br><span class="line">            isUtf16 = isUtf16 || <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">var</span> enc = <span class="string">&quot;utf8&quot;</span>;</span><br><span class="line">            <span class="keyword">var</span> length = objInfo;</span><br><span class="line">            <span class="keyword">var</span> stroffset = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (objInfo == <span class="number">0xF</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> int_type = buffer[offset + <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">var</span> intType = (int_type &amp; <span class="number">0xF0</span>) / <span class="number">0x10</span>;</span><br><span class="line">                <span class="keyword">if</span> (intType != <span class="number">0x1</span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">err</span>(<span class="string">&quot;UNEXPECTED LENGTH-INT TYPE! &quot;</span> + intType);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">var</span> intInfo = int_type &amp; <span class="number">0x0F</span>;</span><br><span class="line">                <span class="keyword">var</span> intLength = <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, intInfo);</span><br><span class="line">                <span class="keyword">var</span> stroffset = <span class="number">2</span> + intLength;</span><br><span class="line">                <span class="keyword">if</span> (intLength &lt; <span class="number">3</span>) &#123;</span><br><span class="line">                    length = <span class="title function_">readUInt</span>(buffer.<span class="title function_">slice</span>(offset + <span class="number">2</span>, offset + <span class="number">2</span> + intLength));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    length = <span class="title function_">readUInt</span>(buffer.<span class="title function_">slice</span>(offset + <span class="number">2</span>, offset + <span class="number">2</span> + intLength));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// length is String length -&gt; to get byte length multiply by 2, as 1 character takes 2 bytes in UTF-16</span></span><br><span class="line">            length *= (isUtf16 + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (length &lt; maxObjectSize) &#123;</span><br><span class="line">                <span class="keyword">var</span> plistString = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(buffer.<span class="title function_">slice</span>(offset + stroffset, offset + stroffset + length));</span><br><span class="line">                <span class="keyword">if</span> (isUtf16) &#123;</span><br><span class="line">                    plistString = <span class="title function_">swapBytes</span>(plistString);</span><br><span class="line">                    enc = <span class="string">&quot;ucs2&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> plistString.<span class="title function_">toString</span>(enc);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;To little heap space available! Wanted to read &quot;</span> + length + <span class="string">&quot; bytes, but only &quot;</span> + maxObjectSize + <span class="string">&quot; are available.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">parseArray</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> length = objInfo;</span><br><span class="line">            <span class="keyword">var</span> arrayoffset = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (objInfo == <span class="number">0xF</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> int_type = buffer[offset + <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">var</span> intType = (int_type &amp; <span class="number">0xF0</span>) / <span class="number">0x10</span>;</span><br><span class="line">                <span class="keyword">if</span> (intType != <span class="number">0x1</span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;0xa: UNEXPECTED LENGTH-INT TYPE! &quot;</span> + intType);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">var</span> intInfo = int_type &amp; <span class="number">0x0F</span>;</span><br><span class="line">                <span class="keyword">var</span> intLength = <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, intInfo);</span><br><span class="line">                arrayoffset = <span class="number">2</span> + intLength;</span><br><span class="line">                <span class="keyword">if</span> (intLength &lt; <span class="number">3</span>) &#123;</span><br><span class="line">                    length = <span class="title function_">readUInt</span>(buffer.<span class="title function_">slice</span>(offset + <span class="number">2</span>, offset + <span class="number">2</span> + intLength));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    length = <span class="title function_">readUInt</span>(buffer.<span class="title function_">slice</span>(offset + <span class="number">2</span>, offset + <span class="number">2</span> + intLength));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (length * objectRefSize &gt; maxObjectSize) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;To little heap space available!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> array = [];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">                <span class="keyword">var</span> objRef = <span class="title function_">readUInt</span>(buffer.<span class="title function_">slice</span>(offset + arrayoffset + i * objectRefSize, offset + arrayoffset + (i + <span class="number">1</span>) * objectRefSize));</span><br><span class="line">                array[i] = <span class="title function_">parseObject</span>(objRef);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> array;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">parseDictionary</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> length = objInfo;</span><br><span class="line">            <span class="keyword">var</span> dictoffset = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (objInfo == <span class="number">0xF</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> int_type = buffer[offset + <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">var</span> intType = (int_type &amp; <span class="number">0xF0</span>) / <span class="number">0x10</span>;</span><br><span class="line">                <span class="keyword">if</span> (intType != <span class="number">0x1</span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;0xD: UNEXPECTED LENGTH-INT TYPE! &quot;</span> + intType);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">var</span> intInfo = int_type &amp; <span class="number">0x0F</span>;</span><br><span class="line">                <span class="keyword">var</span> intLength = <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, intInfo);</span><br><span class="line">                dictoffset = <span class="number">2</span> + intLength;</span><br><span class="line">                <span class="keyword">if</span> (intLength &lt; <span class="number">3</span>) &#123;</span><br><span class="line">                    length = <span class="title function_">readUInt</span>(buffer.<span class="title function_">slice</span>(offset + <span class="number">2</span>, offset + <span class="number">2</span> + intLength));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    length = <span class="title function_">readUInt</span>(buffer.<span class="title function_">slice</span>(offset + <span class="number">2</span>, offset + <span class="number">2</span> + intLength));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (length * <span class="number">2</span> * objectRefSize &gt; maxObjectSize) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;To little heap space available!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (debug) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Parsing dictionary #&quot;</span> + tableOffset);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> dict = &#123;&#125;;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">                <span class="keyword">var</span> keyRef = <span class="title function_">readUInt</span>(buffer.<span class="title function_">slice</span>(offset + dictoffset + i * objectRefSize, offset + dictoffset + (i + <span class="number">1</span>) * objectRefSize));</span><br><span class="line">                <span class="keyword">var</span> valRef = <span class="title function_">readUInt</span>(buffer.<span class="title function_">slice</span>(offset + dictoffset + (length * objectRefSize) + i * objectRefSize, offset + dictoffset + (length * objectRefSize) + (i + <span class="number">1</span>) * objectRefSize));</span><br><span class="line">                <span class="keyword">var</span> key = <span class="title function_">parseObject</span>(keyRef);</span><br><span class="line">                <span class="keyword">var</span> val = <span class="title function_">parseObject</span>(valRef);</span><br><span class="line">                <span class="keyword">if</span> (debug) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;  DICT #&quot;</span> + tableOffset + <span class="string">&quot;: Mapped &quot;</span> + key + <span class="string">&quot; to &quot;</span> + val);</span><br><span class="line">                &#125;</span><br><span class="line">                dict[key] = val;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> dict;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [<span class="title function_">parseObject</span>(topObject)];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 你的数据放在`window.__DATA__` 中</span></span><br><span class="line"><span class="keyword">var</span> result0 = <span class="title function_">btool</span>(<span class="variable language_">window</span>.<span class="property">__DATA__</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">warn</span>(result0);</span><br><span class="line">result1 = <span class="title function_">decrypto</span>(result0[<span class="number">1</span>], result0[<span class="number">0</span>])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">warn</span>(result1);</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">result</span>=<span class="title function_">parseBuffer</span>(result1)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="variable language_">window</span>.<span class="property">result</span>)</span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol start="0">
<li>初步能跑搞了一天多，后续优化找库花了更多时间。</li>
<li>前端搞这些加密真没卵用，对于我很少做逆向的，除了恶心我两天，最后还是能获取到数据，当然wasm我还没尝试过逆向</li>
<li>学到了还有<code>xxhash</code>这玩意, 以前只了解<code>md5</code>, <code>sha</code></li>
<li>虽然前端代码通过打包，让很多变量看不到了，但是依赖的库中的字符串，hash值依然是很容易入手的点，加上体验很好的chrome断点调试</li>
<li>毕竟js不是强类型，出现Buffer&#x2F;Uint8array 这种比较模糊的，可以先实现，后整理</li>
<li>实际上后续发现，虽然搜索做了这个加密，但实际上，还有推荐<code>https://book.douban.com/j/subject_suggest?q=%E5%AE%9E%E5%8F%98%E5%87%BD+%E6%95%B0</code> 直接返回的json，另外点开<code>https://book.douban.com/subject/4828876/</code> 以后 也是html源码中就有数据，好像完全不需要本篇的破解</li>
<li>有些通用的能找到源码，但有些被魔改的部分还是需要手动定位。</li>
</ol>
<h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><p><a href="https://code.google.com/archive/p/xxhash/">xxhash google</a></p>
<p><a href="https://www.npmjs.com/package/xxhashjs">xxhashjs</a></p>
<p><a href="https://github.com/pierrec/js-xxhash/blob/master/build/xxhash.min.js">xxhash.min.js</a></p>
<p><a href="http://tnga.github.io/lib.ijs/docs/i_core.js.html">Uint8Array.prototype.copy</a></p>
<p><a href="https://github.com/joeferner/node-bplist-parser/blob/master/bplistParser.js">bplistparser</a></p>
<p><a href="https://bundle.run/buffer@6.0.3">buffer.min.js</a></p>
]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>豆瓣</tag>
      </tags>
  </entry>
  <entry>
    <title>给老电脑换个ssd, cheatsheet</title>
    <url>/Blog/22-03-13-newssdforoldcomputer/</url>
    <content><![CDATA[<p><strong>带sudo的一定小心, 别选错盘了</strong></p>
<h1 id="工具推荐"><a href="#工具推荐" class="headerlink" title="工具推荐"></a>工具推荐</h1><p>bcompare</p>
<p>gparted</p>
<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><p>io测试</p>
<p><a href="https://linuxreviews.org/HOWTO_Test_Disk_I/O_Performance#Testing_random_4K_reads">https://linuxreviews.org/HOWTO_Test_Disk_I/O_Performance#Testing_random_4K_reads</a></p>
<p>大块读<code>fio --name TEST --eta-newline=5s --filename=temp.file --rw=read --size=2g --io_size=10g --blocksize=1024k --ioengine=libaio --fsync=10000 --iodepth=32 --direct=1 --numjobs=1 --runtime=60 --group_reporting</code></p>
<p>大块写<code>fio --name TEST --eta-newline=5s --filename=temp.file --rw=write --size=2g --io_size=10g --blocksize=1024k --ioengine=libaio --fsync=10000 --iodepth=32 --direct=1 --numjobs=1 --runtime=60 --group_reporting</code></p>
<p>随机4K读<code>fio --name TEST --eta-newline=5s --filename=temp.file --rw=randread --size=2g --io_size=10g --blocksize=4k --ioengine=libaio --fsync=1 --iodepth=1 --direct=1 --numjobs=32 --runtime=60 --group_reporting</code></p>
<span id="more"></span>

<p>带进度拷贝</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rsync -aP &lt;源&gt; &lt;目标&gt;</span><br></pre></td></tr></table></figure>

<p>磁盘情况查看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">df -h</span><br></pre></td></tr></table></figure>

<p>动态观察</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">watch</span><br></pre></td></tr></table></figure>

<p>文件夹统计</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">du --max-depth=1 -h</span><br></pre></td></tr></table></figure>

<p>停用swap</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo swapoff -a</span><br></pre></td></tr></table></figure>

<p>磁盘使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iotop</span><br></pre></td></tr></table></figure>

<p>进程状态</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">htop</span><br></pre></td></tr></table></figure>

<p>停止挂载</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">umount /xxxxx(根据df看)</span><br></pre></td></tr></table></figure>

<p>unmount时查看持有状态</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo fuser -mv /media/xxxxxx</span><br></pre></td></tr></table></figure>

<p>分区编辑</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo fdisk</span><br></pre></td></tr></table></figure>

<p>uuid</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">blkid</span><br></pre></td></tr></table></figure>

<p>启动时mount <code>/etc/fstab</code></p>
]]></content>
      <categories>
        <category>backend</category>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>ssd</tag>
      </tags>
  </entry>
  <entry>
    <title>TS Cheat Sheet</title>
    <url>/Blog/22-06-30-ts-cheatsheet/</url>
    <content><![CDATA[<h1 id="TS-Cheat-Sheet"><a href="#TS-Cheat-Sheet" class="headerlink" title="TS Cheat Sheet"></a>TS Cheat Sheet</h1><h2 id="为什么写这篇"><a href="#为什么写这篇" class="headerlink" title="为什么写这篇"></a>为什么写这篇</h2><p><a href="https://github.com/type-challenges/type-challenges">antfu的题目</a> 大多就是基础方法+递归, issues充斥着重复内容, 最开始还有点TS的味道, 后面完全变成了只有基础方法, 组合出一个东西, 感觉这个更适合作为递归练习题, 而不是TS练习题 (没有数值强行用数组拼接+length, 等等</p>
<p>TS有文档,是英文的,难以用中文检索</p>
<p>本篇呢,是cheatsheet,不是document,把实际会用到常用的一些列出来+一些场景描述</p>
<span id="more"></span>

<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><h3 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h3><p><a href="https://www.typescriptlang.org/docs/handbook/2/everyday-types.html">TS默认类型</a></p>
<p><a href="https://www.typescriptlang.org/docs/handbook/2/narrowing.html#truthiness-narrowing">范围控制 通过各种if让一个范围内 的类型被自动推断</a></p>
<p><a href="https://www.typescriptlang.org/docs/handbook/2/functions.html">函数</a></p>
<p><a href="https://www.typescriptlang.org/docs/handbook/2/objects.html">对象</a></p>
<p><a href="https://www.typescriptlang.org/docs/handbook/2/generics.html">Generic 通用类型</a></p>
<p><a href="https://www.typescriptlang.org/docs/handbook/2/conditional-types.html">Conditional Types</a></p>
<p><a href="https://www.typescriptlang.org/docs/handbook/2/mapped-types.html">Mapped Types</a></p>
<p><a href="https://www.typescriptlang.org/docs/handbook/2/template-literal-types.html">模板字面类型</a></p>
<p><a href="https://www.typescriptlang.org/docs/handbook/2/classes.html">类</a></p>
<p><a href="https://www.typescriptlang.org/docs/handbook/2/modules.html">modules</a></p>
<h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p><a href="https://www.typescriptlang.org/play">playground</a></p>
<p><a href="https://www.npmjs.com/package/ts-toolbelt">ts-toolbelt</a></p>
<p><a href="https://www.npmjs.com/package/utility-types">utility-types</a></p>
<h3 id="自定义类型名"><a href="#自定义类型名" class="headerlink" title="自定义类型名"></a>自定义类型名</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">HelloWorld</span> = <span class="built_in">string</span></span><br></pre></td></tr></table></figure>

<h3 id="有默认值的参数"><a href="#有默认值的参数" class="headerlink" title="有默认值的参数"></a>有默认值的参数</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">HelloWord</span>&lt;T,W = 默认值&gt;</span><br></pre></td></tr></table></figure>

<h3 id="数组内容的类型Union"><a href="#数组内容的类型Union" class="headerlink" title="数组内容的类型Union"></a>数组内容的类型Union</h3><p><code>T</code>是数组类型</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">T[<span class="built_in">number</span>]</span><br></pre></td></tr></table></figure>

<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>空对象</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="built_in">never</span>&gt;</span><br></pre></td></tr></table></figure>

<p>对象里面, 父类的required key不比子类多, 且对应的是public</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> p0 = &#123;&#125; <span class="keyword">extends</span> &#123;&#125;?<span class="attr">true</span>:<span class="literal">false</span></span><br><span class="line"><span class="comment">// p0 = true</span></span><br><span class="line"><span class="keyword">type</span> p1 = &#123;&#125; <span class="keyword">extends</span> &#123;x?:<span class="number">3</span>&#125;?<span class="attr">true</span>:<span class="literal">false</span></span><br><span class="line"><span class="comment">// p1 = true</span></span><br><span class="line"><span class="keyword">type</span> p2 = &#123;&#125; <span class="keyword">extends</span> &#123;<span class="attr">x</span>:<span class="number">3</span>&#125;?<span class="attr">true</span>:<span class="literal">false</span></span><br><span class="line"><span class="comment">// p2 = false</span></span><br><span class="line"><span class="keyword">type</span> p3 = &#123;<span class="attr">x</span>:<span class="number">3</span>&#125; <span class="keyword">extends</span> &#123;&#125;?<span class="attr">true</span>:<span class="literal">false</span></span><br><span class="line"><span class="comment">// p3 = true</span></span><br></pre></td></tr></table></figure>

<h3 id="条件类型"><a href="#条件类型" class="headerlink" title="条件类型"></a>条件类型</h3><p><a href="https://www.typescriptlang.org/docs/handbook/2/conditional-types.html">Conditional Types</a></p>
<p>相当于引入了<code>if</code>逻辑, 有了这个你可以自定义很多默认未提供的操作符, 并且可以递归的定义</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">T <span class="keyword">extends</span> U ? X : Y</span><br></pre></td></tr></table></figure>

<p>注意的是 T 如果是Union类型, 会<strong>分别</strong>对Union的<strong>每一个</strong>进行校验, 见 <a href="https://www.typescriptlang.org/docs/handbook/2/conditional-types.html#distributive-conditional-types">distributive-conditional-types</a></p>
<p>为了防止 Union 被拆散 可以套一层括号</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> W&lt;T&gt; = T <span class="keyword">extends</span> <span class="built_in">never</span> ? <span class="built_in">never</span> : [T]</span><br><span class="line"><span class="keyword">type</span> K = W&lt;<span class="number">1</span>|<span class="number">2</span>&gt;</span><br><span class="line"><span class="comment">// K = [1] | [2] 而不是 [1|2]</span></span><br></pre></td></tr></table></figure>

<p><code>U</code> 可以是单独类型&#x2F;数值&#x2F;字符串,联合类型, 甚至</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="string">`<span class="subst">$&#123;<span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span>&#125;</span><span class="subst">$&#123;infer R&#125;</span>`</span></span><br></pre></td></tr></table></figure>

<p>而且这似乎在<code>+?</code>,<code>-?</code>,<code>-readonly</code>,<code>+readonly</code>上没法用,还要拆开再合并</p>
<p>注意<code>+?</code> 会让类型多<code>|undefined</code>,<code>-?</code> 会去掉<code>undefined</code>, 所以对对象 <code>Required&lt;Partial&lt;Type&gt;&gt;</code> 操作, <code>undefined</code> 会变<code>never</code></p>
<h4 id="在条件中提取未知的具体类型"><a href="#在条件中提取未知的具体类型" class="headerlink" title="在条件中提取未知的具体类型"></a>在条件中提取未知的具体类型</h4><p><a href="https://www.typescriptlang.org/docs/handbook/2/conditional-types.html#inferring-within-conditional-types">inferring-within-conditional-types</a></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Flatten</span>&lt;<span class="title class_">Type</span>&gt; = <span class="title class_">Type</span> <span class="keyword">extends</span> <span class="title class_">Array</span>&lt;infer <span class="variable constant_">XXX</span>&gt; ? <span class="variable constant_">XXX</span> : <span class="title class_">Type</span>;</span><br></pre></td></tr></table></figure>

<p>递归例子</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">W&lt;T <span class="keyword">extends</span> S&lt;<span class="built_in">any</span>&gt;&gt; = T <span class="keyword">extends</span> S&lt;infer U&gt; ? (U <span class="keyword">extends</span> S&lt;<span class="built_in">any</span>&gt; ? W&lt;U&gt; : U) : <span class="built_in">never</span></span><br></pre></td></tr></table></figure>

<p>可以递归提取数组, 对象值, 函数参数, 函数返回值</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Includes</span>&lt;T <span class="keyword">extends</span> <span class="keyword">readonly</span> <span class="built_in">any</span>[], U&gt; = T <span class="keyword">extends</span> [infer A, ...infer R] ? (<span class="title class_">Equal</span>&lt;A, U&gt; <span class="keyword">extends</span> <span class="literal">true</span> ? <span class="literal">true</span> : <span class="title class_">Includes</span>&lt;R, U&gt;) : <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>函数参数类型 union 的提取</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Y =  (<span class="function">(<span class="params">x: &#123;y:<span class="number">3</span>&#125;</span>) =&gt;</span> <span class="built_in">any</span>) | (<span class="function">(<span class="params">z: &#123;w:<span class="number">4</span>&#125;</span>) =&gt;</span> <span class="built_in">any</span>)</span><br><span class="line"><span class="keyword">type</span> X = Y <span class="keyword">extends</span> (<span class="attr">x</span>: infer V) =&gt; <span class="built_in">any</span> ? V : <span class="built_in">never</span></span><br><span class="line"><span class="comment">// X = &#123;y:3&#125; &amp; &#123;w:4&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="Union"><a href="#Union" class="headerlink" title="Union"></a>Union</h3><p>合并两个类型, 并让类型自动区别具体是哪个, 例如接口成功返回字段和失败返回字段不一样</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">SuccessResp</span>&#123;</span><br><span class="line">  <span class="attr">status</span>: <span class="number">0</span>; <span class="comment">// 枚举量</span></span><br><span class="line">  <span class="attr">value</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ErrorResp</span>&#123;</span><br><span class="line">  <span class="attr">status</span>: <span class="string">&#x27;error&#x27;</span>; <span class="comment">// 枚举量</span></span><br><span class="line">  <span class="attr">message</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Resp</span> = <span class="title class_">SuccessResp</span> | <span class="title class_">ErrorResp</span></span><br><span class="line"><span class="comment">// ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">r</span>: <span class="title class_">Readonly</span>&lt;<span class="title class_">Resp</span>&gt; = api.<span class="title function_">xxx</span>(...);</span><br><span class="line"><span class="keyword">if</span> (r.<span class="property">status</span> == <span class="string">&#x27;error&#x27;</span>)&#123;</span><br><span class="line">  <span class="comment">// ... ErrorResp</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="comment">// ... SuccessResp</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="获取一个对象的所有键的字符串Union"><a href="#获取一个对象的所有键的字符串Union" class="headerlink" title="获取一个对象的所有键的字符串Union"></a>获取一个对象的所有键的字符串Union</h3><p><a href="https://www.typescriptlang.org/docs/handbook/2/keyof-types.html">Keyof Type Operator</a></p>
<p>有了这个你可以去对对象键操作做校验</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Point</span> = &#123; <span class="attr">x</span>: <span class="built_in">number</span>; <span class="attr">y</span>: <span class="built_in">number</span> &#125;;</span><br><span class="line"><span class="keyword">type</span> P = keyof <span class="title class_">Point</span>;</span><br><span class="line"><span class="comment">// P = &#x27;x&#x27; | &#x27;y&#x27;</span></span><br></pre></td></tr></table></figure>

<p>同理获得对象所有值的Union</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Point</span> = &#123; <span class="attr">x</span>: <span class="built_in">number</span>; <span class="attr">y</span>: <span class="built_in">number</span> &#125;;</span><br><span class="line"><span class="keyword">type</span> P = <span class="title class_">Point</span>[keyof <span class="title class_">Point</span>];</span><br><span class="line"><span class="comment">// P = number</span></span><br></pre></td></tr></table></figure>

<h3 id="同值类型不同键名"><a href="#同值类型不同键名" class="headerlink" title="同值类型不同键名"></a>同值类型不同键名</h3><p><a href="https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type">Record&lt;Keys, Type&gt;</a></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Record</span>&lt;<span class="title class_">Keys</span>, <span class="title class_">Type</span>&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">CatInfo</span> &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">breed</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">type</span> <span class="title class_">CatName</span> = <span class="string">&quot;miffy&quot;</span> | <span class="string">&quot;boris&quot;</span> | <span class="string">&quot;mordred&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="attr">cats</span>: <span class="title class_">Record</span>&lt;<span class="title class_">CatName</span>, <span class="title class_">CatInfo</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">miffy</span>: &#123; <span class="attr">age</span>: <span class="number">10</span>, <span class="attr">breed</span>: <span class="string">&quot;Persian&quot;</span> &#125;,</span><br><span class="line">  <span class="attr">boris</span>: &#123; <span class="attr">age</span>: <span class="number">5</span>, <span class="attr">breed</span>: <span class="string">&quot;Maine Coon&quot;</span> &#125;,</span><br><span class="line">  <span class="attr">mordred</span>: &#123; <span class="attr">age</span>: <span class="number">16</span>, <span class="attr">breed</span>: <span class="string">&quot;British Shorthair&quot;</span> &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="字段相关工具-Pick-x2F-Omit-x2F-Mapped-Types"><a href="#字段相关工具-Pick-x2F-Omit-x2F-Mapped-Types" class="headerlink" title="字段相关工具 Pick &#x2F; Omit &#x2F; Mapped Types"></a>字段相关工具 Pick &#x2F; Omit &#x2F; Mapped Types</h3><p>字段相关工具</p>
<p><a href="https://www.typescriptlang.org/docs/handbook/utility-types.html">Utility Types</a></p>
<p>从已有的类型中取其中部分字段建立新类型</p>
<p><a href="https://www.typescriptlang.org/docs/handbook/utility-types.html#picktype-keys">Pick&lt;Type, Keys&gt;</a></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Pick</span>&lt;<span class="title class_">Type</span>, <span class="title class_">Keys</span>&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Todo</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">description</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">completed</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TodoPreview</span> = <span class="title class_">Pick</span>&lt;<span class="title class_">Todo</span>, <span class="string">&quot;title&quot;</span> | <span class="string">&quot;completed&quot;</span>&gt;;</span><br></pre></td></tr></table></figure>

<p>从已有的类型中移除部分字段建立新类型</p>
<p><a href="https://www.typescriptlang.org/docs/handbook/utility-types.html#omittype-keys">Omit&lt;Type, Keys&gt;</a></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Omit</span>&lt;<span class="title class_">Type</span>, <span class="title class_">Keys</span>&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Todo</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">description</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">completed</span>: <span class="built_in">boolean</span>;</span><br><span class="line">  <span class="attr">createdAt</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TodoPreview</span> = <span class="title class_">Omit</span>&lt;<span class="title class_">Todo</span>, <span class="string">&quot;description&quot;</span>&gt;;</span><br></pre></td></tr></table></figure>

<p>自定义需要哪些键, 从哪个Type中取, 甚至做一些去除 <code>?</code>, 键名重定义<code>as</code>的操作(可以<code>as</code>到<code>never</code> 消除这个键)</p>
<p><a href="https://www.typescriptlang.org/docs/handbook/2/mapped-types.html">Mapped Types</a></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">[<span class="variable constant_">XXX</span> <span class="keyword">in</span> keyof T]: ...</span><br></pre></td></tr></table></figure>

<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Getters</span>&lt;<span class="title class_">Type</span>&gt; = &#123;</span><br><span class="line">    [<span class="title class_">Property</span> <span class="keyword">in</span> keyof <span class="title class_">Type</span> <span class="keyword">as</span> <span class="string">`get<span class="subst">$&#123;Capitalize&lt;<span class="built_in">string</span> &amp; Property&gt;&#125;</span>`</span>]: <span class="function">() =&gt;</span> <span class="title class_">Type</span>[<span class="title class_">Property</span>]</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="attr">location</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">type</span> <span class="title class_">LazyPerson</span> = <span class="title class_">Getters</span>&lt;<span class="title class_">Person</span>&gt;;</span><br><span class="line">         </span><br><span class="line"><span class="comment">// type LazyPerson = &#123;</span></span><br><span class="line"><span class="comment">//     getName: () =&gt; string;</span></span><br><span class="line"><span class="comment">//     getAge: () =&gt; number;</span></span><br><span class="line"><span class="comment">//     getLocation: () =&gt; string;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>

<p>更新对象部分内容时</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Partial</span>&lt;<span class="title class_">Type</span>&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Todo</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">description</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">updateTodo</span>(<span class="params">todo: Todo, fieldsToUpdate: Partial&lt;Todo&gt;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; ...todo, ...fieldsToUpdate &#125;;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> todo1 = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;organize desk&quot;</span>,</span><br><span class="line">  <span class="attr">description</span>: <span class="string">&quot;clear clutter&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> todo2 = <span class="title function_">updateTodo</span>(todo1, &#123;</span><br><span class="line">  <span class="attr">description</span>: <span class="string">&quot;throw out trash&quot;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="Equal"><a href="#Equal" class="headerlink" title="Equal"></a>Equal</h3><p><a href="https://stackoverflow.com/questions/53807517/how-to-test-if-two-types-are-exactly-the-same/53808212#53808212">StackOverflow How to test if two types are exactly the same</a></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">IfEquals</span>&lt;T, U, Y=<span class="built_in">unknown</span>, N=<span class="built_in">never</span>&gt; =</span><br><span class="line">  (&lt;G&gt;<span class="function">() =&gt;</span> G <span class="keyword">extends</span> T ? <span class="number">1</span> : <span class="number">2</span>) <span class="keyword">extends</span></span><br><span class="line">  (&lt;G&gt;<span class="function">() =&gt;</span> G <span class="keyword">extends</span> U ? <span class="number">1</span> : <span class="number">2</span>) ? Y : N;</span><br></pre></td></tr></table></figure>

<h3 id="只读"><a href="#只读" class="headerlink" title="只读"></a>只读</h3><p>只有首次赋值, 不能修改, 和freeze一样,不影响二级的内容,只是顶级的内容 </p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> freeze&lt;<span class="title class_">Type</span>&gt;(<span class="attr">obj</span>: <span class="title class_">Type</span>): <span class="title class_">Readonly</span>&lt;<span class="title class_">Type</span>&gt;;</span><br></pre></td></tr></table></figure>

<p><a href="https://www.typescriptlang.org/docs/handbook/utility-types.html#readonlytype">Readonly<Type></a></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Readonly</span>&lt;<span class="title class_">Type</span>&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Todo</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="attr">todo</span>: <span class="title class_">Readonly</span>&lt;<span class="title class_">Todo</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;Delete inactive users&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="从Union-Type中去掉指定的一些Type"><a href="#从Union-Type中去掉指定的一些Type" class="headerlink" title="从Union Type中去掉指定的一些Type"></a>从Union Type中去掉指定的一些Type</h3><p><a href="https://www.typescriptlang.org/docs/handbook/utility-types.html#excludeuniontype-excludedmembers">Exclude&lt;UnionType, ExcludedMembers&gt;</a></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Exclude</span>&lt;<span class="title class_">UnionType</span>, <span class="title class_">ExcludedMembers</span>&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="variable constant_">T0</span> = <span class="title class_">Exclude</span>&lt;<span class="string">&quot;a&quot;</span> | <span class="string">&quot;b&quot;</span> | <span class="string">&quot;c&quot;</span>, <span class="string">&quot;a&quot;</span>&gt;;</span><br><span class="line"><span class="comment">// type T0 = &quot;b&quot; | &quot;c&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="函数-参数数组-x2F-返回类型"><a href="#函数-参数数组-x2F-返回类型" class="headerlink" title="函数 参数数组 &#x2F; 返回类型"></a>函数 参数数组 &#x2F; 返回类型</h3><p>参数数组</p>
<p><a href="https://www.typescriptlang.org/docs/handbook/utility-types.html#parameterstype">Parameters<Type></a></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Parameters</span>&lt;<span class="title class_">Type</span>&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">Parameters</span>&lt;<span class="function">(<span class="params">s: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">void</span>&gt;;</span><br><span class="line"><span class="comment">// type T1 = [s: string]</span></span><br></pre></td></tr></table></figure>

<p>构造函数参数</p>
<p><a href="https://www.typescriptlang.org/docs/handbook/utility-types.html#constructorparameterstype">ConstructorParameters<Type></a></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title class_">ConstructorParameters</span>&lt;<span class="title class_">Type</span>&gt;</span><br></pre></td></tr></table></figure>

<p>函数返回类型</p>
<p><a href="https://www.typescriptlang.org/docs/handbook/utility-types.html#returntypetype">ReturnType<Type></a></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title class_">ReturnType</span>&lt;<span class="title class_">Type</span>&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="variable constant_">T0</span> = <span class="title class_">ReturnType</span>&lt;<span class="function">() =&gt;</span> <span class="built_in">string</span>&gt;; </span><br><span class="line"><span class="comment">// type T0 = string</span></span><br></pre></td></tr></table></figure>

<h3 id="this-标注"><a href="#this-标注" class="headerlink" title="this 标注"></a>this 标注</h3><p>指定方法中&#x2F;对象中的的this的字段, it serves as a marker for a contextual this type. Note that the noImplicitThis flag must be enabled to use this utility.</p>
<p><a href="https://www.typescriptlang.org/docs/handbook/utility-types.html#thistypetype">ThisType<Type></a></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title class_">ThisType</span>&lt;<span class="title class_">Type</span>&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ObjectDescriptor</span>&lt;D, M&gt; = &#123;</span><br><span class="line">  data?: D;</span><br><span class="line">  methods?: M &amp; <span class="title class_">ThisType</span>&lt;D &amp; M&gt;; <span class="comment">// Type of &#x27;this&#x27; in methods is D &amp; M</span></span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> makeObject&lt;D, M&gt;(<span class="attr">desc</span>: <span class="title class_">ObjectDescriptor</span>&lt;D, M&gt;): D &amp; M &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">data</span>: <span class="built_in">object</span> = desc.<span class="property">data</span> || &#123;&#125;;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">methods</span>: <span class="built_in">object</span> = desc.<span class="property">methods</span> || &#123;&#125;;</span><br><span class="line">  <span class="keyword">return</span> &#123; ...data, ...methods &#125; <span class="keyword">as</span> D &amp; M;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> obj = <span class="title function_">makeObject</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">moveBy</span>(<span class="params">dx: <span class="built_in">number</span>, dy: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">x</span> += dx; <span class="comment">// Strongly typed this</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">y</span> += dy; <span class="comment">// Strongly typed this</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">obj.<span class="property">x</span> = <span class="number">10</span>;</span><br><span class="line">obj.<span class="property">y</span> = <span class="number">20</span>;</span><br><span class="line">obj.<span class="title function_">moveBy</span>(<span class="number">5</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure>

<p>移除Type的this参数。如果Type没有明确声明的this参数，结果只是Type。否则，一个没有this参数的新函数类型将从Type创建。泛型被擦除，只有最后的重载签名被传播到新的函数类型。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title class_">OmitThisParameter</span>&lt;<span class="title class_">Type</span>&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">toHex</span>(<span class="params"><span class="variable language_">this</span>: <span class="built_in">Number</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">toString</span>(<span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="attr">fiveToHex</span>: <span class="title class_">OmitThisParameter</span>&lt;<span class="keyword">typeof</span> toHex&gt; = toHex.<span class="title function_">bind</span>(<span class="number">5</span>);</span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fiveToHex</span>());</span><br></pre></td></tr></table></figure>

<h3 id="装饰器Decorators"><a href="#装饰器Decorators" class="headerlink" title="装饰器Decorators"></a>装饰器Decorators</h3><p><a href="https://www.typescriptlang.org/docs/handbook/decorators.html">Decorators</a></p>
<p><a href="https://saul-mirone.github.io/zh-hans/a-complete-guide-to-typescript-decorator">比官方还详细的指南</a></p>
<p>类装饰器, target 是类的构造器, 返回新的构造器</p>
<p>例如我们可以添加一个toString方法给所有的类来覆盖它原有的toString方法。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ClassDecorator</span> = &lt;<span class="title class_">TFunction</span> <span class="keyword">extends</span> <span class="title class_">Function</span>&gt;</span><br><span class="line">  <span class="function">(<span class="params">target: TFunction</span>) =&gt;</span> <span class="title class_">TFunction</span> | <span class="built_in">void</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Consturctor</span> = &#123; <span class="keyword">new</span> (...<span class="attr">args</span>: <span class="built_in">any</span>[]): <span class="built_in">any</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> toString&lt;T <span class="keyword">extends</span> <span class="title class_">Consturctor</span>&gt;(<span class="title class_">BaseClass</span>: T) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">class</span> <span class="title class_">extends</span> <span class="title class_">BaseClass</span> &#123;</span><br><span class="line">    <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@toString</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> foo = <span class="string">&quot;foo&quot;</span>;</span><br><span class="line">  <span class="keyword">public</span> num = <span class="number">24</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title function_">C</span>().<span class="title function_">toString</span>())</span><br></pre></td></tr></table></figure>

<p>装饰器并没有类型保护，这意味着：<a href="https://github.com/microsoft/TypeScript/issues/4881">issues 4881</a></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">function</span> <span class="title class_">Blah</span>&lt;T&gt;(<span class="attr">target</span>: T): T &amp; &#123;<span class="attr">foo</span>: <span class="built_in">number</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Blah</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">  <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">foo</span>; <span class="comment">// Property &#x27;foo&#x27; does not exist on type &#x27;Foo&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Foo</span>().<span class="property">foo</span>; <span class="comment">// Property &#x27;foo&#x27; does not exist on type &#x27;Foo&#x27;</span></span><br></pre></td></tr></table></figure>

<p>解决方案</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">function</span> <span class="title class_">Blah</span>&lt;T&gt;(<span class="attr">target</span>: T): T &amp; &#123;<span class="attr">foo</span>: <span class="built_in">number</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Blah</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Base</span> &#123;</span><br><span class="line">  <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">foo</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Foo</span>().<span class="property">foo</span>;</span><br></pre></td></tr></table></figure>

<p>属性装饰器</p>
<p>target: 对于静态成员来说是类的构造器，对于实例成员来说是类的原型链。</p>
<p>propertyKey: 属性的名称</p>
<p>除了用于收集信息外，属性装饰器也可以用来给类添加额外的方法和属性。 例如我们可以写一个装饰器来给某些属性添加监听器。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">PropertyDecorator</span> =</span><br><span class="line">  <span class="function">(<span class="params">target: <span class="built_in">Object</span>, propertyKey: <span class="built_in">string</span> | <span class="built_in">symbol</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">capitalizeFirstLetter</span>(<span class="params">str: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> str.<span class="title function_">charAt</span>(<span class="number">0</span>).<span class="title function_">toUpperCase</span>() + str.<span class="title function_">slice</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">observable</span>(<span class="params">target: <span class="built_in">any</span>, key: <span class="built_in">string</span></span>): <span class="built_in">any</span> &#123;</span><br><span class="line">  <span class="comment">// prop -&gt; onPropChange</span></span><br><span class="line">  <span class="keyword">const</span> targetKey = <span class="string">&quot;on&quot;</span> + <span class="title function_">capitalizeFirstLetter</span>(key) + <span class="string">&quot;Change&quot;</span>;</span><br><span class="line"></span><br><span class="line">  target[targetKey] =</span><br><span class="line">    <span class="keyword">function</span> (<span class="params">fn: (prev: <span class="built_in">any</span>, next: <span class="built_in">any</span>) =&gt; <span class="built_in">void</span></span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> prev = <span class="variable language_">this</span>[key];</span><br><span class="line">      <span class="title class_">Reflect</span>.<span class="title function_">defineProperty</span>(<span class="variable language_">this</span>, key, &#123;</span><br><span class="line">        <span class="title function_">set</span>(<span class="params">next</span>) &#123;</span><br><span class="line">          <span class="title function_">fn</span>(prev, next);</span><br><span class="line">          prev = next;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">  <span class="meta">@observable</span></span><br><span class="line">  foo = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@observable</span></span><br><span class="line">  bar = <span class="string">&quot;bar&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> c = <span class="keyword">new</span> <span class="title function_">C</span>();</span><br><span class="line"></span><br><span class="line">c.<span class="title function_">onFooChange</span>(<span class="function">(<span class="params">prev, next</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`prev: <span class="subst">$&#123;prev&#125;</span>, next: <span class="subst">$&#123;next&#125;</span>`</span>))</span><br><span class="line">c.<span class="title function_">onBarChange</span>(<span class="function">(<span class="params">prev, next</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`prev: <span class="subst">$&#123;prev&#125;</span>, next: <span class="subst">$&#123;next&#125;</span>`</span>))</span><br><span class="line"></span><br><span class="line">c.<span class="property">foo</span> = <span class="number">100</span>; <span class="comment">// -&gt; prev: -1, next: 100</span></span><br><span class="line">c.<span class="property">foo</span> = -<span class="number">3.14</span>; <span class="comment">// -&gt; prev: 100, next: -3.14</span></span><br><span class="line">c.<span class="property">bar</span> = <span class="string">&quot;baz&quot;</span>; <span class="comment">// -&gt; prev: bar, next: baz</span></span><br><span class="line">c.<span class="property">bar</span> = <span class="string">&quot;sing&quot;</span>; <span class="comment">// -&gt; prev: baz, next: sing</span></span><br></pre></td></tr></table></figure>

<p>方法装饰器</p>
<p>target: 对于静态成员来说是类的构造器，对于实例成员来说是类的原型链。</p>
<p>propertyKey: 属性的名称。</p>
<p>descriptor: 属性的描述器。</p>
<p>返回： 如果返回了值，它会被用于替代属性的描述器。</p>
<p>方法装饰器不同于属性装饰器的地方在于descriptor参数。 通过这个参数我们可以修改方法原本的实现，添加一些共用逻辑。 例如我们可以给一些方法添加打印输入与输出的能力：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">MethodDecorator</span> = &lt;T&gt;<span class="function">(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  target: <span class="built_in">Object</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  propertyKey: <span class="built_in">string</span> | <span class="built_in">symbol</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  descriptor: TypedPropertyDescriptor&lt;T&gt;</span></span></span><br><span class="line"><span class="params"><span class="function"></span>) =&gt;</span> <span class="title class_">TypedPropertyDescriptor</span>&lt;T&gt; | <span class="built_in">void</span>;</span><br></pre></td></tr></table></figure>



<p>访问器装饰器</p>
<p>访问器装饰器总体上讲和方法装饰器很接近，唯一的区别在于描述器中有的key不同：</p>
<p>方法装饰器的描述器的key为：</p>
<ul>
<li><p>value</p>
</li>
<li><p>writable</p>
</li>
<li><p>enumerable</p>
</li>
<li><p>configurable</p>
</li>
</ul>
<p>访问器装饰器的描述器的key为：</p>
<ul>
<li><p>get</p>
</li>
<li><p>set</p>
</li>
<li><p>enumerable</p>
</li>
<li><p>configurable</p>
</li>
</ul>
<p>例如，我们可以将某个属性的赋值 改为 展开拷贝：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">immutable</span>(<span class="params">target: <span class="built_in">any</span>, propertyKey: <span class="built_in">string</span>, descriptor: PropertyDescriptor</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> original = descriptor.<span class="property">set</span>;</span><br><span class="line"></span><br><span class="line">  descriptor.<span class="property">set</span> = <span class="keyword">function</span> (<span class="params">value: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> original.<span class="title function_">call</span>(<span class="variable language_">this</span>, &#123; ...value &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> _point = &#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span> &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@immutable</span></span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">point</span>(<span class="params">value: &#123; x: <span class="built_in">number</span>, y: <span class="built_in">number</span> &#125;</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_point</span> = value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">point</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_point</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> c = <span class="keyword">new</span> <span class="title function_">C</span>();</span><br><span class="line"><span class="keyword">const</span> point = &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">1</span> &#125;</span><br><span class="line">c.<span class="property">point</span> = point;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c.<span class="property">point</span> === point)</span><br><span class="line"><span class="comment">// -&gt; false</span></span><br></pre></td></tr></table></figure>

<p>参数装饰器</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ParameterDecorator</span> = <span class="function">(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  target: <span class="built_in">Object</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  propertyKey: <span class="built_in">string</span> | <span class="built_in">symbol</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  parameterIndex: <span class="built_in">number</span></span></span></span><br><span class="line"><span class="params"><span class="function"></span>) =&gt;</span> <span class="built_in">void</span>;</span><br></pre></td></tr></table></figure>

<p>target: 对于静态成员来说是类的构造器，对于实例成员来说是类的原型链。</p>
<p>propertyKey: 属性的名称(注意是方法的名称，而不是参数的名称)。</p>
<p>parameterIndex: 参数在方法中所处的位置的下标。</p>
<hr>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">key: <span class="built_in">string</span></span>): <span class="built_in">any</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;evaluate: &quot;</span>, key);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;call: &quot;</span>, key);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@f</span>(<span class="string">&quot;Class Decorator&quot;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">  <span class="meta">@f</span>(<span class="string">&quot;Static Property&quot;</span>)</span><br><span class="line">  <span class="keyword">static</span> prop?: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@f</span>(<span class="string">&quot;Static Method&quot;</span>)</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">method</span>(<span class="params"><span class="meta">@f</span>(<span class="string">&quot;Static Method Parameter&quot;</span>) foo</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="meta">@f</span>(<span class="string">&quot;Constructor Parameter&quot;</span>) foo</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@f</span>(<span class="string">&quot;Instance Method&quot;</span>)</span><br><span class="line">  <span class="title function_">method</span>(<span class="params"><span class="meta">@f</span>(<span class="string">&quot;Instance Method Parameter&quot;</span>) foo</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@f</span>(<span class="string">&quot;Instance Property&quot;</span>)</span><br><span class="line">  prop?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>顺序</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">evaluate:  Instance Method</span><br><span class="line">evaluate:  Instance Method Parameter</span><br><span class="line">call:  Instance Method Parameter</span><br><span class="line">call:  Instance Method</span><br><span class="line">evaluate:  Instance Property</span><br><span class="line">call:  Instance Property</span><br><span class="line">evaluate:  Static Property</span><br><span class="line">call:  Static Property</span><br><span class="line">evaluate:  Static Method</span><br><span class="line">evaluate:  Static Method Parameter</span><br><span class="line">call:  Static Method Parameter</span><br><span class="line">call:  Static Method</span><br><span class="line">evaluate:  Class Decorator</span><br><span class="line">evaluate:  Constructor Parameter</span><br><span class="line">call:  Constructor Parameter</span><br><span class="line">call:  Class Decorator</span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">key: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;evaluate: &quot;</span>, key);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;call: &quot;</span>, key);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">  <span class="meta">@f</span>(<span class="string">&quot;Outer Method&quot;</span>)</span><br><span class="line">  <span class="meta">@f</span>(<span class="string">&quot;Inner Method&quot;</span>)</span><br><span class="line">  <span class="title function_">method</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">evaluate: Outer Method</span><br><span class="line">evaluate: Inner Method</span><br><span class="line">call: Inner Method</span><br><span class="line">call: Outer Method</span><br></pre></td></tr></table></figure>

<h3 id="艹-Any-unknown-object-void-undefined-null-never"><a href="#艹-Any-unknown-object-void-undefined-null-never" class="headerlink" title="艹 Any,unknown,object,void,undefined,null,never"></a>艹 Any,unknown,object,void,undefined,null,never</h3><p><a href="https://www.typescriptlang.org/docs/handbook/type-compatibility.html#any-unknown-object-void-undefined-null-and-never-assignability">Any,unknown,object,void,undefined,null, and never assignability</a></p>
<h3 id="字符串-大小写-首字母"><a href="#字符串-大小写-首字母" class="headerlink" title="字符串 大小写,首字母"></a>字符串 大小写,首字母</h3><p><a href="https://www.typescriptlang.org/docs/handbook/utility-types.html#intrinsic-string-manipulation-types">Intrinsic String Manipulation Types</a></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Uppercase</span>&lt;<span class="title class_">StringType</span>&gt;</span><br><span class="line"><span class="title class_">Lowercase</span>&lt;<span class="title class_">StringType</span>&gt;</span><br><span class="line"><span class="title class_">Capitalize</span>&lt;<span class="title class_">StringType</span>&gt;</span><br><span class="line"><span class="title class_">Uncapitalize</span>&lt;<span class="title class_">StringType</span>&gt;</span><br></pre></td></tr></table></figure>

<h3 id="Union-转-amp"><a href="#Union-转-amp" class="headerlink" title="Union 转 &amp;"></a>Union 转 &amp;</h3><ol>
<li><p>Generics + Union &#x3D;&gt;  ((x:U0)&#x3D;&gt;void) | ((x:U1)&#x3D;&gt;void) | ((x:U2)&#x3D;&gt;void) …</p>
</li>
<li><p>extends + infer &#x3D;&gt; U0 &amp; U1 &amp; U2</p>
</li>
</ol>
<p>注意的是有不少基础类型的<code>&amp;</code>会是never, 做成函数或对象, 不会有这个问题,<br>同时基础值还可以通过 <code>(A | B | D) &amp; (A | C |D)</code> 得到<code>A|D</code></p>
<h3 id="合并多个-amp"><a href="#合并多个-amp" class="headerlink" title="合并多个 &amp;"></a>合并多个 &amp;</h3><p>可以完成新对象生成</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Copy</span>&lt;T&gt; = &#123;</span><br><span class="line">  [K <span class="keyword">in</span> keyof T]:T[K]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="直接写和写template-不一致的情况"><a href="#直接写和写template-不一致的情况" class="headerlink" title="直接写和写template 不一致的情况"></a>直接写和写template 不一致的情况</h3><p><a href="https://stackoverflow.com/questions/72810324/why-does-typescript-union-mapped-types-work-differently-with-and-without-gener/72812486">StackOverflow Why does Typescript Union + Mapped Types work differently with and without Generics</a></p>
<p><a href="https://www.typescriptlang.org/docs/handbook/2/conditional-types.html#distributive-conditional-types">Distributive Conditional Types</a></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">NodeA</span> = &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;A&#x27;</span></span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">flag</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">NodeB</span> = &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;B&#x27;</span></span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="attr">flag</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Nodes</span> = <span class="title class_">NodeA</span> | <span class="title class_">NodeB</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> w0 = &#123;</span><br><span class="line">  [k <span class="keyword">in</span> keyof <span class="title class_">Nodes</span>]: <span class="title class_">Nodes</span>[k]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">w0 = &#123;</span></span><br><span class="line"><span class="comment">  type: &quot;A&quot; | &quot;B&quot;;</span></span><br><span class="line"><span class="comment">  flag: number;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Calc</span>&lt;W&gt; =  &#123;</span><br><span class="line">  [k <span class="keyword">in</span> keyof W]: W[k]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> w1 = <span class="title class_">Calc</span>&lt;<span class="title class_">Nodes</span>&gt;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">w1 = Calc&lt;NodeA&gt; | Calc&lt;NodeB&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">type</span> z0 = <span class="title class_">Exclude</span>&lt;w0,<span class="title class_">NodeA</span>&gt;</span><br><span class="line"><span class="comment">// z0 = w0</span></span><br><span class="line"><span class="keyword">type</span> z1 = <span class="title class_">Exclude</span>&lt;w1,<span class="title class_">NodeA</span>&gt;</span><br><span class="line"><span class="comment">// z1 = NodeB</span></span><br></pre></td></tr></table></figure>

<h2 id="CheatSheet-图"><a href="#CheatSheet-图" class="headerlink" title="CheatSheet 图"></a>CheatSheet 图</h2><p>通过if的条件自动推断 运算区间内的类型, 如 Discriminated Unions 在处理不同的服务器范围类型时</p>
<p>几种控制流示例</p>
<p><img data-src="https://www.typescriptlang.org/static/TypeScript%20Control%20Flow%20Analysis-8a549253ad8470850b77c4c5c351d457.png" alt="控制流分析"></p>
<p>内置类型, 内置对象, 字面量, 可扩展, interface 各种写法, 限制,重载, 多处书写自动merge,写法</p>
<p><img data-src="https://www.typescriptlang.org/static/TypeScript%20Interfaces-34f1ad12132fb463bd1dfe5b85c5b2e6.png" alt="接口interface"></p>
<p>一个type唯一定义, 需要实例的结构和type描述完全一致,而interface 只是描述一定要的field, 写法,映射,条件推断, 模板union, 重定义名字, Tuple Type, Union,Intersecion,Type 字段索引,从数据&#x2F;返回&#x2F;module提取出type,</p>
<p><img data-src="https://www.typescriptlang.org/static/TypeScript%20Types-4cbf7b9d45dc0ec8d18c6c7a0c516114.png" alt="类型type"></p>
<p>语法,Generics,虚类,构造函数,装饰器</p>
<p><img data-src="https://www.typescriptlang.org/static/TypeScript%20Classes-83cc6f8e42ba2002d5e2c04221fa78f9.png" alt="类class"></p>
<h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><p><a href="https://github.com/type-challenges/type-challenges/blob/main/README.zh-CN.md">antfu ts challenges</a></p>
<p><a href="https://www.typescriptlang.org/cheatsheets">ts cheatsheets</a></p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>typescript</category>
      </categories>
      <tags>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>python3 setuptools 发包</title>
    <url>/Blog/22-07-23-python-setuptools/</url>
    <content><![CDATA[<h1 id="Step-by-Step"><a href="#Step-by-Step" class="headerlink" title="Step by Step"></a>Step by Step</h1><p>install build</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install --upgrade build</span><br></pre></td></tr></table></figure>

<h2 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h2><p>提供<code>pyproject.toml</code>文件, 包含<code>build-system</code> section</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[build-system]</span><br><span class="line">requires = [&quot;setuptools&quot;]</span><br><span class="line">build-backend = &quot;setuptools.build_meta&quot;</span><br><span class="line"></span><br><span class="line">[project]</span><br><span class="line">name = &quot;yourname-packagename&quot;</span><br><span class="line">version = &quot;0.0.1&quot;</span><br><span class="line">dependencies = [</span><br><span class="line">    &quot;requests&quot;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>描述依赖的library 和library中被实际用到的</p>
<p>除此以外, 还可以提供<code>metadata, contents, dependencies</code> 等描述, (老式的配置在<code>setup.py / setup.cfg</code>中</p>
<p><code>pyproject.toml</code> 可选配置参数 <a href="https://setuptools.pypa.io/en/stable/userguide/pyproject_config.html">https://setuptools.pypa.io/en/stable/userguide/pyproject_config.html</a></p>
<hr>
<p>目前来说<code>pip</code> 仍然需要 setup.py 来支持可编辑安装</p>
<p><code>setup.py</code> 一个简单版本</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> setuptools <span class="keyword">import</span> setup</span><br><span class="line"></span><br><span class="line">setup()</span><br></pre></td></tr></table></figure>

<hr>
<p>至此 执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python -m</span><br></pre></td></tr></table></figure>

<p>就可以打包了</p>
<p>打包输出到dist文件夹, 会产生tar.gz 和whl文件</p>
<h2 id="常用概览"><a href="#常用概览" class="headerlink" title="常用概览"></a>常用概览</h2><p>** 以下均是 <code>pyproject.toml</code>的配置, 如果需要setup.cfg&#x2F;setup.py 的配置方法, 在 <a href="https://setuptools.pypa.io/en/stable/userguide/quickstart.html">https://setuptools.pypa.io/en/stable/userguide/quickstart.html</a> 上阅读 **</p>
<h3 id="打包发现"><a href="#打包发现" class="headerlink" title="打包发现"></a>打包发现</h3><p>简单的项目, <code>setuptools</code> 可以自动检测所有 packges 和 namespaces</p>
<p>但对于复杂的来说, 哪些需要被打包, 哪些不需要被打包, 无法自动分别, 可以通过自定义配置</p>
<p>默认</p>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="section">[tool.setuptools.packages]</span></span><br><span class="line"><span class="attr">find</span> = &#123;&#125;  <span class="comment"># Scan the project directory with the default parameters</span></span><br></pre></td></tr></table></figure>

<p>指定 文件夹, 包含 和 不包含</p>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="section">[tool.setuptools.packages.find]</span></span><br><span class="line"><span class="attr">where</span> = [<span class="string">&quot;src&quot;</span>]  <span class="comment"># [&quot;.&quot;] by default</span></span><br><span class="line"><span class="attr">include</span> = [<span class="string">&quot;mypackage*&quot;</span>]  <span class="comment"># [&quot;*&quot;] by default</span></span><br><span class="line"><span class="attr">exclude</span> = [<span class="string">&quot;mypackage.tests*&quot;</span>]  <span class="comment"># empty by default</span></span><br><span class="line"><span class="attr">namespaces</span> = <span class="literal">false</span>  <span class="comment"># true by default</span></span><br></pre></td></tr></table></figure>

<h3 id="命令行提供"><a href="#命令行提供" class="headerlink" title="命令行提供"></a>命令行提供</h3><p>如果你的包, 期望安装完后, 能直接有个命令行工具</p>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="section">[project.scripts]</span></span><br><span class="line"><span class="attr">cli-name</span> = <span class="string">&quot;mypkg.mymodule:some_func&quot;</span></span><br></pre></td></tr></table></figure>

<p><code>cli-name</code> 就是你期望的工具的名称</p>
<p>后面一截对应你编写的某个 脚本文件 <code>mypkg/mymodule.py</code></p>
<h3 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h3><p>你的工具 运行时 依赖于其它工具</p>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="section">[project]</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="attr">dependencies</span> = [</span><br><span class="line">    <span class="string">&quot;docutils&quot;</span>,</span><br><span class="line">    <span class="string">&quot;requires &lt;= 0.4&quot;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="包含Data-Files"><a href="#包含Data-Files" class="headerlink" title="包含Data Files"></a>包含Data Files</h3><figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="section">[tool.setuptools]</span></span><br><span class="line"><span class="attr">include-package-data</span> = <span class="literal">true</span></span><br><span class="line"><span class="comment"># 如果使用pyproject.toml默认就是true</span></span><br><span class="line"><span class="comment"># 可以通过`include-package-data = false` 关闭</span></span><br></pre></td></tr></table></figure>

<p>会自动包含所有在 <code>MANIFEST.in</code> 中声名的Data Files</p>
<h3 id="开发模式"><a href="#开发模式" class="headerlink" title="开发模式"></a>开发模式</h3><p>通过链接形式把你开发中的包 安装到你要用的地方</p>
<p>在本地其它项目中预先使用包进行调试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install --editable &lt;你的包的路径&gt;</span><br></pre></td></tr></table></figure>

<h3 id="打包文件以外的项目结构"><a href="#打包文件以外的项目结构" class="headerlink" title="打包文件以外的项目结构"></a>打包文件以外的项目结构</h3><p><a href="https://packaging.python.org/en/latest/tutorials/packaging-projects/">https://packaging.python.org/en/latest/tutorials/packaging-projects/</a></p>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line">packaging_tutorial/</span><br><span class="line">├── LICENSE</span><br><span class="line">├── pyproject.toml</span><br><span class="line">├── README.md</span><br><span class="line">├── src/</span><br><span class="line">│   └── example_package_YOUR_USERNAME_HERE/</span><br><span class="line">│       ├── __init__.py</span><br><span class="line">│       └── example.py</span><br><span class="line">└── tests/</span><br></pre></td></tr></table></figure>

<p>文件<code>example.py</code>内容:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add_one</span>(<span class="params">number</span>):</span><br><span class="line">    <span class="keyword">return</span> number + <span class="number">1</span></span><br></pre></td></tr></table></figure>


<h2 id="Twine-发布"><a href="#Twine-发布" class="headerlink" title="Twine 发布"></a>Twine 发布</h2><p><a href="https://twine.readthedocs.io/en/stable/">https://twine.readthedocs.io/en/stable/</a></p>
<p>安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install twine</span><br></pre></td></tr></table></figure>

<p><code>build</code>打包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python -m build</span><br></pre></td></tr></table></figure>

<p>为了避免真的传上去出问题,可以先传到<a href="https://packaging.python.org/en/latest/guides/using-testpypi/">Test PyPI</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">twine upload -r testpypi dist/*</span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 -m pip install --index-url https://test.pypi.org/simple/ your-package</span><br></pre></td></tr></table></figure>

<p>真实发布到<code>PyPI</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">twine upload dist/*</span><br></pre></td></tr></table></figure>

<p>发布前登录<code>twine register</code></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://setuptools.pypa.io/en/stable/userguide/quickstart.html">https://setuptools.pypa.io/en/stable/userguide/quickstart.html</a></p>
<p><a href="https://packaging.python.org/en/latest/tutorials/packaging-projects/">https://packaging.python.org/en/latest/tutorials/packaging-projects/</a></p>
<p>包的下载量统计</p>
<p><a href="https://pepy.tech/">https://pepy.tech/</a></p>
]]></content>
      <categories>
        <category>backend</category>
        <category>python3</category>
      </categories>
      <tags>
        <tag>python3</tag>
        <tag>setuptools</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Static Blog in 2022</title>
    <url>/Blog/22-08-15-static-blog/</url>
    <content><![CDATA[<h1 id="写在-2022-年的-静态博客选择"><a href="#写在-2022-年的-静态博客选择" class="headerlink" title="写在 2022 年的 静态博客选择"></a>写在 2022 年的 静态博客选择</h1><h2 id="调研"><a href="#调研" class="headerlink" title="调研"></a>调研</h2><p>用了Hexo很久了,期间也有不少其它产品, 也试了试这些框架</p>
<p>对于我, 核心需求是markdown + code高亮 + tex + rss支持, 操作期望是0代码, 可以简单yaml配置,和复制配置的配置行为, 然后有个基本不错的theme, 最好能支持二进制分页</p>
<p>毕竟主要产出在markdown而不是搭建</p>
<span id="more"></span>

<p>目前看起来有一些解决方案</p>
<blockquote>
<p>vuepress</p>
</blockquote>
<p>下载和声量很高, 然而光是跟着tutorial走,建立目录就需要重启server,图片不存在就整个页面渲染失败, 加上github issue 对询问者态度差, 连基本的本地热更都做不好, 直接tutorial都没走完就抛弃了</p>
<blockquote>
<p>ngx-markdown</p>
</blockquote>
<p>本身不是博客解决方案, 只是angular的一个lib, 但是上手很容易, 从0到code+tex渲染支持成功, 不到10min就架好了, 看起来有写代码,实际上都是官方readme里的内容复制来就能用了. 然后暂时没找rss,以及如果想做 tags等,列表等最终还是需要编码, 还是放弃了</p>
<blockquote>
<p>11ty</p>
</blockquote>
<p>看起来十分轻量, 而且目测核心也是做静态网站的, 这个我对它还是很抱期望的, 目前问题是, 你要用得自己写网页, 没看到不错的blog的theme模板, 感觉未来做一些static的时候可能会考虑它</p>
<blockquote>
<p>Gatsby&#x2F;Next&#x2F;Nuxt</p>
</blockquote>
<p>都需要code, 而且是for 静态网站 而 不只是静态博客, 所以也没有直接针对性的东西, 配置起来比angular难了太多</p>
<blockquote>
<p>hugo</p>
</blockquote>
<p>这个很倾向, 看到有基于这个做的 &lt; 150 行代码 的 支持code + tex的theme很不错 <a href="https://github.com/yihui/hugo-xmin">https://github.com/yihui/hugo-xmin</a> , 有个我本地的小问题是, hugo官方只给了基于homebrew的安装, 没有apt&#x2F;pip&#x2F;npm 之类的安装, 我本地linux, 为了一个hugo去装个homebrew让我还是有点不能接受, 如果mac的话应该就很好了, 以及我看oi-wiki 就是基于hugo搭建的</p>
<blockquote>
<p>hexo</p>
</blockquote>
<p>很老的一个了,之前一直用的, 缺点是感觉有点渐渐年久失修了(大版本到更新了不少), 文档有点对不上代码了, 没法”升级”, 但是可以新建一个然后移动所有markdown , 外加本身有支持 tex, code高亮, rss以及二进制翻页i的插件</p>
<p>比如 现在已经version 6 了, 然后官方 <a href="https://hexo.io/docs/setup">https://hexo.io/docs/setup</a> 的package.json 还在 <code>&quot;hexo&quot;: &quot;^3.8.0&quot;</code>, (其实我本地的还真就3.8.0), 然后几个star很多和我之前用的theme 已经很久没有更新维护了,(虽然好像也真不需要多少维护</p>
<hr>
<p>总的来说, 0代码 + tex + code 高亮 + rss, 目前看起来就, hugo&#x2F;hexo, 当然需要去找个喜欢的theme, 小改一下</p>
<p>以及一些在线方案比如博客园,简书,csdn等等, 但这些有我完全不能接受的问题, 无法直接git管理, 则导致 一旦出现文章禁封和平台故障, 内容说没就没, 当然这有些解决方案, 但只能把它们作为输出端, 可以做点python脚本, git 管理的内容自动发送到这些平台</p>
<h2 id="Hexo-6-theme-next-docs"><a href="#Hexo-6-theme-next-docs" class="headerlink" title="Hexo 6 + theme-next-docs"></a>Hexo 6 + theme-next-docs</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn global add hexo-cli</span><br><span class="line">hexo init &lt;folder&gt; &amp;&amp; <span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">yarn</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/next-theme/hexo-theme-next themes/next --depth=1</span><br></pre></td></tr></table></figure>

<figure class="highlight diff"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="deletion">-theme: landscape</span></span><br><span class="line"><span class="addition">+theme: next</span></span><br></pre></td></tr></table></figure>

<p>预览</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>生成静态文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<h3 id="数学tex支持-MathJax"><a href="#数学tex支持-MathJax" class="headerlink" title="数学tex支持(MathJax)"></a>数学tex支持(MathJax)</h3><p><a href="https://theme-next.js.org/docs/third-party-services/math-equations.html?highlight=katex">https://theme-next.js.org/docs/third-party-services/math-equations.html?highlight=katex</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn remove hexo-renderer-marked</span><br><span class="line">yarn add hexo-renderer-pandoc</span><br></pre></td></tr></table></figure>


<figure class="highlight diff"><figcaption><span>theme/next/_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"> math:</span><br><span class="line">   # Default (false) will load mathjax / katex script on demand.</span><br><span class="line">   # That is it only render those page which has `mathjax: true` in front-matter.</span><br><span class="line">   # If you set it to true, it will load mathjax / katex script EVERY PAGE.</span><br><span class="line"><span class="deletion">-  every_page: false</span></span><br><span class="line"><span class="addition">+  every_page: true</span></span><br><span class="line"></span><br><span class="line">   mathjax:</span><br><span class="line"><span class="deletion">-    enable: false</span></span><br><span class="line"><span class="addition">+    enable: true</span></span><br></pre></td></tr></table></figure>

<p>简单测试是否成功,<code>source/_posts/hello-world.md</code></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="keyword">\pi</span> <span class="keyword">\gamma</span><span class="built_in">^</span>x <span class="keyword">\int</span><span class="built_in">_</span>&#123;i=0&#125;<span class="built_in">^</span>1 dx<span class="built_in">$</span></span><br></pre></td></tr></table></figure>

<h3 id="本地搜索支持"><a href="#本地搜索支持" class="headerlink" title="本地搜索支持"></a>本地搜索支持</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add hexo-generator-searchdb</span><br></pre></td></tr></table></figure>

<figure class="highlight diff"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="addition">+search:</span></span><br><span class="line"><span class="addition">+  path: search.xml</span></span><br><span class="line"><span class="addition">+  field: post</span></span><br><span class="line"><span class="addition">+  content: true</span></span><br><span class="line"><span class="addition">+  format: html</span></span><br></pre></td></tr></table></figure>

<figure class="highlight diff"><figcaption><span>theme/next/_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"> local_search:</span><br><span class="line"><span class="deletion">-  enable: false</span></span><br><span class="line"><span class="addition">+  enable: true</span></span><br></pre></td></tr></table></figure>

<h3 id="Disqus-评论支持"><a href="#Disqus-评论支持" class="headerlink" title="Disqus 评论支持"></a>Disqus 评论支持</h3><figure class="highlight diff"><figcaption><span>theme/next/_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"> # Disqus</span><br><span class="line"> # For more information: https://disqus.com</span><br><span class="line"> disqus:</span><br><span class="line"><span class="deletion">-  enable: false</span></span><br><span class="line"><span class="deletion">-  shortname:</span></span><br><span class="line"><span class="addition">+  enable: true</span></span><br><span class="line"><span class="addition">+  shortname: cromarmot</span></span><br></pre></td></tr></table></figure>

<h3 id="RSS-支持"><a href="#RSS-支持" class="headerlink" title="RSS 支持"></a>RSS 支持</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add hexo-generator-feed</span><br></pre></td></tr></table></figure>


<figure class="highlight diff"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="addition">+feed:</span></span><br><span class="line"><span class="addition">+  enable: true</span></span><br><span class="line"><span class="addition">+  type: atom</span></span><br><span class="line"><span class="addition">+  path: atom.xml</span></span><br><span class="line"><span class="addition">+  limit: 20</span></span><br><span class="line"><span class="addition">+  hub:</span></span><br><span class="line"><span class="addition">+  content:</span></span><br><span class="line"><span class="addition">+  content_limit: 140</span></span><br><span class="line"><span class="addition">+  content_limit_delim: &#x27; &#x27;</span></span><br><span class="line"><span class="addition">+  order_by: -date</span></span><br><span class="line"><span class="addition">+  icon: icon.png</span></span><br><span class="line"><span class="addition">+  autodiscovery: true</span></span><br><span class="line"><span class="addition">+  template:</span></span><br></pre></td></tr></table></figure>

<h3 id="字数统计"><a href="#字数统计" class="headerlink" title="字数统计"></a>字数统计</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add hexo-word-counter</span><br></pre></td></tr></table></figure>

<figure class="highlight diff"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  symbols: true</span><br><span class="line">  time: true</span><br><span class="line">  total_symbols: true</span><br><span class="line">  total_time: true</span><br><span class="line">  exclude_codeblock: false</span><br><span class="line">  awl: 4</span><br><span class="line">  wpm: 275</span><br><span class="line">  suffix: &quot;mins.&quot;</span><br></pre></td></tr></table></figure>

<h3 id="二进制分页"><a href="#二进制分页" class="headerlink" title="二进制分页"></a>二进制分页</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add hexo-bin-pagination</span><br></pre></td></tr></table></figure>

<h3 id="Github-Actions"><a href="#Github-Actions" class="headerlink" title="Github Actions"></a>Github Actions</h3><figure class="highlight yml"><figcaption><span>.github/workflows/deployghpages.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Build</span> <span class="string">and</span> <span class="string">Deploy</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build-and-deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2.3.1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">persist-credentials:</span> <span class="literal">false</span></span><br><span class="line">          <span class="attr">submodules:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="number">16.</span><span class="string">x</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&#x27;16.x&#x27;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">NPM</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/cache@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">|</span></span><br><span class="line"><span class="string">            ~/.cache</span></span><br><span class="line"><span class="string">            **/node_modules</span></span><br><span class="line"><span class="string"></span>          <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-$&#123;&#123;</span> <span class="string">hashFiles(&#x27;**/yarn.lock&#x27;)</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          yarn</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">yarn</span> <span class="string">build</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">to</span> <span class="string">GitHub</span> <span class="string">Pages</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">Cecilapp/GitHub-Pages-deploy@v3</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">GITHUB_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">email:</span> <span class="string">yexiaorain@gmail.com</span></span><br><span class="line">          <span class="attr">build_dir:</span> <span class="string">public/</span></span><br></pre></td></tr></table></figure>

<h3 id="文章加密"><a href="#文章加密" class="headerlink" title="文章加密"></a>文章加密</h3><p>两个部分， 一个是对内容加密， 一个是github上拆库</p>
<h4 id="submodule-私有仓库"><a href="#submodule-私有仓库" class="headerlink" title="submodule+私有仓库"></a>submodule+私有仓库</h4><ol>
<li>创建私有仓库<code>YeXiaoRain/Blog-pe</code></li>
<li>Blog仓库里增加<code>git submodule add git@github.com:YeXiaoRain/Blog-pe.git source/_post/pe</code></li>
<li>为私有仓库生成部署密钥<code>ssh-keygen -t ed25519 -C &quot;git@github.com:YeXiaoRain/Blog-pe.git&quot;</code></li>
<li>github网页上配置<code>https://github.com/YeXiaoRain/Blog-pe/settings/keys</code> -&gt; <code>Add deploy key</code> -&gt; 放入<code>~/.ssh/id_ed25519.pub</code></li>
<li>Blog仓库里配置部署secret:<code>https://github.com/YeXiaoRain/Blog/settings/secrets/actions</code> -&gt; <code>New repository secret</code> -&gt;  取名<code>BLOG_DEPLOY_KEY</code> 放入<code>~/.ssh/id_ed25519</code></li>
<li>修改<code>.github/workflows/deployghpages.yml</code> 的拉取代码部分</li>
</ol>
<figure class="highlight yaml"><figcaption><span>.github/workflows/deployghpages.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Add</span> <span class="string">SSH</span> <span class="string">private</span> <span class="string">keys</span> <span class="string">for</span> <span class="string">submodule</span> <span class="string">repositories</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">webfactory/ssh-agent@v0.7.0</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">ssh-private-key:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.BLOG_DEPLOY_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Fetch</span> <span class="string">submodules</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">git</span> <span class="string">submodule</span> <span class="string">update</span> <span class="string">--init</span> <span class="string">--recursive</span> <span class="string">--remote</span></span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight yaml"><figcaption><span>.github/workflows/deployghpages.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">ssh-key:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.BLOG_DEPLOY_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">persist-credentials:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">submodules:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h4 id="内容加密"><a href="#内容加密" class="headerlink" title="内容加密"></a>内容加密</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn add hexo-blog-encrypt</span><br></pre></td></tr></table></figure>

<p>文章</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World</span><br><span class="line">date: 2016-03-30 21:18:02</span><br><span class="line"><span class="section">password: hello</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>

<p>具体见 <a href="https://github.com/D0n9X1n/hexo-blog-encrypt">https://github.com/D0n9X1n/hexo-blog-encrypt</a></p>
<p>已知问题，直接解密后latex无法渲染， 需要刷新网页，或修修改代码: <a href="https://github.com/D0n9X1n/hexo-blog-encrypt/issues/22">相关Issue</a></p>
<p>next theme下 没有目录…..</p>
<h3 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h3><figure class="highlight diff"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">index 3bc8a42..0599fdd 100644</span></span><br><span class="line"><span class="comment">--- a/_config.yml</span></span><br><span class="line"><span class="comment">+++ b/_config.yml</span></span><br><span class="line"><span class="meta">@@ -3,18 +3,19 @@</span></span><br><span class="line"> ## Source: https://github.com/hexojs/hexo/</span><br><span class="line"></span><br><span class="line"> # Site</span><br><span class="line"><span class="deletion">-title: Hexo</span></span><br><span class="line"><span class="addition">+title: &quot;Cro-Marmot&#x27;s Blog&quot;</span></span><br><span class="line"> subtitle: &#x27;&#x27;</span><br><span class="line"> description: &#x27;&#x27;</span><br><span class="line"> keywords:</span><br><span class="line"><span class="deletion">-author: John Doe</span></span><br><span class="line"><span class="deletion">-language: en</span></span><br><span class="line"><span class="deletion">-timezone: &#x27;&#x27;</span></span><br><span class="line"><span class="addition">+author: &#x27;Cro-Marmot&#x27;</span></span><br><span class="line"><span class="addition">+language: &#x27;zh-TW&#x27;</span></span><br><span class="line"><span class="addition">+timezone: &#x27;Asia/Shanghai&#x27;</span></span><br><span class="line"></span><br><span class="line"> # URL</span><br><span class="line"> ## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span><br><span class="line"><span class="deletion">-url: http://example.com</span></span><br><span class="line"><span class="deletion">-permalink: :year/:month/:day/:title/</span></span><br><span class="line"><span class="addition">+url: https://cromarmot.github.io/Blog</span></span><br><span class="line"><span class="addition">+root: /Blog/</span></span><br><span class="line"><span class="addition">+permalink: :title/</span></span><br><span class="line"> permalink_defaults:</span><br><span class="line"> pretty_urls:</span><br><span class="line">   trailing_index: true # Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span><br><span class="line"><span class="meta">@@ -62,7 +63,7 @@</span> prismjs:</span><br><span class="line"> # order_by: Posts order. (Order by date descending by default)</span><br><span class="line"> index_generator:</span><br><span class="line">   path: &#x27;&#x27;</span><br><span class="line"><span class="deletion">-  per_page: 10</span></span><br><span class="line"><span class="addition">+  per_page: 5</span></span><br><span class="line">   order_by: -date</span><br><span class="line"></span><br><span class="line"> # Category &amp; Tag</span><br></pre></td></tr></table></figure>

<figure class="highlight diff"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@@ -67,7 +67,7 @@</span> creative_commons:</span><br><span class="line">   # Available values: big | small</span><br><span class="line">   size: small</span><br><span class="line">   sidebar: false</span><br><span class="line"><span class="deletion">-  post: false</span></span><br><span class="line"><span class="addition">+  post: true</span></span><br><span class="line">   # You can set a language value if you prefer a translated version of CC license, e.g. deed.zh</span><br><span class="line">   # CC licenses are available in 39 languages, you can find the specific and correct abbreviation you need on https://creativecommons.org</span><br><span class="line">   language:</span><br><span class="line"><span class="meta">@@ -95,11 +95,12 @@</span> open_graph:</span><br><span class="line"> # Value before `||` delimiter is the target link, value after `||` delimiter is the name of Font Awesome icon.</span><br><span class="line"> # External url should start with http:// or https://</span><br><span class="line"> menu:</span><br><span class="line"><span class="deletion">-  #home: / || fa fa-home</span></span><br><span class="line"><span class="addition">+  home: / || fa fa-home</span></span><br><span class="line"><span class="addition">+  archives: /archives/ || fa fa-archive</span></span><br><span class="line"><span class="addition">+  rss: /atom.xml || fa fa-rss</span></span><br><span class="line">   #about: /about/ || fa fa-user</span><br><span class="line"><span class="deletion">-  #tags: /tags/ || fa fa-tags</span></span><br><span class="line"><span class="deletion">-  #categories: /categories/ || fa fa-th</span></span><br><span class="line"><span class="deletion">-  #archives: /archives/ || fa fa-archive</span></span><br><span class="line"><span class="addition">+  categories: /categories/ || fa fa-th</span></span><br><span class="line"><span class="addition">+  tags: /tags/ || fa fa-tags</span></span><br><span class="line">   #schedule: /schedule/ || fa fa-calendar</span><br><span class="line">   #sitemap: /sitemap.xml || fa fa-sitemap</span><br><span class="line">   #commonweal: /404/ || fa fa-heartbeat</span><br><span class="line"><span class="meta">@@ -107,7 +108,7 @@</span> menu:</span><br><span class="line"> # Enable / Disable menu icons / item badges.</span><br><span class="line"> menu_settings:</span><br><span class="line">   icons: true</span><br><span class="line"><span class="deletion">-  badges: false</span></span><br><span class="line"><span class="addition">+  badges: true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> # ---------------------------------------------------------------</span><br><span class="line"><span class="meta">@@ -117,8 +118,8 @@</span> menu_settings:</span><br><span class="line"></span><br><span class="line"> sidebar:</span><br><span class="line">   # Sidebar Position.</span><br><span class="line"><span class="deletion">-  position: left</span></span><br><span class="line"><span class="deletion">-  #position: right</span></span><br><span class="line"><span class="addition">+  #position: left</span></span><br><span class="line"><span class="addition">+  position: right</span></span><br><span class="line"></span><br><span class="line">   # Manual define the sidebar width. If commented, will be default for:</span><br><span class="line">   # Muse | Mist: 320</span><br><span class="line"><span class="meta">@@ -130,7 +131,7 @@</span> sidebar:</span><br><span class="line">   #  - always  expand for all pages automatically.</span><br><span class="line">   #  - hide    expand only when click on the sidebar toggle icon.</span><br><span class="line">   #  - remove  totally remove sidebar including sidebar toggle.</span><br><span class="line"><span class="deletion">-  display: post</span></span><br><span class="line"><span class="addition">+  display: hide</span></span><br><span class="line"></span><br><span class="line">   # Sidebar padding in pixels.</span><br><span class="line">   padding: 18</span><br><span class="line"><span class="meta">@@ -140,9 +141,9 @@</span> sidebar:</span><br><span class="line"> # Sidebar Avatar</span><br><span class="line"> avatar:</span><br><span class="line">   # Replace the default image and set the url here.</span><br><span class="line"><span class="deletion">-  url: #/images/avatar.gif</span></span><br><span class="line"><span class="addition">+  url: https://avatars.githubusercontent.com/u/24691835?v=4</span></span><br><span class="line">   # If true, the avatar will be displayed in circle.</span><br><span class="line"><span class="deletion">-  rounded: false</span></span><br><span class="line"><span class="addition">+  rounded: true</span></span><br><span class="line">   # If true, the avatar will be rotated with the cursor.</span><br><span class="line">   rotated: false</span><br><span class="line"></span><br><span class="line"><span class="meta">@@ -154,8 +155,8 @@</span> site_state: true</span><br><span class="line"> # Key is the link label showing to end users.</span><br><span class="line"> # Value before `||` delimiter is the target permalink, value after `||` delimiter is the name of Font Awesome icon.</span><br><span class="line"> social:</span><br><span class="line"><span class="deletion">-  #GitHub: https://github.com/yourname || fab fa-github</span></span><br><span class="line"><span class="deletion">-  #E-Mail: mailto:yourname@gmail.com || fa fa-envelope</span></span><br><span class="line"><span class="addition">+  GitHub: https://github.com/cromarmot || fab fa-github</span></span><br><span class="line"><span class="addition">+  E-Mail: mailto:yexiaorain@gmail.com || fa fa-envelope</span></span><br><span class="line">   #Weibo: https://weibo.com/yourname || fab fa-weibo</span><br><span class="line">   #Google: https://plus.google.com/yourname || fab fa-google</span><br><span class="line">   #Twitter: https://twitter.com/yourname || fab fa-twitter</span><br><span class="line"><span class="meta">@@ -178,7 +179,8 @@</span> links_settings:</span><br><span class="line">   layout: block</span><br><span class="line"></span><br><span class="line"> links:</span><br><span class="line"><span class="deletion">-  #Title: https://example.com</span></span><br><span class="line"><span class="addition">+  AtCoder: https://atcoder.jp/users/cromarmot</span></span><br><span class="line"><span class="addition">+  Codeforces: https://codeforces.com/profile/Cro-Marmot</span></span><br><span class="line"></span><br><span class="line"> # Table of Contents in the Sidebar</span><br><span class="line"> # Front-matter variable (nonsupport wrap expand_all).</span><br><span class="line"><span class="meta">@@ -211,7 +213,7 @@</span> footer:</span><br><span class="line">     # Icon name in Font Awesome. See: https://fontawesome.com/icons</span><br><span class="line">     name: fa fa-heart</span><br><span class="line">     # If you want to animate the icon, set it to true.</span><br><span class="line"><span class="deletion">-    animated: false</span></span><br><span class="line"><span class="addition">+    animated: true</span></span><br><span class="line">     # Change the color of icon, using Hex Code.</span><br><span class="line">     color: &quot;#ff0000&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">@@ -261,7 +263,7 @@</span> symbols_count_time:</span><br><span class="line">   item_text_total: false</span><br><span class="line"></span><br><span class="line"> # Use icon instead of the symbol # to indicate the tag at the bottom of the post</span><br><span class="line"><span class="deletion">-tag_icon: false</span></span><br><span class="line"><span class="addition">+tag_icon: true</span></span><br><span class="line"></span><br><span class="line"> # Donate (Sponsor) settings</span><br><span class="line"> # Front-matter variable (nonsupport animation).</span><br><span class="line"><span class="meta">@@ -288,7 +290,7 @@</span> follow_me:</span><br><span class="line"> # Related popular posts</span><br><span class="line"> # Dependencies: https://github.com/sergeyzwezdin/hexo-related-posts</span><br><span class="line"> related_posts:</span><br><span class="line"><span class="deletion">-  enable: false</span></span><br><span class="line"><span class="addition">+  enable: true</span></span><br><span class="line">   title: # Custom header, leave empty to use the default one</span><br><span class="line">   display_in_home: false</span><br><span class="line"></span><br><span class="line"><span class="meta">@@ -372,9 +374,9 @@</span> codeblock:</span><br><span class="line">     dark: prism-dark</span><br><span class="line">   # Add copy button on codeblock</span><br><span class="line">   copy_button:</span><br><span class="line"><span class="deletion">-    enable: false</span></span><br><span class="line"><span class="addition">+    enable: true</span></span><br><span class="line">     # Available values: default | flat | mac</span><br><span class="line"><span class="deletion">-    style:</span></span><br><span class="line"><span class="addition">+    style: flat</span></span><br><span class="line"></span><br><span class="line"> back2top:</span><br><span class="line">   enable: true</span><br><span class="line"><span class="meta">@@ -385,7 +387,7 @@</span> back2top:</span><br><span class="line"></span><br><span class="line"> # Reading progress bar</span><br><span class="line"> reading_progress:</span><br><span class="line"><span class="deletion">-  enable: false</span></span><br><span class="line"><span class="addition">+  enable: true</span></span><br><span class="line">   # Available values: left | right</span><br><span class="line">   start_at: left</span><br><span class="line">   # Available values: top | bottom</span><br><span class="line"><span class="meta">@@ -396,7 +398,7 @@</span> reading_progress:</span><br><span class="line"></span><br><span class="line"> # Bookmark Support</span><br><span class="line"> bookmark:</span><br><span class="line"><span class="deletion">-  enable: false</span></span><br><span class="line"><span class="addition">+  enable: true</span></span><br><span class="line">   # Customize the color of the bookmark.</span><br><span class="line">   color: &quot;#222&quot;</span><br><span class="line">   # If auto, save the reading progress when closing the page or clicking the bookmark-icon.</span><br><span class="line"><span class="meta">@@ -469,7 +471,7 @@</span> font:</span><br><span class="line"></span><br><span class="line"> # If true, site-subtitle will be added to index page.</span><br><span class="line"> # Remember to set up your site-subtitle in Hexo `_config.yml` (e.g. subtitle: Subtitle)</span><br><span class="line"><span class="deletion">-index_with_subtitle: false</span></span><br><span class="line"><span class="addition">+index_with_subtitle: true</span></span><br><span class="line"></span><br><span class="line"> # Automatically add external URL with Base64 encrypt &amp; decrypt.</span><br><span class="line"> exturl: false</span><br><span class="line"><span class="meta">@@ -531,11 +533,11 @@</span> fancybox: false</span><br><span class="line"> # A JavaScript library for zooming images like Medium.</span><br><span class="line"> # Warning: Do not enable both `fancybox` and `mediumzoom`.</span><br><span class="line"> # For more information: https://medium-zoom.francoischalifour.com</span><br><span class="line"><span class="deletion">-mediumzoom: false</span></span><br><span class="line"><span class="addition">+mediumzoom: true</span></span><br><span class="line"></span><br><span class="line"> # Vanilla JavaScript plugin for lazyloading images.</span><br><span class="line"> # For more information: https://apoorv.pro/lozad.js/demo/</span><br><span class="line"><span class="deletion">-lazyload: false</span></span><br><span class="line"><span class="addition">+lazyload: true</span></span><br><span class="line"></span><br><span class="line"> # Pangu Support</span><br><span class="line"> # For more information: https://github.com/vinta/pangu.js</span><br><span class="line"><span class="meta">@@ -546,12 +548,12 @@</span> pangu: false</span><br><span class="line"> # For more information: https://getquick.link</span><br><span class="line"> # Front-matter variable (nonsupport home archive).</span><br><span class="line"> quicklink:</span><br><span class="line"><span class="deletion">-  enable: false</span></span><br><span class="line"><span class="addition">+  enable: true</span></span><br><span class="line"></span><br><span class="line">   # Home page and archive page can be controlled through home and archive options below.</span><br><span class="line">   # This configuration item is independent of `enable`.</span><br><span class="line">   home: false</span><br><span class="line"><span class="deletion">-  archive: false</span></span><br><span class="line"><span class="addition">+  archive: true</span></span><br><span class="line"></span><br><span class="line">   # Default (true) will initialize quicklink after the load event fires.</span><br><span class="line">   delay: true</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>frontend</category>
        <category>framework</category>
      </categories>
      <tags>
        <tag>static blog</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu + pip + setuptool bug 体验</title>
    <url>/Blog/22-09-08-fuck-pip/</url>
    <content><![CDATA[<h1 id="第一次被pip搞了几个小时"><a href="#第一次被pip搞了几个小时" class="headerlink" title="第一次被pip搞了几个小时"></a>第一次被pip搞了几个小时</h1><p>壮着胆子,在Ubuntu 22.10还没发布前,把系统从20.04.5升级到了22.04.1, 以我从12-&gt;14,14-&gt;16,16-&gt;18,18-&gt;20多年的经验来看, 这次竟然没问题! 厉害了, 以前每次升级都会炸点东西, 然后最终还是重装式升级, 这次竟然没啥严重的炸掉</p>
<p>然后<code>pip3 install -e .</code>出问题了</p>
<p>先是报没权限,但看报的路径,没往用户目录下写,在写root, 作为一个胆小的人, 向来杜绝777的</p>
<p>翻了半天google和github</p>
<p>看到一个<a href="https://github.com/pypa/pip/issues/7953#issuecomment-645133255">方案</a>:<code>setup.py</code>中加上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import site</span><br><span class="line">import sys</span><br><span class="line">site.ENABLE_USER_SITE = &quot;--user&quot; in sys.argv[1:]</span><br></pre></td></tr></table></figure>

<p>加完以后, 恩 是没有问题了</p>
<p>然后报错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">× python setup.py develop did not run successfully.</span><br><span class="line">│ exit code: 1</span><br><span class="line">╰─&gt; [29 lines of output]</span><br><span class="line">    running develop</span><br><span class="line">    /usr/lib/python3/dist-packages/setuptools/command/easy_install.py:158: EasyInstallDeprecationWarning: easy_install command is deprecated. Use build and pip and other standards-based tools.</span><br><span class="line">      warnings.warn(</span><br><span class="line">    Traceback (most recent call last):</span><br><span class="line">      File &quot;&lt;string&gt;&quot;, line 2, in &lt;module&gt;</span><br><span class="line">      File &quot;&lt;pip-setuptools-caller&gt;&quot;, line 34, in &lt;module&gt;</span><br><span class="line">      File &quot;/home/cromarmot/Documents/computer/oiTerminalv2dev/setup.py&quot;, line 6, in &lt;module&gt;</span><br><span class="line">        setup()</span><br><span class="line">      File &quot;/usr/lib/python3/dist-packages/setuptools/__init__.py&quot;, line 153, in setup</span><br><span class="line">        return distutils.core.setup(**attrs)</span><br><span class="line">      File &quot;/usr/lib/python3/dist-packages/setuptools/_distutils/core.py&quot;, line 148, in setup</span><br><span class="line">        return run_commands(dist)</span><br><span class="line">      File &quot;/usr/lib/python3/dist-packages/setuptools/_distutils/core.py&quot;, line 163, in run_commands</span><br><span class="line">        dist.run_commands()</span><br><span class="line">      File &quot;/usr/lib/python3/dist-packages/setuptools/_distutils/dist.py&quot;, line 967, in run_commands</span><br><span class="line">        self.run_command(cmd)</span><br><span class="line">      File &quot;/usr/lib/python3/dist-packages/setuptools/_distutils/dist.py&quot;, line 985, in run_command</span><br><span class="line">        cmd_obj.ensure_finalized()</span><br><span class="line">      File &quot;/usr/lib/python3/dist-packages/setuptools/_distutils/cmd.py&quot;, line 107, in ensure_finalized</span><br><span class="line">        self.finalize_options()</span><br><span class="line">      File &quot;/usr/lib/python3/dist-packages/setuptools/command/develop.py&quot;, line 52, in finalize_options</span><br><span class="line">        easy_install.finalize_options(self)</span><br><span class="line">      File &quot;/usr/lib/python3/dist-packages/setuptools/command/easy_install.py&quot;, line 270, in finalize_options</span><br><span class="line">        self._fix_install_dir_for_user_site()</span><br><span class="line">      File &quot;/usr/lib/python3/dist-packages/setuptools/command/easy_install.py&quot;, line 400, in _fix_install_dir_for_user_site</span><br><span class="line">        self.select_scheme(scheme_name)</span><br><span class="line">      File &quot;/usr/lib/python3/dist-packages/setuptools/command/easy_install.py&quot;, line 741, in select_scheme</span><br><span class="line">        scheme = INSTALL_SCHEMES[name]</span><br><span class="line">    KeyError: &#x27;unix_user&#x27;</span><br><span class="line">    [end of output]</span><br></pre></td></tr></table></figure>

<p>又搜,发现的确是setuptools有bug,然后<a href="https://github.com/pypa/setuptools/issues/2938#issuecomment-998293346">60.0.2修复了</a></p>
<span id="more"></span>

<p>我看了下<code>pip3 list | grep setuptools</code>, 版本是59</p>
<p>升级了一下到65 依然不行</p>
<p>而且上面的所有操作前后,只要是<code>venv</code>里,就没问题</p>
<p>又搜了半天,一个发现是,似乎大家都是ubuntu</p>
<hr>
<p>另一问题是我注意到名称是UNKNOWN, 就去搜了下这个UNKNOWN</p>
<p>后来看到<a href="https://github.com/pypa/setuptools/issues/3269#issuecomment-1100426325">这个issue</a></p>
<p>还学到了一下py隔离环境快速搭建和测试, 她似乎也是<a href="https://github.com/pypa/setuptools/issues/3269#issuecomment-1100434792">venv可以但是外面不行</a></p>
<p>然后我也跟着清理了一下dist和egg-info 都没用, 说查看pip, 我看了pip也是都是2.22.2</p>
<p>老哥说 可能是 <a href="https://github.com/pypa/pip/issues/6264#issuecomment-1086882745">pypa&#x2F;pip#6264 (comment)</a></p>
<p>也就是debian提供的</p>
<p>让升级一下<code>/usr/local/lib/python3.10/dist-packages/setuptools</code></p>
<p>然后,她通过把系统的<code>setuptools</code>给卸载了就好了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt purge python3-setuptools</span><br></pre></td></tr></table></figure>

<h2 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h2><p>这样看起来是 setuptools 实际写了bug</p>
<p>然后ubuntu目前apt里版本就正好是有bug的</p>
<p>然后pip list的setuptools版本, 和执行install的版本竟然不一样???????</p>
<p>这真是搞锤子</p>
<p>看看linux的whereis which 都教了你们如何对多个公共同名的做处理的, 竟然pip还能有这个锅, 就离谱</p>
<p>然后删除以后,连setup.py里加东西也不需要了</p>
<h2 id="学一手-py-隔离环境测试"><a href="#学一手-py-隔离环境测试" class="headerlink" title="学一手 py 隔离环境测试"></a>学一手 py 隔离环境测试</h2><p>虽然我一般习惯是用venv</p>
<hr>
<p>本机+virtualenv</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/nschloe/setuptools-UNKNOWN-bug.git</span><br><span class="line"><span class="built_in">cd</span> setuptools-UNKNOWN-bug</span><br><span class="line"></span><br><span class="line">virtualenv -p python3.10 .venv</span><br><span class="line">.venv/bin/python -m pip install .</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">docker</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>docker run –rm -it python:3.10-bullseye &#x2F;bin&#x2F;bash</p>
</blockquote>
<p>cd &#x2F;tmp<br>git clone <a href="https://github.com/nschloe/setuptools-UNKNOWN-bug.git">https://github.com/nschloe/setuptools-UNKNOWN-bug.git</a><br>cd setuptools-UNKNOWN-bug<br>pip install .</p>
<pre><code>
</code></pre>
]]></content>
      <categories>
        <category>backend</category>
        <category>python3</category>
      </categories>
      <tags>
        <tag>python3</tag>
        <tag>backend</tag>
        <tag>pip</tag>
        <tag>setuptool</tag>
      </tags>
  </entry>
  <entry>
    <title>vim8 插件升级</title>
    <url>/Blog/22-09-14-vim8/</url>
    <content><![CDATA[<h1 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h1><p>我也是用了 spf13-vim + vundle 有七八年了, 之中还用过Pathogen 之类的</p>
<p>这次随着ubuntu $20\to 22$的升级, 有不少之前的插件不支持vim8,不能用了, 虽然根据官网消息,似乎vim9已经出来了</p>
<p>vim8 也有自带的package管理方案<code>:h packages</code>, 看起来需要自己用git维护, 而用vim-plug只需要维护vimrc, 而在8之上还有dein,minpac的插件管理工具</p>
<p>而且还有nvim和vscode+vim键位的一些解决方案</p>
<p>但我有点懒 宁愿多配配 也暂时没想着改习惯</p>
<p>本机是ubuntu, 就没管win和mac的, 其它的看各种工具的官方文档吧</p>
<span id="more"></span>

<h2 id="使用vim-plug替代原来的Vundle"><a href="#使用vim-plug替代原来的Vundle" class="headerlink" title="使用vim-plug替代原来的Vundle"></a>使用vim-plug替代原来的Vundle</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim</span><br></pre></td></tr></table></figure>

<h2 id="vimrc"><a href="#vimrc" class="headerlink" title=".vimrc"></a>.vimrc</h2><figure class="highlight vim"><figcaption><span>~/.vimrc</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> nocompatible            <span class="comment">&quot; Must be first line</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Initialize directories &#123;</span></span><br><span class="line"><span class="keyword">function!</span> <span class="title">InitializeDirectories</span><span class="params">()</span></span><br><span class="line">  <span class="keyword">let</span> parent = $HOME</span><br><span class="line">  <span class="keyword">let</span> prefix = <span class="string">&#x27;vim&#x27;</span></span><br><span class="line">  <span class="keyword">let</span> dir_list = &#123;</span><br><span class="line">        \ <span class="string">&#x27;backup&#x27;</span>: <span class="string">&#x27;backupdir&#x27;</span>,</span><br><span class="line">        \ <span class="string">&#x27;views&#x27;</span>: <span class="string">&#x27;viewdir&#x27;</span>,</span><br><span class="line">        \ <span class="string">&#x27;swap&#x27;</span>: <span class="string">&#x27;directory&#x27;</span>,</span><br><span class="line">        \ <span class="string">&#x27;undo&#x27;</span>: <span class="string">&#x27;undodir&#x27;</span>,&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">&quot; To specify a different directory in which to place the vimbackup,</span></span><br><span class="line">  <span class="comment">&quot; vimviews, vimundo, and vimswap files/directories, add the following to</span></span><br><span class="line">  <span class="comment">&quot; your .vimrc.before.local file:</span></span><br><span class="line">  <span class="comment">&quot;   let g:spf13_consolidated_directory = &lt;full path to desired directory&gt;</span></span><br><span class="line">  <span class="comment">&quot;   eg: let g:spf13_consolidated_directory = $HOME . &#x27;/.vim/&#x27;</span></span><br><span class="line">  <span class="keyword">let</span> common_dir = parent . <span class="string">&#x27;/.&#x27;</span> . prefix</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> [dirname, settingname] in <span class="built_in">items</span>(dir_list)</span><br><span class="line">    <span class="keyword">let</span> directory = common_dir . dirname . <span class="string">&#x27;/&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">exists</span>(<span class="string">&quot;*mkdir&quot;</span>)</span><br><span class="line">      <span class="keyword">if</span> !isdirectory(directory)</span><br><span class="line">        <span class="keyword">call</span> <span class="built_in">mkdir</span>(directory)</span><br><span class="line">      <span class="keyword">endif</span></span><br><span class="line">    <span class="keyword">endif</span></span><br><span class="line">    <span class="keyword">if</span> !isdirectory(directory)</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;Warning: Unable to create backup directory: &quot;</span> . directory</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;Try: mkdir -p &quot;</span> . directory</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">let</span> directory = <span class="keyword">substitute</span>(directory, <span class="string">&quot; &quot;</span>, <span class="string">&quot;\\\\ &quot;</span>, <span class="string">&quot;g&quot;</span>)</span><br><span class="line">      exec <span class="string">&quot;set &quot;</span> . settingname . <span class="string">&quot;=&quot;</span> . directory</span><br><span class="line">    <span class="keyword">endif</span></span><br><span class="line">  <span class="keyword">endfor</span></span><br><span class="line"><span class="keyword">endfunction</span></span><br><span class="line"><span class="keyword">call</span> InitializeDirectories()</span><br><span class="line"><span class="comment">&quot; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Vim-Plug &#123;</span></span><br><span class="line"><span class="keyword">call</span> plug#begin(<span class="string">&#x27;~/.vim/plugged&#x27;</span>)</span><br><span class="line">Plug <span class="string">&#x27;vim-airline/vim-airline&#x27;</span></span><br><span class="line">Plug <span class="string">&#x27;vim-airline/vim-airline-themes&#x27;</span></span><br><span class="line">Plug <span class="string">&#x27;powerline/fonts&#x27;</span></span><br><span class="line">Plug <span class="string">&#x27;bling/vim-bufferline&#x27;</span></span><br><span class="line">Plug <span class="string">&#x27;preservim/nerdtree&#x27;</span>, &#123; <span class="string">&#x27;on&#x27;</span>: <span class="string">&#x27;NERDTreeToggle&#x27;</span>&#125;</span><br><span class="line">Plug <span class="string">&#x27;ctrlpvim/ctrlp.vim&#x27;</span></span><br><span class="line">Plug <span class="string">&#x27;rhysd/conflict-marker.vim&#x27;</span></span><br><span class="line">Plug <span class="string">&#x27;tacahiroy/ctrlp-funky&#x27;</span></span><br><span class="line">Plug <span class="string">&#x27;tpope/vim-surround&#x27;</span></span><br><span class="line">Plug <span class="string">&#x27;preservim/nerdcommenter&#x27;</span></span><br><span class="line">Plug <span class="string">&#x27;vim-syntastic/syntastic&#x27;</span></span><br><span class="line">Plug <span class="string">&#x27;myusuf3/numbers.vim&#x27;</span></span><br><span class="line">Plug <span class="string">&#x27;tpope/vim-fugitive&#x27;</span></span><br><span class="line">Plug <span class="string">&#x27;easymotion/vim-easymotion&#x27;</span></span><br><span class="line">Plug <span class="string">&#x27;tibabit/vim-templates&#x27;</span></span><br><span class="line">Plug <span class="string">&#x27;flazz/vim-colorschemes&#x27;</span></span><br><span class="line"><span class="comment">&quot; Plug &#x27;mg979/vim-visual-multi&#x27;</span></span><br><span class="line">Plug <span class="string">&#x27;vim-scripts/sessionman.vim&#x27;</span></span><br><span class="line">Plug <span class="string">&#x27;mbbill/undotree&#x27;</span></span><br><span class="line">Plug <span class="string">&#x27;nathanaelkane/vim-indent-guides&#x27;</span></span><br><span class="line">Plug <span class="string">&#x27;vim-scripts/restore_view.vim&#x27;</span></span><br><span class="line">Plug <span class="string">&#x27;wakatime/vim-wakatime&#x27;</span></span><br><span class="line">Plug <span class="string">&#x27;mhinz/vim-signify&#x27;</span></span><br><span class="line"><span class="comment">&quot;Plug &#x27;godlygeek/tabular&#x27;</span></span><br><span class="line">Plug <span class="string">&#x27;Valloric/YouCompleteMe&#x27;</span></span><br><span class="line"><span class="keyword">call</span> plug#end()</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; config vim-templates</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:tmpl_author_email</span>=<span class="string">&quot;yexiaorain@gmail.com&quot;</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:tmpl_license</span>=<span class="string">&quot;GPL&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:syntastic_cpp_compiler_options</span> = <span class="string">&#x27; -std=c++17&#x27;</span></span><br><span class="line"><span class="comment">&quot; https://github.com/ycm-core/YouCompleteMe/issues/429, 这是一个全局的方案, 但是YCM建议每个项目是不同的配置,只需要把.ycm_extra_conf.py 拷贝到你项目下, 再自定义参数即可</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:ycm_global_ycm_extra_conf</span> = <span class="string">&#x27;/home/cromarmot/.vim/plugged/YouCompleteMe/third_party/ycmd/.ycm_extra_conf.py&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:airline_powerline_fonts</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">colorscheme</span> molokai</span><br><span class="line"><span class="comment">&quot; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Basics &#123;</span></span><br><span class="line">  <span class="keyword">let</span> mapleader = <span class="string">&#x27;,&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&quot; set foldmarker=&#123;,&#125;</span></span><br><span class="line">  <span class="comment">&quot; set foldlevel=0</span></span><br><span class="line">  <span class="comment">&quot; set foldmethod=marker</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">filetype</span> plugin <span class="built_in">indent</span> <span class="keyword">on</span>   <span class="comment">&quot; Automatically detect file types.</span></span><br><span class="line">  <span class="keyword">syntax</span> <span class="keyword">on</span>                   <span class="comment">&quot; Syntax highlighting</span></span><br><span class="line">  <span class="keyword">set</span> mouse=<span class="keyword">a</span>                 <span class="comment">&quot; Automatically enable mouse usage</span></span><br><span class="line">  <span class="keyword">set</span> mousehide               <span class="comment">&quot; Hide the mouse cursor while typing</span></span><br><span class="line">  <span class="keyword">scriptencoding</span> utf-<span class="number">8</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> shortmess+=filmnrxoOtT          <span class="comment">&quot; Abbrev. of messages (avoids &#x27;hit enter&#x27;)</span></span><br><span class="line">  <span class="keyword">set</span> viewoptions=folds,<span class="keyword">options</span>,<span class="built_in">cursor</span>,unix,slash <span class="comment">&quot; Better Unix / Windows compatibility</span></span><br><span class="line">  <span class="keyword">set</span> virtualedit=onemore             <span class="comment">&quot; Allow for cursor beyond last character</span></span><br><span class="line">  <span class="keyword">set</span> <span class="keyword">history</span>=<span class="number">1000</span>                    <span class="comment">&quot; Store a ton of history (default is 20)</span></span><br><span class="line"><span class="comment">&quot; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Formatting &#123;</span></span><br><span class="line">  <span class="keyword">set</span> wrap                        <span class="comment">&quot; wrap long lines</span></span><br><span class="line">  <span class="keyword">set</span> textwidth=<span class="number">0</span>                 <span class="comment">&quot; soft wrap</span></span><br><span class="line">  <span class="keyword">set</span> linebreak                   <span class="comment">&quot; soft wrap</span></span><br><span class="line">  <span class="keyword">set</span> nolist                      <span class="comment">&quot; </span></span><br><span class="line">  <span class="keyword">set</span> autoindent                  <span class="comment">&quot; Indent at the same level of the previous line</span></span><br><span class="line">  <span class="keyword">set</span> <span class="built_in">shiftwidth</span>=<span class="number">2</span>                <span class="comment">&quot; Use indents of 4 spaces</span></span><br><span class="line">  <span class="keyword">set</span> expandtab                   <span class="comment">&quot; Tabs are spaces, not tabs</span></span><br><span class="line">  <span class="keyword">set</span> tabstop=<span class="number">2</span>                   <span class="comment">&quot; An indentation every four columns</span></span><br><span class="line">  <span class="keyword">set</span> softtabstop=<span class="number">2</span>               <span class="comment">&quot; Let backspace delete indent</span></span><br><span class="line">  <span class="comment">&quot;autocmd FileType c,cpp,java,go,php,javascript,puppet,python,rust,twig,xml,yml,perl,sql autocmd BufWritePre &lt;buffer&gt; if !exists(&#x27;g:spf13_keep_trailing_whitespace&#x27;) | call StripTrailingWhitespace() | endif</span></span><br><span class="line"><span class="comment">&quot; &#125;</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">&quot; UI &#123;</span></span><br><span class="line">  <span class="keyword">set</span> backspace=<span class="built_in">indent</span>,eol,start  <span class="comment">&quot; Backspace for dummies</span></span><br><span class="line">  <span class="keyword">set</span> linespace=<span class="number">0</span>                 <span class="comment">&quot; No extra spaces between rows</span></span><br><span class="line">  <span class="keyword">set</span> <span class="keyword">number</span>                      <span class="comment">&quot; Line numbers on</span></span><br><span class="line">  <span class="keyword">set</span> showmatch                   <span class="comment">&quot; Show matching brackets/parenthesis</span></span><br><span class="line">  <span class="keyword">set</span> incsearch                   <span class="comment">&quot; Find as you type search</span></span><br><span class="line">  <span class="keyword">set</span> hlsearch                    <span class="comment">&quot; Highlight search terms</span></span><br><span class="line">  <span class="keyword">set</span> wildmenu                    <span class="comment">&quot; Show list instead of just completing</span></span><br><span class="line">  <span class="keyword">set</span> wildmode=lis<span class="variable">t:longest</span>,full  <span class="comment">&quot; Command &lt;Tab&gt; completion, list matches, then longest common part, then all.</span></span><br><span class="line">  <span class="keyword">set</span> whichwrap=<span class="keyword">b</span>,s,h,<span class="keyword">l</span>,&lt;,&gt;,[,]   <span class="comment">&quot; Backspace and cursor keys wrap too</span></span><br><span class="line">  <span class="keyword">set</span> scrolljump=<span class="number">5</span>                <span class="comment">&quot; Lines to scroll when cursor leaves screen</span></span><br><span class="line">  <span class="keyword">set</span> scrolloff=<span class="number">3</span>                 <span class="comment">&quot; Minimum lines to keep above and below cursor</span></span><br><span class="line">  <span class="keyword">set</span> foldenable                  <span class="comment">&quot; Auto fold code</span></span><br><span class="line">  <span class="keyword">set</span> splitright                  <span class="comment">&quot; Puts new vsplit windows to the right of the current</span></span><br><span class="line">  <span class="keyword">set</span> splitbelow                  <span class="comment">&quot; Puts new split windows to the bottom of the current</span></span><br><span class="line">  <span class="keyword">set</span> <span class="keyword">list</span></span><br><span class="line">  <span class="keyword">set</span> listchars=<span class="keyword">tab</span>:›\ ,trail:•,extends:#,nbsp:. <span class="comment">&quot; Highlight problematic whitespace</span></span><br><span class="line"><span class="comment">&quot; &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> clipboard=unnamed,unnamedplus <span class="comment">&quot; yy to clipboard</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; undo &#123;</span></span><br><span class="line">  <span class="keyword">set</span> backup</span><br><span class="line">  <span class="keyword">set</span> <span class="built_in">undofile</span>                <span class="comment">&quot; So is persistent undo ...</span></span><br><span class="line">  <span class="keyword">set</span> undolevels=<span class="number">1000</span>         <span class="comment">&quot; Maximum number of changes that can be undone</span></span><br><span class="line">  <span class="keyword">set</span> undoreload=<span class="number">10000</span>        <span class="comment">&quot; Maximum number lines to save for undo on a buffer reload</span></span><br><span class="line"><span class="comment">&quot; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> laststatus=<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; highlight &#123;</span></span><br><span class="line">  <span class="keyword">highlight</span> clear SignColumn      <span class="comment">&quot; SignColumn should match background</span></span><br><span class="line">  <span class="keyword">highlight</span> clear LineNr          <span class="comment">&quot; Current line number row will have same background color in relative mode</span></span><br><span class="line">  <span class="keyword">hi</span> Normal ctermbg=None</span><br><span class="line">  <span class="comment">&quot;hi CursorLine   cterm=NONE ctermbg=darkgray ctermfg=black  guibg=#004488 guifg=white</span></span><br><span class="line">  <span class="keyword">set</span> cursorline <span class="comment">&quot; Highlight current line</span></span><br><span class="line">  <span class="keyword">hi</span> CursorLine     cterm=NONE ctermbg=darkgray ctermfg=white guibg=#<span class="number">004488</span> guifg=white</span><br><span class="line">  <span class="keyword">set</span> cursorcolumn <span class="comment">&quot; Highlight current line</span></span><br><span class="line">  <span class="keyword">hi</span> CursorColumn   cterm=NONE ctermbg=darkgray ctermfg=white guibg=#<span class="number">004488</span> guifg=white</span><br><span class="line">  <span class="keyword">hi</span> Visual ctermbg=white ctermfg=black guibg=Grey</span><br><span class="line"><span class="comment">&quot; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; keymap &#123;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title">CompileByFileType</span><span class="params">()</span></span><br><span class="line">  <span class="keyword">if</span> &amp;<span class="keyword">filetype</span> == <span class="string">&quot;cpp&quot;</span></span><br><span class="line">    <span class="string">&quot;!clang++ -o &quot;</span>%&lt;<span class="string">&quot; &quot;</span>%<span class="comment">&quot; -std=gnu++17 -O2 -g -Wall -Wcomma</span></span><br><span class="line">    <span class="string">&quot;!clang++ -o &quot;</span>%&lt;<span class="string">&quot; &quot;</span>%<span class="comment">&quot; -std=gnu++20 -O2 -g -Wall -Wcomma -Wextra -fsanitize=integer,undefined,null,alignment</span></span><br><span class="line">    !clang++ -<span class="keyword">o</span> <span class="string">&quot;%&lt;&quot;</span> <span class="string">&quot;%&quot;</span> -std=gnu++<span class="number">14</span> -O2 -g -Wall -Wcomma -Wextra -fsanitize=integer,undefined,null,alignment</span><br><span class="line">    <span class="string">&quot; !clang++ -o &quot;</span>%&lt;<span class="string">&quot; &quot;</span>%<span class="comment">&quot; -std=gnu++11 -O2 -g -Wall -Wcomma</span></span><br><span class="line">    <span class="string">&quot;!clang++ -o &quot;</span>%&lt;<span class="string">&quot; &quot;</span>%<span class="comment">&quot; -std=gnu++17 -g -Wall -Wcomma</span></span><br><span class="line">    <span class="string">&quot;!g++ -o &quot;</span>%&lt;<span class="string">&quot; &quot;</span>%<span class="comment">&quot; -std=gnu++14 -O2 -g -Wall</span></span><br><span class="line">  <span class="keyword">elseif</span> &amp;<span class="keyword">filetype</span> == <span class="string">&quot;c&quot;</span></span><br><span class="line">    !gcc -<span class="keyword">o</span> <span class="string">&quot;%&lt;&quot;</span> <span class="string">&quot;%&quot;</span> -O2 -g</span><br><span class="line">  <span class="keyword">elseif</span> &amp;<span class="keyword">filetype</span> == <span class="string">&quot;python&quot;</span></span><br><span class="line">    !python3 <span class="string">&quot;%&quot;</span></span><br><span class="line">  <span class="keyword">elseif</span> &amp;<span class="keyword">filetype</span> == <span class="string">&quot;go&quot;</span></span><br><span class="line">    !go run <span class="string">&quot;%&quot;</span></span><br><span class="line">  <span class="keyword">elseif</span> &amp;<span class="keyword">filetype</span> == <span class="string">&quot;rust&quot;</span></span><br><span class="line">    !rustc <span class="string">&quot;%&quot;</span> -O</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;UNKNOWN FILETYPE : &quot;</span>&amp;<span class="keyword">filetype</span></span><br><span class="line">  <span class="keyword">endif</span></span><br><span class="line"><span class="keyword">endfunction</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;F9&gt;</span> :<span class="keyword">call</span> CompileByFileType() <span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;F8&gt;</span> :!gdb <span class="string">&quot;%&lt;&quot;</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="comment">&quot; &#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="YouCompleteMe-额外操作"><a href="#YouCompleteMe-额外操作" class="headerlink" title="YouCompleteMe 额外操作"></a>YouCompleteMe 额外操作</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~/.vim/plugged/YouCompleteMe</span><br><span class="line"># git submodule update --init --recursive --depth=1</span><br></pre></td></tr></table></figure>

<p>这玩意儿不知道为啥走用proxychains4有问题,直接下 没代理又太慢, 需要先手动下一些支持</p>
<p>c-like: clang:</p>
<p><a href="https://github.com/ycm-core/llvm/releases/download/14.0.0/libclang-14.0.0-x86_64-unknown-linux-gnu.tar.bz2%E4%B8%8B%E8%BD%BD%E5%88%B0">https://github.com/ycm-core/llvm/releases/download/14.0.0/libclang-14.0.0-x86_64-unknown-linux-gnu.tar.bz2下载到</a> <code>~/.vim/plugged/YouCompleteMe/third_party/ycmd/clang_archives/</code> 中</p>
<p>c#:</p>
<p><a href="https://github.com/OmniSharp/omnisharp-roslyn/releases/download/v1.37.11/omnisharp.http-linux-x64.tar.gz">https://github.com/OmniSharp/omnisharp-roslyn/releases/download/v1.37.11/omnisharp.http-linux-x64.tar.gz</a> 下载到 <code>~/.vim/plugged/YouCompleteMe/third_party/ycmd/third_party/omnisharp-roslyn/v1.37.11</code>中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 ./install.py --clang-completer --verbose</span><br><span class="line"># python3 ./install.py --all --verbose # 其它语言支持,需要自己去找相应的包,不然这墙难受死</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>vim的好处就是默认的很足, 即使我在删掉了所有<code>~/.vim</code>时,用起来依然顺手</p>
<p>看着这些老仓库,好多从个人帐号下的变成了组织帐号下的</p>
<h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><p><a href="https://github.com/junegunn/vim-plug">vim-plug</a></p>
<p><a href="https://www.reddit.com/r/vim/comments/drets8/plugin_managers_vs_vim_packages/">Reddit::plugin managers vs vim packages</a></p>
<p><a href="https://vi.stackexchange.com/questions/7470/how-to-install-youcompleteme-with-clang-completer-offline">how to install ycm offline</a></p>
]]></content>
      <categories>
        <category>backend</category>
        <category>vim</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>CORS Demos</title>
    <url>/Blog/22-10-25-cors/</url>
    <content><![CDATA[<h1 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h1><p>The server is responsible for reporting the allowed origins. The web browser is responsible for enforcing that requests are only sent from allowed domains.</p>
<p><img data-src="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS/preflight_correct.png"></p>
<h2 id="Capture"><a href="#Capture" class="headerlink" title="Capture"></a>Capture</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tcpdump -i lo <span class="string">&#x27;port 5000&#x27;</span> -vv -x -X</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="In-browser-console"><a href="#In-browser-console" class="headerlink" title="In browser console"></a>In browser console</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fetch(<span class="string">&quot;http://127.0.0.1:5000&quot;</span>).<span class="keyword">then</span>(result=&gt;console.log(result))</span><br><span class="line">fetch(<span class="string">&quot;http://127.0.0.1:5000/xxx&quot;</span>,&#123;method: <span class="string">&quot;POST&quot;</span>,credentials:<span class="string">&quot;include&quot;</span>&#125;).<span class="keyword">then</span>(result=&gt;console.log(result))</span><br></pre></td></tr></table></figure>

<h2 id="With-curl"><a href="#With-curl" class="headerlink" title="With curl"></a>With curl</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X POST -H <span class="string">&quot;Origin: https://www.baidu.com&quot;</span> http://127.0.0.1:5000/xxx</span><br></pre></td></tr></table></figure>

<h2 id="With-static-html"><a href="#With-static-html" class="headerlink" title="With static html"></a>With static html</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;header&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">  &lt;/header&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      const xhr = new XMLHttpRequest();</span><br><span class="line">      const url = &#x27;http://127.0.0.1:5000/xxx&#x27;;</span><br><span class="line">      xhr.open(&#x27;POST&#x27;, url);</span><br><span class="line">      xhr.send();</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="Python-with-flask-flask-cors"><a href="#Python-with-flask-flask-cors" class="headerlink" title="Python with flask flask-cors"></a>Python with flask flask-cors</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> flask_demo</span><br><span class="line">python3 -m venv venv</span><br><span class="line">. venv/bin/active</span><br><span class="line">pip install flask flask-cors</span><br><span class="line">python3 app.py</span><br></pre></td></tr></table></figure>

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_cors <span class="keyword">import</span> CORS</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment"># CORS(app) &lt;-----------------------</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;execute&quot;</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;&lt;p&gt;Hello, World!&lt;/p&gt;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/xxx&quot;</span>,methods = [<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">post_test</span>():</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;execute&quot;</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;yyyyyy&quot;</span></span><br><span class="line"></span><br><span class="line">app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">5000</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<h2 id="Nodejs-express"><a href="#Nodejs-express" class="headerlink" title="Nodejs express"></a>Nodejs express</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> express_demo</span><br><span class="line">yarn</span><br><span class="line">node app.js</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&#x27;cors&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">5000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// app.use(cors()) &lt;----------------------------</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;execute&quot;</span>);</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;Hello World!&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/xxx&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;execute&quot;</span>);</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;yyyyyyyy&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Example app listening on port <span class="subst">$&#123;port&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="OutPut"><a href="#OutPut" class="headerlink" title="OutPut"></a>OutPut</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">IP (tos 0x0, ttl 64, id 30245, offset 0, flags [DF], proto TCP (6), length 72)</span><br><span class="line">    localhost.5000 &gt; localhost.45592: Flags [P.], cksum 0xfe3c (incorrect -&gt; 0xdb33), seq 174:194, ack 537, win 512, options [nop,nop,TS val 3514469229 ecr 3514469229], length 20</span><br><span class="line">	0x0000:  4500 0048 7625 4000 4006 c688 7f00 0001  E..Hv%@.@.......</span><br><span class="line">	0x0010:  7f00 0001 1388 b218 a3e6 4bd5 50ac 8872  ..........K.P..r</span><br><span class="line">	0x0020:  8018 0200 fe3c 0000 0101 080a d17a 8b6d  .....&lt;.......z.m</span><br><span class="line">	0x0030:  d17a 8b6d 3c70 3e48 656c 6c6f 2c20 576f  .z.m&lt;p&gt;Hello,.Wo</span><br><span class="line">	0x0040:  726c 6421 3c2f 703e                      rld!&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">IP (tos 0x0, ttl 64, id 10609, offset 0, flags [DF], proto TCP (6), length 58)</span><br><span class="line">    localhost.5000 &gt; localhost.33622: Flags [P.], cksum 0xfe2e (incorrect -&gt; 0xa0e0), seq 173:179, ack 784, win 512, options [nop,nop,TS val 3515041534 ecr 3515041534], length 6</span><br><span class="line">	0x0000:  4500 003a 2971 4000 4006 134b 7f00 0001  E..:)q@.@..K....</span><br><span class="line">	0x0010:  7f00 0001 1388 8356 edfc 5eb6 696a eb5f  .......V..^.ij._</span><br><span class="line">	0x0020:  8018 0200 fe2e 0000 0101 080a d183 46fe  ..............F.</span><br><span class="line">	0x0030:  d183 46fe 7979 7979 7979                 ..F.yyyyyy</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>跨域依然被发送, 且服务器会执行和返回, 只是当不满足时, 加了credentials:”include”也不会带cookie, 浏览器也不展示结果</p>
<p>同时可以看flask-cors 的源码 发现只改了headers</p>
<h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS">https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS</a></p>
<p><a href="https://github.com/corydolphin/flask-cors/blob/5c2a16274d9684d9d5475cab283559678278d7ab/flask_cors/core.py#L224-L252">https://github.com/corydolphin/flask-cors/blob/5c2a16274d9684d9d5475cab283559678278d7ab/flask_cors/core.py#L224-L252</a></p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>CORS</category>
      </categories>
      <tags>
        <tag>CORS</tag>
      </tags>
  </entry>
  <entry>
    <title>nextjs and cheetsheat</title>
    <url>/Blog/22-11-11-nextjs/</url>
    <content><![CDATA[<p><a href="https://github.com/CroMarmot/ReactDemo/commits/master">https://github.com/CroMarmot/ReactDemo/commits/master</a></p>
<h1 id="Next"><a href="#Next" class="headerlink" title="Next"></a>Next</h1><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><table>
<thead>
<tr>
<th>功能</th>
<th>doc</th>
</tr>
</thead>
<tbody><tr>
<td>Head</td>
<td><a href="https://github.com/CroMarmot/ReactDemo/commit/00dc0b74d4363e3be39433647a63c3fbe8a96d66">https://github.com/CroMarmot/ReactDemo/commit/00dc0b74d4363e3be39433647a63c3fbe8a96d66</a></td>
</tr>
<tr>
<td>Script</td>
<td><a href="https://github.com/CroMarmot/ReactDemo/commit/0cb1c2aac95b276a689bb49e31f7a147d78c159e">https://github.com/CroMarmot/ReactDemo/commit/0cb1c2aac95b276a689bb49e31f7a147d78c159e</a></td>
</tr>
<tr>
<td>静态生成,Link,route,404</td>
<td>getStaticPaths getStaticProps</td>
</tr>
<tr>
<td>global css, module css</td>
<td><a href="https://github.com/CroMarmot/ReactDemo/commit/bf504ce48b4b34a3c7ac3bba2d66e051e74c5476">commit</a></td>
</tr>
<tr>
<td>static image</td>
<td><a href="https://github.com/CroMarmot/ReactDemo/commit/0a826c74cef03573ced89c2eb36c70a763401fba">https://github.com/CroMarmot/ReactDemo/commit/0a826c74cef03573ced89c2eb36c70a763401fba</a></td>
</tr>
</tbody></table>
<h2 id="Vercel-部署"><a href="#Vercel-部署" class="headerlink" title="Vercel 部署"></a>Vercel 部署</h2><p><a href="https://vercel.com/new">https://vercel.com/new</a></p>
<h2 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h2><p><a href="https://nextjs.org/learn/foundations/">https://nextjs.org/learn/foundations/</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx create-next-app@latest --ts</span><br></pre></td></tr></table></figure>

<h1 id="React"><a href="#React" class="headerlink" title="React"></a>React</h1><p>React use Babel to compile JSX</p>
<h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h2><p><a href="https://zh-hans.reactjs.org/docs/strict-mode.html">https://zh-hans.reactjs.org/docs/strict-mode.html</a></p>
<p>识别不安全的生命周期</p>
<p>关于使用过时字符串 ref API 的警告</p>
<p>关于使用废弃的 findDOMNode 方法的警告</p>
<p>检测意外的副作用</p>
<p>检测过时的 context API</p>
<p>确保可复用的状态</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">StrictMode</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">StrictMode</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"> <span class="tag">&lt;/<span class="name">StrictMode</span>&gt;</span></span>,</span><br><span class="line"> <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h2><h3 id="Class组件"><a href="#Class组件" class="headerlink" title="Class组件"></a>Class组件</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ExampleClassComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line"> <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Example Class Component<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="函数式组件"><a href="#函数式组件" class="headerlink" title="函数式组件"></a>函数式组件</h3><p>React 组件名必须要首字母大写</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ExampleFunctionalComponent</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Example Class Component<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">ExampleFunctionalComponent</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Example Class Component<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; memo &#125; <span class="keyword">from</span> <span class="string">&#x27;React&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ExamplePureComponent</span> = <span class="title function_">memo</span>(&#123; portal &#125;) =&gt; &#123;</span><br><span class="line"> <span class="keyword">return</span> (</span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome to &#123;portal&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PropsExample</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line"> <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="keyword">const</span> &#123; portalName &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome to &#123;portalName&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">PropsExample</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome to &#123;props.portalName&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">PropsExample</span> = (<span class="params">&#123; portalName &#125;</span>) =&gt; &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome to &#123;portalName&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">PropTypes</span> <span class="keyword">from</span> <span class="string">&#x27;prop-types&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params">&#123; name, age, rightHanded &#125;</span>) =&gt; &#123;</span><br><span class="line"> <span class="keyword">return</span> (</span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">     <span class="tag">&lt;<span class="name">p</span>&gt;</span>Name: &#123;name.firstName&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">     <span class="tag">&lt;<span class="name">p</span>&gt;</span>Surname: &#123;name.lastName&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">     <span class="tag">&lt;<span class="name">p</span>&gt;</span>Age: &#123;age&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">     <span class="tag">&lt;<span class="name">p</span>&gt;</span>Dominant hand: &#123;rightHanded ? &#x27;right&#x27; : &#x27;left&#x27;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"> );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">App</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line"> <span class="attr">name</span>: <span class="title class_">PropTypes</span>.<span class="title function_">shape</span>(&#123;</span><br><span class="line">   <span class="attr">firstName</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>,</span><br><span class="line">   <span class="attr">lastName</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span></span><br><span class="line"> &#125;),</span><br><span class="line"> <span class="attr">age</span>: <span class="title class_">PropTypes</span>.<span class="property">number</span>,</span><br><span class="line"> <span class="attr">rightHanded</span>: <span class="title class_">PropTypes</span>.<span class="title function_">oneOf</span>([<span class="literal">true</span>, <span class="literal">false</span>]),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>


<h2 id="子组件-slot"><a href="#子组件-slot" class="headerlink" title="子组件 slot"></a>子组件 slot</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const App = () =&gt; &#123;</span><br><span class="line"> return (</span><br><span class="line">   &lt;&gt;</span><br><span class="line">     &lt;ParentComponent&gt;</span><br><span class="line">       &lt;ul&gt;</span><br><span class="line">         &lt;li&gt;This&lt;/li&gt;</span><br><span class="line">         &lt;li&gt;is&lt;/li&gt;</span><br><span class="line">         &lt;li&gt;children&lt;/li&gt;</span><br><span class="line">         &lt;li&gt;element&lt;/li&gt;</span><br><span class="line">       &lt;/ul&gt;</span><br><span class="line">     &lt;/ParentComponent&gt;</span><br><span class="line">   &lt;/&gt;</span><br><span class="line"> );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const ParentComponent = (&#123; children &#125;) =&gt; &#123;</span><br><span class="line"> return (</span><br><span class="line">   &lt;div&gt;</span><br><span class="line">     &#123;children&#125;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line"> );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="状态-useState"><a href="#状态-useState" class="headerlink" title="状态 useState"></a>状态 <code>useState</code></h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Counter</span> <span class="keyword">from</span> <span class="string">&#x27;./User&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="keyword">const</span> [year, setYear] = <span class="title function_">useState</span>(<span class="number">1237</span>)</span><br><span class="line"> <span class="keyword">return</span> (</span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">     <span class="tag">&lt;<span class="name">Counter</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">       <span class="attr">warning</span>=<span class="string">&#123;</span>`<span class="attr">Current</span> <span class="attr">year</span> <span class="attr">is</span> $&#123;<span class="attr">year</span>&#125;`&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">     /&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"> );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class UserAccount extends React.Component &#123;</span><br><span class="line"> constructor(props) &#123;</span><br><span class="line">   super(props);</span><br><span class="line">   this.state = &#123;</span><br><span class="line">     username: &#x27;mike123&#x27;,</span><br><span class="line">     userAge: 21</span><br><span class="line">   &#125;;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> render() &#123;</span><br><span class="line">   return (</span><br><span class="line">     &lt;div&gt;</span><br><span class="line">       &lt;h2&gt;User account&lt;/h2&gt;</span><br><span class="line">       &lt;ul&gt;</span><br><span class="line">         &lt;li&gt;Username: &#123;this.state.username&#125;&lt;/li&gt;</span><br><span class="line">         &lt;li&gt;Age: &#123;this.state.userAge&#125;&lt;/li&gt;</span><br><span class="line">       &lt;/ul&gt;</span><br><span class="line">     &lt;/div&gt;</span><br><span class="line">   );</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="跨层级变量-useContext"><a href="#跨层级变量-useContext" class="headerlink" title="跨层级变量 useContext"></a>跨层级变量 useContext</h2><p>提供</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; createContext &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> &lt;context-name&gt; = <span class="title function_">createContext</span>();</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line"> &lt;&lt;context-name&gt;.<span class="property">Provider</span> value=&#123;&lt;context-value&gt;&#125;&gt;</span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"> &lt;/&lt;context-name&gt;.<span class="property">Provider</span>&gt;,</span><br><span class="line"> <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useContext &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; &lt;context-name&gt; &#125; <span class="keyword">from</span> <span class="string">&#x27;./index&#x27;</span>;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="keyword">const</span> &lt;context-variable&gt; = <span class="title function_">useContext</span>(&lt;context-name&gt;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&lt;context-variable&gt;);</span><br></pre></td></tr></table></figure>

<h2 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a><code>useEffect</code></h2><p>请记住，Effects通常用于 “走出 “你的React代码并与一些外部系统同步。这包括浏览器API、第三方小工具、网络等等。如果你的Effect只是根据其他状态来调整一些状态, 你并不需要useEffect (<a href="https://beta.reactjs.org/learn/you-might-not-need-an-effect">https://beta.reactjs.org/learn/you-might-not-need-an-effect</a>)</p>
<p><a href="https://www.reddit.com/r/reactjs/comments/v5ypd9/goodbye_useeffect_reactathon_2022/">https://www.reddit.com/r/reactjs/comments/v5ypd9/goodbye_useeffect_reactathon_2022/</a></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line"> <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">fetchData</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">   ...</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">fetchData</span>()</span><br><span class="line"> &#125;, []);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>We’re calling the fetchData function that’s responsible for fetching data from the server. We execute it on every re-render because the dependency array is empty.</p>
<h2 id="DOM对象-useRef"><a href="#DOM对象-useRef" class="headerlink" title="DOM对象 useRef"></a>DOM对象 useRef</h2><p>非常量不需要渲染的引用, 或者对一个对象实体</p>
<p>a React Hook that lets you reference a value that’s not needed for rendering.</p>
<p>和 useState 区别</p>
<ul>
<li>返回的是 {current}</li>
<li>变化时不触发re-render</li>
<li>在rendering执行外可以 修改, state 是不可修改的</li>
<li>rendering时 不应该读 current(所以你不应该在渲染中用{ref.current}), state 随时有snapshot可读</li>
</ul>
<p>使用场景</p>
<ul>
<li>存 timeout id</li>
<li>操作dom元素</li>
<li>存其它对jsx 不必要的objects</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState, useRef &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Stopwatch</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [startTime, setStartTime] = <span class="title function_">useState</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> [now, setNow] = <span class="title function_">useState</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> intervalRef = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleStart</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">setStartTime</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>());</span><br><span class="line">    <span class="title function_">setNow</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>());</span><br><span class="line"></span><br><span class="line">    <span class="built_in">clearInterval</span>(intervalRef.<span class="property">current</span>);</span><br><span class="line">    intervalRef.<span class="property">current</span> = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">setNow</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>());</span><br><span class="line">    &#125;, <span class="number">10</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleStop</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(intervalRef.<span class="property">current</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> secondsPassed = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (startTime != <span class="literal">null</span> &amp;&amp; now != <span class="literal">null</span>) &#123;</span><br><span class="line">    secondsPassed = (now - startTime) / <span class="number">1000</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Time passed: &#123;secondsPassed.toFixed(3)&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleStart&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        Start</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleStop&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        Stop</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState, useRef, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">VideoPlayer</span>(<span class="params">&#123; src, isPlaying &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> ref = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isPlaying) &#123;</span><br><span class="line">      ref.<span class="property">current</span>.<span class="title function_">play</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      ref.<span class="property">current</span>.<span class="title function_">pause</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">video</span> <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> <span class="attr">src</span>=<span class="string">&#123;src&#125;</span> <span class="attr">loop</span> <span class="attr">playsInline</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="自定义-state-的处理逻辑-useReducer"><a href="#自定义-state-的处理逻辑-useReducer" class="headerlink" title="自定义 state 的处理逻辑 useReducer"></a>自定义 state 的处理逻辑 useReducer</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useReducer &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&quot;react-dom/client&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initialTodos = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&quot;Todo 1&quot;</span>,</span><br><span class="line">    <span class="attr">complete</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&quot;Todo 2&quot;</span>,</span><br><span class="line">    <span class="attr">complete</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">reducer</span> = (<span class="params">state, action</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;COMPLETE&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> state.<span class="title function_">map</span>(<span class="function">(<span class="params">todo</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (todo.<span class="property">id</span> === action.<span class="property">id</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123; ...todo, <span class="attr">complete</span>: !todo.<span class="property">complete</span> &#125;;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> todo;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Todos</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [todos, dispatch] = <span class="title function_">useReducer</span>(reducer, initialTodos);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleComplete</span> = (<span class="params">todo</span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;COMPLETE&quot;</span>, <span class="attr">id</span>: todo.<span class="property">id</span> &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;todos.map((todo) =&gt; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;todo.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">checked</span>=<span class="string">&#123;todo.complete&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">onChange</span>=<span class="string">&#123;()</span> =&gt;</span> handleComplete(todo)&#125;</span></span><br><span class="line"><span class="language-xml">            /&gt;</span></span><br><span class="line"><span class="language-xml">            &#123;todo.title&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      ))&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Todos</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure>

<h2 id="复用-useMemo-useCallback"><a href="#复用-useMemo-useCallback" class="headerlink" title="复用 useMemo , useCallback"></a>复用 useMemo , useCallback</h2><p>包裹自己的话, 用React.memo的高阶函数包裹</p>
<p>例如 页面有输入框, 也有和输入框无关的 函数计算, 可以让输入框变化时, 那些无关的计算不会被调用</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState, useMemo &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> calculation = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> <span class="title function_">expensiveCalculation</span>(count), [count]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">expensiveCalculation</span> = (<span class="params">num</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Calculating...&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000000</span>; i++) &#123;</span><br><span class="line">    num += <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> num;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<p>这种情况 count是 数字不会影响</p>
<p>而如果 props中有传回调函数, 而组件自身会变化, 那么回调函数地址会变化, useMemo无法做到希望的”入参不变不重渲染”</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState, useCallback &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&quot;react-dom/client&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Todos</span> <span class="keyword">from</span> <span class="string">&quot;./Todos&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [todos, setTodos] = <span class="title function_">useState</span>([]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">increment</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setCount</span>(<span class="function">(<span class="params">c</span>) =&gt;</span> c + <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> addTodo = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123; <span class="comment">// todos 不变时, count变化, 不会重新创建addTodo</span></span><br><span class="line">    <span class="title function_">setTodos</span>(<span class="function">(<span class="params">t</span>) =&gt;</span> [...t, <span class="string">&quot;New Todo&quot;</span>]);</span><br><span class="line">  &#125;, [todos]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Todos</span> <span class="attr">todos</span>=<span class="string">&#123;todos&#125;</span> <span class="attr">addTodo</span>=<span class="string">&#123;addTodo&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        Count: &#123;count&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;increment&#125;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; memo &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Todos</span> = (<span class="params">&#123; todos, addTodo &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;child render&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>My Todos<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;todos.map((todo, index) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">        return <span class="tag">&lt;<span class="name">p</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;todo&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>;</span></span><br><span class="line"><span class="language-xml">      &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;addTodo&#125;</span>&gt;</span>Add Todo<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">memo</span>(<span class="title class_">Todos</span>);</span><br></pre></td></tr></table></figure>

<h2 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add @reduxjs/toolkit react-redux</span><br></pre></td></tr></table></figure>

<p>Store</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; configureStore &#125; from &quot;@reduxjs/toolkit&quot;;</span><br><span class="line">import counterReducer from &quot;./features/counter/counterSlice&quot;;</span><br><span class="line"></span><br><span class="line">export default configureStore(&#123;</span><br><span class="line">  reducer: &#123;</span><br><span class="line">    counter: counterReducer,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>Slice</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; createSlice &#125; from &quot;@reduxjs/toolkit&quot;;</span><br><span class="line"></span><br><span class="line">export const counterSlice = createSlice(&#123;</span><br><span class="line">  name: &quot;counter&quot;,</span><br><span class="line">  initialState: &#123;</span><br><span class="line">    value: 0,</span><br><span class="line">  &#125;,</span><br><span class="line">  reducers: &#123;</span><br><span class="line">    increment: (state) =&gt; &#123;</span><br><span class="line">      // Redux Toolkit allows us to write &quot;mutating&quot; logic in reducers. It</span><br><span class="line">      // doesn&#x27;t actually mutate the state because it uses the Immer library,</span><br><span class="line">      // which detects changes to a &quot;draft state&quot; and produces a brand new</span><br><span class="line">      // immutable state based off those changes</span><br><span class="line">      state.value += 1;</span><br><span class="line">    &#125;,</span><br><span class="line">    decrement: (state) =&gt; &#123;</span><br><span class="line">      state.value -= 1;</span><br><span class="line">    &#125;,</span><br><span class="line">    incrementByAmount: (state, action) =&gt; &#123;</span><br><span class="line">      state.value += action.payload;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// Action creators are generated for each case reducer function</span><br><span class="line">export const &#123; increment, decrement, incrementByAmount &#125; = counterSlice.actions;</span><br><span class="line"></span><br><span class="line">export default counterSlice.reducer;</span><br></pre></td></tr></table></figure>

<p>Page</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; Provider &#125; from &#x27;react-redux&#x27;</span><br><span class="line">import store from &#x27;./store&#x27;</span><br><span class="line">import &#123; useSelector, useDispatch &#125; from &quot;react-redux&quot;;</span><br><span class="line">import &#123; decrement, increment &#125; from &quot;./features/counter/counterSlice&quot;;</span><br><span class="line"></span><br><span class="line">export function Counter() &#123;</span><br><span class="line">  const count = useSelector((state) =&gt; state.counter.value);</span><br><span class="line">  const dispatch = useDispatch();</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;button</span><br><span class="line">          aria-label=&quot;Increment value&quot;</span><br><span class="line">          onClick=&#123;() =&gt; dispatch(increment())&#125;</span><br><span class="line">        &gt;</span><br><span class="line">          Increment</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">        &lt;span&gt;&#123;count&#125;&lt;/span&gt;</span><br><span class="line">        &lt;button</span><br><span class="line">          aria-label=&quot;Decrement value&quot;</span><br><span class="line">          onClick=&#123;() =&gt; dispatch(decrement())&#125;</span><br><span class="line">        &gt;</span><br><span class="line">          Decrement</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default function ReduxDemo() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">      &lt;Counter /&gt;</span><br><span class="line">      &lt;Counter /&gt;</span><br><span class="line">    &lt;/Provider&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="迷思"><a href="#迷思" class="headerlink" title="迷思"></a>迷思</h2><h3 id="回调"><a href="#回调" class="headerlink" title="回调"></a>回调</h3><p>看起来 React单向数据流似乎很简洁, 但实际上 本身就有大量回调存在的可能性, 而这种回调在state变化状态下 竟然会变, 否则要自己加useCallback去管理, 感觉好蠢, 并且这样的设计下, 使用者可能有不需要的”回调”, 又变成在内部要判断未传递时的情况, 真的越想越蠢</p>
<h3 id="children-x2F-slot-可能破坏-抽离等价"><a href="#children-x2F-slot-可能破坏-抽离等价" class="headerlink" title="children&#x2F;slot 可能破坏 抽离等价"></a>children&#x2F;slot 可能破坏 抽离等价</h3><p>antd的Select, 下面的可以</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Select&gt;</span><br><span class="line">  &#123;items.map(item =&gt; &lt;Option key=&#123;item&#125; value=&#123;item&#125;&gt;&#123;item&#125;&lt;/Option&gt;)&#125;</span><br><span class="line">&lt;/Select&gt;</span><br></pre></td></tr></table></figure>

<p>而下面的不行(看起来有所谓的抽离等价, 实际上配上Select具体内部实现又没有了抽离等价, 问题属于slot&#x2F;children的问题)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const StringOption = (&#123;value&#125;) =&gt; &lt;Option key=&#123;value&#125; value=&#123;value&#125;&gt;&#123;value&#125;&lt;/Option&gt;;</span><br><span class="line"></span><br><span class="line">&lt;Select&gt;</span><br><span class="line">  &#123;items.map(item =&gt; &lt;StringOption value=&#123;item&#125; /&gt;)&#125;</span><br><span class="line">&lt;/Select&gt;</span><br></pre></td></tr></table></figure>

<h3 id="for的key-大多数情况是浪费的"><a href="#for的key-大多数情况是浪费的" class="headerlink" title="for的key 大多数情况是浪费的??"></a>for的key 大多数情况是浪费的??</h3><p>vue 同</p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>nextjs</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux shell</title>
    <url>/Blog/23-02-22-sh/</url>
    <content><![CDATA[<h1 id="Linux-shell"><a href="#Linux-shell" class="headerlink" title="Linux shell"></a>Linux shell</h1><h2 id="sh"><a href="#sh" class="headerlink" title="sh"></a>sh</h2><p>linux默认的 <code>/bin/sh</code></p>
<h2 id="Bash-GNU-Bourne-Again-SHell"><a href="#Bash-GNU-Bourne-Again-SHell" class="headerlink" title="Bash(GNU Bourne-Again SHell)"></a>Bash(GNU Bourne-Again SHell)</h2><p><a href="https://www.gnu.org/software/bash/">https://www.gnu.org/software/bash/</a></p>
<p>ubuntu默认的, 我一直以来用的最多的</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it --rm ubuntu</span><br><span class="line">echo $SHELL</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">或者</span></span><br><span class="line">grep root /etc/passwd</span><br></pre></td></tr></table></figure>

<p>bash提供的增强包括:</p>
<ul>
<li>命令行编辑</li>
<li>无限大小的命令历史</li>
<li>job control,</li>
<li>shell函数和 aliases</li>
<li>无限大的indexed arrays</li>
<li>从2到64的任何基数的整数算术</li>
</ul>
<p>以及日常自己写点shell脚本来增强一下就行了</p>
<h2 id="Dash-Debian-Almquist-shell"><a href="#Dash-Debian-Almquist-shell" class="headerlink" title="Dash(Debian Almquist shell)"></a>Dash(Debian Almquist shell)</h2><p><a href="http://gondor.apana.org.au/~herbert/dash/">http://gondor.apana.org.au/~herbert/dash/</a></p>
<p>POSIX-兼容的 &#x2F;bin&#x2F;sh实现，目标是尽量小（且不牺牲速度），大多数情况比Bash快</p>
<p>但因此用户体验就不太好了</p>
<p><a href="https://lwn.net/Articles/343924/">A tale of two shells: bash or dash</a></p>
<h2 id="Z-Shell"><a href="#Z-Shell" class="headerlink" title="Z Shell"></a>Z Shell</h2><p><a href="https://zsh.sourceforge.io/">https://zsh.sourceforge.io/</a></p>
<p><a href="https://wiki.archlinuxcn.org/wiki/Zsh">https://wiki.archlinuxcn.org/wiki/Zsh</a></p>
<p><img data-src="https://zsh.sourceforge.io/Images/wizard.gif" alt="z shell logo"></p>
<p>zsh是一个为交互式使用而设计的shell，尽管它也是一种强大的脚本语言。bash、ksh和tcsh的许多有用的功能都被整合到了zsh中；同时还增加了许多原创的功能。</p>
<p>直接看目录 <a href="https://zsh.sourceforge.io/Intro/intro_toc.html">https://zsh.sourceforge.io/Intro/intro_toc.html</a></p>
<p>以及官方的FAQ: <a href="https://zsh.sourceforge.io/FAQ/">https://zsh.sourceforge.io/FAQ/</a></p>
<p>Bourne-Again Shell，bash，是另一个增强的类似Bourne的shell；与zsh最明显的区别是，它并不试图模仿Korn shell。由于这两个shell都在积极开发中，所以在这里说得太具体可能不太明智。大体上说，bash更关注标准的遵守（即POSIX），而且到目前为止，它避免了zsh所具有的更多的深奥的交互功能（可编程完成等）。</p>
<hr>
<p>很久很久以前用过一下<a href="https://ohmyz.sh/">oh my zsh</a>, 但是它的启动速度给我劝退了, 现在似乎修复了?</p>
<p>然后似乎time在zsh是一行需要改TIMEFMT</p>
<p>安装</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt install zsh</span><br><span class="line">sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p>Oh My Zsh是一个令人愉快的、开源的、社区驱动的框架，用于管理你的Zsh配置。它捆绑了数以千计的有用功能、助手、插件、主题，还有一些让你大呼过瘾的东西。</p>
<hr>
<p>插件</p>
<p><a href="https://github.com/zsh-users/antigen">https://github.com/zsh-users/antigen</a></p>
<p><a href="https://github.com/zsh-users/zsh-autosuggestions/blob/master/INSTALL.md">https://github.com/zsh-users/zsh-autosuggestions/blob/master/INSTALL.md</a></p>
<p><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/web-search">https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/web-search</a></p>
<p><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/dirhistory">https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/dirhistory</a></p>
<p><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/history">https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/history</a></p>
<p><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/z">https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/z</a></p>
<p><a href="https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/INSTALL.md">https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/INSTALL.md</a></p>
<h2 id="Fish"><a href="#Fish" class="headerlink" title="Fish"></a>Fish</h2><p><a href="https://fishshell.com/">https://fishshell.com/</a></p>
<ul>
<li>自动建议命令</li>
<li>辉煌的VGA色彩: fish支持24位真彩色，是终端技术中最先进的技术。看哪，单空格的彩虹。</li>
<li>理智的脚本编写: fish是完全可编写脚本的，其语法简单、干净、一致。你不会再写esac了。</li>
<li>基于网络的配置: 对于那些拥有图形计算机的幸运儿来说，你可以在网页上设置你的颜色并查看功能、变量和历史记录。</li>
<li>man Page 补全:其他shell支持可编程的补语，但只有fish通过解析你安装的man page自动生成补语。</li>
<li>开箱即用: fish会让你感到高兴，因为它具有标签完成和语法高亮等功能，而且没有任何新内容需要学习或配置。</li>
</ul>
<hr>
<p>安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-add-repository ppa:fish-shell/release-3</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install fish</span><br></pre></td></tr></table></figure>

<p>配置, 我配了个Dracula颜色 + Informative(prompt)的和我之前bash自己配的比较接近</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fish_config</span><br></pre></td></tr></table></figure>

<p>然后改了一下十分痛苦, 例如 它自带的很多函数，是靠配置变量再调用的，十分奇怪而不是传参</p>
<p>以及它自己的一套脚本语言, 虽说是开箱即用但是自定义化还是很痛苦</p>
<p>配置页面能看一些东西，但是没有自动关联文档跳转, 提供的prompt 也没有直接展示源码</p>
<p>配置修改后触发command 存在未使用新的样式的问题, 估计哪里cache出问题了 还是没检测到文件变化, 对于本来命令行就需要高速操作来说</p>
<hr>
<p>官方git里有个share&#x2F;functions (<a href="https://github.com/fish-shell/fish-shell/tree/master/share/functions)%E9%87%8C%E9%9D%A2%E4%BC%BC%E4%B9%8E%E6%9C%89%E7%82%B9%E6%9C%89%E4%B8%8D%E5%B0%91%E6%9C%89%E7%94%A8%E7%9A%84%EF%BC%8C%E4%BD%86%E6%98%AF%E4%B8%8D%E6%98%AF%E6%88%91%E8%87%AA%E5%B7%B1%E5%8F%91%E7%8E%B0%E7%9A%84%E8%AF%9D%EF%BC%8C%E4%BB%96%E6%96%87%E6%A1%A3%E4%B8%8A%E4%BC%BC%E4%B9%8E%E5%AE%8C%E5%85%A8%E6%B2%A1%E8%AF%B4%E4%BD%93%E9%AA%8C%E5%BE%88%E5%B7%AE">https://github.com/fish-shell/fish-shell/tree/master/share/functions)里面似乎有点有不少有用的，但是不是我自己发现的话，他文档上似乎完全没说体验很差</a></p>
<p>所以 感觉fish有些想法是好的(比如从历史里命令 来做建议,所以其实体验下来吵闹大于帮助，跟copilot一样的感觉), 但迁移并不是那么容易</p>
<p>写了个 <code>~/.config/fish/functions/fish_prompt.fish</code>, 但依然有些需要没有</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function show_ipv4 --description &quot;display ip only&quot;</span><br><span class="line">  ifconfig | awk &#x27;/^(\t)|(\s*)inet / &#123; printf &quot;%s &quot;,$2 &#125; &#x27;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">function fish_prompt --description &#x27;Informative prompt&#x27;</span><br><span class="line">    #Save the return status of the previous command</span><br><span class="line">    set -l last_pipestatus $pipestatus</span><br><span class="line">    set -lx __fish_last_status $status # Export for __fish_print_pipestatus.</span><br><span class="line"></span><br><span class="line">    if functions -q fish_is_root_user; and fish_is_root_user</span><br><span class="line">        printf &#x27;%s@%s %s%s%s# &#x27; $USER (prompt_hostname) (set -q fish_color_cwd_root</span><br><span class="line">                                                         and set_color $fish_color_cwd_root</span><br><span class="line">                                                         or set_color $fish_color_cwd) \</span><br><span class="line">            (prompt_pwd) (set_color normal)</span><br><span class="line">    else</span><br><span class="line">        set -l status_color (set_color $fish_color_status)</span><br><span class="line">        set -l statusb_color (set_color --bold $fish_color_status)</span><br><span class="line">        set -l pipestatus_string (__fish_print_pipestatus &quot;[&quot; &quot;]&quot; &quot;|&quot; &quot;$status_color&quot; &quot;$statusb_color&quot; $last_pipestatus)</span><br><span class="line">        printf &quot;\n%s%s %s%s \n&quot; (set_color normal) (date &quot;+%Y/%m/%d %H:%M:%S&quot;) \</span><br><span class="line">          (set_color $fish_color_comment) (show_ipv4)</span><br><span class="line">        printf &#x27;%s%s %s%s %s%s %s%s %s \n&#x27; (set_color brblue) $USER \</span><br><span class="line">          (set_color $fish_color_cwd) (prompt_pwd -D 99) \</span><br><span class="line">          (set_color normal) (__fish_vcs_prompt) \</span><br><span class="line">          $pipestatus_string \</span><br><span class="line">            (set_color normal)</span><br><span class="line">        echo</span><br><span class="line">    end</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<h1 id="benchmark"><a href="#benchmark" class="headerlink" title="benchmark"></a>benchmark</h1><figure class="highlight sh"><figcaption><span>bench.sh</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(<span class="built_in">seq</span> 1 1000);</span><br><span class="line">  <span class="keyword">do</span> bash -c <span class="string">&quot;:&quot;</span> ;</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">time dash bench.sh</span><br><span class="line">time bash bench.sh</span><br><span class="line">time zsh bench.sh</span><br><span class="line">time fish bench.sh</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/shellspec/shellbench">https://github.com/shellspec/shellbench</a></p>
<h1 id="查看-切换"><a href="#查看-切换" class="headerlink" title="查看,切换"></a>查看,切换</h1><p>查看</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/shells</span><br></pre></td></tr></table></figure>

<p>切换</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">chsh -s /bin/bash</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>software</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>dev in VSCode + docker</title>
    <url>/Blog/23-03-09-vscode-docker-dev/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>众所周知，在以前，通过vim+ssh可以容易的远端开发, 并且当我的主系统一直是Ubuntu时，连vmware里，连windows的wsl2里的linux都十分容易</p>
<p>但现实是很多win下的程序员,和不会vim的程序员, 以及大的项目需要用一下vscode</p>
<p>以及手上项目各种各样，不同语言的，同语言不同版本的，不同工具依赖同样三方库的不同版本的(虽然现在不少语言的隔离有了各自的方案，而且五花八门的，这个直接从上层解决了,甚至同时帮助了系统更换)</p>
<h2 id="解决了什么问题"><a href="#解决了什么问题" class="headerlink" title="解决了什么问题"></a>解决了什么问题</h2><ul>
<li>远离了windows的ntfs,使用了Unix file permissions防止777</li>
<li>统一了环境，即使linux也是一堆环境，解决了下游环境安装难的问题，现在只需要安装docker</li>
<li>使用了现代化vscode(可以vim插件支持vim快捷键)</li>
<li>性能不差</li>
</ul>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p><strong>2023年了,我以前还会给点官方文档的链接，现在不论是google还是newbing都可以瞬间得到官方文档链接，所以直接给keywords</strong></p>
<ul>
<li>例如python2&#x2F;pthon3&#x2F;clang++&#x2F;g++&#x2F;nodejs(nvm)&#x2F;…在不同系统下的安装, win,debian,archlinux,macos</li>
<li>不同语言的依赖库的管理工具pip&#x2F;npm&#x2F;…</li>
<li>docker的基础命令，docker与虚拟机的区别</li>
<li>git(用起来似乎外部的git配置会被自动带入到docker里)</li>
</ul>
<p>并且完成docker,vscode,git的安装</p>
<h2 id="vscode"><a href="#vscode" class="headerlink" title="vscode"></a>vscode</h2><p>扩展 -&gt; 安装 <code>Dev Containers</code></p>
<p>使用Demo仓库: <code>git clone https://github.com/MicrosoftDocs/mslearn-python-products</code></p>
<p>在vscode中打开 这个clone的文件夹</p>
<p>按<code>F1</code>,输入<code>Dev containers</code>,选择<code>Dev Containers: Add Development Container Configuration Files.</code></p>
<p>三次输入框分别选择</p>
<table>
<thead>
<tr>
<th>提示</th>
<th>选择</th>
</tr>
</thead>
<tbody><tr>
<td>Select a container configuration template</td>
<td>Python 3</td>
</tr>
<tr>
<td>Python version</td>
<td>3.11</td>
</tr>
<tr>
<td>Select additional features to install</td>
<td>Select “OK”</td>
</tr>
</tbody></table>
<p>你会发现 vscode的这个插件创建了<code>.devcontainer/devcontainer.json</code></p>
<p>再次<code>F1</code>, 输入<code>reopen in container</code>,选择<code>Dev Containers: Reopen in Container</code> 即可</p>
<hr>
<p>在内部就可以开发了, 在container的terminal中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 安装依赖</span><br><span class="line">pip3 install --user -r requirements.txt</span><br></pre></td></tr></table></figure>

<p>运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python app.py</span><br></pre></td></tr></table></figure>

<p>在外部浏览器查看<code>http://127.0.0.1:5000</code></p>
<hr>
<p>这解决了 原来在实机上开发变成了docker里开发</p>
<p>还有问题是，环境安装依然是手动的，如何自定义更多</p>
<p>办法就是 修改<code>.devcontainer/devcontainer.json</code>中的image为你的image (也就是自己去做一个docker image)</p>
<p>比如一些features: <a href="https://containers.dev/features">https://containers.dev/features</a> ,例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;features&quot;:&#123;</span><br><span class="line">    &quot;ghcr.io/devcontainers/features/git:1&quot;: &#123;</span><br><span class="line">      &quot;version&quot;: &quot;latest&quot;,</span><br><span class="line">      &quot;ppa&quot;: &quot;false&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;ghcr.io/devcontainers/features/node:1&quot;: &#123;</span><br><span class="line">      &quot;version&quot;: &quot;18&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&#x2F;&#x2F; 这样在你的python3的container里也可以用node</p>
<p>比如对于container和本地之间的端口映射，就是<code>devcontainer.json</code>中的<code>forwardPorts</code></p>
<p>比如要自动运行依赖安装<code>postCreateCommand</code>中增加命令</p>
<p>其实这些都在自动生成的<code>devcontainer.json</code>中的注释中了</p>
<p>这是 微软的例子: <a href="https://github.com/devcontainers/images/blob/main/src/python/.devcontainer/devcontainer.json">https://github.com/devcontainers/images/blob/main/src/python/.devcontainer/devcontainer.json</a></p>
<p>对于vscode插件的添加,例如<code>jinja</code>,在插件的齿轮按钮中复制它的<code>extensions ID</code>,或者直接点击<code>add to devcontainer.json</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;customizations&quot;: &#123;</span><br><span class="line">		&quot;vscode&quot;: &#123;</span><br><span class="line">			&quot;extensions&quot;: [</span><br><span class="line">				&quot;wholroyd.jinja&quot;</span><br><span class="line">			]</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>基于Dockerfile</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;build&quot;: &#123; &quot;dockerfile&quot;: &quot;Dockerfile&quot; &#125;,</span><br><span class="line">  // 不要&quot;image&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h1><p>总的来说，自定义docker可以自己改image, 也可以不提供image直接基于Dockerfile</p>
<p>如果用基于微软提供的image，可以通过配置features, postCreateCommand来安装额外需要的功能</p>
<p><code>customizations.vscode.extensions</code>可以来指定预安装内部的vscode插件</p>
<p>缺点也是有的，一个是体积，像pnpm, pip3 这些对于多个项目相同的都安在根下不重复安装肯定更小，但实际上就使用来说，有时也会开venv一类的，所以这个缺点其实还好</p>
<p>第二个就是依赖还不稳定时，每次rebuild都需要全部重新下载, 很耗时，所以没稳定之前为了节省时间，还是每次增加依赖时，先不要rebuild, 累积到一定稳定程度或者时间后再rebuild</p>
]]></content>
      <categories>
        <category>software</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>vscode</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>ng zone</title>
    <url>/Blog/23-03-10-ng-zone/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>众所周知, change detect要解决的事情，就是数据变化 触发 视图变化，而最常见的两个问题是如何探测变化，和如何减少不必要的更新</p>
<p>vue用修改getter&#x2F;setter或proxy的方式 来完成依赖收集和变化通知，使用lazy watcher来减少更新</p>
<p>svelte 采用编译时更改代码的行为, 避免检测</p>
<p>react 采用setState函数调用 和 队列控制批量更新</p>
<p>那ng呢</p>
<h2 id="NgZone"><a href="#NgZone" class="headerlink" title="NgZone"></a>NgZone</h2><p>ng: 什么时候会有视图更新</p>
<ul>
<li>用户的操作事件: click&#x2F;change&#x2F;input</li>
<li>去后台请求响应后</li>
<li>Timers:</li>
</ul>
<hr>
<p>zone.js 能够维持运行时上下文, zone有生命周期钩子, 且Monkey-patched了一些方法(<code>setInterval</code>,<code>alert</code>,<code>prompt</code>,<code>addEventListener</code>,<code>removeEventListener</code>)</p>
<p>NgZone, 提供 <code>run(callback)/runOutsideAngular(callback)</code>, 分别用于当三方api中的异步回调想要修改内容时触发检查，和普通的操作中希望避开检查</p>
<p>你还可以设置 <code>ChangeDetectionStrategy.OnPush</code>, 手动触发更新检查</p>
<p>你也可以动态的通过ChangeDetectorRef进行检查的启用和停用</p>
<p>甚至你可以 通过 module 中 <code>&#123; ngZone : &#39;noop&#39;&#125;</code> 去一定层级禁用它，然后自己实现响应式都可以</p>
<p>而react是把数据与视图绑定的叫做state,没绑定的叫做ref</p>
<h1 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h1><p>以渲染10000个可以draggle的svg作为例子, 通过cdr并不能完全避免检测，因为你的mouse move也会触发检测，只是没有变化发生而已</p>
<p>而通过在mouseDown中的runOutsideAngular中给mousemove绑定，就可以实现mouse move 也不触发检测, 再在mouseUp中移除监听，并且通过this.zone.run触发更新检测</p>
<p>而对于多个异步的调用过程，在zone的加持下也容易看到调用的“栈结构”</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.youtube.com/watch?v=3IqtmUscE_U">youtube zone</a></p>
<p><a href="https://github.com/angular/angular/tree/main/packages/zone.js">https://github.com/angular/angular/tree/main/packages/zone.js</a></p>
<p><a href="https://angular.io/guide/zone">https://angular.io/guide/zone</a></p>
<p><a href="https://angular.io/api/core/ChangeDetectionStrategy">https://angular.io/api/core/ChangeDetectionStrategy</a></p>
<p><a href="https://angular.io/api/core/ChangeDetectorRef">https://angular.io/api/core/ChangeDetectorRef</a></p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
        <tag>change detection</tag>
      </tags>
  </entry>
</search>
